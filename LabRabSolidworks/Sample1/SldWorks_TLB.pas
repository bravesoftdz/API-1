unit SldWorks_TLB;

// ************************************************************************ //
// WARNING                                                                    
// -------                                                                    
// The types declared in this file were generated from data read from a       
// Type Library. If this type library is explicitly or indirectly (via        
// another type library referring to this type library) re-imported, or the   
// 'Refresh' command of the Type Library Editor activated while editing the   
// Type Library, the contents of this file will be regenerated and all        
// manual modifications will be lost.                                         
// ************************************************************************ //

// PASTLWTR : 1.2
// File generated on 02.12.2004 16:24:35 from Type Library described below.

// ************************************************************************  //
// Type Lib: C:\Program Files\SolidWorks\sldworks.tlb (1)
// LIBID: {83A33D31-27C5-11CE-BFD4-00400513BB57}
// LCID: 0
// Helpfile: 
// HelpString: SldWorks 2003 Type Library
// DepndLst: 
//   (1) v2.0 stdole, (C:\WINDOWS\System32\STDOLE2.TLB)
// Errors:
//   Hint: TypeInfo 'SldWorks' changed to 'SldWorks_'
//   Hint: Parameter 'type' of ISldWorks.OpenDoc changed to 'type_'
//   Hint: Parameter 'type' of ISldWorks.IOpenDoc changed to 'type_'
//   Hint: Parameter 'type' of ISldWorks.AddFileSaveAsItem changed to 'type_'
//   Hint: Parameter 'type' of ISldWorks.DocumentVisible changed to 'type_'
//   Hint: Parameter 'type' of ISldWorks.RemoveFileSaveAsItem changed to 'type_'
//   Hint: Parameter 'type' of ISldWorks.OpenDocSilent changed to 'type_'
//   Hint: Parameter 'type' of ISldWorks.IOpenDocSilent changed to 'type_'
//   Hint: Parameter 'type' of ISldWorks.OpenDoc2 changed to 'type_'
//   Hint: Parameter 'type' of ISldWorks.IOpenDoc2 changed to 'type_'
//   Hint: Parameter 'type' of ISldWorks.OpenDoc3 changed to 'type_'
//   Hint: Parameter 'type' of ISldWorks.IOpenDoc3 changed to 'type_'
//   Hint: Parameter 'type' of ISldWorks.OpenDoc4 changed to 'type_'
//   Hint: Parameter 'type' of ISldWorks.IOpenDoc4 changed to 'type_'
//   Hint: Parameter 'type' of ISldWorks.IOpenDoc5 changed to 'type_'
//   Hint: Parameter 'type' of ISldWorks.OpenDoc6 changed to 'type_'
//   Hint: Parameter 'end' of IModelDoc.CreateEllipticalArcByCenter changed to 'end_'
//   Hint: Parameter 'end' of IModelDoc.ICreateEllipticalArcByCenter changed to 'end_'
//   Hint: Parameter 'type' of IModelDoc.InsertCosmeticThread changed to 'type_'
//   Hint: Parameter 'type' of IModelDoc.GetCustomInfoType changed to 'type_'
//   Hint: Parameter 'type' of IModelDoc.GetCustomInfoType2 changed to 'type_'
//   Hint: Parameter 'type' of IModelDoc.GetCustomInfoType3 changed to 'type_'
//   Hint: Parameter 'type' of IModelDoc.InsertBendTableNew changed to 'type_'
//   Hint: Parameter 'type' of IBody.GetType changed to 'type_'
//   Hint: Parameter 'end' of ICurve.ConvertArcToBcurve changed to 'end_'
//   Hint: Parameter 'end' of ICurve.IConvertArcToBcurveSize changed to 'end_'
//   Hint: Parameter 'end' of ICurve.ICreateTrimmedCurve changed to 'end_'
//   Hint: Parameter 'end' of ICurve.GetEndParams changed to 'end_'
//   Hint: Parameter 'type' of IBody2.GetType changed to 'type_'
//   Hint: Parameter 'end' of IModelDoc2.CreateEllipticalArcByCenter changed to 'end_'
//   Hint: Parameter 'end' of IModelDoc2.ICreateEllipticalArcByCenter changed to 'end_'
//   Hint: Parameter 'type' of IModelDoc2.InsertCosmeticThread changed to 'type_'
//   Hint: Parameter 'type' of IModelDoc2.GetCustomInfoType changed to 'type_'
//   Hint: Parameter 'type' of IModelDoc2.GetCustomInfoType2 changed to 'type_'
//   Hint: Parameter 'type' of IModelDoc2.GetCustomInfoType3 changed to 'type_'
//   Hint: Parameter 'type' of IModelDoc2.InsertBendTableNew changed to 'type_'
//   Hint: Parameter 'type' of IModelDoc2.InsertSheetMetalBreakCorner changed to 'type_'
//   Hint: Parameter 'type' of IModelDoc2.InsertSheetMetalHem changed to 'type_'
//   Hint: Member 'Label' of 'ICallout' changed to 'Label_'
//   Hint: Parameter 'type' of IAttributeDef.AddParameter changed to 'type_'
//   Hint: Parameter 'type' of IAnnotation.GetType changed to 'type_'
//   Hint: Parameter 'Label' of IDatumTag.SetLabel changed to 'Label_'
//   Hint: Parameter 'type' of IDisplayDimension.AddDisplayEnt changed to 'type_'
//   Hint: Parameter 'type' of IDisplayDimension.IAddDisplayEnt changed to 'type_'
//   Hint: Symbol 'type' renamed to 'type_'
//   Hint: Parameter 'type' of ICustomBendAllowance.type changed to 'type_'
//   Hint: Symbol 'type' renamed to 'type_'
//   Hint: Parameter 'type' of ICustomBendAllowance.type changed to 'type_'
//   Hint: Parameter 'Class' of IModelViewManager.CreateFeatureMgrControl changed to 'Class_'
//   Hint: Parameter 'type' of IModelDocExtension.SelectByID changed to 'type_'
//   Hint: Symbol 'type' renamed to 'type_'
//   Hint: Parameter 'Label' of IDrSection.SetLabel changed to 'Label_'
//   Hint: Parameter 'Label' of IProjectionArrow.SetLabel changed to 'Label_'
//   Hint: Parameter 'type' of IAssemblyDoc.InsertWeld changed to 'type_'
//   Hint: Parameter 'type' of IDragOperator.TransformType changed to 'type_'
//   Hint: Parameter 'type' of IDragOperator.TransformType changed to 'type_'
//   Hint: Parameter 'Label' of IDrawingDoc.CreateSectionViewAt2 changed to 'Label_'
//   Hint: Parameter 'Label' of IDrawingDoc.ICreateSectionViewAt2 changed to 'Label_'
//   Hint: Parameter 'Label' of IDrawingDoc.CreateAuxiliaryViewAt2 changed to 'Label_'
//   Hint: Parameter 'Label' of IDrawingDoc.ICreateAuxiliaryViewAt2 changed to 'Label_'
//   Hint: Parameter 'type' of IModeler.CreateBrepBody changed to 'type_'
//   Hint: Parameter 'type' of IModeler.ICreateBrepBody changed to 'type_'
//   Hint: Parameter 'type' of IModeler.ICreateBrepBody2 changed to 'type_'
//   Hint: Symbol 'type' renamed to 'type_'
//   Hint: Parameter 'type' of ISimpleHoleFeatureData.type changed to 'type_'
//   Hint: Symbol 'type' renamed to 'type_'
//   Hint: Parameter 'type' of ISimpleHoleFeatureData.type changed to 'type_'
//   Hint: Symbol 'type' renamed to 'type_'
//   Hint: Symbol 'type' renamed to 'type_'
//   Hint: Symbol 'type' renamed to 'type_'
//   Hint: Symbol 'type' renamed to 'type_'
//   Hint: Symbol 'type' renamed to 'type_'
//   Hint: Parameter 'type' of IDraftFeatureData.type changed to 'type_'
//   Hint: Symbol 'type' renamed to 'type_'
//   Hint: Parameter 'type' of IDraftFeatureData.type changed to 'type_'
//   Hint: Symbol 'type' renamed to 'type_'
//   Hint: Parameter 'type' of ISimpleFilletFeatureData.type changed to 'type_'
//   Hint: Symbol 'type' renamed to 'type_'
//   Hint: Symbol 'type' renamed to 'type_'
//   Hint: Parameter 'type' of ITablePatternFeatureData.GetReferencePointType changed to 'type_'
//   Hint: Parameter 'type' of ISketchPatternFeatureData.GetReferencePointType changed to 'type_'
//   Hint: Parameter 'type' of IFlatPatternFeatureData.BreakCornerType changed to 'type_'
//   Hint: Parameter 'type' of IFlatPatternFeatureData.BreakCornerType changed to 'type_'
//   Hint: Symbol 'type' renamed to 'type_'
//   Hint: Parameter 'type' of IScaleFeatureData.type changed to 'type_'
//   Hint: Symbol 'type' renamed to 'type_'
//   Hint: Parameter 'type' of IScaleFeatureData.type changed to 'type_'
//   Hint: Parameter 'type' of ISweepFeatureData.GetPathType changed to 'type_'
//   Hint: Symbol 'type' renamed to 'type_'
//   Hint: Parameter 'type' of IHemFeatureData.type changed to 'type_'
//   Hint: Symbol 'type' renamed to 'type_'
//   Hint: Parameter 'type' of IHemFeatureData.type changed to 'type_'
//   Hint: Parameter 'type' of IBreakCornerFeatureData.breakType changed to 'type_'
//   Hint: Parameter 'type' of IBreakCornerFeatureData.breakType changed to 'type_'
//   Hint: Parameter 'type' of IJogFeatureData.JogPositionType changed to 'type_'
//   Hint: Parameter 'type' of IJogFeatureData.JogPositionType changed to 'type_'
//   Hint: Symbol 'type' renamed to 'type_'
//   Hint: Parameter 'type' of ISurfRevolveFeatureData.type changed to 'type_'
//   Hint: Symbol 'type' renamed to 'type_'
//   Hint: Parameter 'type' of ISurfRevolveFeatureData.type changed to 'type_'
//   Hint: Symbol 'type' renamed to 'type_'
//   Hint: Parameter 'type' of ISurfaceExtendFeatureData.type changed to 'type_'
//   Hint: Symbol 'type' renamed to 'type_'
//   Hint: Parameter 'type' of ISurfaceExtendFeatureData.type changed to 'type_'
//   Hint: Parameter 'type' of ISurfaceTrimFeatureData.GetType changed to 'type_'
//   Hint: Symbol 'type' renamed to 'type_'
//   Hint: Parameter 'type' of IRefPlaneFeatureData.type changed to 'type_'
//   Hint: Symbol 'type' renamed to 'type_'
//   Hint: Parameter 'type' of IRefPlaneFeatureData.type changed to 'type_'
//   Hint: Parameter 'type' of IRefPlaneFeatureData.ProjectionType changed to 'type_'
//   Hint: Parameter 'type' of IRefPlaneFeatureData.ProjectionType changed to 'type_'
//   Hint: Parameter 'type' of IReferencePointCurveFeatureData.GetThroughPoints changed to 'type_'
//   Hint: Parameter 'type' of IReferencePointCurveFeatureData.IGetThroughPoints changed to 'type_'
//   Hint: Parameter 'type' of ICompositeCurveFeatureData.GetEntitiesToJoin changed to 'type_'
//   Hint: Parameter 'type' of ICompositeCurveFeatureData.IGetEntitiesToJoin changed to 'type_'
//   Hint: Parameter 'type' of IHelixFeatureData.DefinedBy changed to 'type_'
//   Hint: Parameter 'type' of IHelixFeatureData.DefinedBy changed to 'type_'
//   Hint: Parameter 'Label' of IPropertyManagerPageSelectionbox.SetCalloutLabel changed to 'Label_'
//   Hint: Symbol 'type' renamed to 'type_'
//   Hint: Symbol 'type' renamed to 'type_'
//   Hint: Symbol 'type' renamed to 'type_'
//   Hint: Parameter 'type' of ISimpleHoleFeatureData2.type changed to 'type_'
//   Hint: Symbol 'type' renamed to 'type_'
//   Hint: Parameter 'type' of ISimpleHoleFeatureData2.type changed to 'type_'
//   Hint: Symbol 'type' renamed to 'type_'
//   Hint: Symbol 'type' renamed to 'type_'
//   Hint: Symbol 'type' renamed to 'type_'
//   Hint: Symbol 'type' renamed to 'type_'
//   Hint: Symbol 'type' renamed to 'type_'
//   Hint: Parameter 'type' of IDraftFeatureData2.type changed to 'type_'
//   Hint: Symbol 'type' renamed to 'type_'
//   Hint: Parameter 'type' of IDraftFeatureData2.type changed to 'type_'
//   Hint: Symbol 'type' renamed to 'type_'
//   Hint: Parameter 'type' of ISimpleFilletFeatureData2.type changed to 'type_'
//   Hint: Symbol 'type' renamed to 'type_'
//   Hint: Symbol 'type' renamed to 'type_'
// ************************************************************************ //
{$TYPEDADDRESS OFF} // Unit must be compiled without type-checked pointers. 
{$WARN SYMBOL_PLATFORM OFF}
{$WRITEABLECONST ON}
interface

uses Windows, ActiveX, Classes, Graphics, OleServer, StdVCL, Variants;
  

// *********************************************************************//
// GUIDS declared in the TypeLibrary. Following prefixes are used:        
//   Type Libraries     : LIBID_xxxx                                      
//   CoClasses          : CLASS_xxxx                                      
//   DISPInterfaces     : DIID_xxxx                                       
//   Non-DISP interfaces: IID_xxxx                                        
// *********************************************************************//
const
  // TypeLibrary Major and minor versions
  SldWorksMajorVersion = 11;
  SldWorksMinorVersion = 0;

  LIBID_SldWorks: TGUID = '{83A33D31-27C5-11CE-BFD4-00400513BB57}';

  IID_ISldWorks: TGUID = '{83A33D22-27C5-11CE-BFD4-00400513BB57}';
  IID_IModelDoc: TGUID = '{83A33D46-27C5-11CE-BFD4-00400513BB57}';
  IID_ISelectionMgr: TGUID = '{83A33D59-27C5-11CE-BFD4-00400513BB57}';
  IID_IComponent: TGUID = '{83A33D9A-27C5-11CE-BFD4-00400513BB57}';
  IID_IBody: TGUID = '{83A33D3C-27C5-11CE-BFD4-00400513BB57}';
  IID_IFace: TGUID = '{83A33D3E-27C5-11CE-BFD4-00400513BB57}';
  IID_ISurface: TGUID = '{83A33D40-27C5-11CE-BFD4-00400513BB57}';
  IID_ICurve: TGUID = '{83A33D44-27C5-11CE-BFD4-00400513BB57}';
  IID_IBody2: TGUID = '{3A075BFD-9962-4431-8321-7AF4903C55AD}';
  IID_IFace2: TGUID = '{4A8BA4D8-DA25-4B75-8E2D-4922B74D81ED}';
  IID_IEdge: TGUID = '{83A33D42-27C5-11CE-BFD4-00400513BB57}';
  IID_IEnumCoEdges: TGUID = '{83A33D61-27C5-11CE-BFD4-00400513BB57}';
  IID_ICoEdge: TGUID = '{83A33D57-27C5-11CE-BFD4-00400513BB57}';
  IID_ILoop: TGUID = '{83A33D53-27C5-11CE-BFD4-00400513BB57}';
  IID_IEnumEdges: TGUID = '{83A33D5F-27C5-11CE-BFD4-00400513BB57}';
  IID_ILoop2: TGUID = '{9350CA6E-0ADB-485A-8941-9407DD7B3B8E}';
  IID_IVertex: TGUID = '{83A33D63-27C5-11CE-BFD4-00400513BB57}';
  IID_IFeature: TGUID = '{83A33D38-27C5-11CE-BFD4-00400513BB57}';
  IID_IDimension: TGUID = '{83A33D3A-27C5-11CE-BFD4-00400513BB57}';
  IID_IModelDoc2: TGUID = '{B90793FB-EF3D-4B80-A5C4-99959CDB6CEB}';
  IID_IModelView: TGUID = '{83A33D4C-27C5-11CE-BFD4-00400513BB57}';
  IID_IMathTransform: TGUID = '{F7D97F82-162E-11D4-AEAB-00C04FA0AC51}';
  IID_IMathVector: TGUID = '{F7D97F86-162E-11D4-AEAB-00C04FA0AC51}';
  IID_IMathPoint: TGUID = '{F7D97F84-162E-11D4-AEAB-00C04FA0AC51}';
  IID_ISketch: TGUID = '{83A33D51-27C5-11CE-BFD4-00400513BB57}';
  IID_IEnumSketchPoints: TGUID = '{83A33DCD-27C5-11CE-BFD4-00400513BB57}';
  IID_ISketchPoint: TGUID = '{83A33DBD-27C5-11CE-BFD4-00400513BB57}';
  IID_ICallout: TGUID = '{9CAAA1AA-F2FC-11D5-AF66-00C04F603FAF}';
  IID_IEnumSketchSegments: TGUID = '{83A33DCF-27C5-11CE-BFD4-00400513BB57}';
  IID_ISketchSegment: TGUID = '{83A33DBF-27C5-11CE-BFD4-00400513BB57}';
  IID_IEnumSketchHatches: TGUID = '{54729B8E-4086-11D3-AE9B-00C04F683CBA}';
  IID_ISketchHatch: TGUID = '{C3D00926-4068-11D3-AE9B-00C04F683CBA}';
  IID_IMidSurface2: TGUID = '{5B6E8476-461F-43AF-B784-90D3CD74337C}';
  IID_IFeatMgrView: TGUID = '{83A33D75-27C5-11CE-BFD4-00400513BB57}';
  IID_IConfiguration: TGUID = '{83A33D98-27C5-11CE-BFD4-00400513BB57}';
  IID_IExplodeStep: TGUID = '{7241680B-0BC6-11D4-AEEE-00C04F61025C}';
  IID_IComponent2: TGUID = '{655D6F2A-5441-45D1-8CBA-D35FB26988E4}';
  IID_IEnumBodies2: TGUID = '{97A9BEFA-6814-4FA6-ACB4-8CC84F76FB99}';
  IID_IAttributeDef: TGUID = '{83A33D67-27C5-11CE-BFD4-00400513BB57}';
  IID_IEntity: TGUID = '{83A33D65-27C5-11CE-BFD4-00400513BB57}';
  IID_IAttribute: TGUID = '{83A33D71-27C5-11CE-BFD4-00400513BB57}';
  IID_IParameter: TGUID = '{83A33D69-27C5-11CE-BFD4-00400513BB57}';
  IID_IReferenceCurve: TGUID = '{83A33DA3-27C5-11CE-BFD4-00400513BB57}';
  IID_IColorTable: TGUID = '{83A33DA5-27C5-11CE-BFD4-00400513BB57}';
  IID_IAnnotation: TGUID = '{83A33DA9-27C5-11CE-BFD4-00400513BB57}';
  IID_IDisplayData: TGUID = '{83A33D9C-27C5-11CE-BFD4-00400513BB57}';
  IID_ITextFormat: TGUID = '{83A33DB9-27C5-11CE-BFD4-00400513BB57}';
  IID_IEnumModelViews: TGUID = '{83A33DB1-27C5-11CE-BFD4-00400513BB57}';
  IID_IDetailingDefaults: TGUID = '{83A33DB7-27C5-11CE-BFD4-00400513BB57}';
  IID_ILayerMgr: TGUID = '{75173E30-F19E-11D2-B8E9-00C04F8EF738}';
  IID_ILayer: TGUID = '{04B7287C-F19D-11D2-B8E9-00C04F8EF738}';
  IID_IDesignTable: TGUID = '{CE1EAA88-25AD-11D3-AE91-00C04F683CBA}';
  IID_IRefPlane: TGUID = '{83A33D84-27C5-11CE-BFD4-00400513BB57}';
  IID_IDatumTag: TGUID = '{83A33D90-27C5-11CE-BFD4-00400513BB57}';
  IID_IGtol: TGUID = '{83A33D4A-27C5-11CE-BFD4-00400513BB57}';
  IID_INote: TGUID = '{83A33D55-27C5-11CE-BFD4-00400513BB57}';
  IID_IBalloonStack: TGUID = '{4944F9E6-BF50-11D5-AF56-00C04F603FAF}';
  IID_IPropertyManagerPage: TGUID = '{E981B4FA-7E86-11D4-AEF2-00C04F603FAF}';
  IID_IDisplayDimension: TGUID = '{83A33DA1-27C5-11CE-BFD4-00400513BB57}';
  IID_IUserUnit: TGUID = '{82071121-8B32-4F51-8983-9304756503E7}';
  IID_IWeldSymbol: TGUID = '{83A33D94-27C5-11CE-BFD4-00400513BB57}';
  IID_ISketchText: TGUID = '{83A33DC5-27C5-11CE-BFD4-00400513BB57}';
  IID_IEquationMgr: TGUID = '{02272CE8-FE52-4B94-B120-6D1826FDBE32}';
  IID_IPageSetup: TGUID = '{931374CC-CE0E-11D5-AF59-00C04F603FAF}';
  IID_IFeatureManager: TGUID = '{6B39655E-381B-4BD0-89F5-640D48593F15}';
  IID_ICustomBendAllowance: TGUID = '{442B6462-0350-4F5C-A168-3F753F6CA792}';
  IID_IModelViewManager: TGUID = '{1AA249FF-B758-440A-8B88-26512F385BF3}';
  IID_IModelDocExtension: TGUID = '{99F4D4AF-F268-4EE1-8C55-041F7BECF879}';
  IID_IConfigurationManager: TGUID = '{8DB64337-F36E-47CC-BBBC-B4B979D31505}';
  IID_IEnumDisplayDimensions: TGUID = '{83A33DAB-27C5-11CE-BFD4-00400513BB57}';
  IID_IEnumLoops2: TGUID = '{9A6AD388-3FC9-48DE-BFA5-B8953433AB36}';
  IID_IEnumFaces2: TGUID = '{61ECFF18-AC2C-405E-B9B8-30D85FDB5087}';
  IID_IPartDoc: TGUID = '{83A33D32-27C5-11CE-BFD4-00400513BB57}';
  IID_IEnumBodies: TGUID = '{83A33D96-27C5-11CE-BFD4-00400513BB57}';
  IID_ITessellation: TGUID = '{699C7492-DB56-4CC2-B7A2-9FFD56698434}';
  IID_IEnumLoops: TGUID = '{83A33D5D-27C5-11CE-BFD4-00400513BB57}';
  IID_IEnumFaces: TGUID = '{83A33D5B-27C5-11CE-BFD4-00400513BB57}';
  IID_IView: TGUID = '{83A33D50-27C5-11CE-BFD4-00400513BB57}';
  IID_ISFSymbol: TGUID = '{83A33D8E-27C5-11CE-BFD4-00400513BB57}';
  IID_IDatumTargetSym: TGUID = '{83A33D92-27C5-11CE-BFD4-00400513BB57}';
  IID_ICThread: TGUID = '{83A33D9E-27C5-11CE-BFD4-00400513BB57}';
  IID_IBomTable: TGUID = '{83A33D82-27C5-11CE-BFD4-00400513BB57}';
  IID_ICustomSymbol: TGUID = '{83A33DB5-27C5-11CE-BFD4-00400513BB57}';
  IID_IDrSection: TGUID = '{F183A33F-D4DB-11D3-AEB2-00C04F603FAF}';
  IID_IEnumComponents: TGUID = '{51EFB944-D449-11D3-AEBE-00C04F683CBA}';
  IID_IEnumComponents2: TGUID = '{F6804D12-B73A-49AF-81C6-05BABB58B812}';
  IID_IEnumDrSections: TGUID = '{585A6A15-E95B-11D3-AEBC-00C04F603FAF}';
  IID_IDetailCircle: TGUID = '{4B65A34A-4C44-11D4-AEF6-00C04F683CBA}';
  IID_IProjectionArrow: TGUID = '{A2227E65-A3A7-11D4-AEFF-00C04F603FAF}';
  IID_IMultiJogLeader: TGUID = '{01EB5266-6CA9-4F59-B0B4-A040DD1CCFB6}';
  IID_IDowelSymbol: TGUID = '{55AACD8B-97C5-11D5-AF4B-00C04F603FAF}';
  IID_IBlockInstance: TGUID = '{992A14B6-15CF-11D6-AF6E-00C04F603FAF}';
  IID_IBlockDefinition: TGUID = '{8CD8314A-1677-11D6-AF6E-00C04F603FAF}';
  IID_IBreakLine: TGUID = '{54E1FFBC-D989-437F-A701-62BDA39FD195}';
  IID_IFaceHatch: TGUID = '{E0A98A37-8780-4E5F-A28A-C7C6AF25231C}';
  IID_ICenterMark: TGUID = '{6BEB0423-EDA4-11D5-AF64-00C04F603FAF}';
  IID_IMidSurface: TGUID = '{83A33D88-27C5-11CE-BFD4-00400513BB57}';
  IID_IFrame: TGUID = '{83A33D48-27C5-11CE-BFD4-00400513BB57}';
  IID_IStatusBarPane: TGUID = '{931F2702-3257-4372-BBCC-CBD4A7FBBC41}';
  IID_IAssemblyDoc: TGUID = '{83A33D35-27C5-11CE-BFD4-00400513BB57}';
  IID_IMember: TGUID = '{83A33D4E-27C5-11CE-BFD4-00400513BB57}';
  IID_IDragOperator: TGUID = '{E0AACE0F-3A47-437E-99B4-9330CD6186BA}';
  IID_IDrawingDoc: TGUID = '{83A33D33-27C5-11CE-BFD4-00400513BB57}';
  IID_ISheet: TGUID = '{83A33D80-27C5-11CE-BFD4-00400513BB57}';
  IID_IModeler: TGUID = '{83A33D73-27C5-11CE-BFD4-00400513BB57}';
  IID_IEnvironment: TGUID = '{83A33D78-27C5-11CE-BFD4-00400513BB57}';
  IID_IEnumDocuments: TGUID = '{83A33DB3-27C5-11CE-BFD4-00400513BB57}';
  IID_IMathUtility: TGUID = '{F7D97F80-162E-11D4-AEAB-00C04FA0AC51}';
  IID_IEnumDocuments2: TGUID = '{76D82D71-339A-4D1C-91A1-F6AC0CF9B625}';
  IID_IPropertyManagerPage2: TGUID = '{B92E624A-0DC3-11D5-AF1E-00C04F603FAF}';
  IID_IPropertyManagerPageGroup: TGUID = '{2E23D2EE-0F57-11D5-AF1F-00C04F603FAF}';
  IID_IPropertyManagerPageControl: TGUID = '{CED9CAF4-16FA-11D5-AF24-00C04F603FAF}';
  IID_IRefAxis: TGUID = '{83A33D86-27C5-11CE-BFD4-00400513BB57}';
  IID_IMate: TGUID = '{83A33D8A-27C5-11CE-BFD4-00400513BB57}';
  IID_IMateEntity: TGUID = '{83A33D8C-27C5-11CE-BFD4-00400513BB57}';
  IID_ISWPropertySheet: TGUID = '{83A33DA7-27C5-11CE-BFD4-00400513BB57}';
  IID_IRibFeatureData: TGUID = '{83A33DAD-27C5-11CE-BFD4-00400513BB57}';
  IID_IDomeFeatureData: TGUID = '{83A33DAF-27C5-11CE-BFD4-00400513BB57}';
  IID_ISketchLine: TGUID = '{83A33DC1-27C5-11CE-BFD4-00400513BB57}';
  IID_ISketchArc: TGUID = '{83A33DC3-27C5-11CE-BFD4-00400513BB57}';
  IID_ISketchEllipse: TGUID = '{83A33DC7-27C5-11CE-BFD4-00400513BB57}';
  IID_ISketchParabola: TGUID = '{83A33DC9-27C5-11CE-BFD4-00400513BB57}';
  IID_ISketchSpline: TGUID = '{83A33DCB-27C5-11CE-BFD4-00400513BB57}';
  IID_ILightDialog: TGUID = '{83A33DF1-27C5-11CE-BFD4-00400513BB57}';
  IID_IEnumCurves: TGUID = '{5B57E3BC-7139-11D3-AEA2-00C04F683CBA}';
  IID_ISimpleHoleFeatureData: TGUID = '{1D06FD54-96DD-11D3-AEAA-00C04F683CBA}';
  IID_IWizardHoleFeatureData: TGUID = '{887AB457-A739-11D3-B97F-001083029A97}';
  IID_IChamferFeatureData: TGUID = '{7271D7C7-ACC9-11D3-B97F-001083029A97}';
  IID_IDraftFeatureData: TGUID = '{BC633CE1-B367-11D3-B981-001083029A97}';
  IID_ISimpleFilletFeatureData: TGUID = '{CC929F0B-B404-11D3-B981-001083029A97}';
  IID_IVariableFilletFeatureData: TGUID = '{CC929F0D-B404-11D3-B981-001083029A97}';
  IID_IExtrudeFeatureData: TGUID = '{908A7175-B72C-11D3-B981-001083029A97}';
  IID_IRevolveFeatureData: TGUID = '{B7FFF613-B735-11D3-B981-001083029A97}';
  IID_IMirrorPatternFeatureData: TGUID = '{414F4F1E-30EC-11D4-AEEB-00C04F683CBA}';
  IID_ICircularPatternFeatureData: TGUID = '{DBBF39DE-7AB5-11D4-AEB6-00C04FA0AC51}';
  IID_ILinearPatternFeatureData: TGUID = '{F86D1E94-7DE8-11D4-AEB7-00C04FA0AC51}';
  IID_ITablePatternFeatureData: TGUID = '{E5D1AF7C-7F5D-11D4-AEB7-00C04FA0AC51}';
  IID_ISketchPatternFeatureData: TGUID = '{AE998464-8050-11D4-AEB7-00C04FA0AC51}';
  IID_IMirrorSolidFeatureData: TGUID = '{E9172718-836B-11D4-AEB7-00C04FA0AC51}';
  IID_ISheetMetalFeatureData: TGUID = '{2F6C1E88-F2D6-11D4-AED5-00C04FA0AC51}';
  IID_IOneBendFeatureData: TGUID = '{0C02AD40-F6E6-11D4-AED6-00C04FA0AC51}';
  IID_IBendsFeatureData: TGUID = '{F3BDB64E-F7C6-11D4-AED6-00C04FA0AC51}';
  IID_IBaseFlangeFeatureData: TGUID = '{C61E9DD6-0813-11D5-AEDD-00C04FA0AC51}';
  IID_IEdgeFlangeFeatureData: TGUID = '{B58E432A-09C8-11D5-AEDD-00C04FA0AC51}';
  IID_IMiterFlangeFeatureData: TGUID = '{E6194F72-0CEC-11D5-AEDD-00C04FA0AC51}';
  IID_ISketchedBendFeatureData: TGUID = '{A4D90A70-0DA5-11D5-AEDD-00C04FA0AC51}';
  IID_IClosedCornerFeatureData: TGUID = '{2134CBFC-0DDA-11D5-AEDD-00C04FA0AC51}';
  IID_IFoldsFeatureData: TGUID = '{32700A62-0E5C-11D5-AEDD-00C04FA0AC51}';
  IID_IFlatPatternFeatureData: TGUID = '{00644208-0E6C-11D5-AEDD-00C04FA0AC51}';
  IID_ILocalLinearPatternFeatureData: TGUID = '{9890C04C-1196-11D5-AEDE-00C04FA0AC51}';
  IID_ILocalCircularPatternFeatureData: TGUID = '{F2E81434-13FB-11D5-AEDE-00C04FA0AC51}';
  IID_IDerivedPatternFeatureData: TGUID = '{98EADB32-141A-11D5-AEDE-00C04FA0AC51}';
  IID_IPropertyManagerPageLabel: TGUID = '{EBBD7B58-170D-11D5-AF24-00C04F603FAF}';
  IID_IPropertyManagerPageCheckbox: TGUID = '{EBBD7B5A-170D-11D5-AF24-00C04F603FAF}';
  IID_IPropertyManagerPageButton: TGUID = '{3A66C294-17CE-11D5-AF24-00C04F603FAF}';
  IID_IPropertyManagerPageOption: TGUID = '{3A66C296-17CE-11D5-AF24-00C04F603FAF}';
  IID_IPropertyManagerPageTextbox: TGUID = '{EB18A468-1800-11D5-AF24-00C04F603FAF}';
  IID_IPropertyManagerPageCombobox: TGUID = '{0BD2BA62-18C5-11D5-AF24-00C04F603FAF}';
  IID_IPropertyManagerPageActiveX: TGUID = '{FF956369-AE71-4643-AFA8-83D7548F758A}';
  IID_IProjectionCurveFeatureData: TGUID = '{459F4B5C-7F8C-4A7E-8AA0-FCFB6ED2D286}';
  IID_IScaleFeatureData: TGUID = '{E7631115-F299-4852-9D37-FC9508A00BC1}';
  IID_IShellFeatureData: TGUID = '{58252A5A-82AF-49EF-A2FE-E8C995132F84}';
  IID_ISweepFeatureData: TGUID = '{07799F9D-7E4F-40DE-87AE-AEBAABA6A3BC}';
  IID_ILoftFeatureData: TGUID = '{EE8D87FE-5202-45E9-8E5C-91084C134168}';
  IID_IThickenFeatureData: TGUID = '{85F4DD78-9430-4937-8504-55D24F2CEE41}';
  IID_ISurfaceCutFeatureData: TGUID = '{DFB6C63B-287C-4141-A610-08D94CECE976}';
  IID_IReplaceFaceFeatureData: TGUID = '{D7792E79-5983-45C7-AE7D-966FCB6604D8}';
  IID_IMacroFeatureData: TGUID = '{739AC7CE-9017-11D5-AF07-0002B34143E5}';
  IID_ICurveDrivenPatternFeatureData: TGUID = '{496A6D86-2180-46D8-A973-7885554EFAF3}';
  IID_IRipFeatureData: TGUID = '{D3352F26-3333-455E-910B-E0F3A44E76FD}';
  IID_IHemFeatureData: TGUID = '{D1E54427-2421-413F-9EB3-F568A6BF826D}';
  IID_IBreakCornerFeatureData: TGUID = '{DF91CD7F-F4D5-471A-831B-E201B2C02090}';
  IID_IJogFeatureData: TGUID = '{C75CA537-4ABA-44F3-AC3B-73D5DCD0C834}';
  IID_ISurfExtrudeFeatureData: TGUID = '{157CE6B0-16BC-49A3-B207-95159B02306C}';
  IID_ISurfRevolveFeatureData: TGUID = '{38D7F138-4403-4EB0-8E9E-7DAF6BA385CF}';
  IID_ISurfaceOffsetFeatureData: TGUID = '{214152E2-2F73-42E3-AB88-690C2ED9910D}';
  IID_ISurfaceKnitFeatureData: TGUID = '{6CE5BD99-0769-4DAF-8206-07513B6C0005}';
  IID_ISurfaceExtendFeatureData: TGUID = '{72249E3D-B571-416D-9034-DE3BE1D9937C}';
  IID_ISurfacePlanarFeatureData: TGUID = '{6A0860DC-BC79-4DFD-8A06-252EFCCFCD37}';
  IID_ISurfaceTrimFeatureData: TGUID = '{C9943DEE-40DE-4EB9-A3C5-7D5CABEE3E85}';
  IID_ISurfaceRadiateFeatureData: TGUID = '{82F0509D-402B-4D79-AB6B-AA2888FC1E81}';
  IID_IRefPlaneFeatureData: TGUID = '{02B5CBF8-5104-41F7-901D-A4DCBA547029}';
  IID_ILoftedBendsFeatureData: TGUID = '{619DEE3D-3398-48FE-8818-EDD4169FDDB8}';
  IID_IReferencePointCurveFeatureData: TGUID = '{8066432C-1376-4D6B-AA64-46B2D3CC5D60}';
  IID_IFreePointCurveFeatureData: TGUID = '{C11527FA-E833-4453-80DD-229F6BACC5D9}';
  IID_ICompositeCurveFeatureData: TGUID = '{8D5CFAB8-A9F9-4B7F-9275-27E2062C324E}';
  IID_IHelixFeatureData: TGUID = '{70E634EE-890A-421F-ABCE-5208A563423C}';
  IID_IImportedCurveFeatureData: TGUID = '{6DC71EC8-09F6-4D6F-AC3F-19D8EA258E0B}';
  IID_ISketchRegion: TGUID = '{EB53B511-E23D-4B6A-B48D-21828AF5F151}';
  IID_ISketchContour: TGUID = '{EB53B513-E23D-4B6A-B48D-21828AF5F151}';
  DIID_DSldWorksEvents: TGUID = '{83A33D22-37C5-11CE-BFD4-00400513BB57}';
  CLASS_SldWorks_: TGUID = '{0788198D-F83C-43F5-A41B-75847673F6D3}';
  DIID_DPartDocEvents: TGUID = '{83A33D32-37C5-11CE-BFD4-00400513BB57}';
  CLASS_PartDoc: TGUID = '{83A33D30-27C5-11CE-BFD4-00400513BB57}';
  DIID_DDrawingDocEvents: TGUID = '{83A33D34-37C5-11CE-BFD4-00400513BB57}';
  CLASS_DrawingDoc: TGUID = '{83A33D34-27C5-11CE-BFD4-00400513BB57}';
  DIID_DAssemblyDocEvents: TGUID = '{83A33D35-37C5-11CE-BFD4-00400513BB57}';
  CLASS_AssemblyDoc: TGUID = '{83A33D36-27C5-11CE-BFD4-00400513BB57}';
  CLASS_feature: TGUID = '{83A33D37-27C5-11CE-BFD4-00400513BB57}';
  CLASS_Dimension: TGUID = '{83A33D39-27C5-11CE-BFD4-00400513BB57}';
  CLASS_Body: TGUID = '{83A33D3B-27C5-11CE-BFD4-00400513BB57}';
  CLASS_face: TGUID = '{83A33D3D-27C5-11CE-BFD4-00400513BB57}';
  CLASS_surface: TGUID = '{83A33D3F-27C5-11CE-BFD4-00400513BB57}';
  CLASS_Edge: TGUID = '{83A33D41-27C5-11CE-BFD4-00400513BB57}';
  CLASS_Curve: TGUID = '{83A33D43-27C5-11CE-BFD4-00400513BB57}';
  CLASS_modelDoc: TGUID = '{83A33D45-27C5-11CE-BFD4-00400513BB57}';
  CLASS_Frame: TGUID = '{83A33D47-27C5-11CE-BFD4-00400513BB57}';
  CLASS_Gtol: TGUID = '{83A33D49-27C5-11CE-BFD4-00400513BB57}';
  DIID_DModelViewEvents: TGUID = '{83A33D4C-37C5-11CE-BFD4-00400513BB57}';
  CLASS_ModelView: TGUID = '{83A33D4B-27C5-11CE-BFD4-00400513BB57}';
  CLASS_Member: TGUID = '{83A33D4D-27C5-11CE-BFD4-00400513BB57}';
  CLASS_view: TGUID = '{83A33D4F-27C5-11CE-BFD4-00400513BB57}';
  CLASS_sketch: TGUID = '{83A33D52-27C5-11CE-BFD4-00400513BB57}';
  CLASS_loop: TGUID = '{83A33D54-27C5-11CE-BFD4-00400513BB57}';
  CLASS_note: TGUID = '{83A33D56-27C5-11CE-BFD4-00400513BB57}';
  CLASS_CoEdge: TGUID = '{83A33D58-27C5-11CE-BFD4-00400513BB57}';
  CLASS_Vertex: TGUID = '{83A33D64-27C5-11CE-BFD4-00400513BB57}';
  CLASS_SelectionMgr: TGUID = '{83A33D5A-27C5-11CE-BFD4-00400513BB57}';
  CLASS_EnumFaces: TGUID = '{83A33D5C-27C5-11CE-BFD4-00400513BB57}';
  CLASS_EnumFaces2: TGUID = '{5F269D24-E7A6-45B4-8850-15983215B0FE}';
  CLASS_EnumLoops: TGUID = '{83A33D5E-27C5-11CE-BFD4-00400513BB57}';
  CLASS_EnumLoops2: TGUID = '{BAA5C9A5-CCE2-44D7-979A-88C1720F82AA}';
  CLASS_EnumEdges: TGUID = '{83A33D60-27C5-11CE-BFD4-00400513BB57}';
  CLASS_EnumCoEdges: TGUID = '{83A33D62-27C5-11CE-BFD4-00400513BB57}';
  CLASS_EnumBodies: TGUID = '{83A33D97-27C5-11CE-BFD4-00400513BB57}';
  CLASS_EnumBodies2: TGUID = '{F5519211-91AC-4234-8C2F-42725BC6B3FE}';
  CLASS_entity: TGUID = '{83A33D66-27C5-11CE-BFD4-00400513BB57}';
  CLASS_attributeDef: TGUID = '{83A33D68-27C5-11CE-BFD4-00400513BB57}';
  CLASS_Parameter: TGUID = '{83A33D70-27C5-11CE-BFD4-00400513BB57}';
  CLASS_Attribute: TGUID = '{83A33D72-27C5-11CE-BFD4-00400513BB57}';
  CLASS_Modeler: TGUID = '{83A33D74-27C5-11CE-BFD4-00400513BB57}';
  DIID_DFeatMgrViewEvents: TGUID = '{83A33D76-27C5-11CE-BFD4-00400513BB57}';
  CLASS_FeatMgrView: TGUID = '{83A33D77-27C5-11CE-BFD4-00400513BB57}';
  CLASS_Environment: TGUID = '{83A33D79-27C5-11CE-BFD4-00400513BB57}';
  CLASS_Sheet: TGUID = '{83A33D81-27C5-11CE-BFD4-00400513BB57}';
  CLASS_BomTable: TGUID = '{83A33D83-27C5-11CE-BFD4-00400513BB57}';
  CLASS_refPlane: TGUID = '{83A33D85-27C5-11CE-BFD4-00400513BB57}';
  CLASS_refAxis: TGUID = '{83A33D87-27C5-11CE-BFD4-00400513BB57}';
  CLASS_MidSurface: TGUID = '{83A33D89-27C5-11CE-BFD4-00400513BB57}';
  CLASS_Mate: TGUID = '{83A33D8B-27C5-11CE-BFD4-00400513BB57}';
  CLASS_MateEntity: TGUID = '{83A33D8D-27C5-11CE-BFD4-00400513BB57}';
  CLASS_SFSymbol: TGUID = '{83A33D8F-27C5-11CE-BFD4-00400513BB57}';
  CLASS_DatumTag: TGUID = '{83A33D91-27C5-11CE-BFD4-00400513BB57}';
  CLASS_DatumTargetSym: TGUID = '{83A33D93-27C5-11CE-BFD4-00400513BB57}';
  CLASS_WeldSymbol: TGUID = '{83A33D95-27C5-11CE-BFD4-00400513BB57}';
  CLASS_configuration: TGUID = '{83A33D99-27C5-11CE-BFD4-00400513BB57}';
  CLASS_component: TGUID = '{83A33D9B-27C5-11CE-BFD4-00400513BB57}';
  CLASS_DisplayData: TGUID = '{83A33D9D-27C5-11CE-BFD4-00400513BB57}';
  CLASS_CThread: TGUID = '{83A33D9F-27C5-11CE-BFD4-00400513BB57}';
  CLASS_DisplayDimension: TGUID = '{83A33DA2-27C5-11CE-BFD4-00400513BB57}';
  CLASS_ReferenceCurve: TGUID = '{83A33DA4-27C5-11CE-BFD4-00400513BB57}';
  CLASS_ColorTable: TGUID = '{83A33DA6-27C5-11CE-BFD4-00400513BB57}';
  DIID_DSWPropertySheetEvents: TGUID = '{E05FF9E0-FC82-11D2-9395-00C04F79BFFE}';
  CLASS_SWPropertySheet: TGUID = '{83A33DA8-27C5-11CE-BFD4-00400513BB57}';
  CLASS_Annotation: TGUID = '{83A33DAA-27C5-11CE-BFD4-00400513BB57}';
  CLASS_EnumDisplayDimensions: TGUID = '{83A33DAC-27C5-11CE-BFD4-00400513BB57}';
  CLASS_RibFeatureData: TGUID = '{83A33DAE-27C5-11CE-BFD4-00400513BB57}';
  CLASS_DomeFeatureData: TGUID = '{83A33DB0-27C5-11CE-BFD4-00400513BB57}';
  CLASS_EnumModelViews: TGUID = '{83A33DB2-27C5-11CE-BFD4-00400513BB57}';
  CLASS_EnumDocuments: TGUID = '{83A33DB4-27C5-11CE-BFD4-00400513BB57}';
  CLASS_EnumDocuments2: TGUID = '{FCE9FE1B-A6B2-4AB9-817D-D49F14E7F783}';
  CLASS_CustomSymbol: TGUID = '{83A33DB6-27C5-11CE-BFD4-00400513BB57}';
  CLASS_DetailingDefaults: TGUID = '{83A33DB8-27C5-11CE-BFD4-00400513BB57}';
  CLASS_textFormat: TGUID = '{83A33DBA-27C5-11CE-BFD4-00400513BB57}';
  CLASS_SketchPoint: TGUID = '{83A33DBE-27C5-11CE-BFD4-00400513BB57}';
  CLASS_SketchSegment: TGUID = '{83A33DC0-27C5-11CE-BFD4-00400513BB57}';
  CLASS_SketchLine: TGUID = '{83A33DC2-27C5-11CE-BFD4-00400513BB57}';
  CLASS_SketchArc: TGUID = '{83A33DC4-27C5-11CE-BFD4-00400513BB57}';
  CLASS_SketchText: TGUID = '{83A33DC6-27C5-11CE-BFD4-00400513BB57}';
  CLASS_SketchEllipse: TGUID = '{83A33DC8-27C5-11CE-BFD4-00400513BB57}';
  CLASS_SketchParabola: TGUID = '{83A33DCA-27C5-11CE-BFD4-00400513BB57}';
  CLASS_SketchSpline: TGUID = '{83A33DCC-27C5-11CE-BFD4-00400513BB57}';
  CLASS_EnumSketchPoints: TGUID = '{83A33DCE-27C5-11CE-BFD4-00400513BB57}';
  CLASS_EnumSketchSegments: TGUID = '{83A33DF0-27C5-11CE-BFD4-00400513BB57}';
  CLASS_LightDialog: TGUID = '{83A33DF2-27C5-11CE-BFD4-00400513BB57}';
  CLASS_Layer: TGUID = '{04B7287D-F19D-11D2-B8E9-00C04F8EF738}';
  CLASS_LayerMgr: TGUID = '{75173E31-F19E-11D2-B8E9-00C04F8EF738}';
  CLASS_DesignTable: TGUID = '{CE1EAA89-25AD-11D3-AE91-00C04F683CBA}';
  CLASS_SketchHatch: TGUID = '{C3D00927-4068-11D3-AE9B-00C04F683CBA}';
  CLASS_EnumSketchHatches: TGUID = '{54729B8F-4086-11D3-AE9B-00C04F683CBA}';
  CLASS_EnumCurves: TGUID = '{5B57E3BD-7139-11D3-AEA2-00C04F683CBA}';
  CLASS_SimpleHoleFeatureData: TGUID = '{1D06FD55-96DD-11D3-AEAA-00C04F683CBA}';
  CLASS_WizardHoleFeatureData: TGUID = '{887AB458-A739-11D3-B97F-001083029A97}';
  CLASS_ChamferFeatureData: TGUID = '{7271D7C8-ACC9-11D3-B97F-001083029A97}';
  CLASS_DraftFeatureData: TGUID = '{BC633CE2-B367-11D3-B981-001083029A97}';
  CLASS_SimpleFilletFeatureData: TGUID = '{CC929F0C-B404-11D3-B981-001083029A97}';
  CLASS_VariableFilletFeatureData: TGUID = '{CC929F0E-B404-11D3-B981-001083029A97}';
  CLASS_ExtrudeFeatureData: TGUID = '{908A7176-B72C-11D3-B981-001083029A97}';
  CLASS_RevolveFeatureData: TGUID = '{B7FFF614-B735-11D3-B981-001083029A97}';
  DIID_ISdmDoc: TGUID = '{AC048CEA-AE93-11D3-AEA7-00C04F60F02A}';
  CLASS_SdmDoc: TGUID = '{AC048CE8-AE93-11D3-AEA7-00C04F60F02A}';
  CLASS_DrSection: TGUID = '{F183A340-D4DB-11D3-AEB2-00C04F603FAF}';
  CLASS_EnumComponents: TGUID = '{51EFB945-D449-11D3-AEBE-00C04F683CBA}';
  CLASS_EnumComponents2: TGUID = '{FD27DA22-03E0-4DB9-82DA-FCF94B11A2FE}';
  CLASS_EnumDrSections: TGUID = '{585A6A16-E95B-11D3-AEBC-00C04F603FAF}';
  CLASS_ExplodeStep: TGUID = '{7241680C-0BC6-11D4-AEEE-00C04F61025C}';
  CLASS_MathUtility: TGUID = '{F7D97F81-162E-11D4-AEAB-00C04FA0AC51}';
  CLASS_MathTransform: TGUID = '{F7D97F83-162E-11D4-AEAB-00C04FA0AC51}';
  CLASS_MathPoint: TGUID = '{F7D97F85-162E-11D4-AEAB-00C04FA0AC51}';
  CLASS_MathVector: TGUID = '{F7D97F87-162E-11D4-AEAB-00C04FA0AC51}';
  CLASS_MirrorPatternFeatureData: TGUID = '{414F4F1F-30EC-11D4-AEEB-00C04F683CBA}';
  CLASS_DetailCircle: TGUID = '{4B65A34B-4C44-11D4-AEF6-00C04F683CBA}';
  CLASS_CircularPatternFeatureData: TGUID = '{DBBF39DF-7AB5-11D4-AEB6-00C04FA0AC51}';
  CLASS_LinearPatternFeatureData: TGUID = '{F86D1E95-7DE8-11D4-AEB7-00C04FA0AC51}';
  CLASS_TablePatternFeatureData: TGUID = '{E5D1AF7D-7F5D-11D4-AEB7-00C04FA0AC51}';
  CLASS_SketchPatternFeatureData: TGUID = '{AE998465-8050-11D4-AEB7-00C04FA0AC51}';
  CLASS_MirrorSolidFeatureData: TGUID = '{E9172719-836B-11D4-AEB7-00C04FA0AC51}';
  CLASS_PropertyManagerPage: TGUID = '{E981B4FB-7E86-11D4-AEF2-00C04F603FAF}';
  CLASS_ProjectionArrow: TGUID = '{A2227E66-A3A7-11D4-AEFF-00C04F603FAF}';
  CLASS_Tessellation: TGUID = '{699C7493-DB56-4CC2-B7A2-9FFD56698434}';
  CLASS_SheetMetalFeatureData: TGUID = '{2F6C1E89-F2D6-11D4-AED5-00C04FA0AC51}';
  CLASS_OneBendFeatureData: TGUID = '{0C02AD41-F6E6-11D4-AED6-00C04FA0AC51}';
  CLASS_BendsFeatureData: TGUID = '{F3BDB64F-F7C6-11D4-AED6-00C04FA0AC51}';
  CLASS_UserUnit: TGUID = '{3CC0BC03-541F-40C3-866B-8BAC502DB4EB}';
  CLASS_BaseFlangeFeatureData: TGUID = '{C61E9DD7-0813-11D5-AEDD-00C04FA0AC51}';
  CLASS_EdgeFlangeFeatureData: TGUID = '{B58E432B-09C8-11D5-AEDD-00C04FA0AC51}';
  CLASS_MiterFlangeFeatureData: TGUID = '{E6194F73-0CEC-11D5-AEDD-00C04FA0AC52}';
  CLASS_SketchedBendFeatureData: TGUID = '{A4D90A71-0DA5-11D5-AEDD-00C04FA0AC51}';
  CLASS_ClosedCornerFeatureData: TGUID = '{2134CBFD-0DDA-11D5-AEDD-00C04FA0AC51}';
  CLASS_FoldsFeatureData: TGUID = '{32700A63-0E5C-11D5-AEDD-00C04FA0AC51}';
  CLASS_FlatPatternFeatureData: TGUID = '{00644209-0E6C-11D5-AEDD-00C04FA0AC51}';
  CLASS_LocalLinearPatternFeatureData: TGUID = '{9890C04D-1196-11D5-AEDE-00C04FA0AC51}';
  CLASS_LocalCircularPatternFeatureData: TGUID = '{F2E81435-13FB-11D5-AEDE-00C04FA0AC51}';
  CLASS_DerivedPatternFeatureData: TGUID = '{98EADB33-141A-11D5-AEDE-00C04FA0AC51}';
  CLASS_body2: TGUID = '{CB928817-2A89-446E-A1BB-A6EEE181359E}';
  CLASS_face2: TGUID = '{545470A9-EF3C-4FC0-AA89-9676EE0BF318}';
  CLASS_ModelDoc2: TGUID = '{27526253-6119-4B38-A1F9-2DC877E72334}';
  CLASS_Loop2: TGUID = '{071B4D3E-0CD5-4C4B-B6E7-674363A18F4B}';
  CLASS_MidSurface2: TGUID = '{285FD964-4BA2-40D3-89E5-0D7B4236597F}';
  CLASS_Component2: TGUID = '{AE61A94D-E228-4AC0-8E2A-F000244E3C8B}';
  CLASS_PropertyManagerPage2: TGUID = '{B92E624B-0DC3-11D5-AF1E-00C04F603FAF}';
  CLASS_PropertyManagerPageGroup: TGUID = '{2E23D2EF-0F57-11D5-AF1F-00C04F603FAF}';
  CLASS_PropertyManagerPageControl: TGUID = '{CED9CAF5-16FA-11D5-AF24-00C04F603FAF}';
  CLASS_PropertyManagerPageLabel: TGUID = '{EBBD7B59-170D-11D5-AF24-00C04F603FAF}';
  CLASS_PropertyManagerPageCheckbox: TGUID = '{EBBD7B5B-170D-11D5-AF24-00C04F603FAF}';
  CLASS_PropertyManagerPageButton: TGUID = '{3A66C295-17CE-11D5-AF24-00C04F603FAF}';
  CLASS_PropertyManagerPageOption: TGUID = '{3A66C297-17CE-11D5-AF24-00C04F603FAF}';
  CLASS_PropertyManagerPageTextbox: TGUID = '{EB18A469-1800-11D5-AF24-00C04F603FAF}';
  IID_IPropertyManagerPageListbox: TGUID = '{CDB49982-1A18-11D5-AF24-00C04F603FAF}';
  CLASS_PropertyManagerPageListbox: TGUID = '{CDB49983-1A18-11D5-AF24-00C04F603FAF}';
  CLASS_PropertyManagerPageCombobox: TGUID = '{0BD2BA63-18C5-11D5-AF24-00C04F603FAF}';
  IID_IPropertyManagerPageNumberbox: TGUID = '{96567554-1EDA-11D5-AF25-00C04F603FAF}';
  CLASS_PropertyManagerPageNumberbox: TGUID = '{96567555-1EDA-11D5-AF25-00C04F603FAF}';
  IID_IPropertyManagerPageSelectionbox: TGUID = '{96567556-1EDA-11D5-AF25-00C04F603FAF}';
  CLASS_PropertyManagerPageSelectionbox: TGUID = '{96567557-1EDA-11D5-AF25-00C04F603FAF}';
  CLASS_MultiJogLeader: TGUID = '{06DF8FE1-1344-4E69-9519-535D0160D295}';
  CLASS_ProjectionCurveFeatureData: TGUID = '{459F4B5D-7F8C-4A7E-8AA0-FCFB6ED2D286}';
  CLASS_ScaleFeatureData: TGUID = '{D335D62B-ACBA-4B09-9631-8B53D57F86C9}';
  CLASS_ShellFeatureData: TGUID = '{D4C512B3-A169-40AC-83C6-A8F0222A8381}';
  CLASS_SweepFeatureData: TGUID = '{D45B744B-DFDC-405C-AE88-6991FBBC44D2}';
  CLASS_LoftFeatureData: TGUID = '{6FDA5236-AC50-480E-AA3F-A5681D373ABD}';
  CLASS_ThickenFeatureData: TGUID = '{97C75B25-7466-44CA-9E0A-31CAA7F928F0}';
  CLASS_SurfCutFeatureData: TGUID = '{0E16C025-301F-414B-92D3-53833F9998D6}';
  CLASS_ReplaceFaceFeatureData: TGUID = '{489F09C4-02DB-4E6B-A787-094BAF521EE3}';
  IID_IRibFeatureData2: TGUID = '{EFE4958E-B373-4849-A93C-01BFDEBC830D}';
  CLASS_RibFeatureData2: TGUID = '{DDDBAED3-DB70-4037-AC91-45265CB3E084}';
  IID_IDomeFeatureData2: TGUID = '{6E8FAB36-9E1C-4A84-A160-1E68B703431C}';
  CLASS_DomeFeatureData2: TGUID = '{B27AF2DF-2FD2-4F54-9130-1A79C1305C18}';
  IID_ISimpleHoleFeatureData2: TGUID = '{D98E9F26-73DB-4BD2-A967-31BF7EF35B5B}';
  CLASS_SimpleHoleFeatureData2: TGUID = '{DC8795E8-8FE0-4837-8328-70165844DE95}';
  IID_IWizardHoleFeatureData2: TGUID = '{7A472C09-437C-4C4B-B34C-A144D0E2546C}';
  CLASS_WizardHoleFeatureData2: TGUID = '{A9DA797D-2303-486B-BEB1-6F80B765BFB5}';
  IID_IChamferFeatureData2: TGUID = '{8427D092-A1FC-49C9-B1ED-EC52D2389E9A}';
  CLASS_ChamferFeatureData2: TGUID = '{5C97A73F-B200-4D1B-A83C-76227ECE5877}';
  IID_IDraftFeatureData2: TGUID = '{FD9B0999-D519-41AB-ACAA-4F2ADEDD7015}';
  CLASS_DraftFeatureData2: TGUID = '{06C757D2-4E1A-4455-9518-8A5A90218ABB}';
  IID_ISimpleFilletFeatureData2: TGUID = '{9FE7C8DB-8A4C-41BB-8E3B-7600692DBC92}';
  CLASS_SimpleFilletFeatureData2: TGUID = '{E461D38B-5063-4992-A8FF-FC04A69AABB8}';
  IID_IVariableFilletFeatureData2: TGUID = '{FFCDC95C-1BA9-423A-877E-CB7AA60DE9B4}';
  CLASS_VariableFilletFeatureData2: TGUID = '{E3B83840-88C8-4388-BF13-620AD7CDDCAC}';
  IID_IExtrudeFeatureData2: TGUID = '{931E939E-2FDE-49A8-8472-ABCF79E9F5CC}';
  CLASS_ExtrudeFeatureData2: TGUID = '{0AA8ADE4-A503-4D79-A209-69D3DBD6E725}';
  IID_IRevolveFeatureData2: TGUID = '{E055F0ED-DB3E-4528-A982-D66D289190A0}';
  CLASS_RevolveFeatureData2: TGUID = '{AC3A7D68-1EA5-4FC8-A726-EFFD2319593B}';
  CLASS_MacroFeatureData: TGUID = '{739AC7CF-9017-11D5-AF07-0002B34143E5}';
  CLASS_DowelSymbol: TGUID = '{55AACD8C-97C5-11D5-AF4B-00C04F603FAF}';
  CLASS_DragOperator: TGUID = '{2F8BE28E-F829-40F7-B568-7F461572CE41}';
  CLASS_CurveDrivenPatternFeatureData: TGUID = '{F67412A3-FEBF-4319-9E8D-323B6EE62C5A}';
  CLASS_BalloonStack: TGUID = '{4944F9E7-BF50-11D5-AF56-00C04F603FAF}';
  CLASS_StatusBarPane: TGUID = '{95B8A1AA-1977-46AD-B944-7D525DD76D65}';
  CLASS_EquationMgr: TGUID = '{9015E438-C504-4E9F-A4FA-A03D578FE21F}';
  CLASS_PageSetup: TGUID = '{931374CD-CE0E-11D5-AF59-00C04F603FAF}';
  CLASS_RipFeatureData: TGUID = '{AB3B9122-1208-4ED3-B53F-FA5C06FCBE1D}';
  CLASS_HemFeatureData: TGUID = '{59675115-A0F0-4AA1-9FED-89B10EB36D12}';
  CLASS_BreakCornerFeatureData: TGUID = '{BF2347C1-CF5F-4168-B203-7B1E544D4697}';
  CLASS_JogFeatureData: TGUID = '{CD1CE2AE-A4BB-4280-A193-D8A9D0D73117}';
  CLASS_SurfExtrudeFeatureData: TGUID = '{ACDDD04C-A393-462A-BE52-DCC9F78851F0}';
  CLASS_SurfRevolveFeatureData: TGUID = '{69C9D6E8-3B00-48DD-BB69-5AD59C6D33E2}';
  CLASS_SurfaceOffsetFeatureData: TGUID = '{AE587C54-9CEC-43E8-9A9B-318274B7D35F}';
  CLASS_SurfaceKnitFeatureData: TGUID = '{B32901E5-1A5D-4C16-98C6-2A3D7602F723}';
  CLASS_SurfaceExtendFeatureData: TGUID = '{79EE057D-BE92-4557-B679-E04824A26C3F}';
  CLASS_SurfacePlanarFeatureData: TGUID = '{467C984E-DF2D-4644-B4CF-0AC4A722323B}';
  CLASS_CenterMark: TGUID = '{6BEB0424-EDA4-11D5-AF64-00C04F603FAF}';
  CLASS_SurfaceTrimFeatureData: TGUID = '{2FB4B7B6-87B4-4B10-8961-9EBF65EAC73F}';
  CLASS_SurfaceRadiateFeatureData: TGUID = '{678DCDDD-C6EC-4E81-8948-F9FB5C79F3E4}';
  CLASS_RefPlaneFeatureData: TGUID = '{5EE2BF86-C159-4DCB-944A-99ACC772679E}';
  CLASS_Callout: TGUID = '{9CAAA1AB-F2FC-11D5-AF66-00C04F603FAF}';
  CLASS_CustomBendAllowance: TGUID = '{FD7C6301-1942-41FB-8036-D9F8CEAAC8F9}';
  CLASS_BlockInstance: TGUID = '{992A14B7-15CF-11D6-AF6E-00C04F603FAF}';
  CLASS_BlockDefinition: TGUID = '{8CD8314B-1677-11D6-AF6E-00C04F603FAF}';
  CLASS_BreakLine: TGUID = '{0D789448-973B-4411-B2D6-A90A1675276D}';
  CLASS_FaceHatch: TGUID = '{51440E4B-7FF5-4806-B852-DC238634A160}';
  CLASS_PropertyManagerPageActiveX: TGUID = '{B02F9E06-FC39-422B-9801-27B897ECAFA9}';
  CLASS_LoftedBendsFeatureData: TGUID = '{CBD8BEA9-E41E-4EF3-884C-DCA3C7BEF1D8}';
  CLASS_FeatureManager: TGUID = '{B322A200-3015-467C-B429-DCE99445D75B}';
  CLASS_ModelViewManager: TGUID = '{ACF23730-ED2C-410F-8F9D-94277DB7DB4E}';
  CLASS_ModelDocExtension: TGUID = '{D192049A-49A7-4819-9C2E-F7E0F98A0431}';
  CLASS_ConfigurationManager: TGUID = '{64EBF95D-BA6F-47CB-8558-AC9487625ED6}';
  CLASS_ReferencePointCurveFeatureData: TGUID = '{1F440727-3A73-4128-8DA9-D20BAF341BBC}';
  CLASS_FreePointCurveFeatureData: TGUID = '{830FC5D2-05EF-48EF-ADAB-BF0FF2B4C677}';
  CLASS_CompositeCurveFeatureData: TGUID = '{96EB4AA2-167F-4A41-9FAE-2F88ECEC6F92}';
  CLASS_HelixFeatureData: TGUID = '{5118F2BC-A0E6-4205-A96D-09E998190030}';
  CLASS_ImportedCurveFeatureData: TGUID = '{D50C4A6E-4CBC-4EA9-B6B8-1062BAA697D2}';
  CLASS_SketchRegion: TGUID = '{EB53B512-E23D-4B6A-B48D-21828AF5F151}';
  CLASS_SketchContour: TGUID = '{EB53B514-E23D-4B6A-B48D-21828AF5F151}';
type

// *********************************************************************//
// Forward declaration of types defined in TypeLibrary                    
// *********************************************************************//
  ISldWorks = interface;
  ISldWorksDisp = dispinterface;
  IModelDoc = interface;
  IModelDocDisp = dispinterface;
  ISelectionMgr = interface;
  ISelectionMgrDisp = dispinterface;
  IComponent = interface;
  IComponentDisp = dispinterface;
  IBody = interface;
  IBodyDisp = dispinterface;
  IFace = interface;
  IFaceDisp = dispinterface;
  ISurface = interface;
  ISurfaceDisp = dispinterface;
  ICurve = interface;
  ICurveDisp = dispinterface;
  IBody2 = interface;
  IBody2Disp = dispinterface;
  IFace2 = interface;
  IFace2Disp = dispinterface;
  IEdge = interface;
  IEdgeDisp = dispinterface;
  IEnumCoEdges = interface;
  ICoEdge = interface;
  ICoEdgeDisp = dispinterface;
  ILoop = interface;
  ILoopDisp = dispinterface;
  IEnumEdges = interface;
  ILoop2 = interface;
  ILoop2Disp = dispinterface;
  IVertex = interface;
  IVertexDisp = dispinterface;
  IFeature = interface;
  IFeatureDisp = dispinterface;
  IDimension = interface;
  IDimensionDisp = dispinterface;
  IModelDoc2 = interface;
  IModelDoc2Disp = dispinterface;
  IModelView = interface;
  IModelViewDisp = dispinterface;
  IMathTransform = interface;
  IMathTransformDisp = dispinterface;
  IMathVector = interface;
  IMathVectorDisp = dispinterface;
  IMathPoint = interface;
  IMathPointDisp = dispinterface;
  ISketch = interface;
  ISketchDisp = dispinterface;
  IEnumSketchPoints = interface;
  ISketchPoint = interface;
  ISketchPointDisp = dispinterface;
  ICallout = interface;
  ICalloutDisp = dispinterface;
  IEnumSketchSegments = interface;
  ISketchSegment = interface;
  ISketchSegmentDisp = dispinterface;
  IEnumSketchHatches = interface;
  ISketchHatch = interface;
  ISketchHatchDisp = dispinterface;
  IMidSurface2 = interface;
  IMidSurface2Disp = dispinterface;
  IFeatMgrView = interface;
  IFeatMgrViewDisp = dispinterface;
  IConfiguration = interface;
  IConfigurationDisp = dispinterface;
  IExplodeStep = interface;
  IExplodeStepDisp = dispinterface;
  IComponent2 = interface;
  IComponent2Disp = dispinterface;
  IEnumBodies2 = interface;
  IAttributeDef = interface;
  IAttributeDefDisp = dispinterface;
  IEntity = interface;
  IEntityDisp = dispinterface;
  IAttribute = interface;
  IAttributeDisp = dispinterface;
  IParameter = interface;
  IParameterDisp = dispinterface;
  IReferenceCurve = interface;
  IReferenceCurveDisp = dispinterface;
  IColorTable = interface;
  IColorTableDisp = dispinterface;
  IAnnotation = interface;
  IAnnotationDisp = dispinterface;
  IDisplayData = interface;
  IDisplayDataDisp = dispinterface;
  ITextFormat = interface;
  ITextFormatDisp = dispinterface;
  IEnumModelViews = interface;
  IDetailingDefaults = interface;
  IDetailingDefaultsDisp = dispinterface;
  ILayerMgr = interface;
  ILayerMgrDisp = dispinterface;
  ILayer = interface;
  ILayerDisp = dispinterface;
  IDesignTable = interface;
  IDesignTableDisp = dispinterface;
  IRefPlane = interface;
  IRefPlaneDisp = dispinterface;
  IDatumTag = interface;
  IDatumTagDisp = dispinterface;
  IGtol = interface;
  IGtolDisp = dispinterface;
  INote = interface;
  INoteDisp = dispinterface;
  IBalloonStack = interface;
  IBalloonStackDisp = dispinterface;
  IPropertyManagerPage = interface;
  IPropertyManagerPageDisp = dispinterface;
  IDisplayDimension = interface;
  IDisplayDimensionDisp = dispinterface;
  IUserUnit = interface;
  IUserUnitDisp = dispinterface;
  IWeldSymbol = interface;
  IWeldSymbolDisp = dispinterface;
  ISketchText = interface;
  ISketchTextDisp = dispinterface;
  IEquationMgr = interface;
  IEquationMgrDisp = dispinterface;
  IPageSetup = interface;
  IPageSetupDisp = dispinterface;
  IFeatureManager = interface;
  IFeatureManagerDisp = dispinterface;
  ICustomBendAllowance = interface;
  ICustomBendAllowanceDisp = dispinterface;
  IModelViewManager = interface;
  IModelViewManagerDisp = dispinterface;
  IModelDocExtension = interface;
  IModelDocExtensionDisp = dispinterface;
  IConfigurationManager = interface;
  IConfigurationManagerDisp = dispinterface;
  IEnumDisplayDimensions = interface;
  IEnumLoops2 = interface;
  IEnumFaces2 = interface;
  IPartDoc = interface;
  IPartDocDisp = dispinterface;
  IEnumBodies = interface;
  ITessellation = interface;
  ITessellationDisp = dispinterface;
  IEnumLoops = interface;
  IEnumFaces = interface;
  IView = interface;
  IViewDisp = dispinterface;
  ISFSymbol = interface;
  ISFSymbolDisp = dispinterface;
  IDatumTargetSym = interface;
  IDatumTargetSymDisp = dispinterface;
  ICThread = interface;
  ICThreadDisp = dispinterface;
  IBomTable = interface;
  IBomTableDisp = dispinterface;
  ICustomSymbol = interface;
  ICustomSymbolDisp = dispinterface;
  IDrSection = interface;
  IDrSectionDisp = dispinterface;
  IEnumComponents = interface;
  IEnumComponents2 = interface;
  IEnumDrSections = interface;
  IDetailCircle = interface;
  IDetailCircleDisp = dispinterface;
  IProjectionArrow = interface;
  IProjectionArrowDisp = dispinterface;
  IMultiJogLeader = interface;
  IMultiJogLeaderDisp = dispinterface;
  IDowelSymbol = interface;
  IDowelSymbolDisp = dispinterface;
  IBlockInstance = interface;
  IBlockInstanceDisp = dispinterface;
  IBlockDefinition = interface;
  IBlockDefinitionDisp = dispinterface;
  IBreakLine = interface;
  IBreakLineDisp = dispinterface;
  IFaceHatch = interface;
  IFaceHatchDisp = dispinterface;
  ICenterMark = interface;
  ICenterMarkDisp = dispinterface;
  IMidSurface = interface;
  IMidSurfaceDisp = dispinterface;
  IFrame = interface;
  IFrameDisp = dispinterface;
  IStatusBarPane = interface;
  IStatusBarPaneDisp = dispinterface;
  IAssemblyDoc = interface;
  IAssemblyDocDisp = dispinterface;
  IMember = interface;
  IMemberDisp = dispinterface;
  IDragOperator = interface;
  IDragOperatorDisp = dispinterface;
  IDrawingDoc = interface;
  IDrawingDocDisp = dispinterface;
  ISheet = interface;
  ISheetDisp = dispinterface;
  IModeler = interface;
  IModelerDisp = dispinterface;
  IEnvironment = interface;
  IEnvironmentDisp = dispinterface;
  IEnumDocuments = interface;
  IMathUtility = interface;
  IMathUtilityDisp = dispinterface;
  IEnumDocuments2 = interface;
  IPropertyManagerPage2 = interface;
  IPropertyManagerPage2Disp = dispinterface;
  IPropertyManagerPageGroup = interface;
  IPropertyManagerPageGroupDisp = dispinterface;
  IPropertyManagerPageControl = interface;
  IPropertyManagerPageControlDisp = dispinterface;
  IRefAxis = interface;
  IRefAxisDisp = dispinterface;
  IMate = interface;
  IMateDisp = dispinterface;
  IMateEntity = interface;
  IMateEntityDisp = dispinterface;
  ISWPropertySheet = interface;
  ISWPropertySheetDisp = dispinterface;
  IRibFeatureData = interface;
  IRibFeatureDataDisp = dispinterface;
  IDomeFeatureData = interface;
  IDomeFeatureDataDisp = dispinterface;
  ISketchLine = interface;
  ISketchLineDisp = dispinterface;
  ISketchArc = interface;
  ISketchArcDisp = dispinterface;
  ISketchEllipse = interface;
  ISketchEllipseDisp = dispinterface;
  ISketchParabola = interface;
  ISketchParabolaDisp = dispinterface;
  ISketchSpline = interface;
  ISketchSplineDisp = dispinterface;
  ILightDialog = interface;
  ILightDialogDisp = dispinterface;
  IEnumCurves = interface;
  ISimpleHoleFeatureData = interface;
  ISimpleHoleFeatureDataDisp = dispinterface;
  IWizardHoleFeatureData = interface;
  IWizardHoleFeatureDataDisp = dispinterface;
  IChamferFeatureData = interface;
  IChamferFeatureDataDisp = dispinterface;
  IDraftFeatureData = interface;
  IDraftFeatureDataDisp = dispinterface;
  ISimpleFilletFeatureData = interface;
  ISimpleFilletFeatureDataDisp = dispinterface;
  IVariableFilletFeatureData = interface;
  IVariableFilletFeatureDataDisp = dispinterface;
  IExtrudeFeatureData = interface;
  IExtrudeFeatureDataDisp = dispinterface;
  IRevolveFeatureData = interface;
  IRevolveFeatureDataDisp = dispinterface;
  IMirrorPatternFeatureData = interface;
  IMirrorPatternFeatureDataDisp = dispinterface;
  ICircularPatternFeatureData = interface;
  ICircularPatternFeatureDataDisp = dispinterface;
  ILinearPatternFeatureData = interface;
  ILinearPatternFeatureDataDisp = dispinterface;
  ITablePatternFeatureData = interface;
  ITablePatternFeatureDataDisp = dispinterface;
  ISketchPatternFeatureData = interface;
  ISketchPatternFeatureDataDisp = dispinterface;
  IMirrorSolidFeatureData = interface;
  IMirrorSolidFeatureDataDisp = dispinterface;
  ISheetMetalFeatureData = interface;
  ISheetMetalFeatureDataDisp = dispinterface;
  IOneBendFeatureData = interface;
  IOneBendFeatureDataDisp = dispinterface;
  IBendsFeatureData = interface;
  IBendsFeatureDataDisp = dispinterface;
  IBaseFlangeFeatureData = interface;
  IBaseFlangeFeatureDataDisp = dispinterface;
  IEdgeFlangeFeatureData = interface;
  IEdgeFlangeFeatureDataDisp = dispinterface;
  IMiterFlangeFeatureData = interface;
  IMiterFlangeFeatureDataDisp = dispinterface;
  ISketchedBendFeatureData = interface;
  ISketchedBendFeatureDataDisp = dispinterface;
  IClosedCornerFeatureData = interface;
  IClosedCornerFeatureDataDisp = dispinterface;
  IFoldsFeatureData = interface;
  IFoldsFeatureDataDisp = dispinterface;
  IFlatPatternFeatureData = interface;
  IFlatPatternFeatureDataDisp = dispinterface;
  ILocalLinearPatternFeatureData = interface;
  ILocalLinearPatternFeatureDataDisp = dispinterface;
  ILocalCircularPatternFeatureData = interface;
  ILocalCircularPatternFeatureDataDisp = dispinterface;
  IDerivedPatternFeatureData = interface;
  IDerivedPatternFeatureDataDisp = dispinterface;
  IPropertyManagerPageLabel = interface;
  IPropertyManagerPageLabelDisp = dispinterface;
  IPropertyManagerPageCheckbox = interface;
  IPropertyManagerPageCheckboxDisp = dispinterface;
  IPropertyManagerPageButton = interface;
  IPropertyManagerPageButtonDisp = dispinterface;
  IPropertyManagerPageOption = interface;
  IPropertyManagerPageOptionDisp = dispinterface;
  IPropertyManagerPageTextbox = interface;
  IPropertyManagerPageTextboxDisp = dispinterface;
  IPropertyManagerPageCombobox = interface;
  IPropertyManagerPageComboboxDisp = dispinterface;
  IPropertyManagerPageActiveX = interface;
  IPropertyManagerPageActiveXDisp = dispinterface;
  IProjectionCurveFeatureData = interface;
  IProjectionCurveFeatureDataDisp = dispinterface;
  IScaleFeatureData = interface;
  IScaleFeatureDataDisp = dispinterface;
  IShellFeatureData = interface;
  IShellFeatureDataDisp = dispinterface;
  ISweepFeatureData = interface;
  ISweepFeatureDataDisp = dispinterface;
  ILoftFeatureData = interface;
  ILoftFeatureDataDisp = dispinterface;
  IThickenFeatureData = interface;
  IThickenFeatureDataDisp = dispinterface;
  ISurfaceCutFeatureData = interface;
  ISurfaceCutFeatureDataDisp = dispinterface;
  IReplaceFaceFeatureData = interface;
  IReplaceFaceFeatureDataDisp = dispinterface;
  IMacroFeatureData = interface;
  IMacroFeatureDataDisp = dispinterface;
  ICurveDrivenPatternFeatureData = interface;
  ICurveDrivenPatternFeatureDataDisp = dispinterface;
  IRipFeatureData = interface;
  IRipFeatureDataDisp = dispinterface;
  IHemFeatureData = interface;
  IHemFeatureDataDisp = dispinterface;
  IBreakCornerFeatureData = interface;
  IBreakCornerFeatureDataDisp = dispinterface;
  IJogFeatureData = interface;
  IJogFeatureDataDisp = dispinterface;
  ISurfExtrudeFeatureData = interface;
  ISurfExtrudeFeatureDataDisp = dispinterface;
  ISurfRevolveFeatureData = interface;
  ISurfRevolveFeatureDataDisp = dispinterface;
  ISurfaceOffsetFeatureData = interface;
  ISurfaceOffsetFeatureDataDisp = dispinterface;
  ISurfaceKnitFeatureData = interface;
  ISurfaceKnitFeatureDataDisp = dispinterface;
  ISurfaceExtendFeatureData = interface;
  ISurfaceExtendFeatureDataDisp = dispinterface;
  ISurfacePlanarFeatureData = interface;
  ISurfacePlanarFeatureDataDisp = dispinterface;
  ISurfaceTrimFeatureData = interface;
  ISurfaceTrimFeatureDataDisp = dispinterface;
  ISurfaceRadiateFeatureData = interface;
  ISurfaceRadiateFeatureDataDisp = dispinterface;
  IRefPlaneFeatureData = interface;
  IRefPlaneFeatureDataDisp = dispinterface;
  ILoftedBendsFeatureData = interface;
  ILoftedBendsFeatureDataDisp = dispinterface;
  IReferencePointCurveFeatureData = interface;
  IReferencePointCurveFeatureDataDisp = dispinterface;
  IFreePointCurveFeatureData = interface;
  IFreePointCurveFeatureDataDisp = dispinterface;
  ICompositeCurveFeatureData = interface;
  ICompositeCurveFeatureDataDisp = dispinterface;
  IHelixFeatureData = interface;
  IHelixFeatureDataDisp = dispinterface;
  IImportedCurveFeatureData = interface;
  IImportedCurveFeatureDataDisp = dispinterface;
  ISketchRegion = interface;
  ISketchRegionDisp = dispinterface;
  ISketchContour = interface;
  ISketchContourDisp = dispinterface;
  DSldWorksEvents = dispinterface;
  DPartDocEvents = dispinterface;
  DDrawingDocEvents = dispinterface;
  DAssemblyDocEvents = dispinterface;
  DModelViewEvents = dispinterface;
  DFeatMgrViewEvents = dispinterface;
  DSWPropertySheetEvents = dispinterface;
  ISdmDoc = dispinterface;
  IPropertyManagerPageListbox = interface;
  IPropertyManagerPageListboxDisp = dispinterface;
  IPropertyManagerPageNumberbox = interface;
  IPropertyManagerPageNumberboxDisp = dispinterface;
  IPropertyManagerPageSelectionbox = interface;
  IPropertyManagerPageSelectionboxDisp = dispinterface;
  IRibFeatureData2 = interface;
  IRibFeatureData2Disp = dispinterface;
  IDomeFeatureData2 = interface;
  IDomeFeatureData2Disp = dispinterface;
  ISimpleHoleFeatureData2 = interface;
  ISimpleHoleFeatureData2Disp = dispinterface;
  IWizardHoleFeatureData2 = interface;
  IWizardHoleFeatureData2Disp = dispinterface;
  IChamferFeatureData2 = interface;
  IChamferFeatureData2Disp = dispinterface;
  IDraftFeatureData2 = interface;
  IDraftFeatureData2Disp = dispinterface;
  ISimpleFilletFeatureData2 = interface;
  ISimpleFilletFeatureData2Disp = dispinterface;
  IVariableFilletFeatureData2 = interface;
  IVariableFilletFeatureData2Disp = dispinterface;
  IExtrudeFeatureData2 = interface;
  IExtrudeFeatureData2Disp = dispinterface;
  IRevolveFeatureData2 = interface;
  IRevolveFeatureData2Disp = dispinterface;

// *********************************************************************//
// Declaration of CoClasses defined in Type Library                       
// (NOTE: Here we map each CoClass to its Default Interface)              
// *********************************************************************//
  SldWorks_ = ISldWorks;
  PartDoc = IPartDoc;
  DrawingDoc = IDrawingDoc;
  AssemblyDoc = IAssemblyDoc;
  feature = IFeature;
  Dimension = IDimension;
  Body = IBody;
  face = IFace;
  surface = ISurface;
  Edge = IEdge;
  Curve = ICurve;
  modelDoc = IModelDoc;
  Frame = IFrame;
  Gtol = IGtol;
  ModelView = IModelView;
  Member = IMember;
  view = IView;
  sketch = ISketch;
  loop = ILoop;
  note = INote;
  CoEdge = ICoEdge;
  Vertex = IVertex;
  SelectionMgr = ISelectionMgr;
  EnumFaces = IEnumFaces;
  EnumFaces2 = IEnumFaces2;
  EnumLoops = IEnumLoops;
  EnumLoops2 = IEnumLoops2;
  EnumEdges = IEnumEdges;
  EnumCoEdges = IEnumCoEdges;
  EnumBodies = IEnumBodies;
  EnumBodies2 = IEnumBodies2;
  entity = IEntity;
  attributeDef = IAttributeDef;
  Parameter = IParameter;
  Attribute = IAttribute;
  Modeler = IModeler;
  FeatMgrView = IFeatMgrView;
  Environment = IEnvironment;
  Sheet = ISheet;
  BomTable = IBomTable;
  refPlane = IRefPlane;
  refAxis = IRefAxis;
  MidSurface = IMidSurface;
  Mate = IMate;
  MateEntity = IMateEntity;
  SFSymbol = ISFSymbol;
  DatumTag = IDatumTag;
  DatumTargetSym = IDatumTargetSym;
  WeldSymbol = IWeldSymbol;
  configuration = IConfiguration;
  component = IComponent;
  DisplayData = IDisplayData;
  CThread = ICThread;
  DisplayDimension = IDisplayDimension;
  ReferenceCurve = IReferenceCurve;
  ColorTable = IColorTable;
  SWPropertySheet = ISWPropertySheet;
  Annotation = IAnnotation;
  EnumDisplayDimensions = IEnumDisplayDimensions;
  RibFeatureData = IRibFeatureData;
  DomeFeatureData = IDomeFeatureData;
  EnumModelViews = IEnumModelViews;
  EnumDocuments = IEnumDocuments;
  EnumDocuments2 = IEnumDocuments2;
  CustomSymbol = ICustomSymbol;
  DetailingDefaults = IDetailingDefaults;
  textFormat = ITextFormat;
  SketchPoint = ISketchPoint;
  SketchSegment = ISketchSegment;
  SketchLine = ISketchLine;
  SketchArc = ISketchArc;
  SketchText = ISketchText;
  SketchEllipse = ISketchEllipse;
  SketchParabola = ISketchParabola;
  SketchSpline = ISketchSpline;
  EnumSketchPoints = IEnumSketchPoints;
  EnumSketchSegments = IEnumSketchSegments;
  LightDialog = ILightDialog;
  Layer = ILayer;
  LayerMgr = ILayerMgr;
  DesignTable = IDesignTable;
  SketchHatch = ISketchHatch;
  EnumSketchHatches = IEnumSketchHatches;
  EnumCurves = IEnumCurves;
  SimpleHoleFeatureData = ISimpleHoleFeatureData;
  WizardHoleFeatureData = IWizardHoleFeatureData;
  ChamferFeatureData = IChamferFeatureData;
  DraftFeatureData = IDraftFeatureData;
  SimpleFilletFeatureData = ISimpleFilletFeatureData;
  VariableFilletFeatureData = IVariableFilletFeatureData;
  ExtrudeFeatureData = IExtrudeFeatureData;
  RevolveFeatureData = IRevolveFeatureData;
  SdmDoc = ISdmDoc;
  DrSection = IDrSection;
  EnumComponents = IEnumComponents;
  EnumComponents2 = IEnumComponents2;
  EnumDrSections = IEnumDrSections;
  ExplodeStep = IExplodeStep;
  MathUtility = IMathUtility;
  MathTransform = IMathTransform;
  MathPoint = IMathPoint;
  MathVector = IMathVector;
  MirrorPatternFeatureData = IMirrorPatternFeatureData;
  DetailCircle = IDetailCircle;
  CircularPatternFeatureData = ICircularPatternFeatureData;
  LinearPatternFeatureData = ILinearPatternFeatureData;
  TablePatternFeatureData = ITablePatternFeatureData;
  SketchPatternFeatureData = ISketchPatternFeatureData;
  MirrorSolidFeatureData = IMirrorSolidFeatureData;
  PropertyManagerPage = IPropertyManagerPage;
  ProjectionArrow = IProjectionArrow;
  Tessellation = ITessellation;
  SheetMetalFeatureData = ISheetMetalFeatureData;
  OneBendFeatureData = IOneBendFeatureData;
  BendsFeatureData = IBendsFeatureData;
  UserUnit = IUserUnit;
  BaseFlangeFeatureData = IBaseFlangeFeatureData;
  EdgeFlangeFeatureData = IEdgeFlangeFeatureData;
  MiterFlangeFeatureData = IMiterFlangeFeatureData;
  SketchedBendFeatureData = ISketchedBendFeatureData;
  ClosedCornerFeatureData = IClosedCornerFeatureData;
  FoldsFeatureData = IFoldsFeatureData;
  FlatPatternFeatureData = IFlatPatternFeatureData;
  LocalLinearPatternFeatureData = ILocalLinearPatternFeatureData;
  LocalCircularPatternFeatureData = ILocalCircularPatternFeatureData;
  DerivedPatternFeatureData = IDerivedPatternFeatureData;
  body2 = IBody2;
  face2 = IFace2;
  ModelDoc2 = IModelDoc2;
  Loop2 = ILoop2;
  MidSurface2 = IMidSurface2;
  Component2 = IComponent2;
  PropertyManagerPage2 = IPropertyManagerPage2;
  PropertyManagerPageGroup = IPropertyManagerPageGroup;
  PropertyManagerPageControl = IPropertyManagerPageControl;
  PropertyManagerPageLabel = IPropertyManagerPageLabel;
  PropertyManagerPageCheckbox = IPropertyManagerPageCheckbox;
  PropertyManagerPageButton = IPropertyManagerPageButton;
  PropertyManagerPageOption = IPropertyManagerPageOption;
  PropertyManagerPageTextbox = IPropertyManagerPageTextbox;
  PropertyManagerPageListbox = IPropertyManagerPageListbox;
  PropertyManagerPageCombobox = IPropertyManagerPageCombobox;
  PropertyManagerPageNumberbox = IPropertyManagerPageNumberbox;
  PropertyManagerPageSelectionbox = IPropertyManagerPageSelectionbox;
  MultiJogLeader = IMultiJogLeader;
  ProjectionCurveFeatureData = IProjectionCurveFeatureData;
  ScaleFeatureData = IScaleFeatureData;
  ShellFeatureData = IShellFeatureData;
  SweepFeatureData = ISweepFeatureData;
  LoftFeatureData = ILoftFeatureData;
  ThickenFeatureData = IThickenFeatureData;
  SurfCutFeatureData = ISurfaceCutFeatureData;
  ReplaceFaceFeatureData = IReplaceFaceFeatureData;
  RibFeatureData2 = IRibFeatureData2;
  DomeFeatureData2 = IDomeFeatureData2;
  SimpleHoleFeatureData2 = ISimpleHoleFeatureData2;
  WizardHoleFeatureData2 = IWizardHoleFeatureData2;
  ChamferFeatureData2 = IChamferFeatureData2;
  DraftFeatureData2 = IDraftFeatureData2;
  SimpleFilletFeatureData2 = ISimpleFilletFeatureData2;
  VariableFilletFeatureData2 = IVariableFilletFeatureData2;
  ExtrudeFeatureData2 = IExtrudeFeatureData2;
  RevolveFeatureData2 = IRevolveFeatureData2;
  MacroFeatureData = IMacroFeatureData;
  DowelSymbol = IDowelSymbol;
  DragOperator = IDragOperator;
  CurveDrivenPatternFeatureData = ICurveDrivenPatternFeatureData;
  BalloonStack = IBalloonStack;
  StatusBarPane = IStatusBarPane;
  EquationMgr = IEquationMgr;
  PageSetup = IPageSetup;
  RipFeatureData = IRipFeatureData;
  HemFeatureData = IHemFeatureData;
  BreakCornerFeatureData = IBreakCornerFeatureData;
  JogFeatureData = IJogFeatureData;
  SurfExtrudeFeatureData = ISurfExtrudeFeatureData;
  SurfRevolveFeatureData = ISurfRevolveFeatureData;
  SurfaceOffsetFeatureData = ISurfaceOffsetFeatureData;
  SurfaceKnitFeatureData = ISurfaceKnitFeatureData;
  SurfaceExtendFeatureData = ISurfaceExtendFeatureData;
  SurfacePlanarFeatureData = ISurfacePlanarFeatureData;
  CenterMark = ICenterMark;
  SurfaceTrimFeatureData = ISurfaceTrimFeatureData;
  SurfaceRadiateFeatureData = ISurfaceRadiateFeatureData;
  RefPlaneFeatureData = IRefPlaneFeatureData;
  Callout = ICallout;
  CustomBendAllowance = ICustomBendAllowance;
  BlockInstance = IBlockInstance;
  BlockDefinition = IBlockDefinition;
  BreakLine = IBreakLine;
  FaceHatch = IFaceHatch;
  PropertyManagerPageActiveX = IPropertyManagerPageActiveX;
  LoftedBendsFeatureData = ILoftedBendsFeatureData;
  FeatureManager = IFeatureManager;
  ModelViewManager = IModelViewManager;
  ModelDocExtension = IModelDocExtension;
  ConfigurationManager = IConfigurationManager;
  ReferencePointCurveFeatureData = IReferencePointCurveFeatureData;
  FreePointCurveFeatureData = IFreePointCurveFeatureData;
  CompositeCurveFeatureData = ICompositeCurveFeatureData;
  HelixFeatureData = IHelixFeatureData;
  ImportedCurveFeatureData = IImportedCurveFeatureData;
  SketchRegion = ISketchRegion;
  SketchContour = ISketchContour;


// *********************************************************************//
// Declaration of structures, unions and aliases.                         
// *********************************************************************//
  PInteger1 = ^Integer; {*}
  PDouble1 = ^Double; {*}
  PPUserType1 = ^ICurve; {*}
  PPPUserType1 = ^PPUserType1; {*}
  PSYSINT1 = ^SYSINT; {*}
  PPUserType2 = ^IBody; {*}
  PWordBool1 = ^WordBool; {*}
  PPUserType3 = ^IComponent; {*}
  PPUserType4 = ^IEdge; {*}
  PPUserType5 = ^IFace; {*}
  PPPUserType2 = ^PPUserType5; {*}
  PIDispatch1 = ^IDispatch; {*}
  PPUserType6 = ^ILoop; {*}
  PPSYSINT1 = ^PSYSINT1; {*}
  PSingle1 = ^Single; {*}
  PPSingle1 = ^PSingle1; {*}
  PPUserType7 = ^IBody2; {*}
  PPUserType8 = ^IFace2; {*}
  PPUserType9 = ^ILoop2; {*}
  PWideString1 = ^WideString; {*}
  PIUnknown1 = ^IUnknown; {*}
  PPUserType10 = ^IComponent2; {*}
  PPUserType11 = ^ISketchSegment; {*}
  PPUserType12 = ^ISketchPoint; {*}
  PPUserType13 = ^INote; {*}
  PPUserType14 = ^IDisplayDimension; {*}
  PPUserType15 = ^IBlockInstance; {*}
  PByte1 = ^Byte; {*}
  PPUserType16 = ^ISurface; {*}
  PPUserType17 = ^IFeature; {*}
  PPUserType18 = ^IView; {*}
  POleVariant1 = ^OleVariant; {*}


// *********************************************************************//
// Interface: ISldWorks
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {83A33D22-27C5-11CE-BFD4-00400513BB57}
// *********************************************************************//
  ISldWorks = interface(IDispatch)
    ['{83A33D22-27C5-11CE-BFD4-00400513BB57}']
    function Get_ActiveDoc: IDispatch; safecall;
    function Get_IActiveDoc: IModelDoc; safecall;
    function OpenDoc(const Name: WideString; type_: Integer): IDispatch; safecall;
    function IOpenDoc(const Name: WideString; type_: Integer): IModelDoc; safecall;
    function ActivateDoc(const Name: WideString): IDispatch; safecall;
    function IActivateDoc(const Name: WideString): IModelDoc; safecall;
    procedure SendMsgToUser(const Message: WideString); safecall;
    function Frame: IDispatch; safecall;
    function IFrameObject: IFrame; safecall;
    procedure ExitApp; safecall;
    procedure CloseDoc(const Name: WideString); safecall;
    function NewPart: IDispatch; safecall;
    function INewPart: IPartDoc; safecall;
    function NewAssembly: IDispatch; safecall;
    function INewAssembly: IAssemblyDoc; safecall;
    function NewDrawing(templateToUse: Integer): IDispatch; safecall;
    function INewDrawing(templateToUse: Integer): IDrawingDoc; safecall;
    function DateCode: Integer; safecall;
    function RevisionNumber: WideString; safecall;
    function LoadFile(const fileName: WideString): WordBool; safecall;
    function AddFileOpenItem(const CallbackFcnAndModule: WideString; const Description: WideString): WordBool; safecall;
    function AddFileSaveAsItem(const CallbackFcnAndModule: WideString; 
                               const Description: WideString; type_: Integer): WordBool; safecall;
    procedure PreSelectDwgTemplateSize(templateToUse: Integer; const templateName: WideString); safecall;
    procedure DocumentVisible(Visible: WordBool; type_: Integer); safecall;
    function DefineAttribute(const Name: WideString): IDispatch; safecall;
    function IDefineAttribute(const Name: WideString): IAttributeDef; safecall;
    function Get_Visible: WordBool; safecall;
    procedure Set_Visible(retval: WordBool); safecall;
    function Get_UserControl: WordBool; safecall;
    procedure Set_UserControl(retval: WordBool); safecall;
    procedure DisplayStatusBar(onOff: WordBool); safecall;
    procedure CreateNewWindow; safecall;
    procedure ArrangeIcons; safecall;
    procedure ArrangeWindows(Style: Integer); safecall;
    procedure QuitDoc(const Name: WideString); safecall;
    function GetModeler: IDispatch; safecall;
    function IGetModeler: IModeler; safecall;
    function GetEnvironment: IDispatch; safecall;
    function IGetEnvironment: IEnvironment; safecall;
    function NewDrawing2(templateToUse: Integer; const templateName: WideString; 
                         paperSize: Integer; width: Double; height: Double): IDispatch; safecall;
    function INewDrawing2(templateToUse: Integer; const templateName: WideString; 
                          paperSize: Integer; width: Double; height: Double): IDrawingDoc; safecall;
    function SetOptions(const Message: WideString): WordBool; safecall;
    function PreviewDoc(var hWnd: Integer; const FullName: WideString): WordBool; safecall;
    function GetSearchFolders(folderType: Integer): WideString; safecall;
    function SetSearchFolders(folderType: Integer; const folders: WideString): WordBool; safecall;
    function GetUserPreferenceToggle(userPreferenceToggle: Integer): WordBool; safecall;
    procedure SetUserPreferenceToggle(userPreferenceValue: Integer; onFlag: WordBool); safecall;
    function GetUserPreferenceDoubleValue(userPreferenceValue: Integer): Double; safecall;
    function SetUserPreferenceDoubleValue(userPreferenceValue: Integer; Value: Double): WordBool; safecall;
    function Get_ActivePrinter: WideString; safecall;
    procedure Set_ActivePrinter(const retval: WideString); safecall;
    function LoadFile2(const fileName: WideString; const ArgString: WideString): WordBool; safecall;
    function GetUserPreferenceIntegerValue(userPreferenceValue: Integer): Integer; safecall;
    function SetUserPreferenceIntegerValue(userPreferenceValue: Integer; Value: Integer): WordBool; safecall;
    function RemoveMenuPopupItem(DocType: Integer; SelectType: Integer; const Item: WideString; 
                                 const CallbackFcnAndModule: WideString; 
                                 const CustomNames: WideString; Unused: Integer): WordBool; safecall;
    function RemoveMenu(DocType: Integer; const MenuItemString: WideString; 
                        const CallbackFcnAndModule: WideString): WordBool; safecall;
    function RemoveFileOpenItem(const CallbackFcnAndModule: WideString; 
                                const Description: WideString): WordBool; safecall;
    function RemoveFileSaveAsItem(const CallbackFcnAndModule: WideString; 
                                  const Description: WideString; type_: Integer): WordBool; safecall;
    function ReplaceReferencedDocument(const referencingDocument: WideString; 
                                       const referencedDocument: WideString; 
                                       const newReference: WideString): WordBool; safecall;
    function AddMenuItem(DocType: Integer; const Menu: WideString; Postion: Integer; 
                         const CallbackModuleAndFcn: WideString): Integer; safecall;
    function AddMenuPopupItem(DocType: Integer; selType: Integer; const Item: WideString; 
                              const CallbackFcnAndModule: WideString; const CustomNames: WideString): Integer; safecall;
    function RemoveUserMenu(DocType: Integer; menuIdIn: Integer; const moduleName: WideString): WordBool; safecall;
    function AddToolbar(const moduleName: WideString; const title: WideString; 
                        smallBitmapHandle: Integer; largeBitmapHandle: Integer): Integer; safecall;
    function AddToolbarCommand(const moduleName: WideString; toolbarId: Integer; 
                               toolbarIndex: SYSINT; const commandString: WideString): WordBool; safecall;
    function ShowToolbar(const moduleName: WideString; toolbarId: Integer): WordBool; safecall;
    function HideToolbar(const moduleName: WideString; toolbarId: Integer): WordBool; safecall;
    function RemoveToolbar(const Module: WideString; toolbarId: Integer): WordBool; safecall;
    function GetToolbarState(const Module: WideString; toolbarId: Integer; toolbarState: Integer): WordBool; safecall;
    function GetUserPreferenceStringListValue(userPreference: Integer): WideString; safecall;
    procedure SetUserPreferenceStringListValue(userPreference: Integer; const Value: WideString); safecall;
    function EnableStereoDisplay(bEnable: WordBool): WordBool; safecall;
    function IEnableStereoDisplay(bEnable: WordBool): WordBool; safecall;
    function GetDocumentDependencies(const Document: WideString; traverseflag: Integer; 
                                     searchflag: Integer): OleVariant; safecall;
    function IGetDocumentDependencies(const Document: WideString; traverseflag: Integer; 
                                      searchflag: Integer): WideString; safecall;
    function GetDocumentDependenciesCount(const Document: WideString; traverseflag: Integer; 
                                          searchflag: Integer): Integer; safecall;
    function OpenDocSilent(const fileName: WideString; type_: Integer; var Errors: Integer): IDispatch; safecall;
    function IOpenDocSilent(const fileName: WideString; type_: Integer; var Errors: Integer): IModelDoc; safecall;
    function CallBack(const callBackFunc: WideString; defaultRetVal: Integer; 
                      const callBackArgs: WideString): Integer; safecall;
    function SendMsgToUser2(const Message: WideString; icon: Integer; buttons: Integer): Integer; safecall;
    function EnumDocuments: IEnumDocuments; safecall;
    function LoadAddIn(const fileName: WideString): Integer; safecall;
    function UnloadAddIn(const fileName: WideString): Integer; safecall;
    function RecordLine(const text: WideString): WordBool; safecall;
    function VersionHistory(const fileName: WideString): OleVariant; safecall;
    function IVersionHistory(const fileName: WideString): WideString; safecall;
    function IGetVersionHistoryCount(const fileName: WideString): SYSINT; safecall;
    function AllowFailedFeatureCreation(yesNo: WordBool): WordBool; safecall;
    function GetFirstDocument: IDispatch; safecall;
    function GetCurrentWorkingDirectory: WideString; safecall;
    function SetCurrentWorkingDirectory(const currentWorkingDirectory: WideString): WordBool; safecall;
    function GetDataFolder(bShowErrorMsg: WordBool): WideString; safecall;
    function GetSelectionFilter(selType: Integer): WordBool; safecall;
    procedure SetSelectionFilter(selType: Integer; state: WordBool); safecall;
    function ActivateDoc2(const Name: WideString; silent: WordBool; var Errors: Integer): IDispatch; safecall;
    function IActivateDoc2(const Name: WideString; silent: WordBool; var Errors: Integer): IModelDoc; safecall;
    function GetMouseDragMode(command: Integer): WordBool; safecall;
    function GetCurrentLanguage: WideString; safecall;
    function IGetFirstDocument: IModelDoc; safecall;
    function SanityCheck(swItemToCheck: Integer; var P1: Integer; var P2: Integer): WordBool; safecall;
    function AddMenu(DocType: Integer; const Menu: WideString; position: Integer): Integer; safecall;
    function CheckpointConvertedDocument(const docName: WideString): Integer; safecall;
    function OpenDoc2(const fileName: WideString; type_: Integer; ReadOnly: WordBool; 
                      viewOnly: WordBool; silent: WordBool; var Errors: Integer): IDispatch; safecall;
    function IOpenDoc2(const fileName: WideString; type_: Integer; ReadOnly: WordBool; 
                       viewOnly: WordBool; silent: WordBool; var Errors: Integer): IModelDoc; safecall;
    function GetMassProperties(const filePathName: WideString; const configurationName: WideString): OleVariant; safecall;
    function IGetMassProperties(const filePathName: WideString; 
                                const configurationName: WideString; var mPropsData: Double): WordBool; safecall;
    function GetLocalizedMenuName(menuId: Integer): WideString; safecall;
    function GetDocumentDependencies2(const Document: WideString; traverseflag: WordBool; 
                                      searchflag: WordBool; addReadOnlyInfo: WordBool): OleVariant; safecall;
    function IGetDocumentDependencies2(const Document: WideString; traverseflag: WordBool; 
                                       searchflag: WordBool; addReadOnlyInfo: WordBool): WideString; safecall;
    function IGetDocumentDependenciesCount2(const Document: WideString; traverseflag: WordBool; 
                                            searchflag: WordBool; addReadOnlyInfo: WordBool): Integer; safecall;
    function GetSelectionFilters: OleVariant; safecall;
    procedure SetSelectionFilters(selType: OleVariant; state: WordBool); safecall;
    function GetApplySelectionFilter: WordBool; safecall;
    procedure SetApplySelectionFilter(state: WordBool); safecall;
    function NewDocument(const templateName: WideString; paperSize: Integer; width: Double; 
                         height: Double): IDispatch; safecall;
    function INewDocument(const templateName: WideString; paperSize: Integer; width: Double; 
                          height: Double): IModelDoc; safecall;
    function GetDocumentTemplate(mode: Integer; const templateName: WideString; paperSize: Integer; 
                                 width: Double; height: Double): WideString; safecall;
    function IGetSelectionFiltersCount: Integer; safecall;
    function IGetSelectionFilters: Integer; safecall;
    procedure ISetSelectionFilters(count: Integer; var selType: Integer; state: WordBool); safecall;
    function GetCurrSolidWorksRegSubKey: WideString; safecall;
    procedure SolidWorksExplorer; safecall;
    function GetUserPreferenceStringValue(userPreference: Integer): WideString; safecall;
    function SetUserPreferenceStringValue(userPreference: Integer; const Value: WideString): WordBool; safecall;
    function GetCurrentMacroPathName: WideString; safecall;
    function GetOpenDocumentByName(const documentName: WideString): IDispatch; safecall;
    function IGetOpenDocumentByName(const documentName: WideString): IModelDoc; safecall;
    procedure GetCurrentKernelVersions(out version1: WideString; out version2: WideString; 
                                       out version3: WideString); safecall;
    function CreatePrunedModelArchive(const pathname: WideString; const zipPathName: WideString): WideString; safecall;
    function OpenDoc3(const fileName: WideString; type_: Integer; ReadOnly: WordBool; 
                      viewOnly: WordBool; RapidDraft: WordBool; silent: WordBool; 
                      var Errors: Integer): IDispatch; safecall;
    function IOpenDoc3(const fileName: WideString; type_: Integer; ReadOnly: WordBool; 
                       viewOnly: WordBool; RapidDraft: WordBool; silent: WordBool; 
                       var Errors: Integer): IModelDoc; safecall;
    function AddToolbar2(const moduleNameIn: WideString; const titleIn: WideString; 
                         smallBitmapHandleIn: Integer; largeBitmapHandleIn: Integer; 
                         menuPosIn: Integer; decTemplateTypeIn: Integer): Integer; safecall;
    function OpenModelConfiguration(const pathname: WideString; const configName: WideString): IDispatch; safecall;
    function GetToolbarDock(const ModuleIn: WideString; toolbarIDIn: Integer): Integer; safecall;
    procedure SetToolbarDock(const ModuleIn: WideString; toolbarIDIn: Integer; 
                             docStatePosIn: Integer); safecall;
    function GetMathUtility: IDispatch; safecall;
    function IGetMathUtility: IMathUtility; safecall;
    function OpenDoc4(const fileName: WideString; type_: Integer; options: Integer; 
                      const configuration: WideString; var Errors: Integer): IDispatch; safecall;
    function IOpenDoc4(const fileName: WideString; type_: Integer; options: Integer; 
                       const configuration: WideString; var Errors: Integer): IModelDoc; safecall;
    function IsRapidDraft(const fileName: WideString): WordBool; safecall;
    function GetTemplateSizes(const fileName: WideString): OleVariant; safecall;
    function IGetTemplateSizes(const fileName: WideString; out paperSize: Integer; 
                               out width: Double; out height: Double): WordBool; safecall;
    function GetColorTable: IDispatch; safecall;
    function IGetColorTable: IColorTable; safecall;
    procedure SetMissingReferencePathName(const fileName: WideString); safecall;
    function GetUserUnit(UnitType: Integer): IDispatch; safecall;
    function IGetUserUnit(UnitType: Integer): IUserUnit; safecall;
    function SetMouseDragMode(command: Integer): WordBool; safecall;
    procedure SetPromptFilename(const fileName: WideString); safecall;
    function SetAddinCallbackInfo(ModuleHandle: Integer; const AddinCallbacks: IDispatch; 
                                  Cookie: Integer): WordBool; safecall;
    function AddMenuItem2(DocumentType: Integer; Cookie: Integer; const MenuItem: WideString; 
                          position: Integer; const MenuCallback: WideString; 
                          const MenuEnableMethod: WideString; const HintString: WideString): WordBool; safecall;
    function AddToolbar3(Cookie: Integer; const title: WideString; SmallBitmapResourceID: Integer; 
                         LargeBitmapResourceID: Integer; MenuPositionForToolbar: Integer; 
                         DocumentType: Integer): Integer; safecall;
    function RemoveToolbar2(Cookie: Integer; toolbarId: Integer): WordBool; safecall;
    function AddToolbarCommand2(Cookie: Integer; toolbarId: Integer; toolbarIndex: Integer; 
                                const ButtonCallback: WideString; 
                                const ButtonEnableMethod: WideString; const toolTip: WideString; 
                                const HintString: WideString): WordBool; safecall;
    function ShowToolbar2(Cookie: Integer; toolbarId: Integer): WordBool; safecall;
    function HideToolbar2(Cookie: Integer; toolbarId: Integer): WordBool; safecall;
    function GetToolbarState2(Cookie: Integer; toolbarId: Integer; toolbarState: Integer): WordBool; safecall;
    function GetToolbarDock2(Cookie: Integer; toolbarId: Integer): Integer; safecall;
    function SetToolbarDock2(Cookie: Integer; toolbarId: Integer; DockingState: Integer): WordBool; safecall;
    function Get_IActiveDoc2: IModelDoc2; safecall;
    function IActivateDoc3(const Name: WideString; silent: WordBool; var Errors: Integer): IModelDoc2; safecall;
    function IGetFirstDocument2: IModelDoc2; safecall;
    function INewDocument2(const templateName: WideString; paperSize: Integer; width: Double; 
                           height: Double): IModelDoc2; safecall;
    function IGetOpenDocumentByName2(const documentName: WideString): IModelDoc2; safecall;
    function IOpenDoc5(const fileName: WideString; type_: Integer; options: Integer; 
                       const configuration: WideString; var Errors: Integer): IModelDoc2; safecall;
    function EnumDocuments2: IEnumDocuments2; safecall;
    function CreatePropertyManagerPage(const title: WideString; options: Integer; 
                                       const handler: IDispatch; var Errors: Integer): IDispatch; safecall;
    function ICreatePropertyManagerPage(const title: WideString; options: Integer; 
                                        const handler: IDispatch; var Errors: Integer): IPropertyManagerPage2; safecall;
    function GetAddInObject(const clsid: WideString): IDispatch; safecall;
    function GetProcessID: Integer; safecall;
    function OpenDoc6(const fileName: WideString; type_: Integer; options: Integer; 
                      const configuration: WideString; var Errors: Integer; var Warnings: Integer): IModelDoc2; safecall;
    function AddFileOpenItem2(Cookie: Integer; const MethodName: WideString; 
                              const Description: WideString; const Extension: WideString): WordBool; safecall;
    function RemoveFileOpenItem2(Cookie: Integer; const MethodName: WideString; 
                                 const Description: WideString; const Extension: WideString): WordBool; safecall;
    function AddFileSaveAsItem2(Cookie: Integer; const MethodName: WideString; 
                                const Description: WideString; const Extension: WideString; 
                                DocumentType: Integer): WordBool; safecall;
    function RemoveFileSaveAsItem2(Cookie: Integer; const MethodName: WideString; 
                                   const Description: WideString; const Extension: WideString; 
                                   DocumentType: Integer): WordBool; safecall;
    function AddMenuPopupItem2(DocumentType: Integer; Cookie: Integer; SelectType: Integer; 
                               const PopupItemName: WideString; const MenuCallback: WideString; 
                               const MenuEnableMethod: WideString; const HintString: WideString; 
                               const CustomNames: WideString): WordBool; safecall;
    function RemoveMenuPopupItem2(DocumentType: Integer; Cookie: Integer; SelectType: Integer; 
                                  const PopupItemName: WideString; const MenuCallback: WideString; 
                                  const MenuEnableMethod: WideString; const HintString: WideString; 
                                  const CustomNames: WideString): WordBool; safecall;
    function GetMassProperties2(const filePathName: WideString; 
                                const configurationName: WideString; Accuracy: Integer): OleVariant; safecall;
    function IGetMassProperties2(const filePathName: WideString; 
                                 const configurationName: WideString; var mPropsData: Double; 
                                 Accuracy: Integer): WordBool; safecall;
    procedure HighlightTBButton(cmdID: Integer); safecall;
    function RunMacro(const filePathName: WideString; const moduleName: WideString; 
                      const procedureName: WideString): WordBool; safecall;
    property ActiveDoc: IDispatch read Get_ActiveDoc;
    property IActiveDoc: IModelDoc read Get_IActiveDoc;
    property Visible: WordBool read Get_Visible write Set_Visible;
    property UserControl: WordBool read Get_UserControl write Set_UserControl;
    property ActivePrinter: WideString read Get_ActivePrinter write Set_ActivePrinter;
    property IActiveDoc2: IModelDoc2 read Get_IActiveDoc2;
  end;

// *********************************************************************//
// DispIntf:  ISldWorksDisp
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {83A33D22-27C5-11CE-BFD4-00400513BB57}
// *********************************************************************//
  ISldWorksDisp = dispinterface
    ['{83A33D22-27C5-11CE-BFD4-00400513BB57}']
    property ActiveDoc: IDispatch readonly dispid 1;
    property IActiveDoc: IModelDoc readonly dispid 16;
    function OpenDoc(const Name: WideString; type_: Integer): IDispatch; dispid 2;
    function IOpenDoc(const Name: WideString; type_: Integer): IModelDoc; dispid 17;
    function ActivateDoc(const Name: WideString): IDispatch; dispid 3;
    function IActivateDoc(const Name: WideString): IModelDoc; dispid 18;
    procedure SendMsgToUser(const Message: WideString); dispid 4;
    function Frame: IDispatch; dispid 5;
    function IFrameObject: IFrame; dispid 19;
    procedure ExitApp; dispid 6;
    procedure CloseDoc(const Name: WideString); dispid 7;
    function NewPart: IDispatch; dispid 8;
    function INewPart: IPartDoc; dispid 20;
    function NewAssembly: IDispatch; dispid 9;
    function INewAssembly: IAssemblyDoc; dispid 21;
    function NewDrawing(templateToUse: Integer): IDispatch; dispid 10;
    function INewDrawing(templateToUse: Integer): IDrawingDoc; dispid 22;
    function DateCode: Integer; dispid 11;
    function RevisionNumber: WideString; dispid 12;
    function LoadFile(const fileName: WideString): WordBool; dispid 13;
    function AddFileOpenItem(const CallbackFcnAndModule: WideString; const Description: WideString): WordBool; dispid 14;
    function AddFileSaveAsItem(const CallbackFcnAndModule: WideString; 
                               const Description: WideString; type_: Integer): WordBool; dispid 15;
    procedure PreSelectDwgTemplateSize(templateToUse: Integer; const templateName: WideString); dispid 23;
    procedure DocumentVisible(Visible: WordBool; type_: Integer); dispid 24;
    function DefineAttribute(const Name: WideString): IDispatch; dispid 25;
    function IDefineAttribute(const Name: WideString): IAttributeDef; dispid 26;
    property Visible: WordBool dispid 27;
    property UserControl: WordBool dispid 28;
    procedure DisplayStatusBar(onOff: WordBool); dispid 29;
    procedure CreateNewWindow; dispid 30;
    procedure ArrangeIcons; dispid 31;
    procedure ArrangeWindows(Style: Integer); dispid 32;
    procedure QuitDoc(const Name: WideString); dispid 33;
    function GetModeler: IDispatch; dispid 34;
    function IGetModeler: IModeler; dispid 35;
    function GetEnvironment: IDispatch; dispid 36;
    function IGetEnvironment: IEnvironment; dispid 37;
    function NewDrawing2(templateToUse: Integer; const templateName: WideString; 
                         paperSize: Integer; width: Double; height: Double): IDispatch; dispid 38;
    function INewDrawing2(templateToUse: Integer; const templateName: WideString; 
                          paperSize: Integer; width: Double; height: Double): IDrawingDoc; dispid 39;
    function SetOptions(const Message: WideString): WordBool; dispid 40;
    function PreviewDoc(var hWnd: Integer; const FullName: WideString): WordBool; dispid 41;
    function GetSearchFolders(folderType: Integer): WideString; dispid 42;
    function SetSearchFolders(folderType: Integer; const folders: WideString): WordBool; dispid 43;
    function GetUserPreferenceToggle(userPreferenceToggle: Integer): WordBool; dispid 44;
    procedure SetUserPreferenceToggle(userPreferenceValue: Integer; onFlag: WordBool); dispid 45;
    function GetUserPreferenceDoubleValue(userPreferenceValue: Integer): Double; dispid 46;
    function SetUserPreferenceDoubleValue(userPreferenceValue: Integer; Value: Double): WordBool; dispid 47;
    property ActivePrinter: WideString dispid 48;
    function LoadFile2(const fileName: WideString; const ArgString: WideString): WordBool; dispid 49;
    function GetUserPreferenceIntegerValue(userPreferenceValue: Integer): Integer; dispid 50;
    function SetUserPreferenceIntegerValue(userPreferenceValue: Integer; Value: Integer): WordBool; dispid 51;
    function RemoveMenuPopupItem(DocType: Integer; SelectType: Integer; const Item: WideString; 
                                 const CallbackFcnAndModule: WideString; 
                                 const CustomNames: WideString; Unused: Integer): WordBool; dispid 52;
    function RemoveMenu(DocType: Integer; const MenuItemString: WideString; 
                        const CallbackFcnAndModule: WideString): WordBool; dispid 53;
    function RemoveFileOpenItem(const CallbackFcnAndModule: WideString; 
                                const Description: WideString): WordBool; dispid 54;
    function RemoveFileSaveAsItem(const CallbackFcnAndModule: WideString; 
                                  const Description: WideString; type_: Integer): WordBool; dispid 55;
    function ReplaceReferencedDocument(const referencingDocument: WideString; 
                                       const referencedDocument: WideString; 
                                       const newReference: WideString): WordBool; dispid 56;
    function AddMenuItem(DocType: Integer; const Menu: WideString; Postion: Integer; 
                         const CallbackModuleAndFcn: WideString): Integer; dispid 57;
    function AddMenuPopupItem(DocType: Integer; selType: Integer; const Item: WideString; 
                              const CallbackFcnAndModule: WideString; const CustomNames: WideString): Integer; dispid 58;
    function RemoveUserMenu(DocType: Integer; menuIdIn: Integer; const moduleName: WideString): WordBool; dispid 59;
    function AddToolbar(const moduleName: WideString; const title: WideString; 
                        smallBitmapHandle: Integer; largeBitmapHandle: Integer): Integer; dispid 60;
    function AddToolbarCommand(const moduleName: WideString; toolbarId: Integer; 
                               toolbarIndex: SYSINT; const commandString: WideString): WordBool; dispid 61;
    function ShowToolbar(const moduleName: WideString; toolbarId: Integer): WordBool; dispid 62;
    function HideToolbar(const moduleName: WideString; toolbarId: Integer): WordBool; dispid 63;
    function RemoveToolbar(const Module: WideString; toolbarId: Integer): WordBool; dispid 64;
    function GetToolbarState(const Module: WideString; toolbarId: Integer; toolbarState: Integer): WordBool; dispid 65;
    function GetUserPreferenceStringListValue(userPreference: Integer): WideString; dispid 66;
    procedure SetUserPreferenceStringListValue(userPreference: Integer; const Value: WideString); dispid 67;
    function EnableStereoDisplay(bEnable: WordBool): WordBool; dispid 68;
    function IEnableStereoDisplay(bEnable: WordBool): WordBool; dispid 69;
    function GetDocumentDependencies(const Document: WideString; traverseflag: Integer; 
                                     searchflag: Integer): OleVariant; dispid 70;
    function IGetDocumentDependencies(const Document: WideString; traverseflag: Integer; 
                                      searchflag: Integer): WideString; dispid 71;
    function GetDocumentDependenciesCount(const Document: WideString; traverseflag: Integer; 
                                          searchflag: Integer): Integer; dispid 72;
    function OpenDocSilent(const fileName: WideString; type_: Integer; var Errors: Integer): IDispatch; dispid 73;
    function IOpenDocSilent(const fileName: WideString; type_: Integer; var Errors: Integer): IModelDoc; dispid 74;
    function CallBack(const callBackFunc: WideString; defaultRetVal: Integer; 
                      const callBackArgs: WideString): Integer; dispid 75;
    function SendMsgToUser2(const Message: WideString; icon: Integer; buttons: Integer): Integer; dispid 76;
    function EnumDocuments: IEnumDocuments; dispid 77;
    function LoadAddIn(const fileName: WideString): Integer; dispid 78;
    function UnloadAddIn(const fileName: WideString): Integer; dispid 79;
    function RecordLine(const text: WideString): WordBool; dispid 80;
    function VersionHistory(const fileName: WideString): OleVariant; dispid 81;
    function IVersionHistory(const fileName: WideString): WideString; dispid 82;
    function IGetVersionHistoryCount(const fileName: WideString): SYSINT; dispid 83;
    function AllowFailedFeatureCreation(yesNo: WordBool): WordBool; dispid 84;
    function GetFirstDocument: IDispatch; dispid 85;
    function GetCurrentWorkingDirectory: WideString; dispid 86;
    function SetCurrentWorkingDirectory(const currentWorkingDirectory: WideString): WordBool; dispid 87;
    function GetDataFolder(bShowErrorMsg: WordBool): WideString; dispid 88;
    function GetSelectionFilter(selType: Integer): WordBool; dispid 89;
    procedure SetSelectionFilter(selType: Integer; state: WordBool); dispid 90;
    function ActivateDoc2(const Name: WideString; silent: WordBool; var Errors: Integer): IDispatch; dispid 91;
    function IActivateDoc2(const Name: WideString; silent: WordBool; var Errors: Integer): IModelDoc; dispid 92;
    function GetMouseDragMode(command: Integer): WordBool; dispid 93;
    function GetCurrentLanguage: WideString; dispid 94;
    function IGetFirstDocument: IModelDoc; dispid 95;
    function SanityCheck(swItemToCheck: Integer; var P1: Integer; var P2: Integer): WordBool; dispid 96;
    function AddMenu(DocType: Integer; const Menu: WideString; position: Integer): Integer; dispid 97;
    function CheckpointConvertedDocument(const docName: WideString): Integer; dispid 98;
    function OpenDoc2(const fileName: WideString; type_: Integer; ReadOnly: WordBool; 
                      viewOnly: WordBool; silent: WordBool; var Errors: Integer): IDispatch; dispid 99;
    function IOpenDoc2(const fileName: WideString; type_: Integer; ReadOnly: WordBool; 
                       viewOnly: WordBool; silent: WordBool; var Errors: Integer): IModelDoc; dispid 100;
    function GetMassProperties(const filePathName: WideString; const configurationName: WideString): OleVariant; dispid 101;
    function IGetMassProperties(const filePathName: WideString; 
                                const configurationName: WideString; var mPropsData: Double): WordBool; dispid 102;
    function GetLocalizedMenuName(menuId: Integer): WideString; dispid 103;
    function GetDocumentDependencies2(const Document: WideString; traverseflag: WordBool; 
                                      searchflag: WordBool; addReadOnlyInfo: WordBool): OleVariant; dispid 104;
    function IGetDocumentDependencies2(const Document: WideString; traverseflag: WordBool; 
                                       searchflag: WordBool; addReadOnlyInfo: WordBool): WideString; dispid 105;
    function IGetDocumentDependenciesCount2(const Document: WideString; traverseflag: WordBool; 
                                            searchflag: WordBool; addReadOnlyInfo: WordBool): Integer; dispid 106;
    function GetSelectionFilters: OleVariant; dispid 107;
    procedure SetSelectionFilters(selType: OleVariant; state: WordBool); dispid 108;
    function GetApplySelectionFilter: WordBool; dispid 109;
    procedure SetApplySelectionFilter(state: WordBool); dispid 110;
    function NewDocument(const templateName: WideString; paperSize: Integer; width: Double; 
                         height: Double): IDispatch; dispid 111;
    function INewDocument(const templateName: WideString; paperSize: Integer; width: Double; 
                          height: Double): IModelDoc; dispid 112;
    function GetDocumentTemplate(mode: Integer; const templateName: WideString; paperSize: Integer; 
                                 width: Double; height: Double): WideString; dispid 113;
    function IGetSelectionFiltersCount: Integer; dispid 114;
    function IGetSelectionFilters: Integer; dispid 115;
    procedure ISetSelectionFilters(count: Integer; var selType: Integer; state: WordBool); dispid 116;
    function GetCurrSolidWorksRegSubKey: WideString; dispid 117;
    procedure SolidWorksExplorer; dispid 118;
    function GetUserPreferenceStringValue(userPreference: Integer): WideString; dispid 119;
    function SetUserPreferenceStringValue(userPreference: Integer; const Value: WideString): WordBool; dispid 120;
    function GetCurrentMacroPathName: WideString; dispid 121;
    function GetOpenDocumentByName(const documentName: WideString): IDispatch; dispid 122;
    function IGetOpenDocumentByName(const documentName: WideString): IModelDoc; dispid 123;
    procedure GetCurrentKernelVersions(out version1: WideString; out version2: WideString; 
                                       out version3: WideString); dispid 124;
    function CreatePrunedModelArchive(const pathname: WideString; const zipPathName: WideString): WideString; dispid 125;
    function OpenDoc3(const fileName: WideString; type_: Integer; ReadOnly: WordBool; 
                      viewOnly: WordBool; RapidDraft: WordBool; silent: WordBool; 
                      var Errors: Integer): IDispatch; dispid 126;
    function IOpenDoc3(const fileName: WideString; type_: Integer; ReadOnly: WordBool; 
                       viewOnly: WordBool; RapidDraft: WordBool; silent: WordBool; 
                       var Errors: Integer): IModelDoc; dispid 127;
    function AddToolbar2(const moduleNameIn: WideString; const titleIn: WideString; 
                         smallBitmapHandleIn: Integer; largeBitmapHandleIn: Integer; 
                         menuPosIn: Integer; decTemplateTypeIn: Integer): Integer; dispid 128;
    function OpenModelConfiguration(const pathname: WideString; const configName: WideString): IDispatch; dispid 129;
    function GetToolbarDock(const ModuleIn: WideString; toolbarIDIn: Integer): Integer; dispid 130;
    procedure SetToolbarDock(const ModuleIn: WideString; toolbarIDIn: Integer; 
                             docStatePosIn: Integer); dispid 131;
    function GetMathUtility: IDispatch; dispid 132;
    function IGetMathUtility: IMathUtility; dispid 133;
    function OpenDoc4(const fileName: WideString; type_: Integer; options: Integer; 
                      const configuration: WideString; var Errors: Integer): IDispatch; dispid 134;
    function IOpenDoc4(const fileName: WideString; type_: Integer; options: Integer; 
                       const configuration: WideString; var Errors: Integer): IModelDoc; dispid 135;
    function IsRapidDraft(const fileName: WideString): WordBool; dispid 136;
    function GetTemplateSizes(const fileName: WideString): OleVariant; dispid 137;
    function IGetTemplateSizes(const fileName: WideString; out paperSize: Integer; 
                               out width: Double; out height: Double): WordBool; dispid 138;
    function GetColorTable: IDispatch; dispid 139;
    function IGetColorTable: IColorTable; dispid 140;
    procedure SetMissingReferencePathName(const fileName: WideString); dispid 141;
    function GetUserUnit(UnitType: Integer): IDispatch; dispid 142;
    function IGetUserUnit(UnitType: Integer): IUserUnit; dispid 143;
    function SetMouseDragMode(command: Integer): WordBool; dispid 144;
    procedure SetPromptFilename(const fileName: WideString); dispid 145;
    function SetAddinCallbackInfo(ModuleHandle: Integer; const AddinCallbacks: IDispatch; 
                                  Cookie: Integer): WordBool; dispid 146;
    function AddMenuItem2(DocumentType: Integer; Cookie: Integer; const MenuItem: WideString; 
                          position: Integer; const MenuCallback: WideString; 
                          const MenuEnableMethod: WideString; const HintString: WideString): WordBool; dispid 147;
    function AddToolbar3(Cookie: Integer; const title: WideString; SmallBitmapResourceID: Integer; 
                         LargeBitmapResourceID: Integer; MenuPositionForToolbar: Integer; 
                         DocumentType: Integer): Integer; dispid 148;
    function RemoveToolbar2(Cookie: Integer; toolbarId: Integer): WordBool; dispid 149;
    function AddToolbarCommand2(Cookie: Integer; toolbarId: Integer; toolbarIndex: Integer; 
                                const ButtonCallback: WideString; 
                                const ButtonEnableMethod: WideString; const toolTip: WideString; 
                                const HintString: WideString): WordBool; dispid 150;
    function ShowToolbar2(Cookie: Integer; toolbarId: Integer): WordBool; dispid 151;
    function HideToolbar2(Cookie: Integer; toolbarId: Integer): WordBool; dispid 152;
    function GetToolbarState2(Cookie: Integer; toolbarId: Integer; toolbarState: Integer): WordBool; dispid 153;
    function GetToolbarDock2(Cookie: Integer; toolbarId: Integer): Integer; dispid 154;
    function SetToolbarDock2(Cookie: Integer; toolbarId: Integer; DockingState: Integer): WordBool; dispid 155;
    property IActiveDoc2: IModelDoc2 readonly dispid 156;
    function IActivateDoc3(const Name: WideString; silent: WordBool; var Errors: Integer): IModelDoc2; dispid 157;
    function IGetFirstDocument2: IModelDoc2; dispid 158;
    function INewDocument2(const templateName: WideString; paperSize: Integer; width: Double; 
                           height: Double): IModelDoc2; dispid 159;
    function IGetOpenDocumentByName2(const documentName: WideString): IModelDoc2; dispid 160;
    function IOpenDoc5(const fileName: WideString; type_: Integer; options: Integer; 
                       const configuration: WideString; var Errors: Integer): IModelDoc2; dispid 161;
    function EnumDocuments2: IEnumDocuments2; dispid 162;
    function CreatePropertyManagerPage(const title: WideString; options: Integer; 
                                       const handler: IDispatch; var Errors: Integer): IDispatch; dispid 163;
    function ICreatePropertyManagerPage(const title: WideString; options: Integer; 
                                        const handler: IDispatch; var Errors: Integer): IPropertyManagerPage2; dispid 164;
    function GetAddInObject(const clsid: WideString): IDispatch; dispid 165;
    function GetProcessID: Integer; dispid 166;
    function OpenDoc6(const fileName: WideString; type_: Integer; options: Integer; 
                      const configuration: WideString; var Errors: Integer; var Warnings: Integer): IModelDoc2; dispid 167;
    function AddFileOpenItem2(Cookie: Integer; const MethodName: WideString; 
                              const Description: WideString; const Extension: WideString): WordBool; dispid 168;
    function RemoveFileOpenItem2(Cookie: Integer; const MethodName: WideString; 
                                 const Description: WideString; const Extension: WideString): WordBool; dispid 169;
    function AddFileSaveAsItem2(Cookie: Integer; const MethodName: WideString; 
                                const Description: WideString; const Extension: WideString; 
                                DocumentType: Integer): WordBool; dispid 170;
    function RemoveFileSaveAsItem2(Cookie: Integer; const MethodName: WideString; 
                                   const Description: WideString; const Extension: WideString; 
                                   DocumentType: Integer): WordBool; dispid 171;
    function AddMenuPopupItem2(DocumentType: Integer; Cookie: Integer; SelectType: Integer; 
                               const PopupItemName: WideString; const MenuCallback: WideString; 
                               const MenuEnableMethod: WideString; const HintString: WideString; 
                               const CustomNames: WideString): WordBool; dispid 172;
    function RemoveMenuPopupItem2(DocumentType: Integer; Cookie: Integer; SelectType: Integer; 
                                  const PopupItemName: WideString; const MenuCallback: WideString; 
                                  const MenuEnableMethod: WideString; const HintString: WideString; 
                                  const CustomNames: WideString): WordBool; dispid 173;
    function GetMassProperties2(const filePathName: WideString; 
                                const configurationName: WideString; Accuracy: Integer): OleVariant; dispid 174;
    function IGetMassProperties2(const filePathName: WideString; 
                                 const configurationName: WideString; var mPropsData: Double; 
                                 Accuracy: Integer): WordBool; dispid 175;
    procedure HighlightTBButton(cmdID: Integer); dispid 176;
    function RunMacro(const filePathName: WideString; const moduleName: WideString; 
                      const procedureName: WideString): WordBool; dispid 177;
  end;

// *********************************************************************//
// Interface: IModelDoc
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {83A33D46-27C5-11CE-BFD4-00400513BB57}
// *********************************************************************//
  IModelDoc = interface(IDispatch)
    ['{83A33D46-27C5-11CE-BFD4-00400513BB57}']
    function Get_SelectionManager: IDispatch; safecall;
    function Get_ISelectionManager: ISelectionMgr; safecall;
    procedure Set_SelectionManager(const retval: IDispatch); safecall;
    function Get_ActiveView: IDispatch; safecall;
    function Get_IActiveView: IModelView; safecall;
    procedure Set_ActiveView(const retval: IDispatch); safecall;
    function Get_LengthUnit: Integer; safecall;
    procedure Set_LengthUnit(retval: Integer); safecall;
    function Get_LightSourceUserName(id: Integer): WideString; safecall;
    procedure Set_LightSourceUserName(id: Integer; const retval: WideString); safecall;
    function Get_LightSourcePropertyValues(id: Integer): OleVariant; safecall;
    procedure Set_LightSourcePropertyValues(id: Integer; retval: OleVariant); safecall;
    function Get_SceneName: WideString; safecall;
    procedure Set_SceneName(const retval: WideString); safecall;
    function Get_SceneUserName: WideString; safecall;
    procedure Set_SceneUserName(const retval: WideString); safecall;
    procedure FeatureFillet(r1: Double; propagate: WordBool; ftyp: WordBool; varRadTyp: WordBool; 
                            overFlowType: Integer); safecall;
    procedure GridOptions(dispGrid: WordBool; gridSpacing: Double; snap: WordBool; 
                          dotStyle: WordBool; nMajor: Smallint; nMinor: Smallint; 
                          align2edge: WordBool; angleSnap: WordBool; angleUnit: Double; 
                          minorAuto: WordBool); safecall;
    procedure SetUnits(uType: Smallint; fractBase: Smallint; fractDenom: Smallint; 
                       sigDigits: Smallint; roundToFraction: WordBool); safecall;
    procedure LBDownAt(flags: Integer; x: Double; y: Double; z: Double); safecall;
    procedure LBUpAt(flags: Integer; x: Double; y: Double; z: Double); safecall;
    procedure DragTo(flags: Integer; x: Double; y: Double; z: Double); safecall;
    procedure SelectAt(flags: Integer; x: Double; y: Double; z: Double); safecall;
    procedure CreateLineVB(x1: Double; y1: Double; z1: Double; x2: Double; y2: Double; z2: Double); safecall;
    function CreateLine(P1: OleVariant; P2: OleVariant): WordBool; safecall;
    procedure CreateCenterLineVB(x1: Double; y1: Double; z1: Double; x2: Double; y2: Double; 
                                 z2: Double); safecall;
    function CreateCenterLine(P1: OleVariant; P2: OleVariant): WordBool; safecall;
    procedure CreateArcVB(p1x: Double; p1y: Double; p1z: Double; p2x: Double; p2y: Double; 
                          p2z: Double; p3x: Double; p3y: Double; p3z: Double; dir: Smallint); safecall;
    function CreateArc(P1: OleVariant; P2: OleVariant; P3: OleVariant; dir: Smallint): WordBool; safecall;
    procedure CreateCircleVB(p1x: Double; p1y: Double; p1z: Double; radius: Double); safecall;
    function CreateCircleByRadius(P1: OleVariant; radius: Double): WordBool; safecall;
    function GetLines: OleVariant; safecall;
    procedure SketchTrim(op: Integer; selEnd: Integer; x: Double; y: Double); safecall;
    procedure SketchOffsetEdges(val: Double); safecall;
    procedure SketchRectangle(val1: Double; val2: Double; z1: Double; val3: Double; val4: Double; 
                              z2: Double; val5: WordBool); safecall;
    procedure SketchPoint(x: Double; y: Double; z: Double); safecall;
    procedure FeatureCut(sd: WordBool; flip: WordBool; dir: WordBool; t1: Integer; t2: Integer; 
                         d1: Double; d2: Double; dchk1: WordBool; dchk2: WordBool; ddir1: WordBool; 
                         ddir2: WordBool; dang1: Double; dang2: Double; offsetReverse1: WordBool; 
                         offsetReverse2: WordBool); safecall;
    procedure FeatureBoss(sd: WordBool; flip: WordBool; dir: WordBool; t1: Integer; t2: Integer; 
                          d1: Double; d2: Double; dchk1: WordBool; dchk2: WordBool; 
                          ddir1: WordBool; ddir2: WordBool; dang1: Double; dang2: Double; 
                          offsetReverse1: WordBool; offsetReverse2: WordBool); safecall;
    procedure SimpleHole(sd: WordBool; flip: WordBool; dir: WordBool; t1: Integer; t2: Integer; 
                         d1: Double; d2: Double; dchk1: WordBool; dchk2: WordBool; ddir1: WordBool; 
                         ddir2: WordBool; dang1: Double; dang2: Double; offsetReverse1: WordBool; 
                         offsetReverse2: WordBool); safecall;
    procedure FeatureLinearPattern(num1: Integer; spacing1: Double; num2: Integer; 
                                   spacing2: Double; flipDir1: WordBool; flipDir2: WordBool; 
                                   const dName1: WideString; const dName2: WideString); safecall;
    procedure NameView(const vName: WideString); safecall;
    procedure ShowNamedView(const vName: WideString); safecall;
    procedure CreatePlaneAtOffset(val: Double; flipDir: WordBool); safecall;
    procedure Toolbars(m: WordBool; vw: WordBool; skMain: WordBool; sk: WordBool; feat: WordBool; 
                       constr: WordBool; macro: WordBool); safecall;
    procedure CreatePlaneAtAngle(val: Double; flipDir: WordBool); safecall;
    procedure SetParamValue(val: Double); safecall;
    procedure AddRelation(const relStr: WideString); safecall;
    procedure DeleteAllRelations; safecall;
    procedure HoleWizard(depth: Double; endType: Smallint; flip: WordBool; dir: WordBool; 
                         hType: Integer; d1: Double; d2: Double; d3: Double; d4: Double; 
                         d5: Double; d6: Double; d7: Double; d8: Double; d9: Double; d10: Double; 
                         d11: Double; d12: Double); safecall;
    function SaveAs(const newName: WideString): WordBool; safecall;
    procedure ActivateSelectedFeature; safecall;
    procedure SelectByName(flags: Integer; const idStr: WideString); safecall;
    procedure SketchAddConstraints(const idStr: WideString); safecall;
    procedure SketchConstraintsDel(constrInd: Integer; const idStr: WideString); safecall;
    procedure SketchConstraintsDelAll; safecall;
    procedure Lock; safecall;
    procedure UnLock; safecall;
    procedure InsertFeatureShell(thickness: Double; outward: WordBool); safecall;
    procedure SketchFillet(rad: Double); safecall;
    procedure FeatureChamfer(width: Double; angle: Double; flip: WordBool); safecall;
    procedure InsertMfDraft(angle: Double; flipDir: WordBool; isEdgeDraft: WordBool; 
                            propType: Integer); safecall;
    procedure ParentChildRelationship; safecall;
    procedure SketchSpline(morePts: Integer; x: Double; y: Double; z: Double); safecall;
    procedure SelectSketchPoint(x: Double; y: Double; incidence: Integer); safecall;
    procedure SelectSketchLine(x0: Double; y0: Double; inc0: Integer; x1: Double; y1: Double; 
                               inc1: Integer); safecall;
    procedure SelectSketchArc(x0: Double; y0: Double; inc0: Integer; x1: Double; y1: Double; 
                              inc1: Integer; xC: Double; yC: Double; incC: Integer; rotDir: Integer); safecall;
    procedure SelectSketchSpline(size: Integer; x0: Double; y0: Double; inc0: Integer; x1: Double; 
                                 y1: Double; inc1: Integer; xC: Double; yC: Double; incC: Integer); safecall;
    function CreateTangentArc(p1x: Double; p1y: Double; p1z: Double; p2x: Double; p2y: Double; 
                              p2z: Double): WordBool; safecall;
    function Create3PointArc(p1x: Double; p1y: Double; p1z: Double; p2x: Double; p2y: Double; 
                             p2z: Double; p3x: Double; p3y: Double; p3z: Double): WordBool; safecall;
    function CreateArcByCenter(p1x: Double; p1y: Double; p1z: Double; p2x: Double; p2y: Double; 
                               p2z: Double; p3x: Double; p3y: Double; p3z: Double): WordBool; safecall;
    function CreateCircle(p1x: Double; p1y: Double; p1z: Double; p2x: Double; p2y: Double; 
                          p2z: Double): WordBool; safecall;
    function AddDimension(x: Double; y: Double; z: Double): WordBool; safecall;
    function AddHorizontalDimension(x: Double; y: Double; z: Double): WordBool; safecall;
    function AddVerticalDimension(x: Double; y: Double; z: Double): WordBool; safecall;
    function SelectSketchItem(selOpt: Integer; const Name: WideString; x: Double; y: Double; 
                              z: Double): WordBool; safecall;
    procedure ClearSelection; safecall;
    procedure Select(const selID: WideString; const selParams: WideString; x: Double; y: Double; 
                     z: Double); safecall;
    procedure AndSelect(const selID: WideString; const selParams: WideString; x: Double; y: Double; 
                        z: Double); safecall;
    function CreatePoint(pointX: Double; pointY: Double; pointZ: Double): WordBool; safecall;
    function CreateLineDB(sx: Double; sy: Double; sz: Double; ex: Double; ey: Double; ez: Double): WordBool; safecall;
    function CreateArcDB(x1: Double; y1: Double; z1: Double; x2: Double; y2: Double; z2: Double; 
                         x3: Double; y3: Double; z3: Double; dir: Smallint): WordBool; safecall;
    function CreateCircleDB(cx: Double; cy: Double; cz: Double; radius: Double): WordBool; safecall;
    function CreatePointDB(x: Double; y: Double; z: Double): WordBool; safecall;
    function GetTitle: WideString; safecall;
    function GetPathName: WideString; safecall;
    function GetType: Integer; safecall;
    procedure InsertObject; safecall;
    procedure EditClearAll; safecall;
    procedure EditCopy; safecall;
    procedure EditCut; safecall;
    procedure ObjectDisplayContent; safecall;
    procedure ObjectDisplayAsIcon; safecall;
    procedure ObjectResetsize; safecall;
    procedure WindowRedraw; safecall;
    procedure Dummy3; safecall;
    procedure SetPickMode; safecall;
    procedure ViewRotateminusx; safecall;
    procedure ViewRotateminusy; safecall;
    procedure ViewRotateminusz; safecall;
    procedure ViewRotateplusx; safecall;
    procedure ViewRotateplusy; safecall;
    procedure ViewRotateplusz; safecall;
    procedure ViewTranslateminusx; safecall;
    procedure ViewTranslateminusy; safecall;
    procedure ViewTranslateplusx; safecall;
    procedure ViewTranslateplusy; safecall;
    procedure ViewRotXMinusNinety; safecall;
    procedure ViewRotYMinusNinety; safecall;
    procedure ViewRotYPlusNinety; safecall;
    procedure ViewZoomin; safecall;
    procedure ViewZoomout; safecall;
    procedure ViewDisplayHiddenremoved; safecall;
    procedure ViewDisplayWireframe; safecall;
    procedure ViewDisplayShaded; safecall;
    procedure ViewRwShading; safecall;
    procedure ViewOglShading; safecall;
    procedure ViewZoomtofit; safecall;
    procedure ViewRotate; safecall;
    procedure ViewTranslate; safecall;
    procedure ViewZoomto; safecall;
    procedure ViewDisplayHiddengreyed; safecall;
    procedure ViewDisplayFaceted; safecall;
    procedure ViewConstraint; safecall;
    procedure UserFavors; safecall;
    procedure FeatureCirPattern(num: Integer; spacing: Double; flipDir: WordBool; 
                                const dName: WideString); safecall;
    procedure EditSketch; safecall;
    procedure FeatEdit; safecall;
    procedure FeatEditDef; safecall;
    procedure InsertPoint; safecall;
    procedure InsertFamilyTableNew; safecall;
    procedure Dummy1; safecall;
    procedure InsertFamilyTableEdit; safecall;
    procedure Dummy2; safecall;
    procedure ToolsMacro; safecall;
    procedure ToolsGrid; safecall;
    procedure SketchCenterline; safecall;
    procedure SketchAlign; safecall;
    procedure SketchArc; safecall;
    procedure SketchTangentArc; safecall;
    procedure SketchCircle; safecall;
    procedure SketchUndo; safecall;
    procedure UserPreferences; safecall;
    procedure Lights; safecall;
    procedure SketchConstrainCoincident; safecall;
    procedure SketchConstrainConcentric; safecall;
    procedure SketchConstrainPerp; safecall;
    procedure SketchConstrainTangent; safecall;
    procedure SketchConstrainParallel; safecall;
    procedure SketchUseEdge; safecall;
    procedure SketchUseEdgeCtrline; safecall;
    procedure SketchMirror; safecall;
    procedure Save; safecall;
    procedure Close; safecall;
    procedure ViewDispRefaxes; safecall;
    procedure ViewDispRefplanes; safecall;
    procedure InsertSketch; safecall;
    procedure InsertProtrusionSwept(propagate: WordBool; alignment: WordBool; 
                                    keepNormalConstant: WordBool); safecall;
    procedure InsertProtrusionBlend(closed: WordBool); safecall;
    procedure ToolsMassProps; safecall;
    procedure PropertySheet; safecall;
    procedure BlankRefGeom; safecall;
    procedure UnBlankRefGeom; safecall;
    procedure EditDelete; safecall;
    procedure InsertProjectedSketch; safecall;
    function CreatePlaneFixed(P1: OleVariant; P2: OleVariant; P3: OleVariant; useGlobal: WordBool): WordBool; safecall;
    procedure Dummy5; safecall;
    procedure Dummy6; safecall;
    procedure DebugCheckBody; safecall;
    procedure Dummy8; safecall;
    procedure DimPreferences; safecall;
    procedure UnblankSketch; safecall;
    procedure EditSketchOrSingleSketchFeature; safecall;
    procedure DebugCheckIgesGeom; safecall;
    procedure BlankSketch; safecall;
    function GetDefaultTextHeight: Double; safecall;
    function IsActive(const compStr: WideString): WordBool; safecall;
    function CreateEllipse(center: OleVariant; major: OleVariant; minor: OleVariant): WordBool; safecall;
    function CreateEllipseVB(centerX: Double; centerY: Double; centerZ: Double; majorX: Double; 
                             majorY: Double; majorZ: Double; minorX: Double; minorY: Double; 
                             minorZ: Double): WordBool; safecall;
    function CreateEllipticalArcByCenter(center: OleVariant; major: OleVariant; minor: OleVariant; 
                                         start: OleVariant; end_: OleVariant): WordBool; safecall;
    function CreateEllipticalArcByCenterVB(centerX: Double; centerY: Double; centerZ: Double; 
                                           majorX: Double; majorY: Double; majorZ: Double; 
                                           minorX: Double; minorY: Double; minorZ: Double; 
                                           startX: Double; startY: Double; startZ: Double; 
                                           endX: Double; endY: Double; endZ: Double): WordBool; safecall;
    function GetActiveSketch: IDispatch; safecall;
    function IGetActiveSketch: ISketch; safecall;
    function GetTessellationQuality: Integer; safecall;
    procedure SetTessellationQuality(qualityNum: Integer); safecall;
    function Parameter(const stringIn: WideString): IDispatch; safecall;
    function IParameter(const stringIn: WideString): IDimension; safecall;
    function SelectByID(const selID: WideString; const selParams: WideString; x: Double; y: Double; 
                        z: Double): WordBool; safecall;
    function AndSelectByID(const selID: WideString; const selParams: WideString; x: Double; 
                           y: Double; z: Double): WordBool; safecall;
    procedure Insert3DSketch; safecall;
    function GetLightSourceName(id: Integer): WideString; safecall;
    function AddLightSource(const idName: WideString; lTyp: SYSINT; const userName: WideString): WordBool; safecall;
    function AddLightSourceExtProperty(id: Integer; PropertyExtension: OleVariant): Integer; safecall;
    procedure ResetLightSourceExtProperty(id: Integer); safecall;
    procedure DeleteLightSource(id: Integer); safecall;
    function GetLightSourceExtProperty(id: Integer; PropertyId: Integer): OleVariant; safecall;
    function AddLightToScene(const lpszNewValue: WideString): Integer; safecall;
    function AddSceneExtProperty(PropertyExtension: OleVariant): Integer; safecall;
    procedure ResetSceneExtProperty; safecall;
    function GetSceneExtProperty(PropertyId: Integer): OleVariant; safecall;
    procedure FileSummaryInfo; safecall;
    function GetGridSettings: OleVariant; safecall;
    procedure ToolsSketchTranslate; safecall;
    procedure ToolsDistance; safecall;
    procedure SkToolsAutoConstr; safecall;
    procedure ToolsSketchScale; safecall;
    procedure Paste; safecall;
    procedure ToolsConfiguration; safecall;
    procedure EntityProperties; safecall;
    function GetArcCentersDisplayed: WordBool; safecall;
    procedure SetArcCentersDisplayed(setting: WordBool); safecall;
    procedure AutoSolveToggle; safecall;
    procedure Dummy7; safecall;
    function IGetLines: Double; safecall;
    function GetLineCount: Integer; safecall;
    procedure ICreateEllipse(var center: Double; var major: Double; var minor: Double); safecall;
    procedure ICreateEllipticalArcByCenter(var center: Double; var major: Double; 
                                           var minor: Double; var start: Double; var end_: Double); safecall;
    function Get_ILightSourcePropertyValues(id: Integer): Double; safecall;
    procedure Set_ILightSourcePropertyValues(id: Integer; var retval: Double); safecall;
    procedure InsertCutSwept(propagate: WordBool; alignment: WordBool; keepNormalConstant: WordBool); safecall;
    procedure InsertCutBlend(closed: WordBool); safecall;
    procedure InsertHelix(reversed: WordBool; clockwised: WordBool; tapered: WordBool; 
                          outward: WordBool; helixdef: Integer; height: Double; pitch: Double; 
                          revolution: Double; taperangle: Double; startangle: Double); safecall;
    procedure ICreateLine(var P1: Double; var P2: Double); safecall;
    procedure ICreateCenterLine(var P1: Double; var P2: Double); safecall;
    procedure ICreateArc(var P1: Double; var P2: Double; var P3: Double; dir: Smallint); safecall;
    procedure ICreateCircleByRadius(var P1: Double; radius: Double); safecall;
    procedure GraphicsRedraw; safecall;
    function GetVisibilityOfConstructPlanes: WordBool; safecall;
    function GetDisplayWhenAdded: WordBool; safecall;
    procedure SetDisplayWhenAdded(setting: WordBool); safecall;
    function GetAddToDB: WordBool; safecall;
    procedure SetAddToDB(setting: WordBool); safecall;
    function DeSelectByID(const selID: WideString; const selParams: WideString; x: Double; 
                          y: Double; z: Double): WordBool; safecall;
    function Get_Visible: WordBool; safecall;
    procedure Set_Visible(retval: WordBool); safecall;
    procedure PrintDirect; safecall;
    procedure PrintPreview; safecall;
    procedure Quit; safecall;
    procedure CreatePlaneThru3Points; safecall;
    procedure ViewRotXPlusNinety; safecall;
    function GetUnits: OleVariant; safecall;
    procedure SetAngularUnits(uType: Smallint; fractBase: Smallint; fractDenom: Smallint; 
                              sigDigits: Smallint); safecall;
    function GetAngularUnits: OleVariant; safecall;
    function IGetUnits: Smallint; safecall;
    procedure ISetAngularUnits(uType: Smallint; fractBase: Smallint; fractDenom: Smallint; 
                               sigDigits: Smallint); safecall;
    function IGetAngularUnits: Smallint; safecall;
    procedure ShowConfiguration(const configurationName: WideString); safecall;
    procedure ResetConfiguration; safecall;
    procedure AddConfiguration(const Name: WideString; const comment: WideString; 
                               const alternateName: WideString; suppressByDefault: WordBool; 
                               hideByDefault: WordBool; minFeatureManager: WordBool; 
                               inheritProperties: WordBool; flags: LongWord); safecall;
    procedure DeleteConfiguration(const configurationName: WideString); safecall;
    procedure EditConfiguration(const Name: WideString; const newName: WideString; 
                                const comment: WideString; const alternateName: WideString; 
                                suppressByDefault: WordBool; hideByDefault: WordBool; 
                                minFeatureManager: WordBool; inheritProperties: WordBool; 
                                flags: LongWord); safecall;
    procedure CreatePlanePerCurveAndPassPoint(origAtCurve: WordBool); safecall;
    function CreateFeatureMgrView(var bitmap: Integer): IDispatch; safecall;
    function AddFeatureMgrView(var bitmap: Integer; var appView: Integer): WordBool; safecall;
    function GetStandardViewRotation(viewId: Integer): OleVariant; safecall;
    function IGetStandardViewRotation(viewId: Integer): Double; safecall;
    procedure FeatureExtruRefSurface(sd: WordBool; flip: WordBool; dir: WordBool; t1: Integer; 
                                     t2: Integer; d1: Double; d2: Double; dchk1: WordBool; 
                                     dchk2: WordBool; ddir1: WordBool; ddir2: WordBool; 
                                     dang1: Double; dang2: Double; offsetReverse1: WordBool; 
                                     offsetReverse2: WordBool); safecall;
    function IGet3rdPartyStorage(const stringIn: WideString; isStoring: WordBool): IUnknown; safecall;
    procedure DeleteFeatureMgrView(var appView: Integer); safecall;
    function GetMassProperties: OleVariant; safecall;
    function IGetMassProperties(var mPropsData: Double): WordBool; safecall;
    function GetLightSourceCount: Integer; safecall;
    function GetLightSourceIdFromName(const lightName: WideString): Integer; safecall;
    procedure SetNextSelectionGroupId(id: Integer); safecall;
    procedure ISetNextSelectionGroupId(id: Integer); safecall;
    function InsertMidSurfaceExt(placement: Double; knitFlag: WordBool): IDispatch; safecall;
    function IInsertMidSurfaceExt(placement: Double; knitFlag: WordBool): IMidSurface; safecall;
    procedure ICreatePlaneFixed(var P1: Double; var P2: Double; var P3: Double; useGlobal: WordBool); safecall;
    function SelectByMark(const selID: WideString; const selParams: WideString; x: Double; 
                          y: Double; z: Double; mark: Integer): WordBool; safecall;
    function AndSelectByMark(const selID: WideString; const selParams: WideString; x: Double; 
                             y: Double; z: Double; mark: Integer): WordBool; safecall;
    function GetDependencies(traverseflag: Integer; searchflag: Integer): OleVariant; safecall;
    function IGetDependencies(traverseflag: Integer; searchflag: Integer): WideString; safecall;
    function GetNumDependencies(traverseflag: Integer; searchflag: Integer): Integer; safecall;
    function IGetNumDependencies(traverseflag: Integer; searchflag: Integer): Integer; safecall;
    function FirstFeature: IDispatch; safecall;
    function IFirstFeature: IFeature; safecall;
    procedure UnderiveSketch; safecall;
    procedure DeriveSketch; safecall;
    function IsExploded: WordBool; safecall;
    function DeleteSelection(confirmFlag: WordBool): WordBool; safecall;
    function DeleteNamedView(const viewname: WideString): WordBool; safecall;
    function SetLightSourceName(id: Integer; const newName: WideString): WordBool; safecall;
    procedure Insert3DSplineCurve(curveClosed: WordBool); safecall;
    function SetLightSourcePropertyValuesVB(const idName: WideString; lType: SYSINT; diff: Double; 
                                            rgbColor: Integer; dist: Double; dirX: Double; 
                                            dirY: Double; dirZ: Double; spotDirX: Double; 
                                            spotDirY: Double; spotDirZ: Double; spotAngle: Double; 
                                            fallOff0: Double; fallOff1: Double; fallOff2: Double; 
                                            ambient: Double; specular: Double; 
                                            spotExponent: Double; bDisable: WordBool): WordBool; safecall;
    function ICreateFeatureMgrView(var bitmap: Integer): IFeatMgrView; safecall;
    function SelectedEdgeProperties(const edgeName: WideString): WordBool; safecall;
    function SelectedFaceProperties(rgbColor: Integer; ambient: Double; diffuse: Double; 
                                    specular: Double; shininess: Double; transparency: Double; 
                                    emission: Double; usePartProps: WordBool; 
                                    const faceName: WideString): WordBool; safecall;
    function SelectedFeatureProperties(rgbColor: Integer; ambient: Double; diffuse: Double; 
                                       specular: Double; shininess: Double; transparency: Double; 
                                       emission: Double; usePartProps: WordBool; 
                                       suppressed: WordBool; const featureName: WideString): WordBool; safecall;
    procedure InsertSplitLineSil; safecall;
    procedure InsertSplitLineProject(isDirectional: WordBool; flipDir: WordBool); safecall;
    procedure InsertRib(is2Sided: WordBool; reverseThicknessDir: WordBool; thickness: Double; 
                        referenceEdgeIndex: Integer; reverseMaterialDir: WordBool; 
                        isDrafted: WordBool; draftOutward: WordBool; draftAngle: Double); safecall;
    function AddRadialDimension(x: Double; y: Double; z: Double): WordBool; safecall;
    function AddDiameterDimension(x: Double; y: Double; z: Double): WordBool; safecall;
    function GetModelViewNames: OleVariant; safecall;
    function IGetModelViewNames: WideString; safecall;
    function GetModelViewCount: SYSINT; safecall;
    function GetUserPreferenceDoubleValue(userPreferenceValue: Integer): Double; safecall;
    function SetUserPreferenceDoubleValue(userPreferenceValue: Integer; Value: Double): WordBool; safecall;
    procedure ViewDisplayCurvature; safecall;
    procedure Scale; safecall;
    procedure AddIns; safecall;
    function InsertCurveFile(const fileName: WideString): WordBool; safecall;
    procedure InsertCurveFileBegin; safecall;
    function InsertCurveFilePoint(x: Double; y: Double; z: Double): WordBool; safecall;
    function InsertCurveFileEnd: WordBool; safecall;
    function ChangeSketchPlane: WordBool; safecall;
    procedure ViewOrientationUndo; safecall;
    procedure PrintOut(fromPage: Integer; toPage: Integer; numCopies: Integer; collate: WordBool; 
                       const printer: WideString; Scale: Double; printToFile: WordBool); safecall;
    procedure SketchOffsetEntities(offset: Double; flip: WordBool); safecall;
    procedure InsertLibraryFeature(const libFeatPartNameIn: WideString); safecall;
    procedure SketchModifyTranslate(startX: Double; startY: Double; endX: Double; endY: Double); safecall;
    procedure SketchModifyRotate(centerX: Double; centerY: Double; angle: Double); safecall;
    procedure SketchModifyFlip(axisFlag: SYSINT); safecall;
    function SketchModifyScale(scaleFactor: Double): WordBool; safecall;
    function GetActiveConfiguration: IDispatch; safecall;
    function IGetActiveConfiguration: IConfiguration; safecall;
    function GetUserPreferenceToggle(userPreferenceToggle: Integer): WordBool; safecall;
    function SetUserPreferenceToggle(userPreferenceValue: Integer; onFlag: WordBool): WordBool; safecall;
    procedure InsertSweepRefSurface(propagate: WordBool; twistCtrlOption: Smallint; 
                                    keepTangency: WordBool; forceNonRational: WordBool); safecall;
    procedure InsertLoftRefSurface(closed: WordBool; keepTangency: WordBool; 
                                   forceNonRational: WordBool); safecall;
    procedure InsertProtrusionSwept2(propagate: WordBool; alignment: WordBool; 
                                     twistCtrlOption: Smallint; keepTangency: WordBool; 
                                     forceNonRational: WordBool); safecall;
    procedure InsertProtrusionBlend2(closed: WordBool; keepTangency: WordBool; 
                                     forceNonRational: WordBool); safecall;
    procedure InsertCutSwept2(propagate: WordBool; alignment: WordBool; twistCtrlOption: Smallint; 
                              keepTangency: WordBool; forceNonRational: WordBool); safecall;
    procedure InsertCutBlend2(closed: WordBool; keepTangency: WordBool; forceNonRational: WordBool); safecall;
    function IsEditingSelf: WordBool; safecall;
    procedure ShowNamedView2(const vName: WideString; viewId: Integer); safecall;
    procedure InsertDome(height: Double; reverseDir: WordBool; doEllipticSurface: WordBool); safecall;
    function Get_MaterialUserName: WideString; safecall;
    procedure Set_MaterialUserName(const retval: WideString); safecall;
    function Get_MaterialIdName: WideString; safecall;
    procedure Set_MaterialIdName(const retval: WideString); safecall;
    function Get_MaterialPropertyValues: OleVariant; safecall;
    procedure Set_MaterialPropertyValues(retval: OleVariant); safecall;
    function Get_IMaterialPropertyValues: Double; safecall;
    procedure Set_IMaterialPropertyValues(var retval: Double); safecall;
    function AddPropertyExtension(PropertyExtension: OleVariant): Integer; safecall;
    function GetPropertyExtension(id: Integer): OleVariant; safecall;
    procedure ResetPropertyExtension; safecall;
    function GetUpdateStamp: Integer; safecall;
    procedure ViewZoomTo2(x1: Double; y1: Double; z1: Double; x2: Double; y2: Double; z2: Double); safecall;
    procedure ScreenRotate; safecall;
    function Get_PrintSetup(setupType: Integer): Smallint; safecall;
    procedure Set_PrintSetup(setupType: Integer; setupValue: Smallint); safecall;
    procedure GraphicsRedraw2; safecall;
    procedure InsertCosmeticThread(type_: Smallint; depth: Double; length: Double; 
                                   const note: WideString); safecall;
    procedure HideCosmeticThread; safecall;
    procedure ShowCosmeticThread; safecall;
    procedure SimpleHole2(dia: Double; sd: WordBool; flip: WordBool; dir: WordBool; t1: Integer; 
                          t2: Integer; d1: Double; d2: Double; dchk1: WordBool; dchk2: WordBool; 
                          ddir1: WordBool; ddir2: WordBool; dang1: Double; dang2: Double; 
                          offsetReverse1: WordBool; offsetReverse2: WordBool); safecall;
    procedure IRelease3rdPartyStorage(const stringIn: WideString); safecall;
    function FeatureRevolve2(angle: Double; reverseDir: WordBool; angle2: Double; revType: Integer; 
                             options: Integer): Integer; safecall;
    function FeatureRevolveCut2(angle: Double; reverseDir: WordBool; angle2: Double; 
                                revType: Integer; options: Integer): Integer; safecall;
    procedure SetSaveFlag; safecall;
    function GetExternalReferenceName: WideString; safecall;
    function SelectByRay(doubleInfoIn: OleVariant; typeWanted: Integer): WordBool; safecall;
    function ISelectByRay(var pointIn: Double; var vectorIn: Double; radiusIn: Double; 
                          typeWanted: Integer): WordBool; safecall;
    procedure SetSceneBkgDIB(l_dib: Integer); safecall;
    function Get_SceneBkgImageFileName: WideString; safecall;
    procedure Set_SceneBkgImageFileName(const retval: WideString); safecall;
    procedure InsertBkgImage(const newName: WideString); safecall;
    procedure DeleteBkgImage; safecall;
    procedure InsertSplinePoint(x: Double; y: Double; z: Double); safecall;
    procedure InsertLoftRefSurface2(closed: WordBool; keepTangency: WordBool; 
                                    forceNonRational: WordBool; tessToleranceFactor: Double; 
                                    startMatchingType: Smallint; endMatchingType: Smallint); safecall;
    procedure InsertProtrusionBlend3(closed: WordBool; keepTangency: WordBool; 
                                     forceNonRational: WordBool; tessToleranceFactor: Double; 
                                     startMatchingType: Smallint; endMatchingType: Smallint); safecall;
    procedure InsertCutBlend3(closed: WordBool; keepTangency: WordBool; forceNonRational: WordBool; 
                              tessToleranceFactor: Double; startMatchingType: Smallint; 
                              endMatchingType: Smallint); safecall;
    procedure AlignDimensions; safecall;
    procedure BreakDimensionAlignment; safecall;
    procedure SketchFillet1(rad: Double); safecall;
    procedure FeatureChamferType(chamferType: Smallint; width: Double; angle: Double; 
                                 flip: WordBool; otherDist: Double; vertexChamDist1: Double; 
                                 vertexChamDist2: Double; vertexChamDist3: Double); safecall;
    procedure FeatureCutThin(sd: WordBool; flip: WordBool; dir: WordBool; t1: Integer; t2: Integer; 
                             d1: Double; d2: Double; dchk1: WordBool; dchk2: WordBool; 
                             ddir1: WordBool; ddir2: WordBool; dang1: Double; dang2: Double; 
                             offsetReverse1: WordBool; offsetReverse2: WordBool; thk1: Double; 
                             thk2: Double; endThk: Double; revThinDir: Integer; capEnds: Integer; 
                             addBends: WordBool; bendRad: Double); safecall;
    procedure FeatureBossThin(sd: WordBool; flip: WordBool; dir: WordBool; t1: Integer; 
                              t2: Integer; d1: Double; d2: Double; dchk1: WordBool; 
                              dchk2: WordBool; ddir1: WordBool; ddir2: WordBool; dang1: Double; 
                              dang2: Double; offsetReverse1: WordBool; offsetReverse2: WordBool; 
                              thk1: Double; thk2: Double; endThk: Double; revThinDir: Integer; 
                              capEnds: Integer; addBends: WordBool; bendRad: Double); safecall;
    function InsertDatumTargetSymbol(const datum1: WideString; const datum2: WideString; 
                                     const datum3: WideString; areaStyle: Smallint; 
                                     areaOutside: WordBool; value1: Double; value2: Double; 
                                     const valueStr1: WideString; const valueStr2: WideString; 
                                     arrowsSmart: WordBool; arrowStyle: Smallint; 
                                     leaderLineStyle: Smallint; leaderBent: WordBool; 
                                     showArea: WordBool; showSymbol: WordBool): WordBool; safecall;
    function EditDatumTargetSymbol(const datum1: WideString; const datum2: WideString; 
                                   const datum3: WideString; areaStyle: Smallint; 
                                   areaOutside: WordBool; value1: Double; value2: Double; 
                                   const valueStr1: WideString; const valueStr2: WideString; 
                                   arrowsSmart: WordBool; arrowStyle: Smallint; 
                                   leaderLineStyle: Smallint; leaderBent: WordBool; 
                                   showArea: WordBool; showSymbol: WordBool): WordBool; safecall;
    procedure InsertBOMBalloon; safecall;
    function FeatureReferenceCurve(numOfCurves: Integer; baseCurves: OleVariant; merge: WordBool; 
                                   const fromFileName: WideString; out errorCode: Integer): IDispatch; safecall;
    function IFeatureReferenceCurve(numOfCurves: Integer; baseCurves: PPPUserType1; 
                                    merge: WordBool; const fromFileName: WideString; 
                                    out errorCode: Integer): IReferenceCurve; safecall;
    procedure FontBold(bold: WordBool); safecall;
    procedure FontItalic(italic: WordBool); safecall;
    procedure FontUnderline(underline: WordBool); safecall;
    procedure FontFace(const face: WideString); safecall;
    procedure FontPoints(points: Smallint); safecall;
    procedure FontUnits(units: Double); safecall;
    function SketchSplineByEqnParams(paramsIn: OleVariant): WordBool; safecall;
    procedure AlignParallelDimensions; safecall;
    procedure SetBlockingState(stateIn: Integer); safecall;
    procedure ResetBlockingState; safecall;
    function GetSceneBkgDIB: Integer; safecall;
    procedure InsertHatchedFace; safecall;
    function GetColorTable: IDispatch; safecall;
    function IGetColorTable: IColorTable; safecall;
    procedure InsertSweepRefSurface2(propagate: WordBool; twistCtrlOption: Smallint; 
                                     keepTangency: WordBool; forceNonRational: WordBool; 
                                     startMatchingType: Smallint; endMatchingType: Smallint); safecall;
    procedure InsertProtrusionSwept3(propagate: WordBool; alignment: WordBool; 
                                     twistCtrlOption: Smallint; keepTangency: WordBool; 
                                     forceNonRational: WordBool; startMatchingType: Smallint; 
                                     endMatchingType: Smallint); safecall;
    procedure InsertCutSwept3(propagate: WordBool; alignment: WordBool; twistCtrlOption: Smallint; 
                              keepTangency: WordBool; forceNonRational: WordBool; 
                              startMatchingType: Smallint; endMatchingType: Smallint); safecall;
    function IsOpenedViewOnly: WordBool; safecall;
    function IsOpenedReadOnly: WordBool; safecall;
    procedure ViewZoomToSelection; safecall;
    procedure FeatureBossThicken(thickness: Double; direction: Integer; faceIndex: Integer); safecall;
    procedure FeatureCutThicken(thickness: Double; direction: Integer; faceIndex: Integer); safecall;
    function InsertAxis: WordBool; safecall;
    procedure EditUndo(nSteps: LongWord); safecall;
    procedure SelectMidpoint; safecall;
    function ISketchSplineByEqnParams(var propArray: SYSINT; var knotsArray: Double; 
                                      var cntrlPntCoordArray: Double): Integer; safecall;
    function VersionHistory: OleVariant; safecall;
    function IVersionHistory: WideString; safecall;
    function IGetVersionHistoryCount: SYSINT; safecall;
    procedure Rebuild(options: Integer); safecall;
    procedure InsertFeatureShellAddThickness(thickness: Double); safecall;
    procedure InsertOffsetSurface(thickness: Double; reverse: WordBool); safecall;
    procedure SimplifySpline(toleranceIn: Double); safecall;
    function Get_SummaryInfo(FieldId: Integer): WideString; safecall;
    procedure Set_SummaryInfo(FieldId: Integer; const retval: WideString); safecall;
    function Get_CustomInfo(const FieldName: WideString): WideString; safecall;
    procedure Set_CustomInfo(const FieldName: WideString; const retval: WideString); safecall;
    function GetCustomInfoCount: Integer; safecall;
    function GetCustomInfoType(const FieldName: WideString): WideString; safecall;
    function GetCustomInfoNames: OleVariant; safecall;
    function IGetCustomInfoNames: WideString; safecall;
    function AddCustomInfo(const FieldName: WideString; const FieldType: WideString; 
                           const FieldValue: WideString): WordBool; safecall;
    function DeleteCustomInfo(const FieldName: WideString): WordBool; safecall;
    procedure PrintOut2(fromPage: Integer; toPage: Integer; numCopies: Integer; collate: WordBool; 
                        const printer: WideString; Scale: Double; printToFile: WordBool; 
                        const ptfName: WideString); safecall;
    function SetReadOnlyState(setReadOnly: WordBool): WordBool; safecall;
    function InsertFamilyTableOpen(const fileName: WideString): WordBool; safecall;
    function MultiSelectByRay(doubleInfoIn: OleVariant; typeWanted: Integer; Append: WordBool): WordBool; safecall;
    function IMultiSelectByRay(var pointIn: Double; var vectorIn: Double; radiusIn: Double; 
                               typeWanted: Integer; Append: WordBool): WordBool; safecall;
    procedure InsertNewNote3(const upperText: WideString; noLeader: WordBool; bentLeader: WordBool; 
                             arrowStyle: Smallint; leaderSide: Smallint; angle: Double; 
                             balloonStyle: Smallint; balloonFit: Smallint; smartArrow: WordBool); safecall;
    procedure InsertWeldSymbol2(const dim1: WideString; const symbol: WideString; 
                                const dim2: WideString; symmetric: WordBool; fieldWeld: WordBool; 
                                showOtherSide: WordBool; dashOnTop: WordBool; peripheral: WordBool; 
                                hasProcess: WordBool; const processValue: WideString); safecall;
    function InsertSurfaceFinishSymbol2(symType: Integer; leaderType: Integer; locX: Double; 
                                        locY: Double; locZ: Double; laySymbol: Integer; 
                                        arrowType: Integer; const machAllowance: WideString; 
                                        const otherVals: WideString; const prodMethod: WideString; 
                                        const sampleLen: WideString; 
                                        const maxRoughness: WideString; 
                                        const minRoughness: WideString; 
                                        const roughnessSpacing: WideString): WordBool; safecall;
    function SaveSilent: Integer; safecall;
    function SaveAsSilent(const newName: WideString; saveAsCopy: WordBool): Integer; safecall;
    function AddCustomInfo2(const FieldName: WideString; FieldType: Integer; 
                            const FieldValue: WideString): WordBool; safecall;
    function GetCustomInfoType2(const FieldName: WideString): Integer; safecall;
    function InsertRefPoint: WordBool; safecall;
    function FeatureFillet2(r1: Double; propagate: WordBool; ftyp: WordBool; varRadTyp: WordBool; 
                            overFlowType: Integer; nRadii: SYSINT; radii: OleVariant): Integer; safecall;
    function IFeatureFillet2(r1: Double; propagate: WordBool; ftyp: WordBool; varRadTyp: WordBool; 
                             overFlowType: Integer; nRadii: SYSINT; var radii: Double): Integer; safecall;
    function GetFirstAnnotation: IDispatch; safecall;
    function IGetFirstAnnotation: IAnnotation; safecall;
    function InsertCoordinateSystem(xFlippedIn: WordBool; yFlippedIn: WordBool; zFlippedIn: WordBool): WordBool; safecall;
    function GetToolbarVisibility(toolbar: Integer): WordBool; safecall;
    procedure SetToolbarVisibility(toolbar: Integer; visibility: WordBool); safecall;
    procedure ViewDispCoordinateSystems; safecall;
    procedure ViewDispTempRefaxes; safecall;
    procedure ViewDispRefPoints; safecall;
    procedure ViewDispOrigins; safecall;
    function GetCoordinateSystemXformByName(const nameIn: WideString): OleVariant; safecall;
    function IGetCoordinateSystemXformByName(const nameIn: WideString): Double; safecall;
    function GetCurrentCoordinateSystemName: WideString; safecall;
    function EnumModelViews: IEnumModelViews; safecall;
    function InsertCompositeCurve: WordBool; safecall;
    procedure SketchParabola(val1: Double; val2: Double; z1: Double; val3: Double; val4: Double; 
                             z2: Double; val5: Double; val6: Double; z3: Double; val7: Double; 
                             val8: Double; z4: Double); safecall;
    procedure InsertRadiateSurface(distance: Double; flipDir: WordBool; tangentPropagate: WordBool); safecall;
    procedure InsertSewRefSurface; safecall;
    function InsertShape(pressureOn: Integer; tangentsOn: Integer; pressureGain: Double; 
                         tangentGain: Double; curveSpringGain: Double; alpha: Double; beta: Double; 
                         gamma: Double; delta: Double; degree: Integer; split: Integer; 
                         tuning: Integer): Integer; safecall;
    procedure InsertMfDraft2(angle: Double; flipDir: WordBool; isEdgeDraft: WordBool; 
                             propType: Integer; stepDraft: WordBool); safecall;
    function GetConfigurationCount: Integer; safecall;
    function GetConfigurationNames: OleVariant; safecall;
    function IGetConfigurationNames(var count: Integer): WideString; safecall;
    procedure FeatureCut2(sd: WordBool; flip: WordBool; dir: WordBool; t1: Integer; t2: Integer; 
                          d1: Double; d2: Double; dchk1: WordBool; dchk2: WordBool; 
                          ddir1: WordBool; ddir2: WordBool; dang1: Double; dang2: Double; 
                          offsetReverse1: WordBool; offsetReverse2: WordBool; 
                          keepPieceIndex: Integer); safecall;
    procedure InsertCutSurface(flip: WordBool; keepPieceIndex: Integer); safecall;
    function GetDetailingDefaults: IDispatch; safecall;
    function IGetDetailingDefaults: IDetailingDefaults; safecall;
    function ListExternalFileReferencesCount(useSearchRules: WordBool): Integer; safecall;
    function ListExternalFileReferences(useSearchRules: WordBool): OleVariant; safecall;
    function IListExternalFileReferences(useSearchRules: WordBool; numRefs: Integer): WideString; safecall;
    function SketchSplineByEqnParams2(paramsIn: OleVariant): WordBool; safecall;
    function GetFirstModelView: IDispatch; safecall;
    function IGetFirstModelView: IModelView; safecall;
    function InsertPlanarRefSurface: WordBool; safecall;
    function GetNext: IDispatch; safecall;
    function GetSaveFlag: WordBool; safecall;
    function AddCustomInfo3(const configuration: WideString; const FieldName: WideString; 
                            FieldType: Integer; const FieldValue: WideString): WordBool; safecall;
    function Get_CustomInfo2(const configuration: WideString; const FieldName: WideString): WideString; safecall;
    procedure Set_CustomInfo2(const configuration: WideString; const FieldName: WideString; 
                              const retval: WideString); safecall;
    function DeleteCustomInfo2(const configuration: WideString; const FieldName: WideString): WordBool; safecall;
    function GetCustomInfoCount2(const configuration: WideString): Integer; safecall;
    function GetCustomInfoNames2(const configuration: WideString): OleVariant; safecall;
    function IGetCustomInfoNames2(const configuration: WideString): WideString; safecall;
    function GetCustomInfoType3(const configuration: WideString; const FieldName: WideString): Integer; safecall;
    function GetConsiderLeadersAsLines: WordBool; safecall;
    function SetConsiderLeadersAsLines(leadersAsLines: WordBool): WordBool; safecall;
    procedure InsertRevolvedRefSurface(angle: Double; reverseDir: WordBool; angle2: Double; 
                                       revType: SYSINT); safecall;
    function GetBendState: Integer; safecall;
    function SetBendState(bendState: Integer): Integer; safecall;
    function Get_ShowFeatureErrorDialog: WordBool; safecall;
    procedure Set_ShowFeatureErrorDialog(retval: WordBool); safecall;
    procedure ClearUndoList; safecall;
    function GetFeatureManagerWidth: Integer; safecall;
    function SetFeatureManagerWidth(width: Integer): Integer; safecall;
    function InsertProjectedSketch2(reverse: Integer): IDispatch; safecall;
    function IInsertProjectedSketch2(reverse: Integer): IFeature; safecall;
    function GetFeatureCount: Integer; safecall;
    function FeatureByPositionReverse(num: Integer): IDispatch; safecall;
    function IFeatureByPositionReverse(num: Integer): IFeature; safecall;
    function RayIntersections(bodiesIn: OleVariant; basePointsIn: OleVariant; 
                              vectorsIn: OleVariant; options: Integer; hitRadius: Double; 
                              offset: Double): Integer; safecall;
    function IRayIntersections(var bodiesIn: IBody; numBodies: Integer; var basePointsIn: Double; 
                               var vectorsIn: Double; numRays: Integer; options: Integer; 
                               hitRadius: Double; offset: Double): Integer; safecall;
    function GetRayIntersectionsPoints: OleVariant; safecall;
    function IGetRayIntersectionsPoints: Double; safecall;
    function GetRayIntersectionsTopology: OleVariant; safecall;
    function IGetRayIntersectionsTopology: IUnknown; safecall;
    procedure EditSeedFeat; safecall;
    function EditSuppress: WordBool; safecall;
    function EditUnsuppress: WordBool; safecall;
    function EditUnsuppressDependent: WordBool; safecall;
    function EditRollback: WordBool; safecall;
    function Save2(silent: WordBool): Integer; safecall;
    function SaveAs2(const newName: WideString; saveAsVersion: Integer; saveAsCopy: WordBool; 
                     silent: WordBool): Integer; safecall;
    procedure SetPopupMenuMode(modeIn: SYSINT); safecall;
    function GetPopupMenuMode: SYSINT; safecall;
    procedure CloseFamilyTable; safecall;
    procedure CreatePlaneAtSurface(interIndex: SYSINT; projOpt: WordBool; reverseDir: WordBool; 
                                   normalPlane: WordBool; angle: Double); safecall;
    procedure SketchOffset(offset: Double; contourMode: WordBool); safecall;
    function CreateLinearSketchStepAndRepeat(numX: Integer; numY: Integer; spacingX: Double; 
                                             spacingY: Double; angleX: Double; angleY: Double; 
                                             const deleteInstances: WideString): WordBool; safecall;
    function SetAmbientLightProperties(const Name: WideString; ambient: Double; diffuse: Double; 
                                       specular: Double; colour: Integer; enabled: WordBool; 
                                       fixed: WordBool): WordBool; safecall;
    function GetAmbientLightProperties(const Name: WideString; var ambient: Double; 
                                       var diffuse: Double; var specular: Double; 
                                       var colour: Integer; var enabled: WordBool; 
                                       var fixed: WordBool): WordBool; safecall;
    function SetPointLightProperties(const Name: WideString; ambient: Double; diffuse: Double; 
                                     specular: Double; colour: Integer; enabled: WordBool; 
                                     fixed: WordBool; x: Double; y: Double; z: Double): WordBool; safecall;
    function GetPointLightProperties(const Name: WideString; var ambient: Double; 
                                     var diffuse: Double; var specular: Double; 
                                     var colour: Integer; var enabled: WordBool; 
                                     var fixed: WordBool; var x: Double; var y: Double; 
                                     var z: Double): WordBool; safecall;
    function SetDirectionLightProperties(const Name: WideString; ambient: Double; diffuse: Double; 
                                         specular: Double; colour: Integer; enabled: WordBool; 
                                         fixed: WordBool; x: Double; y: Double; z: Double): WordBool; safecall;
    function GetDirectionLightProperties(const Name: WideString; var ambient: Double; 
                                         var diffuse: Double; var specular: Double; 
                                         var colour: Integer; var enabled: WordBool; 
                                         var fixed: WordBool; var x: Double; var y: Double; 
                                         var z: Double): WordBool; safecall;
    function SetSpotlightProperties(const Name: WideString; ambient: Double; diffuse: Double; 
                                    specular: Double; colour: Integer; enabled: WordBool; 
                                    fixed: WordBool; posx: Double; posy: Double; posz: Double; 
                                    targetx: Double; targety: Double; targetz: Double; 
                                    coneAngle: Double): WordBool; safecall;
    function GetSpotlightProperties(const Name: WideString; var ambient: Double; 
                                    var diffuse: Double; var specular: Double; var colour: Integer; 
                                    var enabled: WordBool; var fixed: WordBool; var x: Double; 
                                    var y: Double; var z: Double; var targetx: Double; 
                                    var targety: Double; var targetz: Double; var coneAngle: Double): WordBool; safecall;
    procedure SplitOpenSegment(x: Double; y: Double; z: Double); safecall;
    procedure AutoInferToggle; safecall;
    procedure SketchRectangleAtAnyAngle(val1: Double; val2: Double; z1: Double; val3: Double; 
                                        val4: Double; z2: Double; val3x: Double; val3y: Double; 
                                        z3: Double; val5: WordBool); safecall;
    function CreateCircularSketchStepAndRepeat(arcRadius: Double; arcAngle: Double; 
                                               patternNum: Integer; patternSpacing: Double; 
                                               patternRotate: WordBool; 
                                               const deleteInstances: WideString): WordBool; safecall;
    procedure SplitClosedSegment(x0: Double; y0: Double; z0: Double; x1: Double; y1: Double; 
                                 z1: Double); safecall;
    function IsLightLockedToModel(lightId: Integer): WordBool; safecall;
    function LockLightToModel(lightId: Integer; fix: WordBool): WordBool; safecall;
    function FeatureFillet3(r1: Double; propagate: WordBool; ftyp: SYSINT; varRadTyp: WordBool; 
                            overFlowType: Integer; nRadii: SYSINT; radii: OleVariant; 
                            useHelpPoint: WordBool; useTangentHoldLine: WordBool): Integer; safecall;
    function IFeatureFillet3(r1: Double; propagate: WordBool; ftyp: SYSINT; varRadTyp: WordBool; 
                             overFlowType: Integer; nRadii: SYSINT; var radii: Double; 
                             useHelpPoint: WordBool; useTangentHoldLine: WordBool): Integer; safecall;
    procedure InsertConnectionPoint; safecall;
    procedure InsertRoutePoint; safecall;
    procedure FeatureBossThicken2(thickness: Double; direction: Integer; faceIndex: Integer; 
                                  fillVolume: WordBool); safecall;
    procedure FeatureCutThicken2(thickness: Double; direction: Integer; faceIndex: Integer; 
                                 fillVolume: WordBool); safecall;
    function GetConfigurationByName(const Name: WideString): IDispatch; safecall;
    function IGetConfigurationByName(const Name: WideString): IConfiguration; safecall;
    function CreatePoint2(pointX: Double; pointY: Double; pointZ: Double): IDispatch; safecall;
    function ICreatePoint2(pointX: Double; pointY: Double; pointZ: Double): ISketchPoint; safecall;
    function CreateLine2(p1x: Double; p1y: Double; p1z: Double; p2x: Double; p2y: Double; 
                         p2z: Double): IDispatch; safecall;
    function ICreateLine2(p1x: Double; p1y: Double; p1z: Double; p2x: Double; p2y: Double; 
                          p2z: Double): ISketchSegment; safecall;
    function GetActiveSketch2: IDispatch; safecall;
    function IGetActiveSketch2: ISketch; safecall;
    procedure DrawLightIcons; safecall;
    function GetLayerManager: IDispatch; safecall;
    function IGetLayerManager: ILayerMgr; safecall;
    function CreateCircle2(xC: Double; yC: Double; zc: Double; xp: Double; yp: Double; zp: Double): IDispatch; safecall;
    function ICreateCircle2(xC: Double; yC: Double; zc: Double; xp: Double; yp: Double; zp: Double): ISketchSegment; safecall;
    function CreateCircleByRadius2(xC: Double; yC: Double; zc: Double; radius: Double): IDispatch; safecall;
    function ICreateCircleByRadius2(xC: Double; yC: Double; zc: Double; radius: Double): ISketchSegment; safecall;
    function CreateArc2(xC: Double; yC: Double; zc: Double; xp1: Double; yp1: Double; zp1: Double; 
                        xp2: Double; yp2: Double; zp2: Double; direction: Smallint): IDispatch; safecall;
    function ICreateArc2(xC: Double; yC: Double; zc: Double; xp1: Double; yp1: Double; zp1: Double; 
                         xp2: Double; yp2: Double; zp2: Double; direction: Smallint): ISketchSegment; safecall;
    function CreateEllipse2(centerX: Double; centerY: Double; centerZ: Double; majorX: Double; 
                            majorY: Double; majorZ: Double; minorX: Double; minorY: Double; 
                            minorZ: Double): IDispatch; safecall;
    function ICreateEllipse2(centerX: Double; centerY: Double; centerZ: Double; majorX: Double; 
                             majorY: Double; majorZ: Double; minorX: Double; minorY: Double; 
                             minorZ: Double): ISketchSegment; safecall;
    function CreateEllipticalArc2(centerX: Double; centerY: Double; centerZ: Double; 
                                  majorX: Double; majorY: Double; majorZ: Double; minorX: Double; 
                                  minorY: Double; minorZ: Double; startX: Double; startY: Double; 
                                  startZ: Double; endX: Double; endY: Double; endZ: Double): IDispatch; safecall;
    function ICreateEllipticalArc2(centerX: Double; centerY: Double; centerZ: Double; 
                                   majorX: Double; majorY: Double; majorZ: Double; minorX: Double; 
                                   minorY: Double; minorZ: Double; startX: Double; startY: Double; 
                                   startZ: Double; endX: Double; endY: Double; endZ: Double): ISketchSegment; safecall;
    function CreateSpline(pointData: OleVariant): IDispatch; safecall;
    function ICreateSpline(PointCount: Integer; var pointData: Double): ISketchSegment; safecall;
    procedure ViewZoomtofit2; safecall;
    procedure SetInferenceMode(inferenceMode: WordBool); safecall;
    function GetInferenceMode: WordBool; safecall;
    function SetTitle2(const newTitle: WideString): WordBool; safecall;
    function SketchFillet2(rad: Double; constrainedCorners: Smallint): WordBool; safecall;
    function IsTessellationValid: WordBool; safecall;
    procedure EditRoute; safecall;
    procedure FileReload; safecall;
    function GetDesignTable: IDispatch; safecall;
    function IGetDesignTable: IDesignTable; safecall;
    function GetEntityName(const entity: IDispatch): WideString; safecall;
    function IGetEntityName(const entity: IEntity): WideString; safecall;
    function IGetNext: IModelDoc; safecall;
    function ShowConfiguration2(const configurationName: WideString): WordBool; safecall;
    function AddConfiguration2(const Name: WideString; const comment: WideString; 
                               const alternateName: WideString; suppressByDefault: WordBool; 
                               hideByDefault: WordBool; minFeatureManager: WordBool; 
                               inheritProperties: WordBool; flags: LongWord): WordBool; safecall;
    function DeleteConfiguration2(const configurationName: WideString): WordBool; safecall;
    function EditConfiguration2(const Name: WideString; const newName: WideString; 
                                const comment: WideString; const alternateName: WideString; 
                                suppressByDefault: WordBool; hideByDefault: WordBool; 
                                minFeatureManager: WordBool; inheritProperties: WordBool; 
                                flags: LongWord): WordBool; safecall;
    function CreateSplineByEqnParams(paramsIn: OleVariant): IDispatch; safecall;
    function ICreateSplineByEqnParams(var propArray: SYSINT; var knotsArray: Double; 
                                      var cntrlPntCoordArray: Double): ISketchSegment; safecall;
    function CreateFeatureMgrView2(var bitmap: Integer; const toolTip: WideString): IDispatch; safecall;
    function ICreateFeatureMgrView2(var bitmap: Integer; const toolTip: WideString): IFeatMgrView; safecall;
    function AddFeatureMgrView2(var bitmap: Integer; var appView: Integer; const toolTip: WideString): WordBool; safecall;
    procedure FeatureCut3(sd: WordBool; flip: WordBool; dir: WordBool; t1: Integer; t2: Integer; 
                          d1: Double; d2: Double; dchk1: WordBool; dchk2: WordBool; 
                          ddir1: WordBool; ddir2: WordBool; dang1: Double; dang2: Double; 
                          offsetReverse1: WordBool; offsetReverse2: WordBool; 
                          keepPieceIndex: Integer); safecall;
    function GetFirstAnnotation2: IDispatch; safecall;
    function IGetFirstAnnotation2: IAnnotation; safecall;
    procedure InsertExtendSurface(extendLinear: WordBool; endCondition: Integer; distance: Double); safecall;
    procedure InsertTangencySurface(oneSide: WordBool; isFlip: WordBool); safecall;
    function CreateSplinesByEqnParams(paramsIn: OleVariant): OleVariant; safecall;
    function ICreateSplinesByEqnParams(var propArray: SYSINT; var knotsArray: Double; 
                                       var cntrlPntCoordArray: Double): IEnumSketchSegments; safecall;
    function CreateClippedSplines(paramsIn: OleVariant; x1: Double; y1: Double; x2: Double; 
                                  y2: Double): OleVariant; safecall;
    function ICreateClippedSplines(var propArray: SYSINT; var knotsArray: Double; 
                                   var cntrlPntCoordArray: Double; x1: Double; y1: Double; 
                                   x2: Double; y2: Double): IEnumSketchSegments; safecall;
    function EditSuppress2: WordBool; safecall;
    function EditUnsuppress2: WordBool; safecall;
    function EditUnsuppressDependent2: WordBool; safecall;
    function EditRollback2: WordBool; safecall;
    procedure HideDimension; safecall;
    procedure ShowFeatureDimensions; safecall;
    procedure HideFeatureDimensions; safecall;
    procedure Sketch3DIntersections; safecall;
    function FeatureFillet4(r1: Double; propagate: WordBool; uniformRadius: WordBool; ftyp: SYSINT; 
                            varRadTyp: WordBool; overFlowType: Integer; nRadii: SYSINT; 
                            radii: OleVariant; useHelpPoint: WordBool; 
                            useTangentHoldLine: WordBool; cornerType: WordBool; 
                            setbackDistCount: SYSINT; setBackDistances: OleVariant): Integer; safecall;
    function IFeatureFillet4(r1: Double; propagate: WordBool; uniformRadius: WordBool; 
                             ftyp: SYSINT; varRadTyp: WordBool; overFlowType: Integer; 
                             nRadii: SYSINT; var radii: Double; useHelpPoint: WordBool; 
                             useTangentHoldLine: WordBool; cornerType: WordBool; 
                             setbackDistCount: SYSINT; var setBackDistances: Double): Integer; safecall;
    procedure InsertDeleteFace; safecall;
    function GetDependencies2(traverseflag: WordBool; searchflag: WordBool; 
                              addReadOnlyInfo: WordBool): OleVariant; safecall;
    function IGetDependencies2(traverseflag: WordBool; searchflag: WordBool; 
                               addReadOnlyInfo: WordBool): WideString; safecall;
    function IGetNumDependencies2(traverseflag: WordBool; searchflag: WordBool; 
                                  addReadOnlyInfo: WordBool): Integer; safecall;
    procedure InsertScale(scaleFactor_x: Double; scaleFactor_y: Double; scaleFactor_z: Double; 
                          isUniform: WordBool; scaleType: SYSINT); safecall;
    procedure LockAllExternalReferences; safecall;
    procedure UnlockAllExternalReferences; safecall;
    procedure BreakAllExternalReferences; safecall;
    function EditDimensionProperties(tolType: Integer; tolMax: Double; tolMin: Double; 
                                     const tolMaxFit: WideString; const tolMinFit: WideString; 
                                     useDocPrec: WordBool; precision: Integer; arrowsIn: Integer; 
                                     useDocArrows: WordBool; arrow1: Integer; arrow2: Integer): WordBool; safecall;
    function SketchPolygon(xCenter: Double; yCenter: Double; xEdge: Double; yEdge: Double; 
                           nSides: SYSINT; bInscribed: WordBool): WordBool; safecall;
    function GetBlockingState: Integer; safecall;
    function CreateFeatureMgrView3(var bitmap: Integer; const toolTip: WideString; 
                                   whichPane: Integer): IDispatch; safecall;
    function ICreateFeatureMgrView3(var bitmap: Integer; const toolTip: WideString; 
                                    whichPane: Integer): IFeatMgrView; safecall;
    function AddFeatureMgrView3(var bitmap: Integer; var appView: Integer; 
                                const toolTip: WideString; whichPane: Integer): WordBool; safecall;
    function CreatePlaneAtOffset2(val: Double; flipDir: WordBool): IDispatch; safecall;
    function ICreatePlaneAtOffset2(val: Double; flipDir: WordBool): IRefPlane; safecall;
    function CreatePlaneAtAngle2(val: Double; flipDir: WordBool): IDispatch; safecall;
    function ICreatePlaneAtAngle2(val: Double; flipDir: WordBool): IRefPlane; safecall;
    function CreatePlaneThru3Points2: IDispatch; safecall;
    function ICreatePlaneThru3Points2: IRefPlane; safecall;
    function CreatePlanePerCurveAndPassPoint2(origAtCurve: WordBool): IDispatch; safecall;
    function ICreatePlanePerCurveAndPassPoint2(origAtCurve: WordBool): IRefPlane; safecall;
    function CreatePlaneAtSurface2(interIndex: SYSINT; projOpt: WordBool; reverseDir: WordBool; 
                                   normalPlane: WordBool; angle: Double): IDispatch; safecall;
    function ICreatePlaneAtSurface2(interIndex: SYSINT; projOpt: WordBool; reverseDir: WordBool; 
                                    normalPlane: WordBool; angle: Double): IRefPlane; safecall;
    function GetUserPreferenceIntegerValue(userPreferenceValue: Integer): Integer; safecall;
    function SetUserPreferenceIntegerValue(userPreferenceValue: Integer; Value: Integer): WordBool; safecall;
    function GetUserPreferenceTextFormat(userPreferenceValue: Integer): IDispatch; safecall;
    function IGetUserPreferenceTextFormat(userPreferenceValue: Integer): ITextFormat; safecall;
    function SetUserPreferenceTextFormat(userPreferenceValue: Integer; const Value: IDispatch): WordBool; safecall;
    function ISetUserPreferenceTextFormat(userPreferenceValue: Integer; const Value: ITextFormat): WordBool; safecall;
    procedure InsertRib2(is2Sided: WordBool; reverseThicknessDir: WordBool; thickness: Double; 
                         referenceEdgeIndex: Integer; reverseMaterialDir: WordBool; 
                         isDrafted: WordBool; draftOutward: WordBool; draftAngle: Double; 
                         isNormToSketch: WordBool); safecall;
    function InsertObjectFromFile(const filePath: WideString; createLink: WordBool; xx: Double; 
                                  yy: Double; zz: Double): WordBool; safecall;
    procedure InspectCurvature; safecall;
    procedure RemoveInspectCurvature; safecall;
    function InsertDatumTag2: IDispatch; safecall;
    function IInsertDatumTag2: IDatumTag; safecall;
    function ActivateFeatureMgrView(var appView: Integer): Integer; safecall;
    procedure FeatureSketchDrivenPattern(useCentroid: WordBool); safecall;
    procedure HideShowBodies; safecall;
    procedure HideSolidBody; safecall;
    procedure ShowSolidBody; safecall;
    procedure InsertFramePoint(xx: Double; yy: Double; zz: Double); safecall;
    procedure LockFramePoint; safecall;
    procedure UnlockFramePoint; safecall;
    function InsertGtol: IDispatch; safecall;
    function IInsertGtol: IGtol; safecall;
    function DeActivateFeatureMgrView(var appView: Integer): WordBool; safecall;
    function InsertNote(const text: WideString): IDispatch; safecall;
    function IInsertNote(const text: WideString): INote; safecall;
    procedure SetSaveAsFileName(const fileName: WideString); safecall;
    procedure ClosePrintPreview; safecall;
    procedure HideComponent2; safecall;
    procedure ShowComponent2; safecall;
    function SaveBMP(const filenameIn: WideString; widthIn: Integer; heightIn: Integer): WordBool; safecall;
    procedure InsertSketch2(updateEditRebuild: WordBool); safecall;
    procedure Insert3DSketch2(updateEditRebuild: WordBool); safecall;
    procedure InsertDeleteHole; safecall;
    procedure PreTrimSurface(bMutualTrimIn: WordBool); safecall;
    procedure PostTrimSurface(bSewSurfaceIn: WordBool); safecall;
    procedure SketchConvertIsoCurves(percentRatio: Double; vORuDir: WordBool; 
                                     doConstrain: WordBool; skipHoles: WordBool); safecall;
    procedure SelectLoop; safecall;
    procedure InsertSheetMetalBaseFlange(thickness: Double; thickenDir: WordBool; radius: Double; 
                                         extrudeDist1: Double; extrudeDist2: Double; 
                                         flipExtruDir: WordBool; endCondition1: Integer; 
                                         endCondition2: Integer; dirToUse: Integer); safecall;
    procedure InsertSheetMetalFold; safecall;
    procedure InsertSheetMetalUnfold; safecall;
    procedure InsertSheetMetalMiterFlange(useReliefRatio: WordBool; useDefaultGap: WordBool; 
                                          useAutoRelief: WordBool; globalRadius: Double; 
                                          ripGap: Double; autoReliefRatio: Double; 
                                          autoReliefWidth: Double; autoReliefDepth: Double; 
                                          reliefType: Integer; ripLocation: Integer; 
                                          trimSideBends: WordBool); safecall;
    procedure CreateGroup; safecall;
    procedure RemoveItemsFromGroup; safecall;
    procedure RemoveGroups; safecall;
    function InsertBOMBalloon2(Style: Integer; size: Integer; upperTextStyle: Integer; 
                               const upperText: WideString; lowerTextStyle: Integer; 
                               const lowerText: WideString): IDispatch; safecall;
    function IInsertBOMBalloon2(Style: Integer; size: Integer; upperTextStyle: Integer; 
                                const upperText: WideString; lowerTextStyle: Integer; 
                                const lowerText: WideString): INote; safecall;
    procedure EditRedo(nSteps: LongWord); safecall;
    procedure InsertProtrusionBlend4(closed: WordBool; keepTangency: WordBool; 
                                     forceNonRational: WordBool; tessToleranceFactor: Double; 
                                     startMatchingType: Smallint; endMatchingType: Smallint; 
                                     isThinBody: WordBool; thickness1: Double; thickness2: Double; 
                                     thinType: Smallint); safecall;
    procedure InsertCutBlend4(closed: WordBool; keepTangency: WordBool; forceNonRational: WordBool; 
                              tessToleranceFactor: Double; startMatchingType: Smallint; 
                              endMatchingType: Smallint; isThinBody: WordBool; thickness1: Double; 
                              thickness2: Double; thinType: Smallint); safecall;
    procedure InsertProtrusionSwept4(propagate: WordBool; alignment: WordBool; 
                                     twistCtrlOption: Smallint; keepTangency: WordBool; 
                                     forceNonRational: WordBool; startMatchingType: Smallint; 
                                     endMatchingType: Smallint; isThinBody: WordBool; 
                                     thickness1: Double; thickness2: Double; thinType: Smallint); safecall;
    procedure InsertCutSwept4(propagate: WordBool; alignment: WordBool; twistCtrlOption: Smallint; 
                              keepTangency: WordBool; forceNonRational: WordBool; 
                              startMatchingType: Smallint; endMatchingType: Smallint; 
                              isThinBody: WordBool; thickness1: Double; thickness2: Double; 
                              thinType: Smallint); safecall;
    procedure SelectTangency; safecall;
    function InsertBendTableOpen(const fileName: WideString): WordBool; safecall;
    function InsertBendTableNew(const fileName: WideString; const units: WideString; 
                                const type_: WideString): WordBool; safecall;
    procedure InsertBendTableEdit; safecall;
    procedure DeleteBendTable; safecall;
    procedure InsertSheetMetal3dBend(angle: Double; radius: Double; flipDir: WordBool; 
                                     bendPos: Smallint); safecall;
    function CreateTangentArc2(p1x: Double; p1y: Double; p1z: Double; p2x: Double; p2y: Double; 
                               p2z: Double; arcTypeIn: Integer): WordBool; safecall;
    function GetMassProperties2(var status: Integer): OleVariant; safecall;
    function IGetMassProperties2(var status: Integer): Double; safecall;
    procedure SketchChamfer(angleORdist: Double; dist1: Double; options: Integer); safecall;
    procedure FeatureCut4(sd: WordBool; flip: WordBool; dir: WordBool; t1: Integer; t2: Integer; 
                          d1: Double; d2: Double; dchk1: WordBool; dchk2: WordBool; 
                          ddir1: WordBool; ddir2: WordBool; dang1: Double; dang2: Double; 
                          offsetReverse1: WordBool; offsetReverse2: WordBool; 
                          keepPieceIndex: Integer; normalCut: WordBool); safecall;
    function GetPropertyManagerPage(dialogId: Integer; const title: WideString; 
                                    const handler: IUnknown): IPropertyManagerPage; safecall;
    procedure AlignOrdinate; safecall;
    procedure EditOrdinate; safecall;
    function ReattachOrdinate: WordBool; safecall;
    function EditBalloonProperties(Style: Integer; size: Integer; upperTextStyle: Integer; 
                                   const upperText: WideString; lowerTextStyle: Integer; 
                                   const lowerText: WideString): IDispatch; safecall;
    function EditDimensionProperties2(tolType: Integer; tolMax: Double; tolMin: Double; 
                                      const tolMaxFit: WideString; const tolMinFit: WideString; 
                                      useDocPrec: WordBool; precision: Integer; arrowsIn: Integer; 
                                      useDocArrows: WordBool; arrow1: Integer; arrow2: Integer; 
                                      const prefixText: WideString; const suffixText: WideString; 
                                      showValue: WordBool; const calloutText1: WideString; 
                                      const calloutText2: WideString; centerText: WordBool): WordBool; safecall;
    procedure InsertSheetMetalClosedCorner; safecall;
    function SketchUseEdge2(chain: WordBool): WordBool; safecall;
    function SketchOffsetEntities2(offset: Double; bothDirections: WordBool; chain: WordBool): WordBool; safecall;
    function SketchOffset2(offset: Double; bothDirections: WordBool; chain: WordBool): WordBool; safecall;
    function AddDimension2(x: Double; y: Double; z: Double): IDispatch; safecall;
    function IAddDimension2(x: Double; y: Double; z: Double): IDisplayDimension; safecall;
    function AddHorizontalDimension2(x: Double; y: Double; z: Double): IDispatch; safecall;
    function IAddHorizontalDimension2(x: Double; y: Double; z: Double): IDisplayDimension; safecall;
    function AddVerticalDimension2(x: Double; y: Double; z: Double): IDispatch; safecall;
    function IAddVerticalDimension2(x: Double; y: Double; z: Double): IDisplayDimension; safecall;
    function AddRadialDimension2(x: Double; y: Double; z: Double): IDispatch; safecall;
    function IAddRadialDimension2(x: Double; y: Double; z: Double): IDisplayDimension; safecall;
    function AddDiameterDimension2(x: Double; y: Double; z: Double): IDispatch; safecall;
    function IAddDiameterDimension2(x: Double; y: Double; z: Double): IDisplayDimension; safecall;
    function GetUserUnit(UnitType: Integer): IDispatch; safecall;
    function IGetUserUnit(UnitType: Integer): IUserUnit; safecall;
    function InsertWeldSymbol3: IDispatch; safecall;
    function IInsertWeldSymbol3: IWeldSymbol; safecall;
    function SaveAs3(const newName: WideString; saveAsVersion: Integer; options: Integer): Integer; safecall;
    function GetUserPreferenceStringValue(userPreference: Integer): WideString; safecall;
    function SetUserPreferenceStringValue(userPreference: Integer; const Value: WideString): WordBool; safecall;
    procedure DeleteDesignTable; safecall;
    function EditRebuild3: WordBool; safecall;
    function ForceRebuild3(topOnly: WordBool): WordBool; safecall;
    property SelectionManager: IDispatch read Get_SelectionManager write Set_SelectionManager;
    property ISelectionManager: ISelectionMgr read Get_ISelectionManager;
    property ActiveView: IDispatch read Get_ActiveView write Set_ActiveView;
    property IActiveView: IModelView read Get_IActiveView;
    property LengthUnit: Integer read Get_LengthUnit write Set_LengthUnit;
    property LightSourceUserName[id: Integer]: WideString read Get_LightSourceUserName write Set_LightSourceUserName;
    property LightSourcePropertyValues[id: Integer]: OleVariant read Get_LightSourcePropertyValues write Set_LightSourcePropertyValues;
    property SceneName: WideString read Get_SceneName write Set_SceneName;
    property SceneUserName: WideString read Get_SceneUserName write Set_SceneUserName;
    property Visible: WordBool read Get_Visible write Set_Visible;
    property MaterialUserName: WideString read Get_MaterialUserName write Set_MaterialUserName;
    property MaterialIdName: WideString read Get_MaterialIdName write Set_MaterialIdName;
    property MaterialPropertyValues: OleVariant read Get_MaterialPropertyValues write Set_MaterialPropertyValues;
    property PrintSetup[setupType: Integer]: Smallint read Get_PrintSetup write Set_PrintSetup;
    property SceneBkgImageFileName: WideString read Get_SceneBkgImageFileName write Set_SceneBkgImageFileName;
    property SummaryInfo[FieldId: Integer]: WideString read Get_SummaryInfo write Set_SummaryInfo;
    property CustomInfo[const FieldName: WideString]: WideString read Get_CustomInfo write Set_CustomInfo;
    property CustomInfo2[const configuration: WideString; const FieldName: WideString]: WideString read Get_CustomInfo2 write Set_CustomInfo2;
    property ShowFeatureErrorDialog: WordBool read Get_ShowFeatureErrorDialog write Set_ShowFeatureErrorDialog;
  end;

// *********************************************************************//
// DispIntf:  IModelDocDisp
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {83A33D46-27C5-11CE-BFD4-00400513BB57}
// *********************************************************************//
  IModelDocDisp = dispinterface
    ['{83A33D46-27C5-11CE-BFD4-00400513BB57}']
    property SelectionManager: IDispatch dispid 65537;
    property ISelectionManager: ISelectionMgr readonly dispid 65711;
    property ActiveView: IDispatch dispid 65538;
    property IActiveView: IModelView readonly dispid 65712;
    property LengthUnit: Integer dispid 65539;
    property LightSourceUserName[id: Integer]: WideString dispid 65716;
    property LightSourcePropertyValues[id: Integer]: OleVariant dispid 65717;
    property SceneName: WideString dispid 65718;
    property SceneUserName: WideString dispid 65719;
    procedure FeatureFillet(r1: Double; propagate: WordBool; ftyp: WordBool; varRadTyp: WordBool; 
                            overFlowType: Integer); dispid 65540;
    procedure GridOptions(dispGrid: WordBool; gridSpacing: Double; snap: WordBool; 
                          dotStyle: WordBool; nMajor: Smallint; nMinor: Smallint; 
                          align2edge: WordBool; angleSnap: WordBool; angleUnit: Double; 
                          minorAuto: WordBool); dispid 65541;
    procedure SetUnits(uType: Smallint; fractBase: Smallint; fractDenom: Smallint; 
                       sigDigits: Smallint; roundToFraction: WordBool); dispid 65542;
    procedure LBDownAt(flags: Integer; x: Double; y: Double; z: Double); dispid 65543;
    procedure LBUpAt(flags: Integer; x: Double; y: Double; z: Double); dispid 65544;
    procedure DragTo(flags: Integer; x: Double; y: Double; z: Double); dispid 65545;
    procedure SelectAt(flags: Integer; x: Double; y: Double; z: Double); dispid 65546;
    procedure CreateLineVB(x1: Double; y1: Double; z1: Double; x2: Double; y2: Double; z2: Double); dispid 65547;
    function CreateLine(P1: OleVariant; P2: OleVariant): WordBool; dispid 65548;
    procedure CreateCenterLineVB(x1: Double; y1: Double; z1: Double; x2: Double; y2: Double; 
                                 z2: Double); dispid 65549;
    function CreateCenterLine(P1: OleVariant; P2: OleVariant): WordBool; dispid 65550;
    procedure CreateArcVB(p1x: Double; p1y: Double; p1z: Double; p2x: Double; p2y: Double; 
                          p2z: Double; p3x: Double; p3y: Double; p3z: Double; dir: Smallint); dispid 65551;
    function CreateArc(P1: OleVariant; P2: OleVariant; P3: OleVariant; dir: Smallint): WordBool; dispid 65552;
    procedure CreateCircleVB(p1x: Double; p1y: Double; p1z: Double; radius: Double); dispid 65553;
    function CreateCircleByRadius(P1: OleVariant; radius: Double): WordBool; dispid 65554;
    function GetLines: OleVariant; dispid 65555;
    procedure SketchTrim(op: Integer; selEnd: Integer; x: Double; y: Double); dispid 65556;
    procedure SketchOffsetEdges(val: Double); dispid 65557;
    procedure SketchRectangle(val1: Double; val2: Double; z1: Double; val3: Double; val4: Double; 
                              z2: Double; val5: WordBool); dispid 65558;
    procedure SketchPoint(x: Double; y: Double; z: Double); dispid 65559;
    procedure FeatureCut(sd: WordBool; flip: WordBool; dir: WordBool; t1: Integer; t2: Integer; 
                         d1: Double; d2: Double; dchk1: WordBool; dchk2: WordBool; ddir1: WordBool; 
                         ddir2: WordBool; dang1: Double; dang2: Double; offsetReverse1: WordBool; 
                         offsetReverse2: WordBool); dispid 65560;
    procedure FeatureBoss(sd: WordBool; flip: WordBool; dir: WordBool; t1: Integer; t2: Integer; 
                          d1: Double; d2: Double; dchk1: WordBool; dchk2: WordBool; 
                          ddir1: WordBool; ddir2: WordBool; dang1: Double; dang2: Double; 
                          offsetReverse1: WordBool; offsetReverse2: WordBool); dispid 65561;
    procedure SimpleHole(sd: WordBool; flip: WordBool; dir: WordBool; t1: Integer; t2: Integer; 
                         d1: Double; d2: Double; dchk1: WordBool; dchk2: WordBool; ddir1: WordBool; 
                         ddir2: WordBool; dang1: Double; dang2: Double; offsetReverse1: WordBool; 
                         offsetReverse2: WordBool); dispid 65562;
    procedure FeatureLinearPattern(num1: Integer; spacing1: Double; num2: Integer; 
                                   spacing2: Double; flipDir1: WordBool; flipDir2: WordBool; 
                                   const dName1: WideString; const dName2: WideString); dispid 65563;
    procedure NameView(const vName: WideString); dispid 65564;
    procedure ShowNamedView(const vName: WideString); dispid 65565;
    procedure CreatePlaneAtOffset(val: Double; flipDir: WordBool); dispid 65566;
    procedure Toolbars(m: WordBool; vw: WordBool; skMain: WordBool; sk: WordBool; feat: WordBool; 
                       constr: WordBool; macro: WordBool); dispid 65567;
    procedure CreatePlaneAtAngle(val: Double; flipDir: WordBool); dispid 65568;
    procedure SetParamValue(val: Double); dispid 65569;
    procedure AddRelation(const relStr: WideString); dispid 65570;
    procedure DeleteAllRelations; dispid 65571;
    procedure HoleWizard(depth: Double; endType: Smallint; flip: WordBool; dir: WordBool; 
                         hType: Integer; d1: Double; d2: Double; d3: Double; d4: Double; 
                         d5: Double; d6: Double; d7: Double; d8: Double; d9: Double; d10: Double; 
                         d11: Double; d12: Double); dispid 65572;
    function SaveAs(const newName: WideString): WordBool; dispid 65573;
    procedure ActivateSelectedFeature; dispid 65574;
    procedure SelectByName(flags: Integer; const idStr: WideString); dispid 65575;
    procedure SketchAddConstraints(const idStr: WideString); dispid 65576;
    procedure SketchConstraintsDel(constrInd: Integer; const idStr: WideString); dispid 65577;
    procedure SketchConstraintsDelAll; dispid 65578;
    procedure Lock; dispid 65579;
    procedure UnLock; dispid 65580;
    procedure InsertFeatureShell(thickness: Double; outward: WordBool); dispid 65581;
    procedure SketchFillet(rad: Double); dispid 65582;
    procedure FeatureChamfer(width: Double; angle: Double; flip: WordBool); dispid 65583;
    procedure InsertMfDraft(angle: Double; flipDir: WordBool; isEdgeDraft: WordBool; 
                            propType: Integer); dispid 65584;
    procedure ParentChildRelationship; dispid 65585;
    procedure SketchSpline(morePts: Integer; x: Double; y: Double; z: Double); dispid 65586;
    procedure SelectSketchPoint(x: Double; y: Double; incidence: Integer); dispid 65587;
    procedure SelectSketchLine(x0: Double; y0: Double; inc0: Integer; x1: Double; y1: Double; 
                               inc1: Integer); dispid 65588;
    procedure SelectSketchArc(x0: Double; y0: Double; inc0: Integer; x1: Double; y1: Double; 
                              inc1: Integer; xC: Double; yC: Double; incC: Integer; rotDir: Integer); dispid 65589;
    procedure SelectSketchSpline(size: Integer; x0: Double; y0: Double; inc0: Integer; x1: Double; 
                                 y1: Double; inc1: Integer; xC: Double; yC: Double; incC: Integer); dispid 65590;
    function CreateTangentArc(p1x: Double; p1y: Double; p1z: Double; p2x: Double; p2y: Double; 
                              p2z: Double): WordBool; dispid 65591;
    function Create3PointArc(p1x: Double; p1y: Double; p1z: Double; p2x: Double; p2y: Double; 
                             p2z: Double; p3x: Double; p3y: Double; p3z: Double): WordBool; dispid 65592;
    function CreateArcByCenter(p1x: Double; p1y: Double; p1z: Double; p2x: Double; p2y: Double; 
                               p2z: Double; p3x: Double; p3y: Double; p3z: Double): WordBool; dispid 65593;
    function CreateCircle(p1x: Double; p1y: Double; p1z: Double; p2x: Double; p2y: Double; 
                          p2z: Double): WordBool; dispid 65594;
    function AddDimension(x: Double; y: Double; z: Double): WordBool; dispid 65595;
    function AddHorizontalDimension(x: Double; y: Double; z: Double): WordBool; dispid 65596;
    function AddVerticalDimension(x: Double; y: Double; z: Double): WordBool; dispid 65597;
    function SelectSketchItem(selOpt: Integer; const Name: WideString; x: Double; y: Double; 
                              z: Double): WordBool; dispid 65598;
    procedure ClearSelection; dispid 65599;
    procedure Select(const selID: WideString; const selParams: WideString; x: Double; y: Double; 
                     z: Double); dispid 65600;
    procedure AndSelect(const selID: WideString; const selParams: WideString; x: Double; y: Double; 
                        z: Double); dispid 65601;
    function CreatePoint(pointX: Double; pointY: Double; pointZ: Double): WordBool; dispid 65602;
    function CreateLineDB(sx: Double; sy: Double; sz: Double; ex: Double; ey: Double; ez: Double): WordBool; dispid 65603;
    function CreateArcDB(x1: Double; y1: Double; z1: Double; x2: Double; y2: Double; z2: Double; 
                         x3: Double; y3: Double; z3: Double; dir: Smallint): WordBool; dispid 65604;
    function CreateCircleDB(cx: Double; cy: Double; cz: Double; radius: Double): WordBool; dispid 65605;
    function CreatePointDB(x: Double; y: Double; z: Double): WordBool; dispid 65606;
    function GetTitle: WideString; dispid 65607;
    function GetPathName: WideString; dispid 65608;
    function GetType: Integer; dispid 65609;
    procedure InsertObject; dispid 65610;
    procedure EditClearAll; dispid 65611;
    procedure EditCopy; dispid 65612;
    procedure EditCut; dispid 65613;
    procedure ObjectDisplayContent; dispid 65614;
    procedure ObjectDisplayAsIcon; dispid 65615;
    procedure ObjectResetsize; dispid 65616;
    procedure WindowRedraw; dispid 65617;
    procedure Dummy3; dispid 65618;
    procedure SetPickMode; dispid 65619;
    procedure ViewRotateminusx; dispid 65620;
    procedure ViewRotateminusy; dispid 65621;
    procedure ViewRotateminusz; dispid 65622;
    procedure ViewRotateplusx; dispid 65623;
    procedure ViewRotateplusy; dispid 65624;
    procedure ViewRotateplusz; dispid 65625;
    procedure ViewTranslateminusx; dispid 65626;
    procedure ViewTranslateminusy; dispid 65627;
    procedure ViewTranslateplusx; dispid 65628;
    procedure ViewTranslateplusy; dispid 65629;
    procedure ViewRotXMinusNinety; dispid 65630;
    procedure ViewRotYMinusNinety; dispid 65631;
    procedure ViewRotYPlusNinety; dispid 65632;
    procedure ViewZoomin; dispid 65633;
    procedure ViewZoomout; dispid 65634;
    procedure ViewDisplayHiddenremoved; dispid 65635;
    procedure ViewDisplayWireframe; dispid 65636;
    procedure ViewDisplayShaded; dispid 65637;
    procedure ViewRwShading; dispid 65638;
    procedure ViewOglShading; dispid 65639;
    procedure ViewZoomtofit; dispid 65640;
    procedure ViewRotate; dispid 65641;
    procedure ViewTranslate; dispid 65642;
    procedure ViewZoomto; dispid 65643;
    procedure ViewDisplayHiddengreyed; dispid 65644;
    procedure ViewDisplayFaceted; dispid 65645;
    procedure ViewConstraint; dispid 65646;
    procedure UserFavors; dispid 65647;
    procedure FeatureCirPattern(num: Integer; spacing: Double; flipDir: WordBool; 
                                const dName: WideString); dispid 65648;
    procedure EditSketch; dispid 65649;
    procedure FeatEdit; dispid 65650;
    procedure FeatEditDef; dispid 65651;
    procedure InsertPoint; dispid 65652;
    procedure InsertFamilyTableNew; dispid 65653;
    procedure Dummy1; dispid 65654;
    procedure InsertFamilyTableEdit; dispid 65655;
    procedure Dummy2; dispid 65656;
    procedure ToolsMacro; dispid 65657;
    procedure ToolsGrid; dispid 65658;
    procedure SketchCenterline; dispid 65659;
    procedure SketchAlign; dispid 65660;
    procedure SketchArc; dispid 65661;
    procedure SketchTangentArc; dispid 65662;
    procedure SketchCircle; dispid 65663;
    procedure SketchUndo; dispid 65664;
    procedure UserPreferences; dispid 65665;
    procedure Lights; dispid 65666;
    procedure SketchConstrainCoincident; dispid 65667;
    procedure SketchConstrainConcentric; dispid 65668;
    procedure SketchConstrainPerp; dispid 65669;
    procedure SketchConstrainTangent; dispid 65670;
    procedure SketchConstrainParallel; dispid 65671;
    procedure SketchUseEdge; dispid 65672;
    procedure SketchUseEdgeCtrline; dispid 65673;
    procedure SketchMirror; dispid 65674;
    procedure Save; dispid 65675;
    procedure Close; dispid 65676;
    procedure ViewDispRefaxes; dispid 65677;
    procedure ViewDispRefplanes; dispid 65678;
    procedure InsertSketch; dispid 65679;
    procedure InsertProtrusionSwept(propagate: WordBool; alignment: WordBool; 
                                    keepNormalConstant: WordBool); dispid 65680;
    procedure InsertProtrusionBlend(closed: WordBool); dispid 65681;
    procedure ToolsMassProps; dispid 65682;
    procedure PropertySheet; dispid 65683;
    procedure BlankRefGeom; dispid 65684;
    procedure UnBlankRefGeom; dispid 65685;
    procedure EditDelete; dispid 65686;
    procedure InsertProjectedSketch; dispid 65687;
    function CreatePlaneFixed(P1: OleVariant; P2: OleVariant; P3: OleVariant; useGlobal: WordBool): WordBool; dispid 65688;
    procedure Dummy5; dispid 65689;
    procedure Dummy6; dispid 65690;
    procedure DebugCheckBody; dispid 65691;
    procedure Dummy8; dispid 65692;
    procedure DimPreferences; dispid 65693;
    procedure UnblankSketch; dispid 65694;
    procedure EditSketchOrSingleSketchFeature; dispid 65695;
    procedure DebugCheckIgesGeom; dispid 65696;
    procedure BlankSketch; dispid 65697;
    function GetDefaultTextHeight: Double; dispid 65698;
    function IsActive(const compStr: WideString): WordBool; dispid 65699;
    function CreateEllipse(center: OleVariant; major: OleVariant; minor: OleVariant): WordBool; dispid 65700;
    function CreateEllipseVB(centerX: Double; centerY: Double; centerZ: Double; majorX: Double; 
                             majorY: Double; majorZ: Double; minorX: Double; minorY: Double; 
                             minorZ: Double): WordBool; dispid 65701;
    function CreateEllipticalArcByCenter(center: OleVariant; major: OleVariant; minor: OleVariant; 
                                         start: OleVariant; end_: OleVariant): WordBool; dispid 65702;
    function CreateEllipticalArcByCenterVB(centerX: Double; centerY: Double; centerZ: Double; 
                                           majorX: Double; majorY: Double; majorZ: Double; 
                                           minorX: Double; minorY: Double; minorZ: Double; 
                                           startX: Double; startY: Double; startZ: Double; 
                                           endX: Double; endY: Double; endZ: Double): WordBool; dispid 65703;
    function GetActiveSketch: IDispatch; dispid 65704;
    function IGetActiveSketch: ISketch; dispid 65713;
    function GetTessellationQuality: Integer; dispid 65705;
    procedure SetTessellationQuality(qualityNum: Integer); dispid 65706;
    function Parameter(const stringIn: WideString): IDispatch; dispid 65707;
    function IParameter(const stringIn: WideString): IDimension; dispid 65714;
    function SelectByID(const selID: WideString; const selParams: WideString; x: Double; y: Double; 
                        z: Double): WordBool; dispid 65708;
    function AndSelectByID(const selID: WideString; const selParams: WideString; x: Double; 
                           y: Double; z: Double): WordBool; dispid 65709;
    procedure Insert3DSketch; dispid 65710;
    function GetLightSourceName(id: Integer): WideString; dispid 65715;
    function AddLightSource(const idName: WideString; lTyp: SYSINT; const userName: WideString): WordBool; dispid 65720;
    function AddLightSourceExtProperty(id: Integer; PropertyExtension: OleVariant): Integer; dispid 65721;
    procedure ResetLightSourceExtProperty(id: Integer); dispid 65722;
    procedure DeleteLightSource(id: Integer); dispid 65723;
    function GetLightSourceExtProperty(id: Integer; PropertyId: Integer): OleVariant; dispid 65724;
    function AddLightToScene(const lpszNewValue: WideString): Integer; dispid 65725;
    function AddSceneExtProperty(PropertyExtension: OleVariant): Integer; dispid 65726;
    procedure ResetSceneExtProperty; dispid 65727;
    function GetSceneExtProperty(PropertyId: Integer): OleVariant; dispid 65728;
    procedure FileSummaryInfo; dispid 65729;
    function GetGridSettings: OleVariant; dispid 65730;
    procedure ToolsSketchTranslate; dispid 65731;
    procedure ToolsDistance; dispid 65732;
    procedure SkToolsAutoConstr; dispid 65733;
    procedure ToolsSketchScale; dispid 65734;
    procedure Paste; dispid 65735;
    procedure ToolsConfiguration; dispid 65736;
    procedure EntityProperties; dispid 65737;
    function GetArcCentersDisplayed: WordBool; dispid 65738;
    procedure SetArcCentersDisplayed(setting: WordBool); dispid 65739;
    procedure AutoSolveToggle; dispid 65740;
    procedure Dummy7; dispid 65741;
    function IGetLines: Double; dispid 65742;
    function GetLineCount: Integer; dispid 65743;
    procedure ICreateEllipse(var center: Double; var major: Double; var minor: Double); dispid 65744;
    procedure ICreateEllipticalArcByCenter(var center: Double; var major: Double; 
                                           var minor: Double; var start: Double; var end_: Double); dispid 65745;
    function ILightSourcePropertyValues(id: Integer): Double; dispid 65746;
    procedure InsertCutSwept(propagate: WordBool; alignment: WordBool; keepNormalConstant: WordBool); dispid 65747;
    procedure InsertCutBlend(closed: WordBool); dispid 65748;
    procedure InsertHelix(reversed: WordBool; clockwised: WordBool; tapered: WordBool; 
                          outward: WordBool; helixdef: Integer; height: Double; pitch: Double; 
                          revolution: Double; taperangle: Double; startangle: Double); dispid 65749;
    procedure ICreateLine(var P1: Double; var P2: Double); dispid 65750;
    procedure ICreateCenterLine(var P1: Double; var P2: Double); dispid 65751;
    procedure ICreateArc(var P1: Double; var P2: Double; var P3: Double; dir: Smallint); dispid 65752;
    procedure ICreateCircleByRadius(var P1: Double; radius: Double); dispid 65753;
    procedure GraphicsRedraw; dispid 65754;
    function GetVisibilityOfConstructPlanes: WordBool; dispid 65755;
    function GetDisplayWhenAdded: WordBool; dispid 65756;
    procedure SetDisplayWhenAdded(setting: WordBool); dispid 65757;
    function GetAddToDB: WordBool; dispid 65758;
    procedure SetAddToDB(setting: WordBool); dispid 65759;
    function DeSelectByID(const selID: WideString; const selParams: WideString; x: Double; 
                          y: Double; z: Double): WordBool; dispid 65760;
    property Visible: WordBool dispid 65761;
    procedure PrintDirect; dispid 65762;
    procedure PrintPreview; dispid 65763;
    procedure Quit; dispid 65764;
    procedure CreatePlaneThru3Points; dispid 65765;
    procedure ViewRotXPlusNinety; dispid 65766;
    function GetUnits: OleVariant; dispid 65767;
    procedure SetAngularUnits(uType: Smallint; fractBase: Smallint; fractDenom: Smallint; 
                              sigDigits: Smallint); dispid 65768;
    function GetAngularUnits: OleVariant; dispid 65769;
    function IGetUnits: Smallint; dispid 65770;
    procedure ISetAngularUnits(uType: Smallint; fractBase: Smallint; fractDenom: Smallint; 
                               sigDigits: Smallint); dispid 65771;
    function IGetAngularUnits: Smallint; dispid 65772;
    procedure ShowConfiguration(const configurationName: WideString); dispid 65773;
    procedure ResetConfiguration; dispid 65774;
    procedure AddConfiguration(const Name: WideString; const comment: WideString; 
                               const alternateName: WideString; suppressByDefault: WordBool; 
                               hideByDefault: WordBool; minFeatureManager: WordBool; 
                               inheritProperties: WordBool; flags: LongWord); dispid 65775;
    procedure DeleteConfiguration(const configurationName: WideString); dispid 65776;
    procedure EditConfiguration(const Name: WideString; const newName: WideString; 
                                const comment: WideString; const alternateName: WideString; 
                                suppressByDefault: WordBool; hideByDefault: WordBool; 
                                minFeatureManager: WordBool; inheritProperties: WordBool; 
                                flags: LongWord); dispid 65777;
    procedure CreatePlanePerCurveAndPassPoint(origAtCurve: WordBool); dispid 65778;
    function CreateFeatureMgrView(var bitmap: Integer): IDispatch; dispid 65779;
    function AddFeatureMgrView(var bitmap: Integer; var appView: Integer): WordBool; dispid 65780;
    function GetStandardViewRotation(viewId: Integer): OleVariant; dispid 65781;
    function IGetStandardViewRotation(viewId: Integer): Double; dispid 65782;
    procedure FeatureExtruRefSurface(sd: WordBool; flip: WordBool; dir: WordBool; t1: Integer; 
                                     t2: Integer; d1: Double; d2: Double; dchk1: WordBool; 
                                     dchk2: WordBool; ddir1: WordBool; ddir2: WordBool; 
                                     dang1: Double; dang2: Double; offsetReverse1: WordBool; 
                                     offsetReverse2: WordBool); dispid 65783;
    function IGet3rdPartyStorage(const stringIn: WideString; isStoring: WordBool): IUnknown; dispid 65784;
    procedure DeleteFeatureMgrView(var appView: Integer); dispid 65785;
    function GetMassProperties: OleVariant; dispid 65786;
    function IGetMassProperties(var mPropsData: Double): WordBool; dispid 65787;
    function GetLightSourceCount: Integer; dispid 65788;
    function GetLightSourceIdFromName(const lightName: WideString): Integer; dispid 65789;
    procedure SetNextSelectionGroupId(id: Integer); dispid 65790;
    procedure ISetNextSelectionGroupId(id: Integer); dispid 65791;
    function InsertMidSurfaceExt(placement: Double; knitFlag: WordBool): IDispatch; dispid 65792;
    function IInsertMidSurfaceExt(placement: Double; knitFlag: WordBool): IMidSurface; dispid 65793;
    procedure ICreatePlaneFixed(var P1: Double; var P2: Double; var P3: Double; useGlobal: WordBool); dispid 65794;
    function SelectByMark(const selID: WideString; const selParams: WideString; x: Double; 
                          y: Double; z: Double; mark: Integer): WordBool; dispid 65795;
    function AndSelectByMark(const selID: WideString; const selParams: WideString; x: Double; 
                             y: Double; z: Double; mark: Integer): WordBool; dispid 65796;
    function GetDependencies(traverseflag: Integer; searchflag: Integer): OleVariant; dispid 65797;
    function IGetDependencies(traverseflag: Integer; searchflag: Integer): WideString; dispid 65798;
    function GetNumDependencies(traverseflag: Integer; searchflag: Integer): Integer; dispid 65799;
    function IGetNumDependencies(traverseflag: Integer; searchflag: Integer): Integer; dispid 65800;
    function FirstFeature: IDispatch; dispid 65801;
    function IFirstFeature: IFeature; dispid 65802;
    procedure UnderiveSketch; dispid 65803;
    procedure DeriveSketch; dispid 65804;
    function IsExploded: WordBool; dispid 65805;
    function DeleteSelection(confirmFlag: WordBool): WordBool; dispid 65806;
    function DeleteNamedView(const viewname: WideString): WordBool; dispid 65807;
    function SetLightSourceName(id: Integer; const newName: WideString): WordBool; dispid 65808;
    procedure Insert3DSplineCurve(curveClosed: WordBool); dispid 65809;
    function SetLightSourcePropertyValuesVB(const idName: WideString; lType: SYSINT; diff: Double; 
                                            rgbColor: Integer; dist: Double; dirX: Double; 
                                            dirY: Double; dirZ: Double; spotDirX: Double; 
                                            spotDirY: Double; spotDirZ: Double; spotAngle: Double; 
                                            fallOff0: Double; fallOff1: Double; fallOff2: Double; 
                                            ambient: Double; specular: Double; 
                                            spotExponent: Double; bDisable: WordBool): WordBool; dispid 65810;
    function ICreateFeatureMgrView(var bitmap: Integer): IFeatMgrView; dispid 65811;
    function SelectedEdgeProperties(const edgeName: WideString): WordBool; dispid 65812;
    function SelectedFaceProperties(rgbColor: Integer; ambient: Double; diffuse: Double; 
                                    specular: Double; shininess: Double; transparency: Double; 
                                    emission: Double; usePartProps: WordBool; 
                                    const faceName: WideString): WordBool; dispid 65813;
    function SelectedFeatureProperties(rgbColor: Integer; ambient: Double; diffuse: Double; 
                                       specular: Double; shininess: Double; transparency: Double; 
                                       emission: Double; usePartProps: WordBool; 
                                       suppressed: WordBool; const featureName: WideString): WordBool; dispid 65814;
    procedure InsertSplitLineSil; dispid 65815;
    procedure InsertSplitLineProject(isDirectional: WordBool; flipDir: WordBool); dispid 65816;
    procedure InsertRib(is2Sided: WordBool; reverseThicknessDir: WordBool; thickness: Double; 
                        referenceEdgeIndex: Integer; reverseMaterialDir: WordBool; 
                        isDrafted: WordBool; draftOutward: WordBool; draftAngle: Double); dispid 65817;
    function AddRadialDimension(x: Double; y: Double; z: Double): WordBool; dispid 65818;
    function AddDiameterDimension(x: Double; y: Double; z: Double): WordBool; dispid 65819;
    function GetModelViewNames: OleVariant; dispid 65820;
    function IGetModelViewNames: WideString; dispid 65821;
    function GetModelViewCount: SYSINT; dispid 65822;
    function GetUserPreferenceDoubleValue(userPreferenceValue: Integer): Double; dispid 65823;
    function SetUserPreferenceDoubleValue(userPreferenceValue: Integer; Value: Double): WordBool; dispid 65824;
    procedure ViewDisplayCurvature; dispid 65825;
    procedure Scale; dispid 65826;
    procedure AddIns; dispid 65827;
    function InsertCurveFile(const fileName: WideString): WordBool; dispid 65828;
    procedure InsertCurveFileBegin; dispid 65829;
    function InsertCurveFilePoint(x: Double; y: Double; z: Double): WordBool; dispid 65830;
    function InsertCurveFileEnd: WordBool; dispid 65831;
    function ChangeSketchPlane: WordBool; dispid 65832;
    procedure ViewOrientationUndo; dispid 65833;
    procedure PrintOut(fromPage: Integer; toPage: Integer; numCopies: Integer; collate: WordBool; 
                       const printer: WideString; Scale: Double; printToFile: WordBool); dispid 65834;
    procedure SketchOffsetEntities(offset: Double; flip: WordBool); dispid 65835;
    procedure InsertLibraryFeature(const libFeatPartNameIn: WideString); dispid 65836;
    procedure SketchModifyTranslate(startX: Double; startY: Double; endX: Double; endY: Double); dispid 65837;
    procedure SketchModifyRotate(centerX: Double; centerY: Double; angle: Double); dispid 65838;
    procedure SketchModifyFlip(axisFlag: SYSINT); dispid 65839;
    function SketchModifyScale(scaleFactor: Double): WordBool; dispid 65840;
    function GetActiveConfiguration: IDispatch; dispid 65841;
    function IGetActiveConfiguration: IConfiguration; dispid 65842;
    function GetUserPreferenceToggle(userPreferenceToggle: Integer): WordBool; dispid 65843;
    function SetUserPreferenceToggle(userPreferenceValue: Integer; onFlag: WordBool): WordBool; dispid 65844;
    procedure InsertSweepRefSurface(propagate: WordBool; twistCtrlOption: Smallint; 
                                    keepTangency: WordBool; forceNonRational: WordBool); dispid 65845;
    procedure InsertLoftRefSurface(closed: WordBool; keepTangency: WordBool; 
                                   forceNonRational: WordBool); dispid 65846;
    procedure InsertProtrusionSwept2(propagate: WordBool; alignment: WordBool; 
                                     twistCtrlOption: Smallint; keepTangency: WordBool; 
                                     forceNonRational: WordBool); dispid 65847;
    procedure InsertProtrusionBlend2(closed: WordBool; keepTangency: WordBool; 
                                     forceNonRational: WordBool); dispid 65848;
    procedure InsertCutSwept2(propagate: WordBool; alignment: WordBool; twistCtrlOption: Smallint; 
                              keepTangency: WordBool; forceNonRational: WordBool); dispid 65849;
    procedure InsertCutBlend2(closed: WordBool; keepTangency: WordBool; forceNonRational: WordBool); dispid 65850;
    function IsEditingSelf: WordBool; dispid 65851;
    procedure ShowNamedView2(const vName: WideString; viewId: Integer); dispid 65852;
    procedure InsertDome(height: Double; reverseDir: WordBool; doEllipticSurface: WordBool); dispid 65853;
    property MaterialUserName: WideString dispid 65854;
    property MaterialIdName: WideString dispid 65855;
    property MaterialPropertyValues: OleVariant dispid 65856;
    function IMaterialPropertyValues: Double; dispid 65857;
    function AddPropertyExtension(PropertyExtension: OleVariant): Integer; dispid 65858;
    function GetPropertyExtension(id: Integer): OleVariant; dispid 65859;
    procedure ResetPropertyExtension; dispid 65860;
    function GetUpdateStamp: Integer; dispid 65861;
    procedure ViewZoomTo2(x1: Double; y1: Double; z1: Double; x2: Double; y2: Double; z2: Double); dispid 65862;
    procedure ScreenRotate; dispid 65863;
    property PrintSetup[setupType: Integer]: Smallint dispid 65864;
    procedure GraphicsRedraw2; dispid 65865;
    procedure InsertCosmeticThread(type_: Smallint; depth: Double; length: Double; 
                                   const note: WideString); dispid 65866;
    procedure HideCosmeticThread; dispid 65867;
    procedure ShowCosmeticThread; dispid 65868;
    procedure SimpleHole2(dia: Double; sd: WordBool; flip: WordBool; dir: WordBool; t1: Integer; 
                          t2: Integer; d1: Double; d2: Double; dchk1: WordBool; dchk2: WordBool; 
                          ddir1: WordBool; ddir2: WordBool; dang1: Double; dang2: Double; 
                          offsetReverse1: WordBool; offsetReverse2: WordBool); dispid 65869;
    procedure IRelease3rdPartyStorage(const stringIn: WideString); dispid 65870;
    function FeatureRevolve2(angle: Double; reverseDir: WordBool; angle2: Double; revType: Integer; 
                             options: Integer): Integer; dispid 65871;
    function FeatureRevolveCut2(angle: Double; reverseDir: WordBool; angle2: Double; 
                                revType: Integer; options: Integer): Integer; dispid 65872;
    procedure SetSaveFlag; dispid 65873;
    function GetExternalReferenceName: WideString; dispid 65874;
    function SelectByRay(doubleInfoIn: OleVariant; typeWanted: Integer): WordBool; dispid 65875;
    function ISelectByRay(var pointIn: Double; var vectorIn: Double; radiusIn: Double; 
                          typeWanted: Integer): WordBool; dispid 65876;
    procedure SetSceneBkgDIB(l_dib: Integer); dispid 65877;
    property SceneBkgImageFileName: WideString dispid 65878;
    procedure InsertBkgImage(const newName: WideString); dispid 65879;
    procedure DeleteBkgImage; dispid 65880;
    procedure InsertSplinePoint(x: Double; y: Double; z: Double); dispid 65881;
    procedure InsertLoftRefSurface2(closed: WordBool; keepTangency: WordBool; 
                                    forceNonRational: WordBool; tessToleranceFactor: Double; 
                                    startMatchingType: Smallint; endMatchingType: Smallint); dispid 65882;
    procedure InsertProtrusionBlend3(closed: WordBool; keepTangency: WordBool; 
                                     forceNonRational: WordBool; tessToleranceFactor: Double; 
                                     startMatchingType: Smallint; endMatchingType: Smallint); dispid 65883;
    procedure InsertCutBlend3(closed: WordBool; keepTangency: WordBool; forceNonRational: WordBool; 
                              tessToleranceFactor: Double; startMatchingType: Smallint; 
                              endMatchingType: Smallint); dispid 65884;
    procedure AlignDimensions; dispid 65885;
    procedure BreakDimensionAlignment; dispid 65886;
    procedure SketchFillet1(rad: Double); dispid 65887;
    procedure FeatureChamferType(chamferType: Smallint; width: Double; angle: Double; 
                                 flip: WordBool; otherDist: Double; vertexChamDist1: Double; 
                                 vertexChamDist2: Double; vertexChamDist3: Double); dispid 65888;
    procedure FeatureCutThin(sd: WordBool; flip: WordBool; dir: WordBool; t1: Integer; t2: Integer; 
                             d1: Double; d2: Double; dchk1: WordBool; dchk2: WordBool; 
                             ddir1: WordBool; ddir2: WordBool; dang1: Double; dang2: Double; 
                             offsetReverse1: WordBool; offsetReverse2: WordBool; thk1: Double; 
                             thk2: Double; endThk: Double; revThinDir: Integer; capEnds: Integer; 
                             addBends: WordBool; bendRad: Double); dispid 65889;
    procedure FeatureBossThin(sd: WordBool; flip: WordBool; dir: WordBool; t1: Integer; 
                              t2: Integer; d1: Double; d2: Double; dchk1: WordBool; 
                              dchk2: WordBool; ddir1: WordBool; ddir2: WordBool; dang1: Double; 
                              dang2: Double; offsetReverse1: WordBool; offsetReverse2: WordBool; 
                              thk1: Double; thk2: Double; endThk: Double; revThinDir: Integer; 
                              capEnds: Integer; addBends: WordBool; bendRad: Double); dispid 65890;
    function InsertDatumTargetSymbol(const datum1: WideString; const datum2: WideString; 
                                     const datum3: WideString; areaStyle: Smallint; 
                                     areaOutside: WordBool; value1: Double; value2: Double; 
                                     const valueStr1: WideString; const valueStr2: WideString; 
                                     arrowsSmart: WordBool; arrowStyle: Smallint; 
                                     leaderLineStyle: Smallint; leaderBent: WordBool; 
                                     showArea: WordBool; showSymbol: WordBool): WordBool; dispid 65891;
    function EditDatumTargetSymbol(const datum1: WideString; const datum2: WideString; 
                                   const datum3: WideString; areaStyle: Smallint; 
                                   areaOutside: WordBool; value1: Double; value2: Double; 
                                   const valueStr1: WideString; const valueStr2: WideString; 
                                   arrowsSmart: WordBool; arrowStyle: Smallint; 
                                   leaderLineStyle: Smallint; leaderBent: WordBool; 
                                   showArea: WordBool; showSymbol: WordBool): WordBool; dispid 65892;
    procedure InsertBOMBalloon; dispid 65893;
    function FeatureReferenceCurve(numOfCurves: Integer; baseCurves: OleVariant; merge: WordBool; 
                                   const fromFileName: WideString; out errorCode: Integer): IDispatch; dispid 65894;
    function IFeatureReferenceCurve(numOfCurves: Integer; baseCurves: {??PPPUserType1}OleVariant; 
                                    merge: WordBool; const fromFileName: WideString; 
                                    out errorCode: Integer): IReferenceCurve; dispid 65895;
    procedure FontBold(bold: WordBool); dispid 65896;
    procedure FontItalic(italic: WordBool); dispid 65897;
    procedure FontUnderline(underline: WordBool); dispid 65898;
    procedure FontFace(const face: WideString); dispid 65899;
    procedure FontPoints(points: Smallint); dispid 65900;
    procedure FontUnits(units: Double); dispid 65901;
    function SketchSplineByEqnParams(paramsIn: OleVariant): WordBool; dispid 65902;
    procedure AlignParallelDimensions; dispid 65903;
    procedure SetBlockingState(stateIn: Integer); dispid 65904;
    procedure ResetBlockingState; dispid 65905;
    function GetSceneBkgDIB: Integer; dispid 65906;
    procedure InsertHatchedFace; dispid 65907;
    function GetColorTable: IDispatch; dispid 65908;
    function IGetColorTable: IColorTable; dispid 65909;
    procedure InsertSweepRefSurface2(propagate: WordBool; twistCtrlOption: Smallint; 
                                     keepTangency: WordBool; forceNonRational: WordBool; 
                                     startMatchingType: Smallint; endMatchingType: Smallint); dispid 65910;
    procedure InsertProtrusionSwept3(propagate: WordBool; alignment: WordBool; 
                                     twistCtrlOption: Smallint; keepTangency: WordBool; 
                                     forceNonRational: WordBool; startMatchingType: Smallint; 
                                     endMatchingType: Smallint); dispid 65911;
    procedure InsertCutSwept3(propagate: WordBool; alignment: WordBool; twistCtrlOption: Smallint; 
                              keepTangency: WordBool; forceNonRational: WordBool; 
                              startMatchingType: Smallint; endMatchingType: Smallint); dispid 65912;
    function IsOpenedViewOnly: WordBool; dispid 65913;
    function IsOpenedReadOnly: WordBool; dispid 65914;
    procedure ViewZoomToSelection; dispid 65915;
    procedure FeatureBossThicken(thickness: Double; direction: Integer; faceIndex: Integer); dispid 65916;
    procedure FeatureCutThicken(thickness: Double; direction: Integer; faceIndex: Integer); dispid 65917;
    function InsertAxis: WordBool; dispid 65918;
    procedure EditUndo(nSteps: LongWord); dispid 65919;
    procedure SelectMidpoint; dispid 65920;
    function ISketchSplineByEqnParams(var propArray: SYSINT; var knotsArray: Double; 
                                      var cntrlPntCoordArray: Double): Integer; dispid 65921;
    function VersionHistory: OleVariant; dispid 65922;
    function IVersionHistory: WideString; dispid 65923;
    function IGetVersionHistoryCount: SYSINT; dispid 65924;
    procedure Rebuild(options: Integer); dispid 65925;
    procedure InsertFeatureShellAddThickness(thickness: Double); dispid 65926;
    procedure InsertOffsetSurface(thickness: Double; reverse: WordBool); dispid 65927;
    procedure SimplifySpline(toleranceIn: Double); dispid 65928;
    property SummaryInfo[FieldId: Integer]: WideString dispid 65929;
    property CustomInfo[const FieldName: WideString]: WideString dispid 65930;
    function GetCustomInfoCount: Integer; dispid 65931;
    function GetCustomInfoType(const FieldName: WideString): WideString; dispid 65932;
    function GetCustomInfoNames: OleVariant; dispid 65933;
    function IGetCustomInfoNames: WideString; dispid 65934;
    function AddCustomInfo(const FieldName: WideString; const FieldType: WideString; 
                           const FieldValue: WideString): WordBool; dispid 65935;
    function DeleteCustomInfo(const FieldName: WideString): WordBool; dispid 65936;
    procedure PrintOut2(fromPage: Integer; toPage: Integer; numCopies: Integer; collate: WordBool; 
                        const printer: WideString; Scale: Double; printToFile: WordBool; 
                        const ptfName: WideString); dispid 65937;
    function SetReadOnlyState(setReadOnly: WordBool): WordBool; dispid 65938;
    function InsertFamilyTableOpen(const fileName: WideString): WordBool; dispid 65939;
    function MultiSelectByRay(doubleInfoIn: OleVariant; typeWanted: Integer; Append: WordBool): WordBool; dispid 65940;
    function IMultiSelectByRay(var pointIn: Double; var vectorIn: Double; radiusIn: Double; 
                               typeWanted: Integer; Append: WordBool): WordBool; dispid 65941;
    procedure InsertNewNote3(const upperText: WideString; noLeader: WordBool; bentLeader: WordBool; 
                             arrowStyle: Smallint; leaderSide: Smallint; angle: Double; 
                             balloonStyle: Smallint; balloonFit: Smallint; smartArrow: WordBool); dispid 65942;
    procedure InsertWeldSymbol2(const dim1: WideString; const symbol: WideString; 
                                const dim2: WideString; symmetric: WordBool; fieldWeld: WordBool; 
                                showOtherSide: WordBool; dashOnTop: WordBool; peripheral: WordBool; 
                                hasProcess: WordBool; const processValue: WideString); dispid 65943;
    function InsertSurfaceFinishSymbol2(symType: Integer; leaderType: Integer; locX: Double; 
                                        locY: Double; locZ: Double; laySymbol: Integer; 
                                        arrowType: Integer; const machAllowance: WideString; 
                                        const otherVals: WideString; const prodMethod: WideString; 
                                        const sampleLen: WideString; 
                                        const maxRoughness: WideString; 
                                        const minRoughness: WideString; 
                                        const roughnessSpacing: WideString): WordBool; dispid 65944;
    function SaveSilent: Integer; dispid 65945;
    function SaveAsSilent(const newName: WideString; saveAsCopy: WordBool): Integer; dispid 65946;
    function AddCustomInfo2(const FieldName: WideString; FieldType: Integer; 
                            const FieldValue: WideString): WordBool; dispid 65947;
    function GetCustomInfoType2(const FieldName: WideString): Integer; dispid 65948;
    function InsertRefPoint: WordBool; dispid 65949;
    function FeatureFillet2(r1: Double; propagate: WordBool; ftyp: WordBool; varRadTyp: WordBool; 
                            overFlowType: Integer; nRadii: SYSINT; radii: OleVariant): Integer; dispid 65950;
    function IFeatureFillet2(r1: Double; propagate: WordBool; ftyp: WordBool; varRadTyp: WordBool; 
                             overFlowType: Integer; nRadii: SYSINT; var radii: Double): Integer; dispid 65951;
    function GetFirstAnnotation: IDispatch; dispid 65952;
    function IGetFirstAnnotation: IAnnotation; dispid 65953;
    function InsertCoordinateSystem(xFlippedIn: WordBool; yFlippedIn: WordBool; zFlippedIn: WordBool): WordBool; dispid 65954;
    function GetToolbarVisibility(toolbar: Integer): WordBool; dispid 65955;
    procedure SetToolbarVisibility(toolbar: Integer; visibility: WordBool); dispid 65956;
    procedure ViewDispCoordinateSystems; dispid 65957;
    procedure ViewDispTempRefaxes; dispid 65958;
    procedure ViewDispRefPoints; dispid 65959;
    procedure ViewDispOrigins; dispid 65960;
    function GetCoordinateSystemXformByName(const nameIn: WideString): OleVariant; dispid 65961;
    function IGetCoordinateSystemXformByName(const nameIn: WideString): Double; dispid 65962;
    function GetCurrentCoordinateSystemName: WideString; dispid 65963;
    function EnumModelViews: IEnumModelViews; dispid 65964;
    function InsertCompositeCurve: WordBool; dispid 65965;
    procedure SketchParabola(val1: Double; val2: Double; z1: Double; val3: Double; val4: Double; 
                             z2: Double; val5: Double; val6: Double; z3: Double; val7: Double; 
                             val8: Double; z4: Double); dispid 65966;
    procedure InsertRadiateSurface(distance: Double; flipDir: WordBool; tangentPropagate: WordBool); dispid 65967;
    procedure InsertSewRefSurface; dispid 65968;
    function InsertShape(pressureOn: Integer; tangentsOn: Integer; pressureGain: Double; 
                         tangentGain: Double; curveSpringGain: Double; alpha: Double; beta: Double; 
                         gamma: Double; delta: Double; degree: Integer; split: Integer; 
                         tuning: Integer): Integer; dispid 65969;
    procedure InsertMfDraft2(angle: Double; flipDir: WordBool; isEdgeDraft: WordBool; 
                             propType: Integer; stepDraft: WordBool); dispid 65970;
    function GetConfigurationCount: Integer; dispid 65971;
    function GetConfigurationNames: OleVariant; dispid 65972;
    function IGetConfigurationNames(var count: Integer): WideString; dispid 65973;
    procedure FeatureCut2(sd: WordBool; flip: WordBool; dir: WordBool; t1: Integer; t2: Integer; 
                          d1: Double; d2: Double; dchk1: WordBool; dchk2: WordBool; 
                          ddir1: WordBool; ddir2: WordBool; dang1: Double; dang2: Double; 
                          offsetReverse1: WordBool; offsetReverse2: WordBool; 
                          keepPieceIndex: Integer); dispid 65974;
    procedure InsertCutSurface(flip: WordBool; keepPieceIndex: Integer); dispid 65975;
    function GetDetailingDefaults: IDispatch; dispid 65976;
    function IGetDetailingDefaults: IDetailingDefaults; dispid 65977;
    function ListExternalFileReferencesCount(useSearchRules: WordBool): Integer; dispid 65978;
    function ListExternalFileReferences(useSearchRules: WordBool): OleVariant; dispid 65979;
    function IListExternalFileReferences(useSearchRules: WordBool; numRefs: Integer): WideString; dispid 65980;
    function SketchSplineByEqnParams2(paramsIn: OleVariant): WordBool; dispid 65981;
    function GetFirstModelView: IDispatch; dispid 65982;
    function IGetFirstModelView: IModelView; dispid 65983;
    function InsertPlanarRefSurface: WordBool; dispid 65984;
    function GetNext: IDispatch; dispid 65985;
    function GetSaveFlag: WordBool; dispid 65986;
    function AddCustomInfo3(const configuration: WideString; const FieldName: WideString; 
                            FieldType: Integer; const FieldValue: WideString): WordBool; dispid 65987;
    property CustomInfo2[const configuration: WideString; const FieldName: WideString]: WideString dispid 65988;
    function DeleteCustomInfo2(const configuration: WideString; const FieldName: WideString): WordBool; dispid 65989;
    function GetCustomInfoCount2(const configuration: WideString): Integer; dispid 65990;
    function GetCustomInfoNames2(const configuration: WideString): OleVariant; dispid 65991;
    function IGetCustomInfoNames2(const configuration: WideString): WideString; dispid 65992;
    function GetCustomInfoType3(const configuration: WideString; const FieldName: WideString): Integer; dispid 65993;
    function GetConsiderLeadersAsLines: WordBool; dispid 65994;
    function SetConsiderLeadersAsLines(leadersAsLines: WordBool): WordBool; dispid 65995;
    procedure InsertRevolvedRefSurface(angle: Double; reverseDir: WordBool; angle2: Double; 
                                       revType: SYSINT); dispid 65996;
    function GetBendState: Integer; dispid 65997;
    function SetBendState(bendState: Integer): Integer; dispid 65998;
    property ShowFeatureErrorDialog: WordBool dispid 65999;
    procedure ClearUndoList; dispid 66000;
    function GetFeatureManagerWidth: Integer; dispid 66001;
    function SetFeatureManagerWidth(width: Integer): Integer; dispid 66002;
    function InsertProjectedSketch2(reverse: Integer): IDispatch; dispid 66003;
    function IInsertProjectedSketch2(reverse: Integer): IFeature; dispid 66004;
    function GetFeatureCount: Integer; dispid 66005;
    function FeatureByPositionReverse(num: Integer): IDispatch; dispid 66006;
    function IFeatureByPositionReverse(num: Integer): IFeature; dispid 66007;
    function RayIntersections(bodiesIn: OleVariant; basePointsIn: OleVariant; 
                              vectorsIn: OleVariant; options: Integer; hitRadius: Double; 
                              offset: Double): Integer; dispid 66008;
    function IRayIntersections(var bodiesIn: IBody; numBodies: Integer; var basePointsIn: Double; 
                               var vectorsIn: Double; numRays: Integer; options: Integer; 
                               hitRadius: Double; offset: Double): Integer; dispid 66009;
    function GetRayIntersectionsPoints: OleVariant; dispid 66010;
    function IGetRayIntersectionsPoints: Double; dispid 66011;
    function GetRayIntersectionsTopology: OleVariant; dispid 66012;
    function IGetRayIntersectionsTopology: IUnknown; dispid 66013;
    procedure EditSeedFeat; dispid 66014;
    function EditSuppress: WordBool; dispid 66015;
    function EditUnsuppress: WordBool; dispid 66016;
    function EditUnsuppressDependent: WordBool; dispid 66017;
    function EditRollback: WordBool; dispid 66018;
    function Save2(silent: WordBool): Integer; dispid 66019;
    function SaveAs2(const newName: WideString; saveAsVersion: Integer; saveAsCopy: WordBool; 
                     silent: WordBool): Integer; dispid 66020;
    procedure SetPopupMenuMode(modeIn: SYSINT); dispid 66021;
    function GetPopupMenuMode: SYSINT; dispid 66022;
    procedure CloseFamilyTable; dispid 66023;
    procedure CreatePlaneAtSurface(interIndex: SYSINT; projOpt: WordBool; reverseDir: WordBool; 
                                   normalPlane: WordBool; angle: Double); dispid 66024;
    procedure SketchOffset(offset: Double; contourMode: WordBool); dispid 66025;
    function CreateLinearSketchStepAndRepeat(numX: Integer; numY: Integer; spacingX: Double; 
                                             spacingY: Double; angleX: Double; angleY: Double; 
                                             const deleteInstances: WideString): WordBool; dispid 66026;
    function SetAmbientLightProperties(const Name: WideString; ambient: Double; diffuse: Double; 
                                       specular: Double; colour: Integer; enabled: WordBool; 
                                       fixed: WordBool): WordBool; dispid 66027;
    function GetAmbientLightProperties(const Name: WideString; var ambient: Double; 
                                       var diffuse: Double; var specular: Double; 
                                       var colour: Integer; var enabled: WordBool; 
                                       var fixed: WordBool): WordBool; dispid 66028;
    function SetPointLightProperties(const Name: WideString; ambient: Double; diffuse: Double; 
                                     specular: Double; colour: Integer; enabled: WordBool; 
                                     fixed: WordBool; x: Double; y: Double; z: Double): WordBool; dispid 66029;
    function GetPointLightProperties(const Name: WideString; var ambient: Double; 
                                     var diffuse: Double; var specular: Double; 
                                     var colour: Integer; var enabled: WordBool; 
                                     var fixed: WordBool; var x: Double; var y: Double; 
                                     var z: Double): WordBool; dispid 66030;
    function SetDirectionLightProperties(const Name: WideString; ambient: Double; diffuse: Double; 
                                         specular: Double; colour: Integer; enabled: WordBool; 
                                         fixed: WordBool; x: Double; y: Double; z: Double): WordBool; dispid 66031;
    function GetDirectionLightProperties(const Name: WideString; var ambient: Double; 
                                         var diffuse: Double; var specular: Double; 
                                         var colour: Integer; var enabled: WordBool; 
                                         var fixed: WordBool; var x: Double; var y: Double; 
                                         var z: Double): WordBool; dispid 66032;
    function SetSpotlightProperties(const Name: WideString; ambient: Double; diffuse: Double; 
                                    specular: Double; colour: Integer; enabled: WordBool; 
                                    fixed: WordBool; posx: Double; posy: Double; posz: Double; 
                                    targetx: Double; targety: Double; targetz: Double; 
                                    coneAngle: Double): WordBool; dispid 66033;
    function GetSpotlightProperties(const Name: WideString; var ambient: Double; 
                                    var diffuse: Double; var specular: Double; var colour: Integer; 
                                    var enabled: WordBool; var fixed: WordBool; var x: Double; 
                                    var y: Double; var z: Double; var targetx: Double; 
                                    var targety: Double; var targetz: Double; var coneAngle: Double): WordBool; dispid 66034;
    procedure SplitOpenSegment(x: Double; y: Double; z: Double); dispid 66035;
    procedure AutoInferToggle; dispid 66036;
    procedure SketchRectangleAtAnyAngle(val1: Double; val2: Double; z1: Double; val3: Double; 
                                        val4: Double; z2: Double; val3x: Double; val3y: Double; 
                                        z3: Double; val5: WordBool); dispid 66037;
    function CreateCircularSketchStepAndRepeat(arcRadius: Double; arcAngle: Double; 
                                               patternNum: Integer; patternSpacing: Double; 
                                               patternRotate: WordBool; 
                                               const deleteInstances: WideString): WordBool; dispid 66038;
    procedure SplitClosedSegment(x0: Double; y0: Double; z0: Double; x1: Double; y1: Double; 
                                 z1: Double); dispid 66039;
    function IsLightLockedToModel(lightId: Integer): WordBool; dispid 66040;
    function LockLightToModel(lightId: Integer; fix: WordBool): WordBool; dispid 66041;
    function FeatureFillet3(r1: Double; propagate: WordBool; ftyp: SYSINT; varRadTyp: WordBool; 
                            overFlowType: Integer; nRadii: SYSINT; radii: OleVariant; 
                            useHelpPoint: WordBool; useTangentHoldLine: WordBool): Integer; dispid 66042;
    function IFeatureFillet3(r1: Double; propagate: WordBool; ftyp: SYSINT; varRadTyp: WordBool; 
                             overFlowType: Integer; nRadii: SYSINT; var radii: Double; 
                             useHelpPoint: WordBool; useTangentHoldLine: WordBool): Integer; dispid 66043;
    procedure InsertConnectionPoint; dispid 66044;
    procedure InsertRoutePoint; dispid 66045;
    procedure FeatureBossThicken2(thickness: Double; direction: Integer; faceIndex: Integer; 
                                  fillVolume: WordBool); dispid 66046;
    procedure FeatureCutThicken2(thickness: Double; direction: Integer; faceIndex: Integer; 
                                 fillVolume: WordBool); dispid 66047;
    function GetConfigurationByName(const Name: WideString): IDispatch; dispid 66048;
    function IGetConfigurationByName(const Name: WideString): IConfiguration; dispid 66049;
    function CreatePoint2(pointX: Double; pointY: Double; pointZ: Double): IDispatch; dispid 66050;
    function ICreatePoint2(pointX: Double; pointY: Double; pointZ: Double): ISketchPoint; dispid 66051;
    function CreateLine2(p1x: Double; p1y: Double; p1z: Double; p2x: Double; p2y: Double; 
                         p2z: Double): IDispatch; dispid 66052;
    function ICreateLine2(p1x: Double; p1y: Double; p1z: Double; p2x: Double; p2y: Double; 
                          p2z: Double): ISketchSegment; dispid 66053;
    function GetActiveSketch2: IDispatch; dispid 66054;
    function IGetActiveSketch2: ISketch; dispid 66055;
    procedure DrawLightIcons; dispid 66056;
    function GetLayerManager: IDispatch; dispid 66057;
    function IGetLayerManager: ILayerMgr; dispid 66058;
    function CreateCircle2(xC: Double; yC: Double; zc: Double; xp: Double; yp: Double; zp: Double): IDispatch; dispid 66059;
    function ICreateCircle2(xC: Double; yC: Double; zc: Double; xp: Double; yp: Double; zp: Double): ISketchSegment; dispid 66060;
    function CreateCircleByRadius2(xC: Double; yC: Double; zc: Double; radius: Double): IDispatch; dispid 66061;
    function ICreateCircleByRadius2(xC: Double; yC: Double; zc: Double; radius: Double): ISketchSegment; dispid 66062;
    function CreateArc2(xC: Double; yC: Double; zc: Double; xp1: Double; yp1: Double; zp1: Double; 
                        xp2: Double; yp2: Double; zp2: Double; direction: Smallint): IDispatch; dispid 66063;
    function ICreateArc2(xC: Double; yC: Double; zc: Double; xp1: Double; yp1: Double; zp1: Double; 
                         xp2: Double; yp2: Double; zp2: Double; direction: Smallint): ISketchSegment; dispid 66064;
    function CreateEllipse2(centerX: Double; centerY: Double; centerZ: Double; majorX: Double; 
                            majorY: Double; majorZ: Double; minorX: Double; minorY: Double; 
                            minorZ: Double): IDispatch; dispid 66065;
    function ICreateEllipse2(centerX: Double; centerY: Double; centerZ: Double; majorX: Double; 
                             majorY: Double; majorZ: Double; minorX: Double; minorY: Double; 
                             minorZ: Double): ISketchSegment; dispid 66066;
    function CreateEllipticalArc2(centerX: Double; centerY: Double; centerZ: Double; 
                                  majorX: Double; majorY: Double; majorZ: Double; minorX: Double; 
                                  minorY: Double; minorZ: Double; startX: Double; startY: Double; 
                                  startZ: Double; endX: Double; endY: Double; endZ: Double): IDispatch; dispid 66067;
    function ICreateEllipticalArc2(centerX: Double; centerY: Double; centerZ: Double; 
                                   majorX: Double; majorY: Double; majorZ: Double; minorX: Double; 
                                   minorY: Double; minorZ: Double; startX: Double; startY: Double; 
                                   startZ: Double; endX: Double; endY: Double; endZ: Double): ISketchSegment; dispid 66068;
    function CreateSpline(pointData: OleVariant): IDispatch; dispid 66069;
    function ICreateSpline(PointCount: Integer; var pointData: Double): ISketchSegment; dispid 66070;
    procedure ViewZoomtofit2; dispid 66071;
    procedure SetInferenceMode(inferenceMode: WordBool); dispid 66072;
    function GetInferenceMode: WordBool; dispid 66073;
    function SetTitle2(const newTitle: WideString): WordBool; dispid 66074;
    function SketchFillet2(rad: Double; constrainedCorners: Smallint): WordBool; dispid 66075;
    function IsTessellationValid: WordBool; dispid 66076;
    procedure EditRoute; dispid 66077;
    procedure FileReload; dispid 66078;
    function GetDesignTable: IDispatch; dispid 66079;
    function IGetDesignTable: IDesignTable; dispid 66080;
    function GetEntityName(const entity: IDispatch): WideString; dispid 66081;
    function IGetEntityName(const entity: IEntity): WideString; dispid 66082;
    function IGetNext: IModelDoc; dispid 66083;
    function ShowConfiguration2(const configurationName: WideString): WordBool; dispid 66084;
    function AddConfiguration2(const Name: WideString; const comment: WideString; 
                               const alternateName: WideString; suppressByDefault: WordBool; 
                               hideByDefault: WordBool; minFeatureManager: WordBool; 
                               inheritProperties: WordBool; flags: LongWord): WordBool; dispid 66085;
    function DeleteConfiguration2(const configurationName: WideString): WordBool; dispid 66086;
    function EditConfiguration2(const Name: WideString; const newName: WideString; 
                                const comment: WideString; const alternateName: WideString; 
                                suppressByDefault: WordBool; hideByDefault: WordBool; 
                                minFeatureManager: WordBool; inheritProperties: WordBool; 
                                flags: LongWord): WordBool; dispid 66087;
    function CreateSplineByEqnParams(paramsIn: OleVariant): IDispatch; dispid 66088;
    function ICreateSplineByEqnParams(var propArray: SYSINT; var knotsArray: Double; 
                                      var cntrlPntCoordArray: Double): ISketchSegment; dispid 66089;
    function CreateFeatureMgrView2(var bitmap: Integer; const toolTip: WideString): IDispatch; dispid 66090;
    function ICreateFeatureMgrView2(var bitmap: Integer; const toolTip: WideString): IFeatMgrView; dispid 66091;
    function AddFeatureMgrView2(var bitmap: Integer; var appView: Integer; const toolTip: WideString): WordBool; dispid 66092;
    procedure FeatureCut3(sd: WordBool; flip: WordBool; dir: WordBool; t1: Integer; t2: Integer; 
                          d1: Double; d2: Double; dchk1: WordBool; dchk2: WordBool; 
                          ddir1: WordBool; ddir2: WordBool; dang1: Double; dang2: Double; 
                          offsetReverse1: WordBool; offsetReverse2: WordBool; 
                          keepPieceIndex: Integer); dispid 66093;
    function GetFirstAnnotation2: IDispatch; dispid 66094;
    function IGetFirstAnnotation2: IAnnotation; dispid 66095;
    procedure InsertExtendSurface(extendLinear: WordBool; endCondition: Integer; distance: Double); dispid 66096;
    procedure InsertTangencySurface(oneSide: WordBool; isFlip: WordBool); dispid 66097;
    function CreateSplinesByEqnParams(paramsIn: OleVariant): OleVariant; dispid 66098;
    function ICreateSplinesByEqnParams(var propArray: SYSINT; var knotsArray: Double; 
                                       var cntrlPntCoordArray: Double): IEnumSketchSegments; dispid 66099;
    function CreateClippedSplines(paramsIn: OleVariant; x1: Double; y1: Double; x2: Double; 
                                  y2: Double): OleVariant; dispid 66100;
    function ICreateClippedSplines(var propArray: SYSINT; var knotsArray: Double; 
                                   var cntrlPntCoordArray: Double; x1: Double; y1: Double; 
                                   x2: Double; y2: Double): IEnumSketchSegments; dispid 66101;
    function EditSuppress2: WordBool; dispid 66102;
    function EditUnsuppress2: WordBool; dispid 66103;
    function EditUnsuppressDependent2: WordBool; dispid 66104;
    function EditRollback2: WordBool; dispid 66105;
    procedure HideDimension; dispid 66106;
    procedure ShowFeatureDimensions; dispid 66107;
    procedure HideFeatureDimensions; dispid 66108;
    procedure Sketch3DIntersections; dispid 66109;
    function FeatureFillet4(r1: Double; propagate: WordBool; uniformRadius: WordBool; ftyp: SYSINT; 
                            varRadTyp: WordBool; overFlowType: Integer; nRadii: SYSINT; 
                            radii: OleVariant; useHelpPoint: WordBool; 
                            useTangentHoldLine: WordBool; cornerType: WordBool; 
                            setbackDistCount: SYSINT; setBackDistances: OleVariant): Integer; dispid 66110;
    function IFeatureFillet4(r1: Double; propagate: WordBool; uniformRadius: WordBool; 
                             ftyp: SYSINT; varRadTyp: WordBool; overFlowType: Integer; 
                             nRadii: SYSINT; var radii: Double; useHelpPoint: WordBool; 
                             useTangentHoldLine: WordBool; cornerType: WordBool; 
                             setbackDistCount: SYSINT; var setBackDistances: Double): Integer; dispid 66111;
    procedure InsertDeleteFace; dispid 66112;
    function GetDependencies2(traverseflag: WordBool; searchflag: WordBool; 
                              addReadOnlyInfo: WordBool): OleVariant; dispid 66113;
    function IGetDependencies2(traverseflag: WordBool; searchflag: WordBool; 
                               addReadOnlyInfo: WordBool): WideString; dispid 66114;
    function IGetNumDependencies2(traverseflag: WordBool; searchflag: WordBool; 
                                  addReadOnlyInfo: WordBool): Integer; dispid 66115;
    procedure InsertScale(scaleFactor_x: Double; scaleFactor_y: Double; scaleFactor_z: Double; 
                          isUniform: WordBool; scaleType: SYSINT); dispid 66116;
    procedure LockAllExternalReferences; dispid 66117;
    procedure UnlockAllExternalReferences; dispid 66118;
    procedure BreakAllExternalReferences; dispid 66119;
    function EditDimensionProperties(tolType: Integer; tolMax: Double; tolMin: Double; 
                                     const tolMaxFit: WideString; const tolMinFit: WideString; 
                                     useDocPrec: WordBool; precision: Integer; arrowsIn: Integer; 
                                     useDocArrows: WordBool; arrow1: Integer; arrow2: Integer): WordBool; dispid 66120;
    function SketchPolygon(xCenter: Double; yCenter: Double; xEdge: Double; yEdge: Double; 
                           nSides: SYSINT; bInscribed: WordBool): WordBool; dispid 66121;
    function GetBlockingState: Integer; dispid 66122;
    function CreateFeatureMgrView3(var bitmap: Integer; const toolTip: WideString; 
                                   whichPane: Integer): IDispatch; dispid 66123;
    function ICreateFeatureMgrView3(var bitmap: Integer; const toolTip: WideString; 
                                    whichPane: Integer): IFeatMgrView; dispid 66124;
    function AddFeatureMgrView3(var bitmap: Integer; var appView: Integer; 
                                const toolTip: WideString; whichPane: Integer): WordBool; dispid 66125;
    function CreatePlaneAtOffset2(val: Double; flipDir: WordBool): IDispatch; dispid 66126;
    function ICreatePlaneAtOffset2(val: Double; flipDir: WordBool): IRefPlane; dispid 66127;
    function CreatePlaneAtAngle2(val: Double; flipDir: WordBool): IDispatch; dispid 66128;
    function ICreatePlaneAtAngle2(val: Double; flipDir: WordBool): IRefPlane; dispid 66129;
    function CreatePlaneThru3Points2: IDispatch; dispid 66130;
    function ICreatePlaneThru3Points2: IRefPlane; dispid 66131;
    function CreatePlanePerCurveAndPassPoint2(origAtCurve: WordBool): IDispatch; dispid 66132;
    function ICreatePlanePerCurveAndPassPoint2(origAtCurve: WordBool): IRefPlane; dispid 66133;
    function CreatePlaneAtSurface2(interIndex: SYSINT; projOpt: WordBool; reverseDir: WordBool; 
                                   normalPlane: WordBool; angle: Double): IDispatch; dispid 66134;
    function ICreatePlaneAtSurface2(interIndex: SYSINT; projOpt: WordBool; reverseDir: WordBool; 
                                    normalPlane: WordBool; angle: Double): IRefPlane; dispid 66135;
    function GetUserPreferenceIntegerValue(userPreferenceValue: Integer): Integer; dispid 66136;
    function SetUserPreferenceIntegerValue(userPreferenceValue: Integer; Value: Integer): WordBool; dispid 66137;
    function GetUserPreferenceTextFormat(userPreferenceValue: Integer): IDispatch; dispid 66138;
    function IGetUserPreferenceTextFormat(userPreferenceValue: Integer): ITextFormat; dispid 66139;
    function SetUserPreferenceTextFormat(userPreferenceValue: Integer; const Value: IDispatch): WordBool; dispid 66140;
    function ISetUserPreferenceTextFormat(userPreferenceValue: Integer; const Value: ITextFormat): WordBool; dispid 66141;
    procedure InsertRib2(is2Sided: WordBool; reverseThicknessDir: WordBool; thickness: Double; 
                         referenceEdgeIndex: Integer; reverseMaterialDir: WordBool; 
                         isDrafted: WordBool; draftOutward: WordBool; draftAngle: Double; 
                         isNormToSketch: WordBool); dispid 66142;
    function InsertObjectFromFile(const filePath: WideString; createLink: WordBool; xx: Double; 
                                  yy: Double; zz: Double): WordBool; dispid 66143;
    procedure InspectCurvature; dispid 66144;
    procedure RemoveInspectCurvature; dispid 66145;
    function InsertDatumTag2: IDispatch; dispid 66146;
    function IInsertDatumTag2: IDatumTag; dispid 66147;
    function ActivateFeatureMgrView(var appView: Integer): Integer; dispid 66148;
    procedure FeatureSketchDrivenPattern(useCentroid: WordBool); dispid 66149;
    procedure HideShowBodies; dispid 66150;
    procedure HideSolidBody; dispid 66151;
    procedure ShowSolidBody; dispid 66152;
    procedure InsertFramePoint(xx: Double; yy: Double; zz: Double); dispid 66153;
    procedure LockFramePoint; dispid 66154;
    procedure UnlockFramePoint; dispid 66155;
    function InsertGtol: IDispatch; dispid 66156;
    function IInsertGtol: IGtol; dispid 66157;
    function DeActivateFeatureMgrView(var appView: Integer): WordBool; dispid 66158;
    function InsertNote(const text: WideString): IDispatch; dispid 66159;
    function IInsertNote(const text: WideString): INote; dispid 66160;
    procedure SetSaveAsFileName(const fileName: WideString); dispid 66161;
    procedure ClosePrintPreview; dispid 66162;
    procedure HideComponent2; dispid 66163;
    procedure ShowComponent2; dispid 66164;
    function SaveBMP(const filenameIn: WideString; widthIn: Integer; heightIn: Integer): WordBool; dispid 66165;
    procedure InsertSketch2(updateEditRebuild: WordBool); dispid 66166;
    procedure Insert3DSketch2(updateEditRebuild: WordBool); dispid 66167;
    procedure InsertDeleteHole; dispid 66168;
    procedure PreTrimSurface(bMutualTrimIn: WordBool); dispid 66169;
    procedure PostTrimSurface(bSewSurfaceIn: WordBool); dispid 66170;
    procedure SketchConvertIsoCurves(percentRatio: Double; vORuDir: WordBool; 
                                     doConstrain: WordBool; skipHoles: WordBool); dispid 66171;
    procedure SelectLoop; dispid 66172;
    procedure InsertSheetMetalBaseFlange(thickness: Double; thickenDir: WordBool; radius: Double; 
                                         extrudeDist1: Double; extrudeDist2: Double; 
                                         flipExtruDir: WordBool; endCondition1: Integer; 
                                         endCondition2: Integer; dirToUse: Integer); dispid 66173;
    procedure InsertSheetMetalFold; dispid 66174;
    procedure InsertSheetMetalUnfold; dispid 66175;
    procedure InsertSheetMetalMiterFlange(useReliefRatio: WordBool; useDefaultGap: WordBool; 
                                          useAutoRelief: WordBool; globalRadius: Double; 
                                          ripGap: Double; autoReliefRatio: Double; 
                                          autoReliefWidth: Double; autoReliefDepth: Double; 
                                          reliefType: Integer; ripLocation: Integer; 
                                          trimSideBends: WordBool); dispid 66176;
    procedure CreateGroup; dispid 66177;
    procedure RemoveItemsFromGroup; dispid 66178;
    procedure RemoveGroups; dispid 66179;
    function InsertBOMBalloon2(Style: Integer; size: Integer; upperTextStyle: Integer; 
                               const upperText: WideString; lowerTextStyle: Integer; 
                               const lowerText: WideString): IDispatch; dispid 66180;
    function IInsertBOMBalloon2(Style: Integer; size: Integer; upperTextStyle: Integer; 
                                const upperText: WideString; lowerTextStyle: Integer; 
                                const lowerText: WideString): INote; dispid 66181;
    procedure EditRedo(nSteps: LongWord); dispid 66182;
    procedure InsertProtrusionBlend4(closed: WordBool; keepTangency: WordBool; 
                                     forceNonRational: WordBool; tessToleranceFactor: Double; 
                                     startMatchingType: Smallint; endMatchingType: Smallint; 
                                     isThinBody: WordBool; thickness1: Double; thickness2: Double; 
                                     thinType: Smallint); dispid 66183;
    procedure InsertCutBlend4(closed: WordBool; keepTangency: WordBool; forceNonRational: WordBool; 
                              tessToleranceFactor: Double; startMatchingType: Smallint; 
                              endMatchingType: Smallint; isThinBody: WordBool; thickness1: Double; 
                              thickness2: Double; thinType: Smallint); dispid 66184;
    procedure InsertProtrusionSwept4(propagate: WordBool; alignment: WordBool; 
                                     twistCtrlOption: Smallint; keepTangency: WordBool; 
                                     forceNonRational: WordBool; startMatchingType: Smallint; 
                                     endMatchingType: Smallint; isThinBody: WordBool; 
                                     thickness1: Double; thickness2: Double; thinType: Smallint); dispid 66185;
    procedure InsertCutSwept4(propagate: WordBool; alignment: WordBool; twistCtrlOption: Smallint; 
                              keepTangency: WordBool; forceNonRational: WordBool; 
                              startMatchingType: Smallint; endMatchingType: Smallint; 
                              isThinBody: WordBool; thickness1: Double; thickness2: Double; 
                              thinType: Smallint); dispid 66186;
    procedure SelectTangency; dispid 66187;
    function InsertBendTableOpen(const fileName: WideString): WordBool; dispid 66188;
    function InsertBendTableNew(const fileName: WideString; const units: WideString; 
                                const type_: WideString): WordBool; dispid 66189;
    procedure InsertBendTableEdit; dispid 66190;
    procedure DeleteBendTable; dispid 66191;
    procedure InsertSheetMetal3dBend(angle: Double; radius: Double; flipDir: WordBool; 
                                     bendPos: Smallint); dispid 66192;
    function CreateTangentArc2(p1x: Double; p1y: Double; p1z: Double; p2x: Double; p2y: Double; 
                               p2z: Double; arcTypeIn: Integer): WordBool; dispid 66193;
    function GetMassProperties2(var status: Integer): OleVariant; dispid 66194;
    function IGetMassProperties2(var status: Integer): Double; dispid 66195;
    procedure SketchChamfer(angleORdist: Double; dist1: Double; options: Integer); dispid 66196;
    procedure FeatureCut4(sd: WordBool; flip: WordBool; dir: WordBool; t1: Integer; t2: Integer; 
                          d1: Double; d2: Double; dchk1: WordBool; dchk2: WordBool; 
                          ddir1: WordBool; ddir2: WordBool; dang1: Double; dang2: Double; 
                          offsetReverse1: WordBool; offsetReverse2: WordBool; 
                          keepPieceIndex: Integer; normalCut: WordBool); dispid 66197;
    function GetPropertyManagerPage(dialogId: Integer; const title: WideString; 
                                    const handler: IUnknown): IPropertyManagerPage; dispid 66198;
    procedure AlignOrdinate; dispid 66199;
    procedure EditOrdinate; dispid 66200;
    function ReattachOrdinate: WordBool; dispid 66201;
    function EditBalloonProperties(Style: Integer; size: Integer; upperTextStyle: Integer; 
                                   const upperText: WideString; lowerTextStyle: Integer; 
                                   const lowerText: WideString): IDispatch; dispid 66202;
    function EditDimensionProperties2(tolType: Integer; tolMax: Double; tolMin: Double; 
                                      const tolMaxFit: WideString; const tolMinFit: WideString; 
                                      useDocPrec: WordBool; precision: Integer; arrowsIn: Integer; 
                                      useDocArrows: WordBool; arrow1: Integer; arrow2: Integer; 
                                      const prefixText: WideString; const suffixText: WideString; 
                                      showValue: WordBool; const calloutText1: WideString; 
                                      const calloutText2: WideString; centerText: WordBool): WordBool; dispid 66203;
    procedure InsertSheetMetalClosedCorner; dispid 66204;
    function SketchUseEdge2(chain: WordBool): WordBool; dispid 66205;
    function SketchOffsetEntities2(offset: Double; bothDirections: WordBool; chain: WordBool): WordBool; dispid 66206;
    function SketchOffset2(offset: Double; bothDirections: WordBool; chain: WordBool): WordBool; dispid 66207;
    function AddDimension2(x: Double; y: Double; z: Double): IDispatch; dispid 66208;
    function IAddDimension2(x: Double; y: Double; z: Double): IDisplayDimension; dispid 66209;
    function AddHorizontalDimension2(x: Double; y: Double; z: Double): IDispatch; dispid 66210;
    function IAddHorizontalDimension2(x: Double; y: Double; z: Double): IDisplayDimension; dispid 66211;
    function AddVerticalDimension2(x: Double; y: Double; z: Double): IDispatch; dispid 66212;
    function IAddVerticalDimension2(x: Double; y: Double; z: Double): IDisplayDimension; dispid 66213;
    function AddRadialDimension2(x: Double; y: Double; z: Double): IDispatch; dispid 66214;
    function IAddRadialDimension2(x: Double; y: Double; z: Double): IDisplayDimension; dispid 66215;
    function AddDiameterDimension2(x: Double; y: Double; z: Double): IDispatch; dispid 66216;
    function IAddDiameterDimension2(x: Double; y: Double; z: Double): IDisplayDimension; dispid 66217;
    function GetUserUnit(UnitType: Integer): IDispatch; dispid 66218;
    function IGetUserUnit(UnitType: Integer): IUserUnit; dispid 66219;
    function InsertWeldSymbol3: IDispatch; dispid 66220;
    function IInsertWeldSymbol3: IWeldSymbol; dispid 66221;
    function SaveAs3(const newName: WideString; saveAsVersion: Integer; options: Integer): Integer; dispid 66222;
    function GetUserPreferenceStringValue(userPreference: Integer): WideString; dispid 66223;
    function SetUserPreferenceStringValue(userPreference: Integer; const Value: WideString): WordBool; dispid 66224;
    procedure DeleteDesignTable; dispid 66225;
    function EditRebuild3: WordBool; dispid 66226;
    function ForceRebuild3(topOnly: WordBool): WordBool; dispid 66227;
  end;

// *********************************************************************//
// Interface: ISelectionMgr
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {83A33D59-27C5-11CE-BFD4-00400513BB57}
// *********************************************************************//
  ISelectionMgr = interface(IDispatch)
    ['{83A33D59-27C5-11CE-BFD4-00400513BB57}']
    function GetSelectedObjectCount: Integer; safecall;
    function GetSelectedObjectType(AtIndex: Integer): Integer; safecall;
    function GetSelectedObject(AtIndex: Integer): IDispatch; safecall;
    function IGetSelectedObject(AtIndex: Integer): IUnknown; safecall;
    function GetSelectionPoint(AtIndex: Integer): OleVariant; safecall;
    function GetSelectionPointInSketchSpace(AtIndex: Integer): OleVariant; safecall;
    function GetSelectedObject2(AtIndex: Integer): IDispatch; safecall;
    function IGetSelectedObject2(AtIndex: Integer): IUnknown; safecall;
    function IsInEditTarget(AtIndex: Integer): WordBool; safecall;
    function GetSelectedObjectsComponent(AtIndex: Integer): IDispatch; safecall;
    function IGetSelectedObjectsComponent(AtIndex: Integer): IComponent; safecall;
    function GetSelectedObject3(AtIndex: Integer): IDispatch; safecall;
    function IGetSelectedObject3(AtIndex: Integer): IUnknown; safecall;
    function GetSelectedObjectType2(AtIndex: Integer): Integer; safecall;
    function IGetSelectionPoint(AtIndex: Integer): Double; safecall;
    function IGetSelectionPointInSketchSpace(AtIndex: Integer): Double; safecall;
    function GetSelectedObjectMark(AtIndex: Integer): Integer; safecall;
    function SetSelectedObjectMark(AtIndex: Integer; mark: Integer; Action: Integer): WordBool; safecall;
    function DeSelect(AtIndex: OleVariant): Integer; safecall;
    function IDeSelect(count: Integer; var AtIndex: Integer): Integer; safecall;
    function IGetSelectedObjectsComponent2(AtIndex: Integer): IComponent2; safecall;
    function CreateCallout: ICallout; safecall;
    function GetSelectedObjectsDrawingView(AtIndex: Integer): IView; safecall;
    function Get_EnableContourSelection: WordBool; safecall;
    procedure Set_EnableContourSelection(valueOut: WordBool); safecall;
    function SetSelectionPoint(AtIndex: Integer; x: Double; y: Double; z: Double): WordBool; safecall;
    property EnableContourSelection: WordBool read Get_EnableContourSelection write Set_EnableContourSelection;
  end;

// *********************************************************************//
// DispIntf:  ISelectionMgrDisp
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {83A33D59-27C5-11CE-BFD4-00400513BB57}
// *********************************************************************//
  ISelectionMgrDisp = dispinterface
    ['{83A33D59-27C5-11CE-BFD4-00400513BB57}']
    function GetSelectedObjectCount: Integer; dispid 1;
    function GetSelectedObjectType(AtIndex: Integer): Integer; dispid 2;
    function GetSelectedObject(AtIndex: Integer): IDispatch; dispid 3;
    function IGetSelectedObject(AtIndex: Integer): IUnknown; dispid 4;
    function GetSelectionPoint(AtIndex: Integer): OleVariant; dispid 5;
    function GetSelectionPointInSketchSpace(AtIndex: Integer): OleVariant; dispid 6;
    function GetSelectedObject2(AtIndex: Integer): IDispatch; dispid 7;
    function IGetSelectedObject2(AtIndex: Integer): IUnknown; dispid 8;
    function IsInEditTarget(AtIndex: Integer): WordBool; dispid 9;
    function GetSelectedObjectsComponent(AtIndex: Integer): IDispatch; dispid 10;
    function IGetSelectedObjectsComponent(AtIndex: Integer): IComponent; dispid 11;
    function GetSelectedObject3(AtIndex: Integer): IDispatch; dispid 12;
    function IGetSelectedObject3(AtIndex: Integer): IUnknown; dispid 13;
    function GetSelectedObjectType2(AtIndex: Integer): Integer; dispid 14;
    function IGetSelectionPoint(AtIndex: Integer): Double; dispid 15;
    function IGetSelectionPointInSketchSpace(AtIndex: Integer): Double; dispid 16;
    function GetSelectedObjectMark(AtIndex: Integer): Integer; dispid 17;
    function SetSelectedObjectMark(AtIndex: Integer; mark: Integer; Action: Integer): WordBool; dispid 18;
    function DeSelect(AtIndex: OleVariant): Integer; dispid 19;
    function IDeSelect(count: Integer; var AtIndex: Integer): Integer; dispid 20;
    function IGetSelectedObjectsComponent2(AtIndex: Integer): IComponent2; dispid 21;
    function CreateCallout: ICallout; dispid 22;
    function GetSelectedObjectsDrawingView(AtIndex: Integer): IView; dispid 23;
    property EnableContourSelection: WordBool dispid 24;
    function SetSelectionPoint(AtIndex: Integer; x: Double; y: Double; z: Double): WordBool; dispid 25;
  end;

// *********************************************************************//
// Interface: IComponent
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {83A33D9A-27C5-11CE-BFD4-00400513BB57}
// *********************************************************************//
  IComponent = interface(IDispatch)
    ['{83A33D9A-27C5-11CE-BFD4-00400513BB57}']
    function GetChildren: OleVariant; safecall;
    function IGetChildren: PPUserType3; safecall;
    function IGetChildrenCount: SYSINT; safecall;
    function GetXform: OleVariant; safecall;
    function IGetXform: Double; safecall;
    function GetBody: IDispatch; safecall;
    function IGetBody: IBody; safecall;
    function Get_MaterialPropertyValues: OleVariant; safecall;
    procedure Set_MaterialPropertyValues(retval: OleVariant); safecall;
    function Get_IMaterialPropertyValues: Double; safecall;
    procedure Set_IMaterialPropertyValues(var retval: Double); safecall;
    function AddPropertyExtension(PropertyExtension: OleVariant): Integer; safecall;
    function GetPropertyExtension(id: Integer): OleVariant; safecall;
    procedure ResetPropertyExtension; safecall;
    function GetMaterialIdName: WideString; safecall;
    function SetMaterialIdName(const Name: WideString): WordBool; safecall;
    function GetMaterialUserName: WideString; safecall;
    function SetMaterialUserName(const Name: WideString): WordBool; safecall;
    function GetSectionedBodies(const viewIn: IDispatch): OleVariant; safecall;
    function GetBox(includeRefPlanes: WordBool; includeSketches: WordBool): OleVariant; safecall;
    function IGetBox(includeRefPlanes: WordBool; includeSketches: WordBool): Double; safecall;
    function SetXform(xformIn: OleVariant): WordBool; safecall;
    function ISetXform(var xformIn: Double): WordBool; safecall;
    function GetModelDoc: IDispatch; safecall;
    function IGetModelDoc: IModelDoc; safecall;
    function IsFixed: WordBool; safecall;
    function EnumRelatedBodies: IEnumBodies; safecall;
    function IsSuppressed: WordBool; safecall;
    function EnumSectionedBodies(const viewIn: IModelView): IEnumBodies; safecall;
    function IsHidden(considerSuppressed: WordBool): WordBool; safecall;
    function Get_Name: WideString; safecall;
    procedure Set_ReferencedConfiguration(const retval: WideString); safecall;
    function Get_ReferencedConfiguration: WideString; safecall;
    function GetSuppression: Integer; safecall;
    function SetSuppression(state: Integer): Integer; safecall;
    function Get_Visible: Integer; safecall;
    procedure Set_Visible(retval: Integer); safecall;
    function GetPathName: WideString; safecall;
    function SetXformAndSolve(xformIn: OleVariant): WordBool; safecall;
    function ISetXformAndSolve(var xformIn: Double): WordBool; safecall;
    function GetTessTriangles(noConversion: WordBool): OleVariant; safecall;
    function IGetTessTriangles(noConversion: WordBool): Single; safecall;
    function IGetTessTriangleCount: Integer; safecall;
    function GetTessNorms: OleVariant; safecall;
    function IGetTessNorms: Single; safecall;
    function GetTessTriStrips(noConversion: WordBool): OleVariant; safecall;
    function IGetTessTriStrips(noConversion: WordBool): Single; safecall;
    function IGetTessTriStripSize: Integer; safecall;
    function GetTessTriStripNorms: OleVariant; safecall;
    function IGetTessTriStripNorms: Single; safecall;
    function GetTessTriStripEdges: OleVariant; safecall;
    function IGetTessTriStripEdges: Integer; safecall;
    function IGetTessTriStripEdgeSize: Integer; safecall;
    function IsDisplayDataOutOfDate: Integer; safecall;
    function GetConstrainedStatus: Integer; safecall;
    function RemoveMaterialProperty: WordBool; safecall;
    function IGetTemporaryBodyID: Integer; safecall;
    function FindAttribute(const attributeDef: IDispatch; whichOne: Integer): IDispatch; safecall;
    function IFindAttribute(const attributeDef: IAttributeDef; whichOne: Integer): IAttribute; safecall;
    function Select(appendFlag: WordBool): WordBool; safecall;
    function SelectByMark(appendFlag: WordBool; mark: Integer): WordBool; safecall;
    function DeSelect: WordBool; safecall;
    function Get_Name2: WideString; safecall;
    procedure Set_Name2(const newName: WideString); safecall;
    function Get_Solving: Integer; safecall;
    property MaterialPropertyValues: OleVariant read Get_MaterialPropertyValues write Set_MaterialPropertyValues;
    property Name: WideString read Get_Name;
    property ReferencedConfiguration: WideString read Get_ReferencedConfiguration write Set_ReferencedConfiguration;
    property Visible: Integer read Get_Visible write Set_Visible;
    property Name2: WideString read Get_Name2 write Set_Name2;
    property Solving: Integer read Get_Solving;
  end;

// *********************************************************************//
// DispIntf:  IComponentDisp
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {83A33D9A-27C5-11CE-BFD4-00400513BB57}
// *********************************************************************//
  IComponentDisp = dispinterface
    ['{83A33D9A-27C5-11CE-BFD4-00400513BB57}']
    function GetChildren: OleVariant; dispid 1;
    function IGetChildren: {??PPUserType3}OleVariant; dispid 2;
    function IGetChildrenCount: SYSINT; dispid 3;
    function GetXform: OleVariant; dispid 4;
    function IGetXform: Double; dispid 5;
    function GetBody: IDispatch; dispid 6;
    function IGetBody: IBody; dispid 7;
    property MaterialPropertyValues: OleVariant dispid 8;
    function IMaterialPropertyValues: Double; dispid 9;
    function AddPropertyExtension(PropertyExtension: OleVariant): Integer; dispid 10;
    function GetPropertyExtension(id: Integer): OleVariant; dispid 11;
    procedure ResetPropertyExtension; dispid 12;
    function GetMaterialIdName: WideString; dispid 13;
    function SetMaterialIdName(const Name: WideString): WordBool; dispid 14;
    function GetMaterialUserName: WideString; dispid 15;
    function SetMaterialUserName(const Name: WideString): WordBool; dispid 16;
    function GetSectionedBodies(const viewIn: IDispatch): OleVariant; dispid 17;
    function GetBox(includeRefPlanes: WordBool; includeSketches: WordBool): OleVariant; dispid 18;
    function IGetBox(includeRefPlanes: WordBool; includeSketches: WordBool): Double; dispid 19;
    function SetXform(xformIn: OleVariant): WordBool; dispid 20;
    function ISetXform(var xformIn: Double): WordBool; dispid 21;
    function GetModelDoc: IDispatch; dispid 22;
    function IGetModelDoc: IModelDoc; dispid 23;
    function IsFixed: WordBool; dispid 24;
    function EnumRelatedBodies: IEnumBodies; dispid 25;
    function IsSuppressed: WordBool; dispid 26;
    function EnumSectionedBodies(const viewIn: IModelView): IEnumBodies; dispid 27;
    function IsHidden(considerSuppressed: WordBool): WordBool; dispid 28;
    property Name: WideString readonly dispid 29;
    property ReferencedConfiguration: WideString dispid 30;
    function GetSuppression: Integer; dispid 31;
    function SetSuppression(state: Integer): Integer; dispid 32;
    property Visible: Integer dispid 33;
    function GetPathName: WideString; dispid 34;
    function SetXformAndSolve(xformIn: OleVariant): WordBool; dispid 35;
    function ISetXformAndSolve(var xformIn: Double): WordBool; dispid 36;
    function GetTessTriangles(noConversion: WordBool): OleVariant; dispid 37;
    function IGetTessTriangles(noConversion: WordBool): Single; dispid 38;
    function IGetTessTriangleCount: Integer; dispid 39;
    function GetTessNorms: OleVariant; dispid 40;
    function IGetTessNorms: Single; dispid 41;
    function GetTessTriStrips(noConversion: WordBool): OleVariant; dispid 42;
    function IGetTessTriStrips(noConversion: WordBool): Single; dispid 43;
    function IGetTessTriStripSize: Integer; dispid 44;
    function GetTessTriStripNorms: OleVariant; dispid 45;
    function IGetTessTriStripNorms: Single; dispid 46;
    function GetTessTriStripEdges: OleVariant; dispid 47;
    function IGetTessTriStripEdges: Integer; dispid 48;
    function IGetTessTriStripEdgeSize: Integer; dispid 49;
    function IsDisplayDataOutOfDate: Integer; dispid 50;
    function GetConstrainedStatus: Integer; dispid 51;
    function RemoveMaterialProperty: WordBool; dispid 52;
    function IGetTemporaryBodyID: Integer; dispid 53;
    function FindAttribute(const attributeDef: IDispatch; whichOne: Integer): IDispatch; dispid 54;
    function IFindAttribute(const attributeDef: IAttributeDef; whichOne: Integer): IAttribute; dispid 55;
    function Select(appendFlag: WordBool): WordBool; dispid 56;
    function SelectByMark(appendFlag: WordBool; mark: Integer): WordBool; dispid 57;
    function DeSelect: WordBool; dispid 58;
    property Name2: WideString dispid 59;
    property Solving: Integer readonly dispid 60;
  end;

// *********************************************************************//
// Interface: IBody
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {83A33D3C-27C5-11CE-BFD4-00400513BB57}
// *********************************************************************//
  IBody = interface(IDispatch)
    ['{83A33D3C-27C5-11CE-BFD4-00400513BB57}']
    function GetFirstFace: IDispatch; safecall;
    function IGetFirstFace: IFace; safecall;
    function GetFaceCount: Integer; safecall;
    function CreateNewSurface: IDispatch; safecall;
    function ICreateNewSurface: ISurface; safecall;
    function CreateBodyFromSurfaces: WordBool; safecall;
    function CreatePlanarSurface(vRootPoint: OleVariant; vNormal: OleVariant): IDispatch; safecall;
    function ICreatePlanarSurface(vRootPoint: OleVariant; vNormal: OleVariant): ISurface; safecall;
    function CreateRevolutionSurface(const profileCurve: IDispatch; axisPoint: OleVariant; 
                                     axisDirection: OleVariant; profileEndPtParams: OleVariant): IDispatch; safecall;
    function ICreateRevolutionSurface(const profileCurve: ICurve; axisPoint: OleVariant; 
                                      axisDirection: OleVariant; profileEndPtParams: OleVariant): ISurface; safecall;
    function CreateBsplineSurface(props: OleVariant; uKnots: OleVariant; vKnots: OleVariant; 
                                  ctrlPtCoords: OleVariant): IDispatch; safecall;
    function ICreateBsplineSurface(props: OleVariant; uKnots: OleVariant; vKnots: OleVariant; 
                                   ctrlPtCoords: OleVariant): ISurface; safecall;
    function CreateTrimmedSurface: WordBool; safecall;
    function AddProfileLine(rootPoint: OleVariant; direction: OleVariant): IDispatch; safecall;
    function IAddProfileLine(rootPoint: OleVariant; direction: OleVariant): ICurve; safecall;
    function AddProfileArc(center: OleVariant; axis: OleVariant; radius: Double; 
                           startPoint: OleVariant; endPoint: OleVariant): IDispatch; safecall;
    function IAddProfileArc(center: OleVariant; axis: OleVariant; radius: Double; 
                            startPoint: OleVariant; endPoint: OleVariant): ICurve; safecall;
    function AddProfileBspline(props: OleVariant; knots: OleVariant; ctrlPtCoords: OleVariant): IDispatch; safecall;
    function IAddProfileBspline(props: OleVariant; knots: OleVariant; ctrlPtCoords: OleVariant): ICurve; safecall;
    function CreateExtrusionSurface(const profileCurve: IDispatch; axisDirection: OleVariant): IDispatch; safecall;
    function ICreateExtrusionSurface(const profileCurve: ICurve; axisDirection: OleVariant): ISurface; safecall;
    function GetFirstSelectedFace: IDispatch; safecall;
    function IGetFirstSelectedFace: IFace; safecall;
    function GetNextSelectedFace: IDispatch; safecall;
    function IGetNextSelectedFace: IFace; safecall;
    function GetSelectedFaceCount: Integer; safecall;
    function CreateBoundedSurface(uOpt: WordBool; vOpt: WordBool; uvParams: OleVariant): WordBool; safecall;
    function GetIgesErrorCount: Integer; safecall;
    function GetIgesErrorCode(index: Integer): Integer; safecall;
    function Copy: IDispatch; safecall;
    function ICopy: IBody; safecall;
    function EnumFaces: IEnumFaces; safecall;
    function CreateBodyFromFaces(NumOfFaces: Integer; FaceList: OleVariant): IDispatch; safecall;
    function ICreateBodyFromFaces(NumOfFaces: Integer; FaceList: OleVariant): IBody; safecall;
    function DeleteFaces(NumOfFaces: Integer; FaceList: OleVariant): WordBool; safecall;
    procedure Display(const part: IDispatch; Color: Integer); safecall;
    procedure IDisplay(const part: IPartDoc; Color: Integer); safecall;
    procedure Hide(const part: IDispatch); safecall;
    procedure IHide(const part: IPartDoc); safecall;
    function ICreatePlanarSurfaceDLL(var rootPoint: Double; var Normal: Double): ISurface; safecall;
    function ICreateRevolutionSurfaceDLL(const profileCurve: ICurve; var axisPoint: Double; 
                                         var axisDirection: Double; var profileEndPtParams: Double): ISurface; safecall;
    function IAddProfileLineDLL(var rootPoint: Double; var direction: Double): ICurve; safecall;
    function IAddProfileArcDLL(var center: Double; var axis: Double; radius: Double; 
                               var startPoint: Double; var endPoint: Double): ICurve; safecall;
    function ICreateBsplineSurfaceDLL(var Properties: Integer; var UKnotArray: Double; 
                                      var VKnotArray: Double; var ControlPointCoordArray: Double): ISurface; safecall;
    function IAddProfileBsplineDLL(var Properties: Integer; var KnotArray: Double; 
                                   var ControlPointCoordArray: Double): ICurve; safecall;
    function ICreateExtrusionSurfaceDLL(const profileCurve: ICurve; var axisDirection: Double): ISurface; safecall;
    procedure ICreateBoundedSurface(uOpt: WordBool; vOpt: WordBool; var uvParams: Double); safecall;
    procedure ICombineVolumes(const ToolBody: IBody); safecall;
    function ISectionBySheet(const Sheet: IBody; NumMaxSections: Integer; var SectionedBodies: IBody): Integer; safecall;
    procedure IGetBodyBox(var BoxCorners: Double); safecall;
    procedure SetIgesInfo(const systemName: WideString; granularity: Double; 
                          attemptKnitting: WordBool); safecall;
    procedure DisplayWireFrameXOR(const part: IDispatch; Color: Integer); safecall;
    procedure IDisplayWireFrameXOR(const part: IPartDoc; Color: Integer); safecall;
    procedure Save(const streamIn: IUnknown); safecall;
    procedure ISave(const streamIn: IUnknown); safecall;
    function CreateBlendSurface(const Surface1: IDispatch; Range1: Double; 
                                const Surface2: IDispatch; Range2: Double; StartVec: OleVariant; 
                                EndVec: OleVariant; HaveHelpVec: SYSINT; HelpVec: OleVariant; 
                                HaveHelpBox: SYSINT; HelpBox: OleVariant): IDispatch; safecall;
    function ICreateBlendSurface(const Surface1: ISurface; Range1: Double; 
                                 const Surface2: ISurface; Range2: Double; var StartVec: Double; 
                                 var EndVec: Double; HaveHelpVec: SYSINT; var HelpVec: Double; 
                                 HaveHelpBox: SYSINT; var HelpBox: Double): ISurface; safecall;
    function CreateOffsetSurface(const surfaceIn: IDispatch; distance: Double): IDispatch; safecall;
    function ICreateOffsetSurface(const surfaceIn: ISurface; distance: Double): ISurface; safecall;
    function RemoveRedundantTopology: WordBool; safecall;
    function GetIntersectionEdges(const toolBodyIn: IDispatch): OleVariant; safecall;
    function IGetIntersectionEdges(const toolBodyIn: IBody): PPUserType4; safecall;
    function IGetIntersectionEdgeCount(const toolBodyIn: IBody): Integer; safecall;
    procedure RemoveFacesFromSheet(NumOfFaces: Integer; facesToRemove: OleVariant); safecall;
    procedure IRemoveFacesFromSheet(NumOfFaces: Integer; facesToRemove: PPPUserType2); safecall;
    procedure ICreatePlanarTrimSurfaceDLL(VertexCount: Integer; var points: Double; 
                                          var Normal: Double); safecall;
    function Get_MaterialPropertyValues: OleVariant; safecall;
    procedure Set_MaterialPropertyValues(retval: OleVariant); safecall;
    function Get_IMaterialPropertyValues: Double; safecall;
    procedure Set_IMaterialPropertyValues(var retval: Double); safecall;
    function AddPropertyExtension(PropertyExtension: OleVariant): Integer; safecall;
    function GetPropertyExtension(id: Integer): OleVariant; safecall;
    procedure ResetPropertyExtension; safecall;
    function GetMaterialIdName: WideString; safecall;
    function SetMaterialIdName(const Name: WideString): WordBool; safecall;
    function GetMaterialUserName: WideString; safecall;
    function SetMaterialUserName(const Name: WideString): WordBool; safecall;
    function GetMassProperties(density: Double): OleVariant; safecall;
    function IGetMassProperties(density: Double): Double; safecall;
    function ICreatePsplineSurfaceDLL(dim: Integer; uorder: Integer; vOrder: Integer; 
                                      ncol: Integer; nrow: Integer; var coeffs: Double; 
                                      basis: Integer; var xform: Double; scaleFactor: Double): ISurface; safecall;
    function SetXform(xformIn: OleVariant): WordBool; safecall;
    function ISetXform(var xformIn: Double): WordBool; safecall;
    function CreateTempBodyFromSurfaces: IDispatch; safecall;
    function ICreateTempBodyFromSurfaces: IBody; safecall;
    function Operations(operationType: SYSINT; const ToolBody: IDispatch; NumMaxSections: Integer): OleVariant; safecall;
    function IOperations(operationType: SYSINT; const ToolBody: IBody; NumMaxSections: Integer; 
                         var resultingBodies: IBody): Integer; safecall;
    function GetSheetBody(index: SYSINT): IDispatch; safecall;
    function IGetSheetBody(index: SYSINT): IBody; safecall;
    function GetProcessedBody: IDispatch; safecall;
    function IGetProcessedBody: IBody; safecall;
    function GetProcessedBodyWithSelFace: IDispatch; safecall;
    function IGetProcessedBodyWithSelFace: IBody; safecall;
    function Check: Integer; safecall;
    function GetExcessBodyArray: OleVariant; safecall;
    function IGetExcessBodyArray: PPUserType2; safecall;
    function IGetExcessBodyCount: SYSINT; safecall;
    function CreateBaseFeature(const bodyIn: IDispatch): WordBool; safecall;
    function ICreateBaseFeature(const bodyIn: IBody): WordBool; safecall;
    function DeleteFaces2(NumOfFaces: Integer; FaceList: OleVariant; option: SYSINT): Integer; safecall;
    function IDeleteFaces2(NumOfFaces: Integer; var FaceList: IFace; option: SYSINT): Integer; safecall;
    function IAddVertexPoint(var point: Double): IVertex; safecall;
    function AddVertexPoint(point: OleVariant): IDispatch; safecall;
    function GetExtremePoint(x: Double; y: Double; z: Double; out outx: Double; out outy: Double; 
                             out outz: Double): WordBool; safecall;
    function GetType: Integer; safecall;
    procedure IDeleteFaces3(NumOfFaces: Integer; var FaceList: IFace; option: Integer; 
                            doLocalCheck: WordBool; var localCheckResult: WordBool); safecall;
    procedure SetCurrentSurface(const surfaceIn: IDispatch); safecall;
    procedure ISetCurrentSurface(const surfaceIn: ISurface); safecall;
    function DraftBody(NumOfFaces: Integer; FaceList: OleVariant; EdgeList: OleVariant; 
                       draftAngle: Double; dir: OleVariant): WordBool; safecall;
    function IDraftBody(NumOfFaces: Integer; var FaceList: IFace; var EdgeList: IEdge; 
                        draftAngle: Double; var dir: Double): WordBool; safecall;
    function DeleteBlends(NumOfFaces: Integer; FaceList: OleVariant): WordBool; safecall;
    function IDeleteBlends(NumOfFaces: Integer; var FaceList: IFace): WordBool; safecall;
    function Operations2(operationType: SYSINT; const ToolBody: IDispatch; out errorCode: Integer): OleVariant; safecall;
    function IOperations2(operationType: SYSINT; const ToolBody: IBody; out errorCode: Integer): IEnumBodies; safecall;
    function GetBodyBox: OleVariant; safecall;
    function DeleteBlends2(NumOfFaces: Integer; FaceList: OleVariant; doLocalCheck: WordBool): WordBool; safecall;
    function IDeleteBlends2(NumOfFaces: Integer; var FaceList: IFace; doLocalCheck: WordBool): WordBool; safecall;
    function GetTessellation(FaceList: OleVariant): IDispatch; safecall;
    function IGetTessellation(NumOfFaces: Integer; var FaceList: IFace): ITessellation; safecall;
    function Get_Visible: WordBool; safecall;
    function MatchedBoolean(operationType: SYSINT; const ToolBody: IDispatch; 
                            numOfMatchingFaces: Integer; faceList1: OleVariant; 
                            faceList2: OleVariant; out errorCode: Integer): OleVariant; safecall;
    function IMatchedBoolean(operationType: SYSINT; const ToolBody: IBody; 
                             numOfMatchingFaces: Integer; var faceList1: IFace; 
                             var faceList2: IFace; out errorCode: Integer): IEnumBodies; safecall;
    function GetEdgeCount: Integer; safecall;
    property MaterialPropertyValues: OleVariant read Get_MaterialPropertyValues write Set_MaterialPropertyValues;
    property Visible: WordBool read Get_Visible;
  end;

// *********************************************************************//
// DispIntf:  IBodyDisp
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {83A33D3C-27C5-11CE-BFD4-00400513BB57}
// *********************************************************************//
  IBodyDisp = dispinterface
    ['{83A33D3C-27C5-11CE-BFD4-00400513BB57}']
    function GetFirstFace: IDispatch; dispid 1;
    function IGetFirstFace: IFace; dispid 20;
    function GetFaceCount: Integer; dispid 2;
    function CreateNewSurface: IDispatch; dispid 3;
    function ICreateNewSurface: ISurface; dispid 21;
    function CreateBodyFromSurfaces: WordBool; dispid 4;
    function CreatePlanarSurface(vRootPoint: OleVariant; vNormal: OleVariant): IDispatch; dispid 5;
    function ICreatePlanarSurface(vRootPoint: OleVariant; vNormal: OleVariant): ISurface; dispid 22;
    function CreateRevolutionSurface(const profileCurve: IDispatch; axisPoint: OleVariant; 
                                     axisDirection: OleVariant; profileEndPtParams: OleVariant): IDispatch; dispid 6;
    function ICreateRevolutionSurface(const profileCurve: ICurve; axisPoint: OleVariant; 
                                      axisDirection: OleVariant; profileEndPtParams: OleVariant): ISurface; dispid 23;
    function CreateBsplineSurface(props: OleVariant; uKnots: OleVariant; vKnots: OleVariant; 
                                  ctrlPtCoords: OleVariant): IDispatch; dispid 7;
    function ICreateBsplineSurface(props: OleVariant; uKnots: OleVariant; vKnots: OleVariant; 
                                   ctrlPtCoords: OleVariant): ISurface; dispid 24;
    function CreateTrimmedSurface: WordBool; dispid 8;
    function AddProfileLine(rootPoint: OleVariant; direction: OleVariant): IDispatch; dispid 9;
    function IAddProfileLine(rootPoint: OleVariant; direction: OleVariant): ICurve; dispid 25;
    function AddProfileArc(center: OleVariant; axis: OleVariant; radius: Double; 
                           startPoint: OleVariant; endPoint: OleVariant): IDispatch; dispid 10;
    function IAddProfileArc(center: OleVariant; axis: OleVariant; radius: Double; 
                            startPoint: OleVariant; endPoint: OleVariant): ICurve; dispid 26;
    function AddProfileBspline(props: OleVariant; knots: OleVariant; ctrlPtCoords: OleVariant): IDispatch; dispid 11;
    function IAddProfileBspline(props: OleVariant; knots: OleVariant; ctrlPtCoords: OleVariant): ICurve; dispid 27;
    function CreateExtrusionSurface(const profileCurve: IDispatch; axisDirection: OleVariant): IDispatch; dispid 12;
    function ICreateExtrusionSurface(const profileCurve: ICurve; axisDirection: OleVariant): ISurface; dispid 28;
    function GetFirstSelectedFace: IDispatch; dispid 13;
    function IGetFirstSelectedFace: IFace; dispid 29;
    function GetNextSelectedFace: IDispatch; dispid 14;
    function IGetNextSelectedFace: IFace; dispid 30;
    function GetSelectedFaceCount: Integer; dispid 15;
    function CreateBoundedSurface(uOpt: WordBool; vOpt: WordBool; uvParams: OleVariant): WordBool; dispid 16;
    function GetIgesErrorCount: Integer; dispid 17;
    function GetIgesErrorCode(index: Integer): Integer; dispid 18;
    function Copy: IDispatch; dispid 19;
    function ICopy: IBody; dispid 31;
    function EnumFaces: IEnumFaces; dispid 32;
    function CreateBodyFromFaces(NumOfFaces: Integer; FaceList: OleVariant): IDispatch; dispid 33;
    function ICreateBodyFromFaces(NumOfFaces: Integer; FaceList: OleVariant): IBody; dispid 34;
    function DeleteFaces(NumOfFaces: Integer; FaceList: OleVariant): WordBool; dispid 35;
    procedure Display(const part: IDispatch; Color: Integer); dispid 36;
    procedure IDisplay(const part: IPartDoc; Color: Integer); dispid 37;
    procedure Hide(const part: IDispatch); dispid 38;
    procedure IHide(const part: IPartDoc); dispid 39;
    function ICreatePlanarSurfaceDLL(var rootPoint: Double; var Normal: Double): ISurface; dispid 40;
    function ICreateRevolutionSurfaceDLL(const profileCurve: ICurve; var axisPoint: Double; 
                                         var axisDirection: Double; var profileEndPtParams: Double): ISurface; dispid 41;
    function IAddProfileLineDLL(var rootPoint: Double; var direction: Double): ICurve; dispid 42;
    function IAddProfileArcDLL(var center: Double; var axis: Double; radius: Double; 
                               var startPoint: Double; var endPoint: Double): ICurve; dispid 43;
    function ICreateBsplineSurfaceDLL(var Properties: Integer; var UKnotArray: Double; 
                                      var VKnotArray: Double; var ControlPointCoordArray: Double): ISurface; dispid 44;
    function IAddProfileBsplineDLL(var Properties: Integer; var KnotArray: Double; 
                                   var ControlPointCoordArray: Double): ICurve; dispid 45;
    function ICreateExtrusionSurfaceDLL(const profileCurve: ICurve; var axisDirection: Double): ISurface; dispid 46;
    procedure ICreateBoundedSurface(uOpt: WordBool; vOpt: WordBool; var uvParams: Double); dispid 47;
    procedure ICombineVolumes(const ToolBody: IBody); dispid 48;
    function ISectionBySheet(const Sheet: IBody; NumMaxSections: Integer; var SectionedBodies: IBody): Integer; dispid 49;
    procedure IGetBodyBox(var BoxCorners: Double); dispid 50;
    procedure SetIgesInfo(const systemName: WideString; granularity: Double; 
                          attemptKnitting: WordBool); dispid 51;
    procedure DisplayWireFrameXOR(const part: IDispatch; Color: Integer); dispid 52;
    procedure IDisplayWireFrameXOR(const part: IPartDoc; Color: Integer); dispid 53;
    procedure Save(const streamIn: IUnknown); dispid 54;
    procedure ISave(const streamIn: IUnknown); dispid 55;
    function CreateBlendSurface(const Surface1: IDispatch; Range1: Double; 
                                const Surface2: IDispatch; Range2: Double; StartVec: OleVariant; 
                                EndVec: OleVariant; HaveHelpVec: SYSINT; HelpVec: OleVariant; 
                                HaveHelpBox: SYSINT; HelpBox: OleVariant): IDispatch; dispid 56;
    function ICreateBlendSurface(const Surface1: ISurface; Range1: Double; 
                                 const Surface2: ISurface; Range2: Double; var StartVec: Double; 
                                 var EndVec: Double; HaveHelpVec: SYSINT; var HelpVec: Double; 
                                 HaveHelpBox: SYSINT; var HelpBox: Double): ISurface; dispid 57;
    function CreateOffsetSurface(const surfaceIn: IDispatch; distance: Double): IDispatch; dispid 58;
    function ICreateOffsetSurface(const surfaceIn: ISurface; distance: Double): ISurface; dispid 59;
    function RemoveRedundantTopology: WordBool; dispid 60;
    function GetIntersectionEdges(const toolBodyIn: IDispatch): OleVariant; dispid 61;
    function IGetIntersectionEdges(const toolBodyIn: IBody): {??PPUserType4}OleVariant; dispid 62;
    function IGetIntersectionEdgeCount(const toolBodyIn: IBody): Integer; dispid 63;
    procedure RemoveFacesFromSheet(NumOfFaces: Integer; facesToRemove: OleVariant); dispid 64;
    procedure IRemoveFacesFromSheet(NumOfFaces: Integer; facesToRemove: {??PPPUserType2}OleVariant); dispid 65;
    procedure ICreatePlanarTrimSurfaceDLL(VertexCount: Integer; var points: Double; 
                                          var Normal: Double); dispid 66;
    property MaterialPropertyValues: OleVariant dispid 67;
    function IMaterialPropertyValues: Double; dispid 68;
    function AddPropertyExtension(PropertyExtension: OleVariant): Integer; dispid 69;
    function GetPropertyExtension(id: Integer): OleVariant; dispid 70;
    procedure ResetPropertyExtension; dispid 71;
    function GetMaterialIdName: WideString; dispid 72;
    function SetMaterialIdName(const Name: WideString): WordBool; dispid 73;
    function GetMaterialUserName: WideString; dispid 74;
    function SetMaterialUserName(const Name: WideString): WordBool; dispid 75;
    function GetMassProperties(density: Double): OleVariant; dispid 76;
    function IGetMassProperties(density: Double): Double; dispid 77;
    function ICreatePsplineSurfaceDLL(dim: Integer; uorder: Integer; vOrder: Integer; 
                                      ncol: Integer; nrow: Integer; var coeffs: Double; 
                                      basis: Integer; var xform: Double; scaleFactor: Double): ISurface; dispid 78;
    function SetXform(xformIn: OleVariant): WordBool; dispid 79;
    function ISetXform(var xformIn: Double): WordBool; dispid 80;
    function CreateTempBodyFromSurfaces: IDispatch; dispid 81;
    function ICreateTempBodyFromSurfaces: IBody; dispid 82;
    function Operations(operationType: SYSINT; const ToolBody: IDispatch; NumMaxSections: Integer): OleVariant; dispid 83;
    function IOperations(operationType: SYSINT; const ToolBody: IBody; NumMaxSections: Integer; 
                         var resultingBodies: IBody): Integer; dispid 84;
    function GetSheetBody(index: SYSINT): IDispatch; dispid 85;
    function IGetSheetBody(index: SYSINT): IBody; dispid 86;
    function GetProcessedBody: IDispatch; dispid 87;
    function IGetProcessedBody: IBody; dispid 88;
    function GetProcessedBodyWithSelFace: IDispatch; dispid 89;
    function IGetProcessedBodyWithSelFace: IBody; dispid 90;
    function Check: Integer; dispid 91;
    function GetExcessBodyArray: OleVariant; dispid 92;
    function IGetExcessBodyArray: {??PPUserType2}OleVariant; dispid 93;
    function IGetExcessBodyCount: SYSINT; dispid 94;
    function CreateBaseFeature(const bodyIn: IDispatch): WordBool; dispid 95;
    function ICreateBaseFeature(const bodyIn: IBody): WordBool; dispid 96;
    function DeleteFaces2(NumOfFaces: Integer; FaceList: OleVariant; option: SYSINT): Integer; dispid 97;
    function IDeleteFaces2(NumOfFaces: Integer; var FaceList: IFace; option: SYSINT): Integer; dispid 98;
    function IAddVertexPoint(var point: Double): IVertex; dispid 99;
    function AddVertexPoint(point: OleVariant): IDispatch; dispid 100;
    function GetExtremePoint(x: Double; y: Double; z: Double; out outx: Double; out outy: Double; 
                             out outz: Double): WordBool; dispid 101;
    function GetType: Integer; dispid 102;
    procedure IDeleteFaces3(NumOfFaces: Integer; var FaceList: IFace; option: Integer; 
                            doLocalCheck: WordBool; var localCheckResult: WordBool); dispid 103;
    procedure SetCurrentSurface(const surfaceIn: IDispatch); dispid 104;
    procedure ISetCurrentSurface(const surfaceIn: ISurface); dispid 105;
    function DraftBody(NumOfFaces: Integer; FaceList: OleVariant; EdgeList: OleVariant; 
                       draftAngle: Double; dir: OleVariant): WordBool; dispid 106;
    function IDraftBody(NumOfFaces: Integer; var FaceList: IFace; var EdgeList: IEdge; 
                        draftAngle: Double; var dir: Double): WordBool; dispid 107;
    function DeleteBlends(NumOfFaces: Integer; FaceList: OleVariant): WordBool; dispid 108;
    function IDeleteBlends(NumOfFaces: Integer; var FaceList: IFace): WordBool; dispid 109;
    function Operations2(operationType: SYSINT; const ToolBody: IDispatch; out errorCode: Integer): OleVariant; dispid 110;
    function IOperations2(operationType: SYSINT; const ToolBody: IBody; out errorCode: Integer): IEnumBodies; dispid 111;
    function GetBodyBox: OleVariant; dispid 112;
    function DeleteBlends2(NumOfFaces: Integer; FaceList: OleVariant; doLocalCheck: WordBool): WordBool; dispid 113;
    function IDeleteBlends2(NumOfFaces: Integer; var FaceList: IFace; doLocalCheck: WordBool): WordBool; dispid 114;
    function GetTessellation(FaceList: OleVariant): IDispatch; dispid 115;
    function IGetTessellation(NumOfFaces: Integer; var FaceList: IFace): ITessellation; dispid 116;
    property Visible: WordBool readonly dispid 117;
    function MatchedBoolean(operationType: SYSINT; const ToolBody: IDispatch; 
                            numOfMatchingFaces: Integer; faceList1: OleVariant; 
                            faceList2: OleVariant; out errorCode: Integer): OleVariant; dispid 118;
    function IMatchedBoolean(operationType: SYSINT; const ToolBody: IBody; 
                             numOfMatchingFaces: Integer; var faceList1: IFace; 
                             var faceList2: IFace; out errorCode: Integer): IEnumBodies; dispid 119;
    function GetEdgeCount: Integer; dispid 120;
  end;

// *********************************************************************//
// Interface: IFace
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {83A33D3E-27C5-11CE-BFD4-00400513BB57}
// *********************************************************************//
  IFace = interface(IDispatch)
    ['{83A33D3E-27C5-11CE-BFD4-00400513BB57}']
    function Get_Normal: OleVariant; safecall;
    procedure Set_Normal(retval: OleVariant); safecall;
    function Get_MaterialUserName: WideString; safecall;
    procedure Set_MaterialUserName(const retval: WideString); safecall;
    function Get_MaterialIdName: WideString; safecall;
    procedure Set_MaterialIdName(const retval: WideString); safecall;
    function Get_MaterialPropertyValues: OleVariant; safecall;
    procedure Set_MaterialPropertyValues(retval: OleVariant); safecall;
    function Get_INormal: Double; safecall;
    procedure Set_INormal(var retval: Double); safecall;
    function GetNextFace: IDispatch; safecall;
    function IGetNextFace: IFace; safecall;
    function GetSurface: IDispatch; safecall;
    function IGetSurface: ISurface; safecall;
    function GetEdgeCount: Integer; safecall;
    function GetEdges: OleVariant; safecall;
    function IGetEdges: PPUserType4; safecall;
    function GetFeature: IDispatch; safecall;
    function IGetFeature: IFeature; safecall;
    function GetFeatureId: Integer; safecall;
    function GetTrimCurves(wantCubic: WordBool): OleVariant; safecall;
    function GetUVBounds: OleVariant; safecall;
    function FaceInSurfaceSense: WordBool; safecall;
    function GetLoopCount: Integer; safecall;
    function GetFirstLoop: IDispatch; safecall;
    function IGetFirstLoop: ILoop; safecall;
    function IsSame(const faceIn: IDispatch): WordBool; safecall;
    function IIsSame(const faceIn: IFace): WordBool; safecall;
    function AddPropertyExtension(PropertyExtension: OleVariant): Integer; safecall;
    function GetPropertyExtension(id: Integer): OleVariant; safecall;
    procedure ResetPropertyExtension; safecall;
    function GetTessTriangles(noConversion: WordBool): OleVariant; safecall;
    function GetTessNorms: OleVariant; safecall;
    function GetTessTriStrips(noConversion: WordBool): OleVariant; safecall;
    function GetTessTriStripNorms: OleVariant; safecall;
    function EnumLoops: IEnumLoops; safecall;
    function EnumEdges: IEnumEdges; safecall;
    function GetBody: IDispatch; safecall;
    function IGetBody: IBody; safecall;
    function IGetTessTriangles(noConversion: WordBool): Single; safecall;
    function IGetTessNorms: Single; safecall;
    function GetTessTriangleCount: Integer; safecall;
    function IGetTessTriStrips(noConversion: WordBool): Single; safecall;
    function IGetTessTriStripNorms: Single; safecall;
    function GetTessTriStripSize: Integer; safecall;
    function IGetUVBounds: Double; safecall;
    function GetClosestPointOn(x: Double; y: Double; z: Double): OleVariant; safecall;
    function IGetClosestPointOn(x: Double; y: Double; z: Double): Double; safecall;
    procedure Highlight(state: WordBool); safecall;
    procedure IHighlight(state: WordBool); safecall;
    function GetTrimCurveTopology: OleVariant; safecall;
    function IGetTrimCurveTopology: PIDispatch1; safecall;
    function GetTrimCurveTopologyCount: Integer; safecall;
    function GetTrimCurveTopologyTypes: OleVariant; safecall;
    function IGetTrimCurveTopologyTypes: Integer; safecall;
    function RemoveRedundantTopology: WordBool; safecall;
    function CreateSheetBodyByFaceExtension(boxLowIn: OleVariant; boxHighIn: OleVariant): IDispatch; safecall;
    function ICreateSheetBodyByFaceExtension(var boxLowIn: Double; var boxHighIn: Double): IBody; safecall;
    function GetArea: Double; safecall;
    function GetBox: OleVariant; safecall;
    function IGetBox: Double; safecall;
    function RemoveInnerLoops(numOfLoops: Integer; innerLoopsIn: OleVariant): IDispatch; safecall;
    function IRemoveInnerLoops(numOfLoops: Integer; var innerLoopsIn: ILoop): IFace; safecall;
    function CreateSheetBody: IDispatch; safecall;
    function ICreateSheetBody: IBody; safecall;
    function GetSilhoutteEdges(var root: Double; var Normal: Double): OleVariant; safecall;
    function IGetSilhoutteEdges(var root: Double; var Normal: Double): PPUserType4; safecall;
    function IGetSilhoutteEdgeCount(var root: Double; var Normal: Double): Integer; safecall;
    function IGetTrimCurveSize(wantCubic: WordBool): Integer; safecall;
    function IGetTrimCurve: Double; safecall;
    function Get_IMaterialPropertyValues: Double; safecall;
    procedure Set_IMaterialPropertyValues(var retval: Double); safecall;
    function GetFaceId: SYSINT; safecall;
    procedure SetFaceId(idIn: SYSINT); safecall;
    function IGetTrimCurveSize2(wantCubic: Integer; wantNRational: Integer): Integer; safecall;
    function GetSilhoutteEdgesVB(xroot: Double; yroot: Double; zroot: Double; xnormal: Double; 
                                 ynormal: Double; znormal: Double): OleVariant; safecall;
    procedure RemoveFaceId(idIn: SYSINT); safecall;
    function GetTrimCurves2(wantCubic: WordBool; wantNRational: WordBool): OleVariant; safecall;
    function GetShellType: SYSINT; safecall;
    procedure IGetFacetData(facetMesh: SYSINT; var nFacets: SYSINT; var nStrips: SYSINT; 
                            stripVertexNums: PPSYSINT1; vertexCoords: PPSingle1; 
                            normalCoords: PPSingle1); safecall;
    function GetTessTriStripEdges: OleVariant; safecall;
    function IGetTessTriStripEdges: Integer; safecall;
    function IGetTessTriStripEdgeSize: Integer; safecall;
    function RemoveMaterialProperty: WordBool; safecall;
    function GetPatternSeedFeature: IDispatch; safecall;
    function IGetPatternSeedFeature: IFeature; safecall;
    property Normal: OleVariant read Get_Normal write Set_Normal;
    property MaterialUserName: WideString read Get_MaterialUserName write Set_MaterialUserName;
    property MaterialIdName: WideString read Get_MaterialIdName write Set_MaterialIdName;
    property MaterialPropertyValues: OleVariant read Get_MaterialPropertyValues write Set_MaterialPropertyValues;
  end;

// *********************************************************************//
// DispIntf:  IFaceDisp
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {83A33D3E-27C5-11CE-BFD4-00400513BB57}
// *********************************************************************//
  IFaceDisp = dispinterface
    ['{83A33D3E-27C5-11CE-BFD4-00400513BB57}']
    property Normal: OleVariant dispid 1;
    property MaterialUserName: WideString dispid 14;
    property MaterialIdName: WideString dispid 15;
    property MaterialPropertyValues: OleVariant dispid 16;
    function INormal: Double; dispid 40;
    function GetNextFace: IDispatch; dispid 2;
    function IGetNextFace: IFace; dispid 24;
    function GetSurface: IDispatch; dispid 3;
    function IGetSurface: ISurface; dispid 25;
    function GetEdgeCount: Integer; dispid 4;
    function GetEdges: OleVariant; dispid 5;
    function IGetEdges: {??PPUserType4}OleVariant; dispid 26;
    function GetFeature: IDispatch; dispid 6;
    function IGetFeature: IFeature; dispid 27;
    function GetFeatureId: Integer; dispid 7;
    function GetTrimCurves(wantCubic: WordBool): OleVariant; dispid 8;
    function GetUVBounds: OleVariant; dispid 9;
    function FaceInSurfaceSense: WordBool; dispid 10;
    function GetLoopCount: Integer; dispid 11;
    function GetFirstLoop: IDispatch; dispid 12;
    function IGetFirstLoop: ILoop; dispid 28;
    function IsSame(const faceIn: IDispatch): WordBool; dispid 13;
    function IIsSame(const faceIn: IFace): WordBool; dispid 29;
    function AddPropertyExtension(PropertyExtension: OleVariant): Integer; dispid 17;
    function GetPropertyExtension(id: Integer): OleVariant; dispid 18;
    procedure ResetPropertyExtension; dispid 19;
    function GetTessTriangles(noConversion: WordBool): OleVariant; dispid 20;
    function GetTessNorms: OleVariant; dispid 21;
    function GetTessTriStrips(noConversion: WordBool): OleVariant; dispid 22;
    function GetTessTriStripNorms: OleVariant; dispid 23;
    function EnumLoops: IEnumLoops; dispid 30;
    function EnumEdges: IEnumEdges; dispid 31;
    function GetBody: IDispatch; dispid 32;
    function IGetBody: IBody; dispid 33;
    function IGetTessTriangles(noConversion: WordBool): Single; dispid 34;
    function IGetTessNorms: Single; dispid 35;
    function GetTessTriangleCount: Integer; dispid 36;
    function IGetTessTriStrips(noConversion: WordBool): Single; dispid 37;
    function IGetTessTriStripNorms: Single; dispid 38;
    function GetTessTriStripSize: Integer; dispid 39;
    function IGetUVBounds: Double; dispid 41;
    function GetClosestPointOn(x: Double; y: Double; z: Double): OleVariant; dispid 42;
    function IGetClosestPointOn(x: Double; y: Double; z: Double): Double; dispid 43;
    procedure Highlight(state: WordBool); dispid 44;
    procedure IHighlight(state: WordBool); dispid 45;
    function GetTrimCurveTopology: OleVariant; dispid 46;
    function IGetTrimCurveTopology: {??PIDispatch1}OleVariant; dispid 47;
    function GetTrimCurveTopologyCount: Integer; dispid 48;
    function GetTrimCurveTopologyTypes: OleVariant; dispid 49;
    function IGetTrimCurveTopologyTypes: Integer; dispid 50;
    function RemoveRedundantTopology: WordBool; dispid 51;
    function CreateSheetBodyByFaceExtension(boxLowIn: OleVariant; boxHighIn: OleVariant): IDispatch; dispid 52;
    function ICreateSheetBodyByFaceExtension(var boxLowIn: Double; var boxHighIn: Double): IBody; dispid 53;
    function GetArea: Double; dispid 54;
    function GetBox: OleVariant; dispid 55;
    function IGetBox: Double; dispid 56;
    function RemoveInnerLoops(numOfLoops: Integer; innerLoopsIn: OleVariant): IDispatch; dispid 57;
    function IRemoveInnerLoops(numOfLoops: Integer; var innerLoopsIn: ILoop): IFace; dispid 58;
    function CreateSheetBody: IDispatch; dispid 59;
    function ICreateSheetBody: IBody; dispid 60;
    function GetSilhoutteEdges(var root: Double; var Normal: Double): OleVariant; dispid 61;
    function IGetSilhoutteEdges(var root: Double; var Normal: Double): {??PPUserType4}OleVariant; dispid 62;
    function IGetSilhoutteEdgeCount(var root: Double; var Normal: Double): Integer; dispid 63;
    function IGetTrimCurveSize(wantCubic: WordBool): Integer; dispid 64;
    function IGetTrimCurve: Double; dispid 65;
    function IMaterialPropertyValues: Double; dispid 66;
    function GetFaceId: SYSINT; dispid 67;
    procedure SetFaceId(idIn: SYSINT); dispid 68;
    function IGetTrimCurveSize2(wantCubic: Integer; wantNRational: Integer): Integer; dispid 69;
    function GetSilhoutteEdgesVB(xroot: Double; yroot: Double; zroot: Double; xnormal: Double; 
                                 ynormal: Double; znormal: Double): OleVariant; dispid 70;
    procedure RemoveFaceId(idIn: SYSINT); dispid 71;
    function GetTrimCurves2(wantCubic: WordBool; wantNRational: WordBool): OleVariant; dispid 72;
    function GetShellType: SYSINT; dispid 73;
    procedure IGetFacetData(facetMesh: SYSINT; var nFacets: SYSINT; var nStrips: SYSINT; 
                            stripVertexNums: {??PPSYSINT1}OleVariant; 
                            vertexCoords: {??PPSingle1}OleVariant; 
                            normalCoords: {??PPSingle1}OleVariant); dispid 74;
    function GetTessTriStripEdges: OleVariant; dispid 75;
    function IGetTessTriStripEdges: Integer; dispid 76;
    function IGetTessTriStripEdgeSize: Integer; dispid 77;
    function RemoveMaterialProperty: WordBool; dispid 78;
    function GetPatternSeedFeature: IDispatch; dispid 79;
    function IGetPatternSeedFeature: IFeature; dispid 80;
  end;

// *********************************************************************//
// Interface: ISurface
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {83A33D40-27C5-11CE-BFD4-00400513BB57}
// *********************************************************************//
  ISurface = interface(IDispatch)
    ['{83A33D40-27C5-11CE-BFD4-00400513BB57}']
    function Get_PlaneParams: OleVariant; safecall;
    function Get_CylinderParams: OleVariant; safecall;
    function Get_ConeParams: OleVariant; safecall;
    function Get_SphereParams: OleVariant; safecall;
    function Get_TorusParams: OleVariant; safecall;
    function IsPlane: WordBool; safecall;
    function IsCylinder: WordBool; safecall;
    function IsCone: WordBool; safecall;
    function Identity: Integer; safecall;
    function IsSphere: WordBool; safecall;
    function IsTorus: WordBool; safecall;
    function IsParametric: WordBool; safecall;
    function IsBlending: WordBool; safecall;
    function IsOffset: WordBool; safecall;
    function IsSwept: WordBool; safecall;
    function IsRevolved: WordBool; safecall;
    function IsForeign: WordBool; safecall;
    function Parameterization: OleVariant; safecall;
    function Evaluate(UParam: Double; VParam: Double; NumUDeriv: Integer; NumVDeriv: Integer): OleVariant; safecall;
    function GetBSurfParams(wantCubicRational: WordBool; vP0: OleVariant): OleVariant; safecall;
    function AddTrimmingLoop(nCrvs: Integer; vOrder: OleVariant; vDim: OleVariant; 
                             vPeriodic: OleVariant; vNumKnots: OleVariant; 
                             vNumCtrlPoints: OleVariant; vKnots: OleVariant; 
                             vCtrlPointDbls: OleVariant): WordBool; safecall;
    function CreateNewCurve: IDispatch; safecall;
    function ICreateNewCurve: ICurve; safecall;
    function GetRevsurfParams: OleVariant; safecall;
    function GetExtrusionsurfParams: OleVariant; safecall;
    function GetProfileCurve: IDispatch; safecall;
    function IGetProfileCurve: ICurve; safecall;
    function ReverseEvaluate(positionX: Double; positionY: Double; positionZ: Double): OleVariant; safecall;
    function Get_IPlaneParams: Double; safecall;
    function Get_ICylinderParams: Double; safecall;
    function Get_IConeParams: Double; safecall;
    function Get_ISphereParams: Double; safecall;
    function Get_ITorusParams: Double; safecall;
    function IReverseEvaluate(positionX: Double; positionY: Double; positionZ: Double): Double; safecall;
    function IGetRevsurfParams: Double; safecall;
    function IGetExtrusionsurfParams: Double; safecall;
    function IParameterization: Double; safecall;
    function IEvaluate(UParam: Double; VParam: Double; NumUDeriv: Integer; NumVDeriv: Integer): Double; safecall;
    function IGetBSurfParams: Double; safecall;
    function IGetBSurfParamsSize(wantCubicRational: WordBool; var Range: Double): Integer; safecall;
    procedure IAddTrimmingLoop(CurveCount: Integer; var order: Integer; var dim: Integer; 
                               var Periodic: Integer; var NumKnots: Integer; 
                               var NumCtrlPoints: Integer; var knots: Double; 
                               var CtrlPointDbls: Double); safecall;
    function EvaluateAtPoint(positionX: Double; positionY: Double; positionZ: Double): OleVariant; safecall;
    function IEvaluateAtPoint(positionX: Double; positionY: Double; positionZ: Double): Double; safecall;
    function GetOffsetSurfParams: Double; safecall;
    function IGetBSurfParamsSize2(wantCubic: WordBool; wantNonRational: WordBool; var Range: Double): Integer; safecall;
    function Copy: IDispatch; safecall;
    function ICopy: ISurface; safecall;
    function CreateTrimmedSheet(curves: OleVariant): IDispatch; safecall;
    function ICreateTrimmedSheet(nCurves: Integer; var curves: ICurve): IBody; safecall;
    function AddTrimmingLoop2(nCrvs: Integer; vOrder: OleVariant; vDim: OleVariant; 
                              vPeriodic: OleVariant; vNumKnots: OleVariant; 
                              vNumCtrlPoints: OleVariant; vKnots: OleVariant; 
                              vCtrlPointDbls: OleVariant; uvRange: OleVariant): WordBool; safecall;
    procedure IAddTrimmingLoop2(CurveCount: Integer; var order: Integer; var dim: Integer; 
                                var Periodic: Integer; var NumKnots: Integer; 
                                var NumCtrlPoints: Integer; var knots: Double; 
                                var CtrlPointDbls: Double; var uvRange: Double); safecall;
    function GetBSurfParams2(wantCubic: WordBool; wantNonRational: WordBool; vP0: OleVariant; 
                             tolerance: Double; out sense: WordBool): OleVariant; safecall;
    function IGetBSurfParamsSize3(wantCubic: WordBool; wantNonRational: WordBool; 
                                  var Range: Double; tolerance: Double; out sense: WordBool): Integer; safecall;
    function GetClosestPointOn(x: Double; y: Double; z: Double): OleVariant; safecall;
    function IGetClosestPointOn(x: Double; y: Double; z: Double): Double; safecall;
    function GetOffsetSurfParams2(out baseSurf: IDispatch; out sense: WordBool): Double; safecall;
    function IGetOffsetSurfParams2(out baseSurf: ISurface; out sense: WordBool): Double; safecall;
    function GetIntersectSurfaceCount(const otherSurface: ISurface): Integer; safecall;
    function IIntersectSurface(const otherSurf: ISurface; CurveCount: Integer; 
                               var curveArray: ICurve; var boundsArray: Double): WordBool; safecall;
    function IntersectSurface(const otherSurf: IDispatch; var curveArray: OleVariant; 
                              var boundsArray: OleVariant): WordBool; safecall;
    function GetIntersectCurveCount(const otherCurve: ICurve; var curveBound: Double): Integer; safecall;
    function IIntersectCurve(const otherCurve: ICurve; var curveBound: Double; PointCount: Integer; 
                             var pointArray: Double; var tArray: Double; var uvArray: Double): WordBool; safecall;
    function IntersectCurve(const otherCurve: IDispatch; curveBound: OleVariant; 
                            var pointArray: OleVariant; var tArray: OleVariant; 
                            var uvArray: OleVariant): WordBool; safecall;
    function MakeIsoCurve(UorV: WordBool; uvValue: Double): IDispatch; safecall;
    function IMakeIsoCurve(UorV: WordBool; uvValue: Double): ICurve; safecall;
    property PlaneParams: OleVariant read Get_PlaneParams;
    property CylinderParams: OleVariant read Get_CylinderParams;
    property ConeParams: OleVariant read Get_ConeParams;
    property SphereParams: OleVariant read Get_SphereParams;
    property TorusParams: OleVariant read Get_TorusParams;
    property IPlaneParams: Double read Get_IPlaneParams;
    property ICylinderParams: Double read Get_ICylinderParams;
    property IConeParams: Double read Get_IConeParams;
    property ISphereParams: Double read Get_ISphereParams;
    property ITorusParams: Double read Get_ITorusParams;
  end;

// *********************************************************************//
// DispIntf:  ISurfaceDisp
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {83A33D40-27C5-11CE-BFD4-00400513BB57}
// *********************************************************************//
  ISurfaceDisp = dispinterface
    ['{83A33D40-27C5-11CE-BFD4-00400513BB57}']
    property PlaneParams: OleVariant readonly dispid 1;
    property CylinderParams: OleVariant readonly dispid 2;
    property ConeParams: OleVariant readonly dispid 3;
    property SphereParams: OleVariant readonly dispid 4;
    property TorusParams: OleVariant readonly dispid 5;
    function IsPlane: WordBool; dispid 6;
    function IsCylinder: WordBool; dispid 7;
    function IsCone: WordBool; dispid 8;
    function Identity: Integer; dispid 9;
    function IsSphere: WordBool; dispid 10;
    function IsTorus: WordBool; dispid 11;
    function IsParametric: WordBool; dispid 12;
    function IsBlending: WordBool; dispid 13;
    function IsOffset: WordBool; dispid 14;
    function IsSwept: WordBool; dispid 15;
    function IsRevolved: WordBool; dispid 16;
    function IsForeign: WordBool; dispid 17;
    function Parameterization: OleVariant; dispid 18;
    function Evaluate(UParam: Double; VParam: Double; NumUDeriv: Integer; NumVDeriv: Integer): OleVariant; dispid 19;
    function GetBSurfParams(wantCubicRational: WordBool; vP0: OleVariant): OleVariant; dispid 20;
    function AddTrimmingLoop(nCrvs: Integer; vOrder: OleVariant; vDim: OleVariant; 
                             vPeriodic: OleVariant; vNumKnots: OleVariant; 
                             vNumCtrlPoints: OleVariant; vKnots: OleVariant; 
                             vCtrlPointDbls: OleVariant): WordBool; dispid 21;
    function CreateNewCurve: IDispatch; dispid 22;
    function ICreateNewCurve: ICurve; dispid 26;
    function GetRevsurfParams: OleVariant; dispid 23;
    function GetExtrusionsurfParams: OleVariant; dispid 24;
    function GetProfileCurve: IDispatch; dispid 25;
    function IGetProfileCurve: ICurve; dispid 27;
    function ReverseEvaluate(positionX: Double; positionY: Double; positionZ: Double): OleVariant; dispid 28;
    property IPlaneParams: Double readonly dispid 29;
    property ICylinderParams: Double readonly dispid 30;
    property IConeParams: Double readonly dispid 31;
    property ISphereParams: Double readonly dispid 32;
    property ITorusParams: Double readonly dispid 33;
    function IReverseEvaluate(positionX: Double; positionY: Double; positionZ: Double): Double; dispid 34;
    function IGetRevsurfParams: Double; dispid 35;
    function IGetExtrusionsurfParams: Double; dispid 36;
    function IParameterization: Double; dispid 37;
    function IEvaluate(UParam: Double; VParam: Double; NumUDeriv: Integer; NumVDeriv: Integer): Double; dispid 38;
    function IGetBSurfParams: Double; dispid 39;
    function IGetBSurfParamsSize(wantCubicRational: WordBool; var Range: Double): Integer; dispid 40;
    procedure IAddTrimmingLoop(CurveCount: Integer; var order: Integer; var dim: Integer; 
                               var Periodic: Integer; var NumKnots: Integer; 
                               var NumCtrlPoints: Integer; var knots: Double; 
                               var CtrlPointDbls: Double); dispid 41;
    function EvaluateAtPoint(positionX: Double; positionY: Double; positionZ: Double): OleVariant; dispid 42;
    function IEvaluateAtPoint(positionX: Double; positionY: Double; positionZ: Double): Double; dispid 43;
    function GetOffsetSurfParams: Double; dispid 44;
    function IGetBSurfParamsSize2(wantCubic: WordBool; wantNonRational: WordBool; var Range: Double): Integer; dispid 45;
    function Copy: IDispatch; dispid 46;
    function ICopy: ISurface; dispid 47;
    function CreateTrimmedSheet(curves: OleVariant): IDispatch; dispid 48;
    function ICreateTrimmedSheet(nCurves: Integer; var curves: ICurve): IBody; dispid 49;
    function AddTrimmingLoop2(nCrvs: Integer; vOrder: OleVariant; vDim: OleVariant; 
                              vPeriodic: OleVariant; vNumKnots: OleVariant; 
                              vNumCtrlPoints: OleVariant; vKnots: OleVariant; 
                              vCtrlPointDbls: OleVariant; uvRange: OleVariant): WordBool; dispid 50;
    procedure IAddTrimmingLoop2(CurveCount: Integer; var order: Integer; var dim: Integer; 
                                var Periodic: Integer; var NumKnots: Integer; 
                                var NumCtrlPoints: Integer; var knots: Double; 
                                var CtrlPointDbls: Double; var uvRange: Double); dispid 51;
    function GetBSurfParams2(wantCubic: WordBool; wantNonRational: WordBool; vP0: OleVariant; 
                             tolerance: Double; out sense: WordBool): OleVariant; dispid 52;
    function IGetBSurfParamsSize3(wantCubic: WordBool; wantNonRational: WordBool; 
                                  var Range: Double; tolerance: Double; out sense: WordBool): Integer; dispid 53;
    function GetClosestPointOn(x: Double; y: Double; z: Double): OleVariant; dispid 54;
    function IGetClosestPointOn(x: Double; y: Double; z: Double): Double; dispid 55;
    function GetOffsetSurfParams2(out baseSurf: IDispatch; out sense: WordBool): Double; dispid 56;
    function IGetOffsetSurfParams2(out baseSurf: ISurface; out sense: WordBool): Double; dispid 57;
    function GetIntersectSurfaceCount(const otherSurface: ISurface): Integer; dispid 58;
    function IIntersectSurface(const otherSurf: ISurface; CurveCount: Integer; 
                               var curveArray: ICurve; var boundsArray: Double): WordBool; dispid 59;
    function IntersectSurface(const otherSurf: IDispatch; var curveArray: OleVariant; 
                              var boundsArray: OleVariant): WordBool; dispid 60;
    function GetIntersectCurveCount(const otherCurve: ICurve; var curveBound: Double): Integer; dispid 61;
    function IIntersectCurve(const otherCurve: ICurve; var curveBound: Double; PointCount: Integer; 
                             var pointArray: Double; var tArray: Double; var uvArray: Double): WordBool; dispid 62;
    function IntersectCurve(const otherCurve: IDispatch; curveBound: OleVariant; 
                            var pointArray: OleVariant; var tArray: OleVariant; 
                            var uvArray: OleVariant): WordBool; dispid 63;
    function MakeIsoCurve(UorV: WordBool; uvValue: Double): IDispatch; dispid 64;
    function IMakeIsoCurve(UorV: WordBool; uvValue: Double): ICurve; dispid 65;
  end;

// *********************************************************************//
// Interface: ICurve
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {83A33D44-27C5-11CE-BFD4-00400513BB57}
// *********************************************************************//
  ICurve = interface(IDispatch)
    ['{83A33D44-27C5-11CE-BFD4-00400513BB57}']
    function Get_LineParams: OleVariant; safecall;
    function Get_CircleParams: OleVariant; safecall;
    function Identity: Integer; safecall;
    function IsCircle: WordBool; safecall;
    function IsLine: WordBool; safecall;
    function IsBcurve: WordBool; safecall;
    function GetBCurveParams(wantCubicIn: WordBool): OleVariant; safecall;
    function ConvertLineToBcurve(startPoint: OleVariant; endPoint: OleVariant): OleVariant; safecall;
    function ConvertArcToBcurve(center: OleVariant; axis: OleVariant; start: OleVariant; 
                                end_: OleVariant): OleVariant; safecall;
    function ReverseCurve: IDispatch; safecall;
    function IReverseCurve: ICurve; safecall;
    function GetPCurveParams: OleVariant; safecall;
    function Get_ILineParams: Double; safecall;
    function Get_ICircleParams: Double; safecall;
    function IGetBCurveParams: Double; safecall;
    function IGetBCurveParamsSize(wantCubicIn: WordBool): Integer; safecall;
    function IConvertLineToBcurveSize(var startPoint: Double; var endPoint: Double): Integer; safecall;
    function IConvertArcToBcurveSize(var center: Double; var axis: Double; var start: Double; 
                                     var end_: Double): Integer; safecall;
    function IGetPCurveParams: Double; safecall;
    function IGetPCurveParamsSize: Integer; safecall;
    function GetLength(startParam: Double; endParam: Double): Double; safecall;
    function IConvertPcurveToBcurveSize(dim: Integer; order: Integer; nsegs: Integer; 
                                        var coeffs: Double; basis: Integer; var xform: Double; 
                                        scaleFactor: Double): Integer; safecall;
    function GetSplinePts(paramsArrayIn: OleVariant): OleVariant; safecall;
    function IGetSplinePts: Double; safecall;
    function IGetSplinePtsSize(var propArray: SYSINT; var knotsArray: Double; 
                               var cntrlPntCoordArray: Double): Integer; safecall;
    function IGetBCurveParamsSize2(wantCubic: WordBool; wantNRational: WordBool): Integer; safecall;
    function Copy: IDispatch; safecall;
    function ICopy: ICurve; safecall;
    function GetTessPts(chordTolerance: Double; lengthTolerance: Double; startPoint: OleVariant; 
                        endPoint: OleVariant): OleVariant; safecall;
    function IGetTessPts(chordTolerance: Double; lengthTolerance: Double; var startPoint: Double; 
                         var endPoint: Double): Double; safecall;
    function IGetTessPtsSize(chordTolerance: Double; lengthTolerance: Double; 
                             var startPoint: Double; var endPoint: Double): Integer; safecall;
    function IntersectCurve(const otherCurve: IDispatch; thisStartPoint: OleVariant; 
                            thisEndPoint: OleVariant; otherStartPoint: OleVariant; 
                            otherEndPoint: OleVariant): OleVariant; safecall;
    function IIntersectCurve(const otherCurve: ICurve; var thisStartPoint: Double; 
                             var thisEndPoint: Double; var otherStartPoint: Double; 
                             var otherEndPoint: Double): Double; safecall;
    function IIntersectCurveSize(const otherCurve: ICurve; var thisStartPoint: Double; 
                                 var thisEndPoint: Double; var otherStartPoint: Double; 
                                 var otherEndPoint: Double): Integer; safecall;
    function CreateTrimmedCurve(x1: Double; y1: Double; z1: Double; x2: Double; y2: Double; 
                                z2: Double): IDispatch; safecall;
    function ICreateTrimmedCurve(var start: Double; var end_: Double): ICurve; safecall;
    function IsEllipse: WordBool; safecall;
    function GetEllipseParams: OleVariant; safecall;
    procedure IGetEllipseParams(var paramArray: Double); safecall;
    function Evaluate(Parameter: Double): OleVariant; safecall;
    function IEvaluate(Parameter: Double): Double; safecall;
    function GetClosestPointOn(x: Double; y: Double; z: Double): OleVariant; safecall;
    function IGetClosestPointOn(x: Double; y: Double; z: Double): Double; safecall;
    function GetEndParams(out start: Double; out end_: Double; out isClosed: WordBool; 
                          out isPeriodic: WordBool): WordBool; safecall;
    function GetLength2(startParam: Double; endParam: Double): Double; safecall;
    function MakeBsplineCurve: ICurve; safecall;
    function CreateWireBody: IBody2; safecall;
    function GetBaseCurve: ICurve; safecall;
    function IsTrimmedCurve: WordBool; safecall;
    property LineParams: OleVariant read Get_LineParams;
    property CircleParams: OleVariant read Get_CircleParams;
    property ILineParams: Double read Get_ILineParams;
    property ICircleParams: Double read Get_ICircleParams;
  end;

// *********************************************************************//
// DispIntf:  ICurveDisp
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {83A33D44-27C5-11CE-BFD4-00400513BB57}
// *********************************************************************//
  ICurveDisp = dispinterface
    ['{83A33D44-27C5-11CE-BFD4-00400513BB57}']
    property LineParams: OleVariant readonly dispid 1;
    property CircleParams: OleVariant readonly dispid 2;
    function Identity: Integer; dispid 3;
    function IsCircle: WordBool; dispid 4;
    function IsLine: WordBool; dispid 5;
    function IsBcurve: WordBool; dispid 6;
    function GetBCurveParams(wantCubicIn: WordBool): OleVariant; dispid 7;
    function ConvertLineToBcurve(startPoint: OleVariant; endPoint: OleVariant): OleVariant; dispid 8;
    function ConvertArcToBcurve(center: OleVariant; axis: OleVariant; start: OleVariant; 
                                end_: OleVariant): OleVariant; dispid 9;
    function ReverseCurve: IDispatch; dispid 10;
    function IReverseCurve: ICurve; dispid 12;
    function GetPCurveParams: OleVariant; dispid 11;
    property ILineParams: Double readonly dispid 13;
    property ICircleParams: Double readonly dispid 14;
    function IGetBCurveParams: Double; dispid 15;
    function IGetBCurveParamsSize(wantCubicIn: WordBool): Integer; dispid 16;
    function IConvertLineToBcurveSize(var startPoint: Double; var endPoint: Double): Integer; dispid 17;
    function IConvertArcToBcurveSize(var center: Double; var axis: Double; var start: Double; 
                                     var end_: Double): Integer; dispid 18;
    function IGetPCurveParams: Double; dispid 19;
    function IGetPCurveParamsSize: Integer; dispid 20;
    function GetLength(startParam: Double; endParam: Double): Double; dispid 21;
    function IConvertPcurveToBcurveSize(dim: Integer; order: Integer; nsegs: Integer; 
                                        var coeffs: Double; basis: Integer; var xform: Double; 
                                        scaleFactor: Double): Integer; dispid 22;
    function GetSplinePts(paramsArrayIn: OleVariant): OleVariant; dispid 23;
    function IGetSplinePts: Double; dispid 24;
    function IGetSplinePtsSize(var propArray: SYSINT; var knotsArray: Double; 
                               var cntrlPntCoordArray: Double): Integer; dispid 25;
    function IGetBCurveParamsSize2(wantCubic: WordBool; wantNRational: WordBool): Integer; dispid 26;
    function Copy: IDispatch; dispid 27;
    function ICopy: ICurve; dispid 28;
    function GetTessPts(chordTolerance: Double; lengthTolerance: Double; startPoint: OleVariant; 
                        endPoint: OleVariant): OleVariant; dispid 29;
    function IGetTessPts(chordTolerance: Double; lengthTolerance: Double; var startPoint: Double; 
                         var endPoint: Double): Double; dispid 30;
    function IGetTessPtsSize(chordTolerance: Double; lengthTolerance: Double; 
                             var startPoint: Double; var endPoint: Double): Integer; dispid 31;
    function IntersectCurve(const otherCurve: IDispatch; thisStartPoint: OleVariant; 
                            thisEndPoint: OleVariant; otherStartPoint: OleVariant; 
                            otherEndPoint: OleVariant): OleVariant; dispid 32;
    function IIntersectCurve(const otherCurve: ICurve; var thisStartPoint: Double; 
                             var thisEndPoint: Double; var otherStartPoint: Double; 
                             var otherEndPoint: Double): Double; dispid 33;
    function IIntersectCurveSize(const otherCurve: ICurve; var thisStartPoint: Double; 
                                 var thisEndPoint: Double; var otherStartPoint: Double; 
                                 var otherEndPoint: Double): Integer; dispid 34;
    function CreateTrimmedCurve(x1: Double; y1: Double; z1: Double; x2: Double; y2: Double; 
                                z2: Double): IDispatch; dispid 35;
    function ICreateTrimmedCurve(var start: Double; var end_: Double): ICurve; dispid 36;
    function IsEllipse: WordBool; dispid 37;
    function GetEllipseParams: OleVariant; dispid 38;
    procedure IGetEllipseParams(var paramArray: Double); dispid 39;
    function Evaluate(Parameter: Double): OleVariant; dispid 40;
    function IEvaluate(Parameter: Double): Double; dispid 41;
    function GetClosestPointOn(x: Double; y: Double; z: Double): OleVariant; dispid 42;
    function IGetClosestPointOn(x: Double; y: Double; z: Double): Double; dispid 43;
    function GetEndParams(out start: Double; out end_: Double; out isClosed: WordBool; 
                          out isPeriodic: WordBool): WordBool; dispid 44;
    function GetLength2(startParam: Double; endParam: Double): Double; dispid 45;
    function MakeBsplineCurve: ICurve; dispid 46;
    function CreateWireBody: IBody2; dispid 47;
    function GetBaseCurve: ICurve; dispid 48;
    function IsTrimmedCurve: WordBool; dispid 49;
  end;

// *********************************************************************//
// Interface: IBody2
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {3A075BFD-9962-4431-8321-7AF4903C55AD}
// *********************************************************************//
  IBody2 = interface(IDispatch)
    ['{3A075BFD-9962-4431-8321-7AF4903C55AD}']
    function GetFirstFace: IDispatch; safecall;
    function IGetFirstFace: IFace2; safecall;
    function GetFaceCount: Integer; safecall;
    function CreateNewSurface: IDispatch; safecall;
    function ICreateNewSurface: ISurface; safecall;
    function CreateBodyFromSurfaces: WordBool; safecall;
    function CreatePlanarSurface(vRootPoint: OleVariant; vNormal: OleVariant): IDispatch; safecall;
    function ICreatePlanarSurface(vRootPoint: OleVariant; vNormal: OleVariant): ISurface; safecall;
    function CreateRevolutionSurface(const profileCurve: IDispatch; axisPoint: OleVariant; 
                                     axisDirection: OleVariant; profileEndPtParams: OleVariant): IDispatch; safecall;
    function ICreateRevolutionSurface(const profileCurve: ICurve; axisPoint: OleVariant; 
                                      axisDirection: OleVariant; profileEndPtParams: OleVariant): ISurface; safecall;
    function CreateBsplineSurface(props: OleVariant; uKnots: OleVariant; vKnots: OleVariant; 
                                  ctrlPtCoords: OleVariant): IDispatch; safecall;
    function ICreateBsplineSurface(props: OleVariant; uKnots: OleVariant; vKnots: OleVariant; 
                                   ctrlPtCoords: OleVariant): ISurface; safecall;
    function CreateTrimmedSurface: WordBool; safecall;
    function AddProfileLine(rootPoint: OleVariant; direction: OleVariant): IDispatch; safecall;
    function IAddProfileLine(rootPoint: OleVariant; direction: OleVariant): ICurve; safecall;
    function AddProfileArc(center: OleVariant; axis: OleVariant; radius: Double; 
                           startPoint: OleVariant; endPoint: OleVariant): IDispatch; safecall;
    function IAddProfileArc(center: OleVariant; axis: OleVariant; radius: Double; 
                            startPoint: OleVariant; endPoint: OleVariant): ICurve; safecall;
    function AddProfileBspline(props: OleVariant; knots: OleVariant; ctrlPtCoords: OleVariant): IDispatch; safecall;
    function IAddProfileBspline(props: OleVariant; knots: OleVariant; ctrlPtCoords: OleVariant): ICurve; safecall;
    function CreateExtrusionSurface(const profileCurve: IDispatch; axisDirection: OleVariant): IDispatch; safecall;
    function ICreateExtrusionSurface(const profileCurve: ICurve; axisDirection: OleVariant): ISurface; safecall;
    function GetFirstSelectedFace: IDispatch; safecall;
    function IGetFirstSelectedFace: IFace2; safecall;
    function GetNextSelectedFace: IDispatch; safecall;
    function IGetNextSelectedFace: IFace2; safecall;
    function GetSelectedFaceCount: Integer; safecall;
    function CreateBoundedSurface(uOpt: WordBool; vOpt: WordBool; uvParams: OleVariant): WordBool; safecall;
    function GetIgesErrorCount: Integer; safecall;
    function GetIgesErrorCode(index: Integer): Integer; safecall;
    function Copy: IDispatch; safecall;
    function ICopy: IBody2; safecall;
    function EnumFaces: IEnumFaces2; safecall;
    function CreateBodyFromFaces(NumOfFaces: Integer; FaceList: OleVariant): IDispatch; safecall;
    function ICreateBodyFromFaces(NumOfFaces: Integer; FaceList: OleVariant): IBody2; safecall;
    function DeleteFaces(NumOfFaces: Integer; FaceList: OleVariant): WordBool; safecall;
    procedure Display(const part: IDispatch; Color: Integer); safecall;
    procedure IDisplay(const part: IPartDoc; Color: Integer); safecall;
    procedure Hide(const part: IDispatch); safecall;
    procedure IHide(const part: IPartDoc); safecall;
    function ICreatePlanarSurfaceDLL(var rootPoint: Double; var Normal: Double): ISurface; safecall;
    function ICreateRevolutionSurfaceDLL(const profileCurve: ICurve; var axisPoint: Double; 
                                         var axisDirection: Double; var profileEndPtParams: Double): ISurface; safecall;
    function IAddProfileLineDLL(var rootPoint: Double; var direction: Double): ICurve; safecall;
    function IAddProfileArcDLL(var center: Double; var axis: Double; radius: Double; 
                               var startPoint: Double; var endPoint: Double): ICurve; safecall;
    function ICreateBsplineSurfaceDLL(var Properties: Integer; var UKnotArray: Double; 
                                      var VKnotArray: Double; var ControlPointCoordArray: Double): ISurface; safecall;
    function IAddProfileBsplineDLL(var Properties: Integer; var KnotArray: Double; 
                                   var ControlPointCoordArray: Double): ICurve; safecall;
    function ICreateExtrusionSurfaceDLL(const profileCurve: ICurve; var axisDirection: Double): ISurface; safecall;
    procedure ICreateBoundedSurface(uOpt: WordBool; vOpt: WordBool; var uvParams: Double); safecall;
    procedure ICombineVolumes(const ToolBody: IBody2); safecall;
    function ISectionBySheet(const Sheet: IBody2; NumMaxSections: Integer; 
                             var SectionedBodies: IBody2): Integer; safecall;
    procedure IGetBodyBox(var BoxCorners: Double); safecall;
    procedure SetIgesInfo(const systemName: WideString; granularity: Double; 
                          attemptKnitting: WordBool); safecall;
    procedure DisplayWireFrameXOR(const part: IDispatch; Color: Integer); safecall;
    procedure IDisplayWireFrameXOR(const part: IPartDoc; Color: Integer); safecall;
    procedure Save(const streamIn: IUnknown); safecall;
    procedure ISave(const streamIn: IUnknown); safecall;
    function CreateBlendSurface(const Surface1: IDispatch; Range1: Double; 
                                const Surface2: IDispatch; Range2: Double; StartVec: OleVariant; 
                                EndVec: OleVariant; HaveHelpVec: SYSINT; HelpVec: OleVariant; 
                                HaveHelpBox: SYSINT; HelpBox: OleVariant): IDispatch; safecall;
    function ICreateBlendSurface(const Surface1: ISurface; Range1: Double; 
                                 const Surface2: ISurface; Range2: Double; var StartVec: Double; 
                                 var EndVec: Double; HaveHelpVec: SYSINT; var HelpVec: Double; 
                                 HaveHelpBox: SYSINT; var HelpBox: Double): ISurface; safecall;
    function CreateOffsetSurface(const surfaceIn: IDispatch; distance: Double): IDispatch; safecall;
    function ICreateOffsetSurface(const surfaceIn: ISurface; distance: Double): ISurface; safecall;
    function RemoveRedundantTopology: WordBool; safecall;
    function GetIntersectionEdges(const toolBodyIn: IDispatch): OleVariant; safecall;
    function IGetIntersectionEdges(const toolBodyIn: IBody2): IEdge; safecall;
    function IGetIntersectionEdgeCount(const toolBodyIn: IBody2): Integer; safecall;
    procedure RemoveFacesFromSheet(NumOfFaces: Integer; facesToRemove: OleVariant); safecall;
    procedure IRemoveFacesFromSheet(NumOfFaces: Integer; var facesToRemove: IFace2); safecall;
    procedure ICreatePlanarTrimSurfaceDLL(VertexCount: Integer; var points: Double; 
                                          var Normal: Double); safecall;
    function Get_MaterialPropertyValues: OleVariant; safecall;
    procedure Set_MaterialPropertyValues(retval: OleVariant); safecall;
    function Get_IMaterialPropertyValues: Double; safecall;
    procedure Set_IMaterialPropertyValues(var retval: Double); safecall;
    function AddPropertyExtension(PropertyExtension: OleVariant): Integer; safecall;
    function GetPropertyExtension(id: Integer): OleVariant; safecall;
    procedure ResetPropertyExtension; safecall;
    function GetMaterialIdName: WideString; safecall;
    function SetMaterialIdName(const Name: WideString): WordBool; safecall;
    function GetMaterialUserName: WideString; safecall;
    function SetMaterialUserName(const Name: WideString): WordBool; safecall;
    function GetMassProperties(density: Double): OleVariant; safecall;
    function IGetMassProperties(density: Double): Double; safecall;
    function ICreatePsplineSurfaceDLL(dim: Integer; uorder: Integer; vOrder: Integer; 
                                      ncol: Integer; nrow: Integer; var coeffs: Double; 
                                      basis: Integer; var xform: Double; scaleFactor: Double): ISurface; safecall;
    function SetXform(xformIn: OleVariant): WordBool; safecall;
    function ISetXform(var xformIn: Double): WordBool; safecall;
    function CreateTempBodyFromSurfaces: IDispatch; safecall;
    function ICreateTempBodyFromSurfaces: IBody2; safecall;
    function Operations(operationType: SYSINT; const ToolBody: IDispatch; NumMaxSections: Integer): OleVariant; safecall;
    function IOperations(operationType: SYSINT; const ToolBody: IBody2; NumMaxSections: Integer; 
                         var resultingBodies: IBody2): Integer; safecall;
    function GetSheetBody(index: SYSINT): IDispatch; safecall;
    function IGetSheetBody(index: SYSINT): IBody2; safecall;
    function GetProcessedBody: IDispatch; safecall;
    function IGetProcessedBody: IBody2; safecall;
    function GetProcessedBodyWithSelFace: IDispatch; safecall;
    function IGetProcessedBodyWithSelFace: IBody2; safecall;
    function Check: Integer; safecall;
    function GetExcessBodyArray: OleVariant; safecall;
    function IGetExcessBodyArray: IBody2; safecall;
    function IGetExcessBodyCount: SYSINT; safecall;
    function CreateBaseFeature(const bodyIn: IDispatch): WordBool; safecall;
    function ICreateBaseFeature(const bodyIn: IBody2): WordBool; safecall;
    function DeleteFaces2(NumOfFaces: Integer; FaceList: OleVariant; option: SYSINT): Integer; safecall;
    function IDeleteFaces2(NumOfFaces: Integer; var FaceList: IFace2; option: SYSINT): Integer; safecall;
    function IAddVertexPoint(var point: Double): IVertex; safecall;
    function AddVertexPoint(point: OleVariant): IDispatch; safecall;
    function GetExtremePoint(x: Double; y: Double; z: Double; out outx: Double; out outy: Double; 
                             out outz: Double): WordBool; safecall;
    function GetType: Integer; safecall;
    procedure IDeleteFaces3(NumOfFaces: Integer; var FaceList: IFace2; option: Integer; 
                            doLocalCheck: WordBool; var localCheckResult: WordBool); safecall;
    procedure SetCurrentSurface(const surfaceIn: IDispatch); safecall;
    procedure ISetCurrentSurface(const surfaceIn: ISurface); safecall;
    function DraftBody(NumOfFaces: Integer; FaceList: OleVariant; EdgeList: OleVariant; 
                       draftAngle: Double; dir: OleVariant): WordBool; safecall;
    function IDraftBody(NumOfFaces: Integer; var FaceList: IFace2; var EdgeList: IEdge; 
                        draftAngle: Double; var dir: Double): WordBool; safecall;
    function DeleteBlends(NumOfFaces: Integer; FaceList: OleVariant): WordBool; safecall;
    function IDeleteBlends(NumOfFaces: Integer; var FaceList: IFace2): WordBool; safecall;
    function Operations2(operationType: SYSINT; const ToolBody: IDispatch; out errorCode: Integer): OleVariant; safecall;
    function IOperations2(operationType: SYSINT; const ToolBody: IBody2; out errorCode: Integer): IEnumBodies2; safecall;
    function GetBodyBox: OleVariant; safecall;
    function DeleteBlends2(NumOfFaces: Integer; FaceList: OleVariant; doLocalCheck: WordBool): WordBool; safecall;
    function IDeleteBlends2(NumOfFaces: Integer; var FaceList: IFace2; doLocalCheck: WordBool): WordBool; safecall;
    function GetTessellation(FaceList: OleVariant): IDispatch; safecall;
    function IGetTessellation(NumOfFaces: Integer; var FaceList: IFace2): ITessellation; safecall;
    function Get_Visible: WordBool; safecall;
    function MatchedBoolean(operationType: SYSINT; const ToolBody: IDispatch; 
                            numOfMatchingFaces: Integer; faceList1: OleVariant; 
                            faceList2: OleVariant; out errorCode: Integer): OleVariant; safecall;
    function IMatchedBoolean(operationType: SYSINT; const ToolBody: IBody2; 
                             numOfMatchingFaces: Integer; var faceList1: IFace2; 
                             var faceList2: IFace2; out errorCode: Integer): IEnumBodies2; safecall;
    function GetEdgeCount: Integer; safecall;
    function CreateRuledSurface(const Curve1: IDispatch; const Curve2: IDispatch; 
                                apexPoint: OleVariant): IDispatch; safecall;
    function ICreateRuledSurface(const Curve1: ICurve; const Curve2: ICurve; var apexPoint: Double): ISurface; safecall;
    function AddProfileBsplineByPts(numPoints: Integer; pointArray: OleVariant): IDispatch; safecall;
    function IAddProfileBsplineByPts(numPoints: Integer; var pointArray: Double): ICurve; safecall;
    function GetEdges: OleVariant; safecall;
    function IGetEdges(count: Integer): IEdge; safecall;
    function ApplyTransform(const xform: IMathTransform): WordBool; safecall;
    function Select(Append: WordBool; mark: Integer): WordBool; safecall;
    function DeSelect: WordBool; safecall;
    function MatchedBoolean2(operationType: SYSINT; ToolBody: OleVariant; 
                             numOfMatchingFaces: Integer; faceList1: OleVariant; 
                             faceList2: OleVariant; out errorCode: Integer): OleVariant; safecall;
    function IMatchedBoolean2(operationType: SYSINT; toolBodyCount: Integer; 
                              var toolBodyArr: IBody2; numOfMatchingFaces: Integer; 
                              var faceList1: IFace2; var faceList2: IFace2; out errorCode: Integer): IEnumBodies2; safecall;
    procedure HideBody(bHide: WordBool); safecall;
    function Get_IsSafe: WordBool; safecall;
    function GetSafeBody: IBody2; safecall;
    function GetProcessedBody2(MaxUAngle: Double; MaxVAngle: Double): IBody2; safecall;
    function FindAttribute(const attributeDef: IAttributeDef; whichOne: Integer): IAttribute; safecall;
    function MatchedBoolean3(operationType: SYSINT; ToolBody: OleVariant; 
                             numOfMatchingFaces: Integer; faceList1: OleVariant; 
                             faceList2: OleVariant; out errorCode: Integer): OleVariant; safecall;
    function IMatchedBoolean3(operationType: SYSINT; toolBodyCount: Integer; 
                              var toolBodyArr: IBody2; numOfMatchingFaces: Integer; 
                              var faceList1: IFace2; var faceList2: IFace2; out errorCode: Integer): IEnumBodies2; safecall;
    function GetSelectionId: WideString; safecall;
    function Get_MaterialPropertyValues2: OleVariant; safecall;
    procedure Set_MaterialPropertyValues2(retval: OleVariant); safecall;
    function Get_IMaterialPropertyValues2: Double; safecall;
    procedure Set_IMaterialPropertyValues2(var retval: Double); safecall;
    function AddPropertyExtension2(PropertyExtension: OleVariant): Integer; safecall;
    function GetPropertyExtension2(id: Integer): OleVariant; safecall;
    procedure ResetPropertyExtension2; safecall;
    function GetMaterialIdName2: WideString; safecall;
    function SetMaterialIdName2(const Name: WideString): WordBool; safecall;
    function GetMaterialUserName2: WideString; safecall;
    function SetMaterialUserName2(const Name: WideString): WordBool; safecall;
    property MaterialPropertyValues: OleVariant read Get_MaterialPropertyValues write Set_MaterialPropertyValues;
    property Visible: WordBool read Get_Visible;
    property IsSafe: WordBool read Get_IsSafe;
    property MaterialPropertyValues2: OleVariant read Get_MaterialPropertyValues2 write Set_MaterialPropertyValues2;
  end;

// *********************************************************************//
// DispIntf:  IBody2Disp
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {3A075BFD-9962-4431-8321-7AF4903C55AD}
// *********************************************************************//
  IBody2Disp = dispinterface
    ['{3A075BFD-9962-4431-8321-7AF4903C55AD}']
    function GetFirstFace: IDispatch; dispid 1;
    function IGetFirstFace: IFace2; dispid 20;
    function GetFaceCount: Integer; dispid 2;
    function CreateNewSurface: IDispatch; dispid 3;
    function ICreateNewSurface: ISurface; dispid 21;
    function CreateBodyFromSurfaces: WordBool; dispid 4;
    function CreatePlanarSurface(vRootPoint: OleVariant; vNormal: OleVariant): IDispatch; dispid 5;
    function ICreatePlanarSurface(vRootPoint: OleVariant; vNormal: OleVariant): ISurface; dispid 22;
    function CreateRevolutionSurface(const profileCurve: IDispatch; axisPoint: OleVariant; 
                                     axisDirection: OleVariant; profileEndPtParams: OleVariant): IDispatch; dispid 6;
    function ICreateRevolutionSurface(const profileCurve: ICurve; axisPoint: OleVariant; 
                                      axisDirection: OleVariant; profileEndPtParams: OleVariant): ISurface; dispid 23;
    function CreateBsplineSurface(props: OleVariant; uKnots: OleVariant; vKnots: OleVariant; 
                                  ctrlPtCoords: OleVariant): IDispatch; dispid 7;
    function ICreateBsplineSurface(props: OleVariant; uKnots: OleVariant; vKnots: OleVariant; 
                                   ctrlPtCoords: OleVariant): ISurface; dispid 24;
    function CreateTrimmedSurface: WordBool; dispid 8;
    function AddProfileLine(rootPoint: OleVariant; direction: OleVariant): IDispatch; dispid 9;
    function IAddProfileLine(rootPoint: OleVariant; direction: OleVariant): ICurve; dispid 25;
    function AddProfileArc(center: OleVariant; axis: OleVariant; radius: Double; 
                           startPoint: OleVariant; endPoint: OleVariant): IDispatch; dispid 10;
    function IAddProfileArc(center: OleVariant; axis: OleVariant; radius: Double; 
                            startPoint: OleVariant; endPoint: OleVariant): ICurve; dispid 26;
    function AddProfileBspline(props: OleVariant; knots: OleVariant; ctrlPtCoords: OleVariant): IDispatch; dispid 11;
    function IAddProfileBspline(props: OleVariant; knots: OleVariant; ctrlPtCoords: OleVariant): ICurve; dispid 27;
    function CreateExtrusionSurface(const profileCurve: IDispatch; axisDirection: OleVariant): IDispatch; dispid 12;
    function ICreateExtrusionSurface(const profileCurve: ICurve; axisDirection: OleVariant): ISurface; dispid 28;
    function GetFirstSelectedFace: IDispatch; dispid 13;
    function IGetFirstSelectedFace: IFace2; dispid 29;
    function GetNextSelectedFace: IDispatch; dispid 14;
    function IGetNextSelectedFace: IFace2; dispid 30;
    function GetSelectedFaceCount: Integer; dispid 15;
    function CreateBoundedSurface(uOpt: WordBool; vOpt: WordBool; uvParams: OleVariant): WordBool; dispid 16;
    function GetIgesErrorCount: Integer; dispid 17;
    function GetIgesErrorCode(index: Integer): Integer; dispid 18;
    function Copy: IDispatch; dispid 19;
    function ICopy: IBody2; dispid 31;
    function EnumFaces: IEnumFaces2; dispid 32;
    function CreateBodyFromFaces(NumOfFaces: Integer; FaceList: OleVariant): IDispatch; dispid 33;
    function ICreateBodyFromFaces(NumOfFaces: Integer; FaceList: OleVariant): IBody2; dispid 34;
    function DeleteFaces(NumOfFaces: Integer; FaceList: OleVariant): WordBool; dispid 35;
    procedure Display(const part: IDispatch; Color: Integer); dispid 36;
    procedure IDisplay(const part: IPartDoc; Color: Integer); dispid 37;
    procedure Hide(const part: IDispatch); dispid 38;
    procedure IHide(const part: IPartDoc); dispid 39;
    function ICreatePlanarSurfaceDLL(var rootPoint: Double; var Normal: Double): ISurface; dispid 40;
    function ICreateRevolutionSurfaceDLL(const profileCurve: ICurve; var axisPoint: Double; 
                                         var axisDirection: Double; var profileEndPtParams: Double): ISurface; dispid 41;
    function IAddProfileLineDLL(var rootPoint: Double; var direction: Double): ICurve; dispid 42;
    function IAddProfileArcDLL(var center: Double; var axis: Double; radius: Double; 
                               var startPoint: Double; var endPoint: Double): ICurve; dispid 43;
    function ICreateBsplineSurfaceDLL(var Properties: Integer; var UKnotArray: Double; 
                                      var VKnotArray: Double; var ControlPointCoordArray: Double): ISurface; dispid 44;
    function IAddProfileBsplineDLL(var Properties: Integer; var KnotArray: Double; 
                                   var ControlPointCoordArray: Double): ICurve; dispid 45;
    function ICreateExtrusionSurfaceDLL(const profileCurve: ICurve; var axisDirection: Double): ISurface; dispid 46;
    procedure ICreateBoundedSurface(uOpt: WordBool; vOpt: WordBool; var uvParams: Double); dispid 47;
    procedure ICombineVolumes(const ToolBody: IBody2); dispid 48;
    function ISectionBySheet(const Sheet: IBody2; NumMaxSections: Integer; 
                             var SectionedBodies: IBody2): Integer; dispid 49;
    procedure IGetBodyBox(var BoxCorners: Double); dispid 50;
    procedure SetIgesInfo(const systemName: WideString; granularity: Double; 
                          attemptKnitting: WordBool); dispid 51;
    procedure DisplayWireFrameXOR(const part: IDispatch; Color: Integer); dispid 52;
    procedure IDisplayWireFrameXOR(const part: IPartDoc; Color: Integer); dispid 53;
    procedure Save(const streamIn: IUnknown); dispid 54;
    procedure ISave(const streamIn: IUnknown); dispid 55;
    function CreateBlendSurface(const Surface1: IDispatch; Range1: Double; 
                                const Surface2: IDispatch; Range2: Double; StartVec: OleVariant; 
                                EndVec: OleVariant; HaveHelpVec: SYSINT; HelpVec: OleVariant; 
                                HaveHelpBox: SYSINT; HelpBox: OleVariant): IDispatch; dispid 56;
    function ICreateBlendSurface(const Surface1: ISurface; Range1: Double; 
                                 const Surface2: ISurface; Range2: Double; var StartVec: Double; 
                                 var EndVec: Double; HaveHelpVec: SYSINT; var HelpVec: Double; 
                                 HaveHelpBox: SYSINT; var HelpBox: Double): ISurface; dispid 57;
    function CreateOffsetSurface(const surfaceIn: IDispatch; distance: Double): IDispatch; dispid 58;
    function ICreateOffsetSurface(const surfaceIn: ISurface; distance: Double): ISurface; dispid 59;
    function RemoveRedundantTopology: WordBool; dispid 60;
    function GetIntersectionEdges(const toolBodyIn: IDispatch): OleVariant; dispid 61;
    function IGetIntersectionEdges(const toolBodyIn: IBody2): IEdge; dispid 62;
    function IGetIntersectionEdgeCount(const toolBodyIn: IBody2): Integer; dispid 63;
    procedure RemoveFacesFromSheet(NumOfFaces: Integer; facesToRemove: OleVariant); dispid 64;
    procedure IRemoveFacesFromSheet(NumOfFaces: Integer; var facesToRemove: IFace2); dispid 65;
    procedure ICreatePlanarTrimSurfaceDLL(VertexCount: Integer; var points: Double; 
                                          var Normal: Double); dispid 66;
    property MaterialPropertyValues: OleVariant dispid 67;
    function IMaterialPropertyValues: Double; dispid 68;
    function AddPropertyExtension(PropertyExtension: OleVariant): Integer; dispid 69;
    function GetPropertyExtension(id: Integer): OleVariant; dispid 70;
    procedure ResetPropertyExtension; dispid 71;
    function GetMaterialIdName: WideString; dispid 72;
    function SetMaterialIdName(const Name: WideString): WordBool; dispid 73;
    function GetMaterialUserName: WideString; dispid 74;
    function SetMaterialUserName(const Name: WideString): WordBool; dispid 75;
    function GetMassProperties(density: Double): OleVariant; dispid 76;
    function IGetMassProperties(density: Double): Double; dispid 77;
    function ICreatePsplineSurfaceDLL(dim: Integer; uorder: Integer; vOrder: Integer; 
                                      ncol: Integer; nrow: Integer; var coeffs: Double; 
                                      basis: Integer; var xform: Double; scaleFactor: Double): ISurface; dispid 78;
    function SetXform(xformIn: OleVariant): WordBool; dispid 79;
    function ISetXform(var xformIn: Double): WordBool; dispid 80;
    function CreateTempBodyFromSurfaces: IDispatch; dispid 81;
    function ICreateTempBodyFromSurfaces: IBody2; dispid 82;
    function Operations(operationType: SYSINT; const ToolBody: IDispatch; NumMaxSections: Integer): OleVariant; dispid 83;
    function IOperations(operationType: SYSINT; const ToolBody: IBody2; NumMaxSections: Integer; 
                         var resultingBodies: IBody2): Integer; dispid 84;
    function GetSheetBody(index: SYSINT): IDispatch; dispid 85;
    function IGetSheetBody(index: SYSINT): IBody2; dispid 86;
    function GetProcessedBody: IDispatch; dispid 87;
    function IGetProcessedBody: IBody2; dispid 88;
    function GetProcessedBodyWithSelFace: IDispatch; dispid 89;
    function IGetProcessedBodyWithSelFace: IBody2; dispid 90;
    function Check: Integer; dispid 91;
    function GetExcessBodyArray: OleVariant; dispid 92;
    function IGetExcessBodyArray: IBody2; dispid 93;
    function IGetExcessBodyCount: SYSINT; dispid 94;
    function CreateBaseFeature(const bodyIn: IDispatch): WordBool; dispid 95;
    function ICreateBaseFeature(const bodyIn: IBody2): WordBool; dispid 96;
    function DeleteFaces2(NumOfFaces: Integer; FaceList: OleVariant; option: SYSINT): Integer; dispid 97;
    function IDeleteFaces2(NumOfFaces: Integer; var FaceList: IFace2; option: SYSINT): Integer; dispid 98;
    function IAddVertexPoint(var point: Double): IVertex; dispid 99;
    function AddVertexPoint(point: OleVariant): IDispatch; dispid 100;
    function GetExtremePoint(x: Double; y: Double; z: Double; out outx: Double; out outy: Double; 
                             out outz: Double): WordBool; dispid 101;
    function GetType: Integer; dispid 102;
    procedure IDeleteFaces3(NumOfFaces: Integer; var FaceList: IFace2; option: Integer; 
                            doLocalCheck: WordBool; var localCheckResult: WordBool); dispid 103;
    procedure SetCurrentSurface(const surfaceIn: IDispatch); dispid 104;
    procedure ISetCurrentSurface(const surfaceIn: ISurface); dispid 105;
    function DraftBody(NumOfFaces: Integer; FaceList: OleVariant; EdgeList: OleVariant; 
                       draftAngle: Double; dir: OleVariant): WordBool; dispid 106;
    function IDraftBody(NumOfFaces: Integer; var FaceList: IFace2; var EdgeList: IEdge; 
                        draftAngle: Double; var dir: Double): WordBool; dispid 107;
    function DeleteBlends(NumOfFaces: Integer; FaceList: OleVariant): WordBool; dispid 108;
    function IDeleteBlends(NumOfFaces: Integer; var FaceList: IFace2): WordBool; dispid 109;
    function Operations2(operationType: SYSINT; const ToolBody: IDispatch; out errorCode: Integer): OleVariant; dispid 110;
    function IOperations2(operationType: SYSINT; const ToolBody: IBody2; out errorCode: Integer): IEnumBodies2; dispid 111;
    function GetBodyBox: OleVariant; dispid 112;
    function DeleteBlends2(NumOfFaces: Integer; FaceList: OleVariant; doLocalCheck: WordBool): WordBool; dispid 113;
    function IDeleteBlends2(NumOfFaces: Integer; var FaceList: IFace2; doLocalCheck: WordBool): WordBool; dispid 114;
    function GetTessellation(FaceList: OleVariant): IDispatch; dispid 115;
    function IGetTessellation(NumOfFaces: Integer; var FaceList: IFace2): ITessellation; dispid 116;
    property Visible: WordBool readonly dispid 117;
    function MatchedBoolean(operationType: SYSINT; const ToolBody: IDispatch; 
                            numOfMatchingFaces: Integer; faceList1: OleVariant; 
                            faceList2: OleVariant; out errorCode: Integer): OleVariant; dispid 118;
    function IMatchedBoolean(operationType: SYSINT; const ToolBody: IBody2; 
                             numOfMatchingFaces: Integer; var faceList1: IFace2; 
                             var faceList2: IFace2; out errorCode: Integer): IEnumBodies2; dispid 119;
    function GetEdgeCount: Integer; dispid 120;
    function CreateRuledSurface(const Curve1: IDispatch; const Curve2: IDispatch; 
                                apexPoint: OleVariant): IDispatch; dispid 121;
    function ICreateRuledSurface(const Curve1: ICurve; const Curve2: ICurve; var apexPoint: Double): ISurface; dispid 122;
    function AddProfileBsplineByPts(numPoints: Integer; pointArray: OleVariant): IDispatch; dispid 123;
    function IAddProfileBsplineByPts(numPoints: Integer; var pointArray: Double): ICurve; dispid 124;
    function GetEdges: OleVariant; dispid 125;
    function IGetEdges(count: Integer): IEdge; dispid 126;
    function ApplyTransform(const xform: IMathTransform): WordBool; dispid 127;
    function Select(Append: WordBool; mark: Integer): WordBool; dispid 128;
    function DeSelect: WordBool; dispid 129;
    function MatchedBoolean2(operationType: SYSINT; ToolBody: OleVariant; 
                             numOfMatchingFaces: Integer; faceList1: OleVariant; 
                             faceList2: OleVariant; out errorCode: Integer): OleVariant; dispid 130;
    function IMatchedBoolean2(operationType: SYSINT; toolBodyCount: Integer; 
                              var toolBodyArr: IBody2; numOfMatchingFaces: Integer; 
                              var faceList1: IFace2; var faceList2: IFace2; out errorCode: Integer): IEnumBodies2; dispid 131;
    procedure HideBody(bHide: WordBool); dispid 132;
    property IsSafe: WordBool readonly dispid 133;
    function GetSafeBody: IBody2; dispid 134;
    function GetProcessedBody2(MaxUAngle: Double; MaxVAngle: Double): IBody2; dispid 135;
    function FindAttribute(const attributeDef: IAttributeDef; whichOne: Integer): IAttribute; dispid 136;
    function MatchedBoolean3(operationType: SYSINT; ToolBody: OleVariant; 
                             numOfMatchingFaces: Integer; faceList1: OleVariant; 
                             faceList2: OleVariant; out errorCode: Integer): OleVariant; dispid 137;
    function IMatchedBoolean3(operationType: SYSINT; toolBodyCount: Integer; 
                              var toolBodyArr: IBody2; numOfMatchingFaces: Integer; 
                              var faceList1: IFace2; var faceList2: IFace2; out errorCode: Integer): IEnumBodies2; dispid 138;
    function GetSelectionId: WideString; dispid 139;
    property MaterialPropertyValues2: OleVariant dispid 140;
    function IMaterialPropertyValues2: Double; dispid 141;
    function AddPropertyExtension2(PropertyExtension: OleVariant): Integer; dispid 142;
    function GetPropertyExtension2(id: Integer): OleVariant; dispid 143;
    procedure ResetPropertyExtension2; dispid 144;
    function GetMaterialIdName2: WideString; dispid 145;
    function SetMaterialIdName2(const Name: WideString): WordBool; dispid 146;
    function GetMaterialUserName2: WideString; dispid 147;
    function SetMaterialUserName2(const Name: WideString): WordBool; dispid 148;
  end;

// *********************************************************************//
// Interface: IFace2
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {4A8BA4D8-DA25-4B75-8E2D-4922B74D81ED}
// *********************************************************************//
  IFace2 = interface(IDispatch)
    ['{4A8BA4D8-DA25-4B75-8E2D-4922B74D81ED}']
    function Get_Normal: OleVariant; safecall;
    procedure Set_Normal(retval: OleVariant); safecall;
    function Get_MaterialUserName: WideString; safecall;
    procedure Set_MaterialUserName(const retval: WideString); safecall;
    function Get_MaterialIdName: WideString; safecall;
    procedure Set_MaterialIdName(const retval: WideString); safecall;
    function Get_MaterialPropertyValues: OleVariant; safecall;
    procedure Set_MaterialPropertyValues(retval: OleVariant); safecall;
    function Get_INormal: Double; safecall;
    procedure Set_INormal(var retval: Double); safecall;
    function GetNextFace: IDispatch; safecall;
    function IGetNextFace: IFace2; safecall;
    function GetSurface: IDispatch; safecall;
    function IGetSurface: ISurface; safecall;
    function GetEdgeCount: Integer; safecall;
    function GetEdges: OleVariant; safecall;
    function IGetEdges: IEdge; safecall;
    function GetFeature: IDispatch; safecall;
    function IGetFeature: IFeature; safecall;
    function GetFeatureId: Integer; safecall;
    function GetTrimCurves(wantCubic: WordBool): OleVariant; safecall;
    function GetUVBounds: OleVariant; safecall;
    function FaceInSurfaceSense: WordBool; safecall;
    function GetLoopCount: Integer; safecall;
    function GetFirstLoop: IDispatch; safecall;
    function IGetFirstLoop: ILoop2; safecall;
    function IsSame(const faceIn: IDispatch): WordBool; safecall;
    function IIsSame(const faceIn: IFace2): WordBool; safecall;
    function AddPropertyExtension(PropertyExtension: OleVariant): Integer; safecall;
    function GetPropertyExtension(id: Integer): OleVariant; safecall;
    procedure ResetPropertyExtension; safecall;
    function GetTessTriangles(noConversion: WordBool): OleVariant; safecall;
    function GetTessNorms: OleVariant; safecall;
    function GetTessTriStrips(noConversion: WordBool): OleVariant; safecall;
    function GetTessTriStripNorms: OleVariant; safecall;
    function EnumLoops: IEnumLoops2; safecall;
    function EnumEdges: IEnumEdges; safecall;
    function GetBody: IDispatch; safecall;
    function IGetBody: IBody2; safecall;
    function IGetTessTriangles(noConversion: WordBool): Single; safecall;
    function IGetTessNorms: Single; safecall;
    function GetTessTriangleCount: Integer; safecall;
    function IGetTessTriStrips(noConversion: WordBool): Single; safecall;
    function IGetTessTriStripNorms: Single; safecall;
    function GetTessTriStripSize: Integer; safecall;
    function IGetUVBounds: Double; safecall;
    function GetClosestPointOn(x: Double; y: Double; z: Double): OleVariant; safecall;
    function IGetClosestPointOn(x: Double; y: Double; z: Double): Double; safecall;
    procedure Highlight(state: WordBool); safecall;
    procedure IHighlight(state: WordBool); safecall;
    function GetTrimCurveTopology: OleVariant; safecall;
    function IGetTrimCurveTopology: IDispatch; safecall;
    function GetTrimCurveTopologyCount: Integer; safecall;
    function GetTrimCurveTopologyTypes: OleVariant; safecall;
    function IGetTrimCurveTopologyTypes: Integer; safecall;
    function RemoveRedundantTopology: WordBool; safecall;
    function CreateSheetBodyByFaceExtension(boxLowIn: OleVariant; boxHighIn: OleVariant): IDispatch; safecall;
    function ICreateSheetBodyByFaceExtension(var boxLowIn: Double; var boxHighIn: Double): IBody2; safecall;
    function GetArea: Double; safecall;
    function GetBox: OleVariant; safecall;
    function IGetBox: Double; safecall;
    function RemoveInnerLoops(numOfLoops: Integer; innerLoopsIn: OleVariant): IDispatch; safecall;
    function IRemoveInnerLoops(numOfLoops: Integer; var innerLoopsIn: ILoop2): IFace2; safecall;
    function CreateSheetBody: IDispatch; safecall;
    function ICreateSheetBody: IBody2; safecall;
    function GetSilhoutteEdges(var root: Double; var Normal: Double): OleVariant; safecall;
    function IGetSilhoutteEdges(var root: Double; var Normal: Double): IEdge; safecall;
    function IGetSilhoutteEdgeCount(var root: Double; var Normal: Double): Integer; safecall;
    function IGetTrimCurveSize(wantCubic: WordBool): Integer; safecall;
    function IGetTrimCurve: Double; safecall;
    function Get_IMaterialPropertyValues: Double; safecall;
    procedure Set_IMaterialPropertyValues(var retval: Double); safecall;
    function GetFaceId: SYSINT; safecall;
    procedure SetFaceId(idIn: SYSINT); safecall;
    function IGetTrimCurveSize2(wantCubic: Integer; wantNRational: Integer): Integer; safecall;
    function GetSilhoutteEdgesVB(xroot: Double; yroot: Double; zroot: Double; xnormal: Double; 
                                 ynormal: Double; znormal: Double): OleVariant; safecall;
    procedure RemoveFaceId(idIn: SYSINT); safecall;
    function GetTrimCurves2(wantCubic: WordBool; wantNRational: WordBool): OleVariant; safecall;
    function GetShellType: SYSINT; safecall;
    procedure IGetFacetData(facetMesh: SYSINT; var nFacets: SYSINT; var nStrips: SYSINT; 
                            var stripVertexNums: SYSINT; var vertexCoords: Single; 
                            var normalCoords: Single); safecall;
    function GetTessTriStripEdges: OleVariant; safecall;
    function IGetTessTriStripEdges: Integer; safecall;
    function IGetTessTriStripEdgeSize: Integer; safecall;
    function RemoveMaterialProperty: WordBool; safecall;
    function GetPatternSeedFeature: IDispatch; safecall;
    function IGetPatternSeedFeature: IFeature; safecall;
    property Normal: OleVariant read Get_Normal write Set_Normal;
    property MaterialUserName: WideString read Get_MaterialUserName write Set_MaterialUserName;
    property MaterialIdName: WideString read Get_MaterialIdName write Set_MaterialIdName;
    property MaterialPropertyValues: OleVariant read Get_MaterialPropertyValues write Set_MaterialPropertyValues;
  end;

// *********************************************************************//
// DispIntf:  IFace2Disp
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {4A8BA4D8-DA25-4B75-8E2D-4922B74D81ED}
// *********************************************************************//
  IFace2Disp = dispinterface
    ['{4A8BA4D8-DA25-4B75-8E2D-4922B74D81ED}']
    property Normal: OleVariant dispid 1;
    property MaterialUserName: WideString dispid 14;
    property MaterialIdName: WideString dispid 15;
    property MaterialPropertyValues: OleVariant dispid 16;
    function INormal: Double; dispid 40;
    function GetNextFace: IDispatch; dispid 2;
    function IGetNextFace: IFace2; dispid 24;
    function GetSurface: IDispatch; dispid 3;
    function IGetSurface: ISurface; dispid 25;
    function GetEdgeCount: Integer; dispid 4;
    function GetEdges: OleVariant; dispid 5;
    function IGetEdges: IEdge; dispid 26;
    function GetFeature: IDispatch; dispid 6;
    function IGetFeature: IFeature; dispid 27;
    function GetFeatureId: Integer; dispid 7;
    function GetTrimCurves(wantCubic: WordBool): OleVariant; dispid 8;
    function GetUVBounds: OleVariant; dispid 9;
    function FaceInSurfaceSense: WordBool; dispid 10;
    function GetLoopCount: Integer; dispid 11;
    function GetFirstLoop: IDispatch; dispid 12;
    function IGetFirstLoop: ILoop2; dispid 28;
    function IsSame(const faceIn: IDispatch): WordBool; dispid 13;
    function IIsSame(const faceIn: IFace2): WordBool; dispid 29;
    function AddPropertyExtension(PropertyExtension: OleVariant): Integer; dispid 17;
    function GetPropertyExtension(id: Integer): OleVariant; dispid 18;
    procedure ResetPropertyExtension; dispid 19;
    function GetTessTriangles(noConversion: WordBool): OleVariant; dispid 20;
    function GetTessNorms: OleVariant; dispid 21;
    function GetTessTriStrips(noConversion: WordBool): OleVariant; dispid 22;
    function GetTessTriStripNorms: OleVariant; dispid 23;
    function EnumLoops: IEnumLoops2; dispid 30;
    function EnumEdges: IEnumEdges; dispid 31;
    function GetBody: IDispatch; dispid 32;
    function IGetBody: IBody2; dispid 33;
    function IGetTessTriangles(noConversion: WordBool): Single; dispid 34;
    function IGetTessNorms: Single; dispid 35;
    function GetTessTriangleCount: Integer; dispid 36;
    function IGetTessTriStrips(noConversion: WordBool): Single; dispid 37;
    function IGetTessTriStripNorms: Single; dispid 38;
    function GetTessTriStripSize: Integer; dispid 39;
    function IGetUVBounds: Double; dispid 41;
    function GetClosestPointOn(x: Double; y: Double; z: Double): OleVariant; dispid 42;
    function IGetClosestPointOn(x: Double; y: Double; z: Double): Double; dispid 43;
    procedure Highlight(state: WordBool); dispid 44;
    procedure IHighlight(state: WordBool); dispid 45;
    function GetTrimCurveTopology: OleVariant; dispid 46;
    function IGetTrimCurveTopology: IDispatch; dispid 47;
    function GetTrimCurveTopologyCount: Integer; dispid 48;
    function GetTrimCurveTopologyTypes: OleVariant; dispid 49;
    function IGetTrimCurveTopologyTypes: Integer; dispid 50;
    function RemoveRedundantTopology: WordBool; dispid 51;
    function CreateSheetBodyByFaceExtension(boxLowIn: OleVariant; boxHighIn: OleVariant): IDispatch; dispid 52;
    function ICreateSheetBodyByFaceExtension(var boxLowIn: Double; var boxHighIn: Double): IBody2; dispid 53;
    function GetArea: Double; dispid 54;
    function GetBox: OleVariant; dispid 55;
    function IGetBox: Double; dispid 56;
    function RemoveInnerLoops(numOfLoops: Integer; innerLoopsIn: OleVariant): IDispatch; dispid 57;
    function IRemoveInnerLoops(numOfLoops: Integer; var innerLoopsIn: ILoop2): IFace2; dispid 58;
    function CreateSheetBody: IDispatch; dispid 59;
    function ICreateSheetBody: IBody2; dispid 60;
    function GetSilhoutteEdges(var root: Double; var Normal: Double): OleVariant; dispid 61;
    function IGetSilhoutteEdges(var root: Double; var Normal: Double): IEdge; dispid 62;
    function IGetSilhoutteEdgeCount(var root: Double; var Normal: Double): Integer; dispid 63;
    function IGetTrimCurveSize(wantCubic: WordBool): Integer; dispid 64;
    function IGetTrimCurve: Double; dispid 65;
    function IMaterialPropertyValues: Double; dispid 66;
    function GetFaceId: SYSINT; dispid 67;
    procedure SetFaceId(idIn: SYSINT); dispid 68;
    function IGetTrimCurveSize2(wantCubic: Integer; wantNRational: Integer): Integer; dispid 69;
    function GetSilhoutteEdgesVB(xroot: Double; yroot: Double; zroot: Double; xnormal: Double; 
                                 ynormal: Double; znormal: Double): OleVariant; dispid 70;
    procedure RemoveFaceId(idIn: SYSINT); dispid 71;
    function GetTrimCurves2(wantCubic: WordBool; wantNRational: WordBool): OleVariant; dispid 72;
    function GetShellType: SYSINT; dispid 73;
    procedure IGetFacetData(facetMesh: SYSINT; var nFacets: SYSINT; var nStrips: SYSINT; 
                            var stripVertexNums: SYSINT; var vertexCoords: Single; 
                            var normalCoords: Single); dispid 74;
    function GetTessTriStripEdges: OleVariant; dispid 75;
    function IGetTessTriStripEdges: Integer; dispid 76;
    function IGetTessTriStripEdgeSize: Integer; dispid 77;
    function RemoveMaterialProperty: WordBool; dispid 78;
    function GetPatternSeedFeature: IDispatch; dispid 79;
    function IGetPatternSeedFeature: IFeature; dispid 80;
  end;

// *********************************************************************//
// Interface: IEdge
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {83A33D42-27C5-11CE-BFD4-00400513BB57}
// *********************************************************************//
  IEdge = interface(IDispatch)
    ['{83A33D42-27C5-11CE-BFD4-00400513BB57}']
    function GetCurve: IDispatch; safecall;
    function IGetCurve: ICurve; safecall;
    function GetCurveParams: OleVariant; safecall;
    function IGetCurveParams: Double; safecall;
    function Evaluate(Parameter: Double): OleVariant; safecall;
    function IEvaluate(Parameter: Double): Double; safecall;
    function GetParameter(x: Double; y: Double; z: Double): OleVariant; safecall;
    function IGetParameter(x: Double; y: Double; z: Double): Double; safecall;
    function EdgeInFaceSense(const facedisp: IDispatch): WordBool; safecall;
    function IEdgeInFaceSense(const facedisp: IFace): WordBool; safecall;
    function GetTwoAdjacentFaces: OleVariant; safecall;
    procedure IGetTwoAdjacentFaces(out face1: IFace; out face2: IFace); safecall;
    function EnumCoEdges: IEnumCoEdges; safecall;
    function GetStartVertex: IDispatch; safecall;
    function IGetStartVertex: IVertex; safecall;
    function GetEndVertex: IDispatch; safecall;
    function IGetEndVertex: IVertex; safecall;
    function GetClosestPointOn(x: Double; y: Double; z: Double): OleVariant; safecall;
    function IGetClosestPointOn(x: Double; y: Double; z: Double): Double; safecall;
    function RemoveRedundantTopology: WordBool; safecall;
    function GetId: SYSINT; safecall;
    procedure SetId(idIn: SYSINT); safecall;
    procedure RemoveId; safecall;
    function GetCurveParams2: OleVariant; safecall;
    function IGetCurveParams2: Double; safecall;
    function IsParamReversed: WordBool; safecall;
    procedure Highlight(state: WordBool); safecall;
    function GetCoEdges: OleVariant; safecall;
    function IEdgeInFaceSense2(const facedisp: IFace2): WordBool; safecall;
    function GetTwoAdjacentFaces2: OleVariant; safecall;
    procedure IGetTwoAdjacentFaces2(out face1: IFace2; out face2: IFace2); safecall;
    procedure Display(width: Integer; Red: Double; Green: Double; Blue: Double; 
                      HighlightState: WordBool); safecall;
    function GetTangentEdgesCount: Integer; safecall;
    function IGetTangentEdges(count: Integer): IEdge; safecall;
    function GetTangentEdges: OleVariant; safecall;
    function CreateWireBody: IBody2; safecall;
    function GetBody: IBody2; safecall;
  end;

// *********************************************************************//
// DispIntf:  IEdgeDisp
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {83A33D42-27C5-11CE-BFD4-00400513BB57}
// *********************************************************************//
  IEdgeDisp = dispinterface
    ['{83A33D42-27C5-11CE-BFD4-00400513BB57}']
    function GetCurve: IDispatch; dispid 1;
    function IGetCurve: ICurve; dispid 7;
    function GetCurveParams: OleVariant; dispid 2;
    function IGetCurveParams: Double; dispid 15;
    function Evaluate(Parameter: Double): OleVariant; dispid 3;
    function IEvaluate(Parameter: Double): Double; dispid 16;
    function GetParameter(x: Double; y: Double; z: Double): OleVariant; dispid 4;
    function IGetParameter(x: Double; y: Double; z: Double): Double; dispid 17;
    function EdgeInFaceSense(const facedisp: IDispatch): WordBool; dispid 5;
    function IEdgeInFaceSense(const facedisp: IFace): WordBool; dispid 8;
    function GetTwoAdjacentFaces: OleVariant; dispid 6;
    procedure IGetTwoAdjacentFaces(out face1: IFace; out face2: IFace); dispid 9;
    function EnumCoEdges: IEnumCoEdges; dispid 10;
    function GetStartVertex: IDispatch; dispid 11;
    function IGetStartVertex: IVertex; dispid 12;
    function GetEndVertex: IDispatch; dispid 13;
    function IGetEndVertex: IVertex; dispid 14;
    function GetClosestPointOn(x: Double; y: Double; z: Double): OleVariant; dispid 18;
    function IGetClosestPointOn(x: Double; y: Double; z: Double): Double; dispid 19;
    function RemoveRedundantTopology: WordBool; dispid 20;
    function GetId: SYSINT; dispid 21;
    procedure SetId(idIn: SYSINT); dispid 22;
    procedure RemoveId; dispid 23;
    function GetCurveParams2: OleVariant; dispid 24;
    function IGetCurveParams2: Double; dispid 25;
    function IsParamReversed: WordBool; dispid 26;
    procedure Highlight(state: WordBool); dispid 27;
    function GetCoEdges: OleVariant; dispid 28;
    function IEdgeInFaceSense2(const facedisp: IFace2): WordBool; dispid 29;
    function GetTwoAdjacentFaces2: OleVariant; dispid 30;
    procedure IGetTwoAdjacentFaces2(out face1: IFace2; out face2: IFace2); dispid 31;
    procedure Display(width: Integer; Red: Double; Green: Double; Blue: Double; 
                      HighlightState: WordBool); dispid 32;
    function GetTangentEdgesCount: Integer; dispid 33;
    function IGetTangentEdges(count: Integer): IEdge; dispid 34;
    function GetTangentEdges: OleVariant; dispid 35;
    function CreateWireBody: IBody2; dispid 36;
    function GetBody: IBody2; dispid 37;
  end;

// *********************************************************************//
// Interface: IEnumCoEdges
// Flags:     (272) Hidden OleAutomation
// GUID:      {83A33D61-27C5-11CE-BFD4-00400513BB57}
// *********************************************************************//
  IEnumCoEdges = interface(IUnknown)
    ['{83A33D61-27C5-11CE-BFD4-00400513BB57}']
    function Next(celt: Integer; out rgelt: ICoEdge; var pceltFetched: Integer): HResult; stdcall;
    function Skip(celt: Integer): HResult; stdcall;
    function Reset: HResult; stdcall;
    function Clone(out ppenum: IEnumCoEdges): HResult; stdcall;
  end;

// *********************************************************************//
// Interface: ICoEdge
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {83A33D57-27C5-11CE-BFD4-00400513BB57}
// *********************************************************************//
  ICoEdge = interface(IDispatch)
    ['{83A33D57-27C5-11CE-BFD4-00400513BB57}']
    function GetEdge: IDispatch; safecall;
    function IGetEdge: IEdge; safecall;
    function GetNext: IDispatch; safecall;
    function IGetNext: ICoEdge; safecall;
    function GetLoop: IDispatch; safecall;
    function IGetLoop: ILoop; safecall;
    function GetSense: WordBool; safecall;
    function GetPartner: IDispatch; safecall;
    function IGetPartner: ICoEdge; safecall;
    function GetCurveParams: OleVariant; safecall;
    function Evaluate(param: Double): OleVariant; safecall;
    function IGetCurveParams: Double; safecall;
    function IEvaluate(param: Double): Double; safecall;
    function GetCurve: IDispatch; safecall;
    function IGetCurve: ICurve; safecall;
    function IGetLoop2: ILoop2; safecall;
  end;

// *********************************************************************//
// DispIntf:  ICoEdgeDisp
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {83A33D57-27C5-11CE-BFD4-00400513BB57}
// *********************************************************************//
  ICoEdgeDisp = dispinterface
    ['{83A33D57-27C5-11CE-BFD4-00400513BB57}']
    function GetEdge: IDispatch; dispid 1;
    function IGetEdge: IEdge; dispid 3;
    function GetNext: IDispatch; dispid 2;
    function IGetNext: ICoEdge; dispid 4;
    function GetLoop: IDispatch; dispid 5;
    function IGetLoop: ILoop; dispid 6;
    function GetSense: WordBool; dispid 7;
    function GetPartner: IDispatch; dispid 8;
    function IGetPartner: ICoEdge; dispid 9;
    function GetCurveParams: OleVariant; dispid 10;
    function Evaluate(param: Double): OleVariant; dispid 11;
    function IGetCurveParams: Double; dispid 12;
    function IEvaluate(param: Double): Double; dispid 13;
    function GetCurve: IDispatch; dispid 14;
    function IGetCurve: ICurve; dispid 15;
    function IGetLoop2: ILoop2; dispid 16;
  end;

// *********************************************************************//
// Interface: ILoop
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {83A33D53-27C5-11CE-BFD4-00400513BB57}
// *********************************************************************//
  ILoop = interface(IDispatch)
    ['{83A33D53-27C5-11CE-BFD4-00400513BB57}']
    function GetNext: IDispatch; safecall;
    function IGetNext: ILoop; safecall;
    function GetEdges: OleVariant; safecall;
    function IGetEdges: PPUserType4; safecall;
    function GetEdgeCount: Integer; safecall;
    function IsOuter: WordBool; safecall;
    function GetFirstCoEdge: IDispatch; safecall;
    function IGetFirstCoEdge: ICoEdge; safecall;
    function EnumEdges: IEnumEdges; safecall;
    function EnumCoEdges: IEnumCoEdges; safecall;
    function GetFace: IDispatch; safecall;
    function IGetFace: IFace; safecall;
    function SweepPlanarLoop(x: Double; y: Double; z: Double; draftAngle: Double): OleVariant; safecall;
    function ISweepPlanarLoop(x: Double; y: Double; z: Double; draftAngle: Double; 
                              var stopFacesOut: IFace): IBody; safecall;
    procedure Dummy015; safecall;
    procedure Dummy016; safecall;
    function RevolvePlanarLoop(x: Double; y: Double; z: Double; axisx: Double; axisy: Double; 
                               axisz: Double; revAngle: Double): OleVariant; safecall;
    function IRevolvePlanarLoop(x: Double; y: Double; z: Double; axisx: Double; axisy: Double; 
                                axisz: Double; revAngle: Double; var stopFacesOut: IFace): IBody; safecall;
  end;

// *********************************************************************//
// DispIntf:  ILoopDisp
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {83A33D53-27C5-11CE-BFD4-00400513BB57}
// *********************************************************************//
  ILoopDisp = dispinterface
    ['{83A33D53-27C5-11CE-BFD4-00400513BB57}']
    function GetNext: IDispatch; dispid 1;
    function IGetNext: ILoop; dispid 7;
    function GetEdges: OleVariant; dispid 2;
    function IGetEdges: {??PPUserType4}OleVariant; dispid 8;
    function GetEdgeCount: Integer; dispid 3;
    function IsOuter: WordBool; dispid 4;
    function GetFirstCoEdge: IDispatch; dispid 5;
    function IGetFirstCoEdge: ICoEdge; dispid 6;
    function EnumEdges: IEnumEdges; dispid 9;
    function EnumCoEdges: IEnumCoEdges; dispid 10;
    function GetFace: IDispatch; dispid 11;
    function IGetFace: IFace; dispid 12;
    function SweepPlanarLoop(x: Double; y: Double; z: Double; draftAngle: Double): OleVariant; dispid 13;
    function ISweepPlanarLoop(x: Double; y: Double; z: Double; draftAngle: Double; 
                              var stopFacesOut: IFace): IBody; dispid 14;
    procedure Dummy015; dispid 15;
    procedure Dummy016; dispid 16;
    function RevolvePlanarLoop(x: Double; y: Double; z: Double; axisx: Double; axisy: Double; 
                               axisz: Double; revAngle: Double): OleVariant; dispid 17;
    function IRevolvePlanarLoop(x: Double; y: Double; z: Double; axisx: Double; axisy: Double; 
                                axisz: Double; revAngle: Double; var stopFacesOut: IFace): IBody; dispid 18;
  end;

// *********************************************************************//
// Interface: IEnumEdges
// Flags:     (272) Hidden OleAutomation
// GUID:      {83A33D5F-27C5-11CE-BFD4-00400513BB57}
// *********************************************************************//
  IEnumEdges = interface(IUnknown)
    ['{83A33D5F-27C5-11CE-BFD4-00400513BB57}']
    function Next(celt: Integer; out rgelt: IEdge; var pceltFetched: Integer): HResult; stdcall;
    function Skip(celt: Integer): HResult; stdcall;
    function Reset: HResult; stdcall;
    function Clone(out ppenum: IEnumEdges): HResult; stdcall;
  end;

// *********************************************************************//
// Interface: ILoop2
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {9350CA6E-0ADB-485A-8941-9407DD7B3B8E}
// *********************************************************************//
  ILoop2 = interface(IDispatch)
    ['{9350CA6E-0ADB-485A-8941-9407DD7B3B8E}']
    function GetNext: IDispatch; safecall;
    function IGetNext: ILoop2; safecall;
    function GetEdges: OleVariant; safecall;
    function IGetEdges: IEdge; safecall;
    function GetEdgeCount: Integer; safecall;
    function IsOuter: WordBool; safecall;
    function GetFirstCoEdge: IDispatch; safecall;
    function IGetFirstCoEdge: ICoEdge; safecall;
    function EnumEdges: IEnumEdges; safecall;
    function EnumCoEdges: IEnumCoEdges; safecall;
    function GetFace: IDispatch; safecall;
    function IGetFace: IFace2; safecall;
    function SweepPlanarLoop(x: Double; y: Double; z: Double; draftAngle: Double): OleVariant; safecall;
    function ISweepPlanarLoop(x: Double; y: Double; z: Double; draftAngle: Double; 
                              var stopFacesOut: IFace2): IBody2; safecall;
    procedure Dummy015; safecall;
    procedure Dummy016; safecall;
    function RevolvePlanarLoop(x: Double; y: Double; z: Double; axisx: Double; axisy: Double; 
                               axisz: Double; revAngle: Double): OleVariant; safecall;
    function IRevolvePlanarLoop(x: Double; y: Double; z: Double; axisx: Double; axisy: Double; 
                                axisz: Double; revAngle: Double; var stopFacesOut: IFace2): IBody2; safecall;
    function IsSingular: WordBool; safecall;
    function GetVertexCount: Integer; safecall;
    function GetVertices: OleVariant; safecall;
    procedure IGetVertices(numVertices: Integer; var vertices: IVertex); safecall;
  end;

// *********************************************************************//
// DispIntf:  ILoop2Disp
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {9350CA6E-0ADB-485A-8941-9407DD7B3B8E}
// *********************************************************************//
  ILoop2Disp = dispinterface
    ['{9350CA6E-0ADB-485A-8941-9407DD7B3B8E}']
    function GetNext: IDispatch; dispid 1;
    function IGetNext: ILoop2; dispid 7;
    function GetEdges: OleVariant; dispid 2;
    function IGetEdges: IEdge; dispid 8;
    function GetEdgeCount: Integer; dispid 3;
    function IsOuter: WordBool; dispid 4;
    function GetFirstCoEdge: IDispatch; dispid 5;
    function IGetFirstCoEdge: ICoEdge; dispid 6;
    function EnumEdges: IEnumEdges; dispid 9;
    function EnumCoEdges: IEnumCoEdges; dispid 10;
    function GetFace: IDispatch; dispid 11;
    function IGetFace: IFace2; dispid 12;
    function SweepPlanarLoop(x: Double; y: Double; z: Double; draftAngle: Double): OleVariant; dispid 13;
    function ISweepPlanarLoop(x: Double; y: Double; z: Double; draftAngle: Double; 
                              var stopFacesOut: IFace2): IBody2; dispid 14;
    procedure Dummy015; dispid 15;
    procedure Dummy016; dispid 16;
    function RevolvePlanarLoop(x: Double; y: Double; z: Double; axisx: Double; axisy: Double; 
                               axisz: Double; revAngle: Double): OleVariant; dispid 17;
    function IRevolvePlanarLoop(x: Double; y: Double; z: Double; axisx: Double; axisy: Double; 
                                axisz: Double; revAngle: Double; var stopFacesOut: IFace2): IBody2; dispid 18;
    function IsSingular: WordBool; dispid 19;
    function GetVertexCount: Integer; dispid 20;
    function GetVertices: OleVariant; dispid 21;
    procedure IGetVertices(numVertices: Integer; var vertices: IVertex); dispid 22;
  end;

// *********************************************************************//
// Interface: IVertex
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {83A33D63-27C5-11CE-BFD4-00400513BB57}
// *********************************************************************//
  IVertex = interface(IDispatch)
    ['{83A33D63-27C5-11CE-BFD4-00400513BB57}']
    function GetPoint: OleVariant; safecall;
    function IGetPoint: Double; safecall;
    function EnumEdges: IEnumEdges; safecall;
    function GetClosestPointOn(x: Double; y: Double; z: Double): OleVariant; safecall;
    function IGetClosestPointOn(x: Double; y: Double; z: Double): Double; safecall;
    function EnumEdgesOriented: IEnumEdges; safecall;
  end;

// *********************************************************************//
// DispIntf:  IVertexDisp
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {83A33D63-27C5-11CE-BFD4-00400513BB57}
// *********************************************************************//
  IVertexDisp = dispinterface
    ['{83A33D63-27C5-11CE-BFD4-00400513BB57}']
    function GetPoint: OleVariant; dispid 1;
    function IGetPoint: Double; dispid 2;
    function EnumEdges: IEnumEdges; dispid 3;
    function GetClosestPointOn(x: Double; y: Double; z: Double): OleVariant; dispid 4;
    function IGetClosestPointOn(x: Double; y: Double; z: Double): Double; dispid 5;
    function EnumEdgesOriented: IEnumEdges; dispid 6;
  end;

// *********************************************************************//
// Interface: IFeature
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {83A33D38-27C5-11CE-BFD4-00400513BB57}
// *********************************************************************//
  IFeature = interface(IDispatch)
    ['{83A33D38-27C5-11CE-BFD4-00400513BB57}']
    function Get_Name: WideString; safecall;
    procedure Set_Name(const retval: WideString); safecall;
    function Parameter(const Name: WideString): IDispatch; safecall;
    function IParameter(const Name: WideString): IDimension; safecall;
    function GetNextFeature: IDispatch; safecall;
    function IGetNextFeature: IFeature; safecall;
    function GetTypeName: WideString; safecall;
    function GetSpecificFeature: IDispatch; safecall;
    function IGetSpecificFeature: IUnknown; safecall;
    function GetUIState(stateType: Integer): WordBool; safecall;
    procedure SetUIState(stateType: Integer; flag: WordBool); safecall;
    function GetMaterialUserName: WideString; safecall;
    function SetMaterialUserName(const Name: WideString): WordBool; safecall;
    function GetMaterialIdName: WideString; safecall;
    function SetMaterialIdName(const Name: WideString): WordBool; safecall;
    function GetMaterialPropertyValues: OleVariant; safecall;
    function SetMaterialPropertyValues(MaterialPropertyValues: OleVariant): WordBool; safecall;
    function AddPropertyExtension(PropertyExtension: OleVariant): Integer; safecall;
    function GetPropertyExtension(id: Integer): OleVariant; safecall;
    procedure ResetPropertyExtension; safecall;
    function GetFirstSubFeature: IDispatch; safecall;
    function IGetFirstSubFeature: IFeature; safecall;
    function GetNextSubFeature: IDispatch; safecall;
    function IGetNextSubFeature: IFeature; safecall;
    function IGetMaterialPropertyValues: Double; safecall;
    function ISetMaterialPropertyValues(var MaterialPropertyValues: Double): WordBool; safecall;
    function IsSuppressed: WordBool; safecall;
    function GetUpdateStamp: Integer; safecall;
    function SetBody(const bodyIn: IDispatch): WordBool; safecall;
    function ISetBody(const bodyIn: IBody): WordBool; safecall;
    function GetBody: IDispatch; safecall;
    function IGetBody: IBody; safecall;
    function EnumDisplayDimensions: IEnumDisplayDimensions; safecall;
    function GetDefinition: IDispatch; safecall;
    function IGetDefinition: IUnknown; safecall;
    function ModifyDefinition(const data: IDispatch; const topDoc: IDispatch; 
                              const component: IDispatch): WordBool; safecall;
    function IModifyDefinition(const data: IUnknown; const topDoc: IModelDoc; 
                               const component: IComponent): WordBool; safecall;
    function GetFaceCount: Integer; safecall;
    function GetFaces: OleVariant; safecall;
    function IGetFaces(var faceCount: Integer): IFace; safecall;
    function GetFirstDisplayDimension: IDispatch; safecall;
    function GetNextDisplayDimension(const dispIn: IDispatch): IDispatch; safecall;
    function GetErrorCode: Integer; safecall;
    function IGetChildCount: Integer; safecall;
    function GetChildren: OleVariant; safecall;
    function IGetChildren: IFeature; safecall;
    function IGetParentCount: Integer; safecall;
    function GetParents: OleVariant; safecall;
    function IGetParents: IFeature; safecall;
    function SetBody2(const bodyIn: IDispatch; applyUserIds: WordBool): WordBool; safecall;
    function ISetBody2(const bodyIn: IBody; applyUserIds: WordBool): WordBool; safecall;
    function GetImportedFileName: WideString; safecall;
    function SetImportedFileName(const ImpName: WideString): WordBool; safecall;
    function SetSuppression(suppressState: Integer): WordBool; safecall;
    function RemoveMaterialProperty: WordBool; safecall;
    function Select(appendFlag: WordBool): WordBool; safecall;
    function SelectByMark(appendFlag: WordBool; mark: Integer): WordBool; safecall;
    function DeSelect: WordBool; safecall;
    function GetBox(var bBox: OleVariant): WordBool; safecall;
    function IGetBox(var bBox: Double): WordBool; safecall;
    function IModifyDefinition2(const data: IUnknown; const topDoc: IModelDoc2; 
                                const component: IComponent2): WordBool; safecall;
    function IGetFaces2(var faceCount: Integer): IFace2; safecall;
    function IGetBody2: IBody2; safecall;
    function ISetBody3(const bodyIn: IBody2; applyUserIds: WordBool): WordBool; safecall;
    procedure ListExternalFileReferences(out modelPathName: OleVariant; 
                                         out componentPathName: OleVariant; 
                                         out feature: OleVariant; out dataType: OleVariant; 
                                         out status: OleVariant; out refEntity: OleVariant; 
                                         out featCom: OleVariant); safecall;
    function ListExternalFileReferencesCount: Integer; safecall;
    procedure IListExternalFileReferences(numRefs: Integer; out modelPathName: WideString; 
                                          out compPathName: WideString; out feature: WideString; 
                                          out dataType: WideString; out status: Integer; 
                                          out refEntity: WideString; out featComp: WideString); safecall;
    function Select2(Append: WordBool; mark: Integer): WordBool; safecall;
    function IsRolledBack: WordBool; safecall;
    function IsBase: WordBool; safecall;
    function Get_Description: WideString; safecall;
    procedure Set_Description(const Description: WideString); safecall;
    function MakeSubFeature(const subFeature: IFeature): WordBool; safecall;
    function Get_CreatedBy: WideString; safecall;
    function Get_DateCreated: WideString; safecall;
    function Get_DateModified: WideString; safecall;
    property Name: WideString read Get_Name write Set_Name;
    property Description: WideString read Get_Description write Set_Description;
    property CreatedBy: WideString read Get_CreatedBy;
    property DateCreated: WideString read Get_DateCreated;
    property DateModified: WideString read Get_DateModified;
  end;

// *********************************************************************//
// DispIntf:  IFeatureDisp
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {83A33D38-27C5-11CE-BFD4-00400513BB57}
// *********************************************************************//
  IFeatureDisp = dispinterface
    ['{83A33D38-27C5-11CE-BFD4-00400513BB57}']
    property Name: WideString dispid 1;
    function Parameter(const Name: WideString): IDispatch; dispid 2;
    function IParameter(const Name: WideString): IDimension; dispid 4;
    function GetNextFeature: IDispatch; dispid 3;
    function IGetNextFeature: IFeature; dispid 5;
    function GetTypeName: WideString; dispid 6;
    function GetSpecificFeature: IDispatch; dispid 7;
    function IGetSpecificFeature: IUnknown; dispid 8;
    function GetUIState(stateType: Integer): WordBool; dispid 9;
    procedure SetUIState(stateType: Integer; flag: WordBool); dispid 10;
    function GetMaterialUserName: WideString; dispid 11;
    function SetMaterialUserName(const Name: WideString): WordBool; dispid 12;
    function GetMaterialIdName: WideString; dispid 13;
    function SetMaterialIdName(const Name: WideString): WordBool; dispid 14;
    function GetMaterialPropertyValues: OleVariant; dispid 15;
    function SetMaterialPropertyValues(MaterialPropertyValues: OleVariant): WordBool; dispid 16;
    function AddPropertyExtension(PropertyExtension: OleVariant): Integer; dispid 17;
    function GetPropertyExtension(id: Integer): OleVariant; dispid 18;
    procedure ResetPropertyExtension; dispid 19;
    function GetFirstSubFeature: IDispatch; dispid 20;
    function IGetFirstSubFeature: IFeature; dispid 21;
    function GetNextSubFeature: IDispatch; dispid 22;
    function IGetNextSubFeature: IFeature; dispid 23;
    function IGetMaterialPropertyValues: Double; dispid 24;
    function ISetMaterialPropertyValues(var MaterialPropertyValues: Double): WordBool; dispid 25;
    function IsSuppressed: WordBool; dispid 26;
    function GetUpdateStamp: Integer; dispid 27;
    function SetBody(const bodyIn: IDispatch): WordBool; dispid 28;
    function ISetBody(const bodyIn: IBody): WordBool; dispid 29;
    function GetBody: IDispatch; dispid 30;
    function IGetBody: IBody; dispid 31;
    function EnumDisplayDimensions: IEnumDisplayDimensions; dispid 32;
    function GetDefinition: IDispatch; dispid 33;
    function IGetDefinition: IUnknown; dispid 34;
    function ModifyDefinition(const data: IDispatch; const topDoc: IDispatch; 
                              const component: IDispatch): WordBool; dispid 35;
    function IModifyDefinition(const data: IUnknown; const topDoc: IModelDoc; 
                               const component: IComponent): WordBool; dispid 36;
    function GetFaceCount: Integer; dispid 37;
    function GetFaces: OleVariant; dispid 38;
    function IGetFaces(var faceCount: Integer): IFace; dispid 39;
    function GetFirstDisplayDimension: IDispatch; dispid 40;
    function GetNextDisplayDimension(const dispIn: IDispatch): IDispatch; dispid 41;
    function GetErrorCode: Integer; dispid 42;
    function IGetChildCount: Integer; dispid 43;
    function GetChildren: OleVariant; dispid 44;
    function IGetChildren: IFeature; dispid 45;
    function IGetParentCount: Integer; dispid 46;
    function GetParents: OleVariant; dispid 47;
    function IGetParents: IFeature; dispid 48;
    function SetBody2(const bodyIn: IDispatch; applyUserIds: WordBool): WordBool; dispid 49;
    function ISetBody2(const bodyIn: IBody; applyUserIds: WordBool): WordBool; dispid 50;
    function GetImportedFileName: WideString; dispid 51;
    function SetImportedFileName(const ImpName: WideString): WordBool; dispid 52;
    function SetSuppression(suppressState: Integer): WordBool; dispid 53;
    function RemoveMaterialProperty: WordBool; dispid 54;
    function Select(appendFlag: WordBool): WordBool; dispid 55;
    function SelectByMark(appendFlag: WordBool; mark: Integer): WordBool; dispid 56;
    function DeSelect: WordBool; dispid 57;
    function GetBox(var bBox: OleVariant): WordBool; dispid 58;
    function IGetBox(var bBox: Double): WordBool; dispid 59;
    function IModifyDefinition2(const data: IUnknown; const topDoc: IModelDoc2; 
                                const component: IComponent2): WordBool; dispid 60;
    function IGetFaces2(var faceCount: Integer): IFace2; dispid 61;
    function IGetBody2: IBody2; dispid 62;
    function ISetBody3(const bodyIn: IBody2; applyUserIds: WordBool): WordBool; dispid 63;
    procedure ListExternalFileReferences(out modelPathName: OleVariant; 
                                         out componentPathName: OleVariant; 
                                         out feature: OleVariant; out dataType: OleVariant; 
                                         out status: OleVariant; out refEntity: OleVariant; 
                                         out featCom: OleVariant); dispid 64;
    function ListExternalFileReferencesCount: Integer; dispid 65;
    procedure IListExternalFileReferences(numRefs: Integer; out modelPathName: WideString; 
                                          out compPathName: WideString; out feature: WideString; 
                                          out dataType: WideString; out status: Integer; 
                                          out refEntity: WideString; out featComp: WideString); dispid 66;
    function Select2(Append: WordBool; mark: Integer): WordBool; dispid 67;
    function IsRolledBack: WordBool; dispid 68;
    function IsBase: WordBool; dispid 69;
    property Description: WideString dispid 70;
    function MakeSubFeature(const subFeature: IFeature): WordBool; dispid 71;
    property CreatedBy: WideString readonly dispid 72;
    property DateCreated: WideString readonly dispid 73;
    property DateModified: WideString readonly dispid 74;
  end;

// *********************************************************************//
// Interface: IDimension
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {83A33D3A-27C5-11CE-BFD4-00400513BB57}
// *********************************************************************//
  IDimension = interface(IDispatch)
    ['{83A33D3A-27C5-11CE-BFD4-00400513BB57}']
    function Get_Value: Double; safecall;
    procedure Set_Value(retval: Double); safecall;
    function Get_SystemValue: Double; safecall;
    procedure Set_SystemValue(retval: Double); safecall;
    function GetUserValueIn(const doc: IDispatch): Double; safecall;
    function IGetUserValueIn(const doc: IModelDoc): Double; safecall;
    procedure SetUserValueIn(const doc: IDispatch; newValue: Double); safecall;
    procedure ISetUserValueIn(const doc: IModelDoc; newValue: Double); safecall;
    function Get_Name: WideString; safecall;
    procedure Set_Name(const retval: WideString); safecall;
    function GetToleranceType: Integer; safecall;
    function SetToleranceType(newType: Integer): WordBool; safecall;
    function GetToleranceValues: OleVariant; safecall;
    function IGetToleranceValues: Double; safecall;
    function SetToleranceValues(tolMin: Double; tolMax: Double): WordBool; safecall;
    function GetToleranceFontInfo: OleVariant; safecall;
    function IGetToleranceFontInfo: Double; safecall;
    function SetToleranceFontInfo(useFontScale: Integer; tolScale: Double; tolHeight: Double): WordBool; safecall;
    function GetToleranceFitValues: WideString; safecall;
    function SetToleranceFitValues(const newLValue: WideString; const newUValue: WideString): WordBool; safecall;
    function Get_ReadOnly: WordBool; safecall;
    procedure Set_ReadOnly(retval: WordBool); safecall;
    function Get_FullName: WideString; safecall;
    function Get_DrivenState: Integer; safecall;
    procedure Set_DrivenState(retval: Integer); safecall;
    function IsReference: WordBool; safecall;
    function IsAppliedToAllConfigurations: WordBool; safecall;
    function SetSystemValue2(newValue: Double; whichConfigurations: Integer): Integer; safecall;
    function SetValue2(newValue: Double; whichConfigurations: Integer): Integer; safecall;
    function SetUserValueIn2(const doc: IDispatch; newValue: Double; whichConfigurations: Integer): Integer; safecall;
    function ISetUserValueIn2(const doc: IModelDoc; newValue: Double; whichConfigurations: Integer): Integer; safecall;
    function GetArcEndCondition(index: Integer): Integer; safecall;
    function SetArcEndCondition(index: Integer; condition: Integer): Integer; safecall;
    function GetValue2(const configName: WideString): Double; safecall;
    function GetSystemValue2(const configName: WideString): Double; safecall;
    function IGetUserValueIn2(const doc: IModelDoc2): Double; safecall;
    function ISetUserValueIn3(const doc: IModelDoc2; newValue: Double; whichConfigurations: Integer): Integer; safecall;
    function GetType: Integer; safecall;
    property Value: Double read Get_Value write Set_Value;
    property SystemValue: Double read Get_SystemValue write Set_SystemValue;
    property Name: WideString read Get_Name write Set_Name;
    property ReadOnly: WordBool read Get_ReadOnly write Set_ReadOnly;
    property FullName: WideString read Get_FullName;
    property DrivenState: Integer read Get_DrivenState write Set_DrivenState;
  end;

// *********************************************************************//
// DispIntf:  IDimensionDisp
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {83A33D3A-27C5-11CE-BFD4-00400513BB57}
// *********************************************************************//
  IDimensionDisp = dispinterface
    ['{83A33D3A-27C5-11CE-BFD4-00400513BB57}']
    property Value: Double dispid 1;
    property SystemValue: Double dispid 2;
    function GetUserValueIn(const doc: IDispatch): Double; dispid 3;
    function IGetUserValueIn(const doc: IModelDoc): Double; dispid 4;
    procedure SetUserValueIn(const doc: IDispatch; newValue: Double); dispid 5;
    procedure ISetUserValueIn(const doc: IModelDoc; newValue: Double); dispid 6;
    property Name: WideString dispid 7;
    function GetToleranceType: Integer; dispid 8;
    function SetToleranceType(newType: Integer): WordBool; dispid 9;
    function GetToleranceValues: OleVariant; dispid 10;
    function IGetToleranceValues: Double; dispid 11;
    function SetToleranceValues(tolMin: Double; tolMax: Double): WordBool; dispid 12;
    function GetToleranceFontInfo: OleVariant; dispid 13;
    function IGetToleranceFontInfo: Double; dispid 14;
    function SetToleranceFontInfo(useFontScale: Integer; tolScale: Double; tolHeight: Double): WordBool; dispid 15;
    function GetToleranceFitValues: WideString; dispid 16;
    function SetToleranceFitValues(const newLValue: WideString; const newUValue: WideString): WordBool; dispid 17;
    property ReadOnly: WordBool dispid 18;
    property FullName: WideString readonly dispid 19;
    property DrivenState: Integer dispid 20;
    function IsReference: WordBool; dispid 21;
    function IsAppliedToAllConfigurations: WordBool; dispid 22;
    function SetSystemValue2(newValue: Double; whichConfigurations: Integer): Integer; dispid 23;
    function SetValue2(newValue: Double; whichConfigurations: Integer): Integer; dispid 24;
    function SetUserValueIn2(const doc: IDispatch; newValue: Double; whichConfigurations: Integer): Integer; dispid 25;
    function ISetUserValueIn2(const doc: IModelDoc; newValue: Double; whichConfigurations: Integer): Integer; dispid 26;
    function GetArcEndCondition(index: Integer): Integer; dispid 27;
    function SetArcEndCondition(index: Integer; condition: Integer): Integer; dispid 28;
    function GetValue2(const configName: WideString): Double; dispid 29;
    function GetSystemValue2(const configName: WideString): Double; dispid 30;
    function IGetUserValueIn2(const doc: IModelDoc2): Double; dispid 31;
    function ISetUserValueIn3(const doc: IModelDoc2; newValue: Double; whichConfigurations: Integer): Integer; dispid 32;
    function GetType: Integer; dispid 33;
  end;

// *********************************************************************//
// Interface: IModelDoc2
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {B90793FB-EF3D-4B80-A5C4-99959CDB6CEB}
// *********************************************************************//
  IModelDoc2 = interface(IDispatch)
    ['{B90793FB-EF3D-4B80-A5C4-99959CDB6CEB}']
    function Get_SelectionManager: IDispatch; safecall;
    function Get_ISelectionManager: ISelectionMgr; safecall;
    procedure Set_SelectionManager(const retval: IDispatch); safecall;
    function Get_ActiveView: IDispatch; safecall;
    function Get_IActiveView: IModelView; safecall;
    procedure Set_ActiveView(const retval: IDispatch); safecall;
    function Get_LengthUnit: Integer; safecall;
    procedure Set_LengthUnit(retval: Integer); safecall;
    function Get_LightSourceUserName(id: Integer): WideString; safecall;
    procedure Set_LightSourceUserName(id: Integer; const retval: WideString); safecall;
    function Get_LightSourcePropertyValues(id: Integer): OleVariant; safecall;
    procedure Set_LightSourcePropertyValues(id: Integer; retval: OleVariant); safecall;
    function Get_SceneName: WideString; safecall;
    procedure Set_SceneName(const retval: WideString); safecall;
    function Get_SceneUserName: WideString; safecall;
    procedure Set_SceneUserName(const retval: WideString); safecall;
    procedure FeatureFillet(r1: Double; propagate: WordBool; ftyp: WordBool; varRadTyp: WordBool; 
                            overFlowType: Integer); safecall;
    procedure GridOptions(dispGrid: WordBool; gridSpacing: Double; snap: WordBool; 
                          dotStyle: WordBool; nMajor: Smallint; nMinor: Smallint; 
                          align2edge: WordBool; angleSnap: WordBool; angleUnit: Double; 
                          minorAuto: WordBool); safecall;
    procedure SetUnits(uType: Smallint; fractBase: Smallint; fractDenom: Smallint; 
                       sigDigits: Smallint; roundToFraction: WordBool); safecall;
    procedure LBDownAt(flags: Integer; x: Double; y: Double; z: Double); safecall;
    procedure LBUpAt(flags: Integer; x: Double; y: Double; z: Double); safecall;
    procedure DragTo(flags: Integer; x: Double; y: Double; z: Double); safecall;
    procedure SelectAt(flags: Integer; x: Double; y: Double; z: Double); safecall;
    procedure CreateLineVB(x1: Double; y1: Double; z1: Double; x2: Double; y2: Double; z2: Double); safecall;
    function CreateLine(P1: OleVariant; P2: OleVariant): WordBool; safecall;
    procedure CreateCenterLineVB(x1: Double; y1: Double; z1: Double; x2: Double; y2: Double; 
                                 z2: Double); safecall;
    function CreateCenterLine(P1: OleVariant; P2: OleVariant): WordBool; safecall;
    procedure CreateArcVB(p1x: Double; p1y: Double; p1z: Double; p2x: Double; p2y: Double; 
                          p2z: Double; p3x: Double; p3y: Double; p3z: Double; dir: Smallint); safecall;
    function CreateArc(P1: OleVariant; P2: OleVariant; P3: OleVariant; dir: Smallint): WordBool; safecall;
    procedure CreateCircleVB(p1x: Double; p1y: Double; p1z: Double; radius: Double); safecall;
    function CreateCircleByRadius(P1: OleVariant; radius: Double): WordBool; safecall;
    function GetLines: OleVariant; safecall;
    procedure SketchTrim(op: Integer; selEnd: Integer; x: Double; y: Double); safecall;
    procedure SketchOffsetEdges(val: Double); safecall;
    procedure SketchRectangle(val1: Double; val2: Double; z1: Double; val3: Double; val4: Double; 
                              z2: Double; val5: WordBool); safecall;
    procedure SketchPoint(x: Double; y: Double; z: Double); safecall;
    procedure FeatureCut(sd: WordBool; flip: WordBool; dir: WordBool; t1: Integer; t2: Integer; 
                         d1: Double; d2: Double; dchk1: WordBool; dchk2: WordBool; ddir1: WordBool; 
                         ddir2: WordBool; dang1: Double; dang2: Double; offsetReverse1: WordBool; 
                         offsetReverse2: WordBool); safecall;
    procedure FeatureBoss(sd: WordBool; flip: WordBool; dir: WordBool; t1: Integer; t2: Integer; 
                          d1: Double; d2: Double; dchk1: WordBool; dchk2: WordBool; 
                          ddir1: WordBool; ddir2: WordBool; dang1: Double; dang2: Double; 
                          offsetReverse1: WordBool; offsetReverse2: WordBool); safecall;
    procedure SimpleHole(sd: WordBool; flip: WordBool; dir: WordBool; t1: Integer; t2: Integer; 
                         d1: Double; d2: Double; dchk1: WordBool; dchk2: WordBool; ddir1: WordBool; 
                         ddir2: WordBool; dang1: Double; dang2: Double; offsetReverse1: WordBool; 
                         offsetReverse2: WordBool); safecall;
    procedure FeatureLinearPattern(num1: Integer; spacing1: Double; num2: Integer; 
                                   spacing2: Double; flipDir1: WordBool; flipDir2: WordBool; 
                                   const dName1: WideString; const dName2: WideString); safecall;
    procedure NameView(const vName: WideString); safecall;
    procedure ShowNamedView(const vName: WideString); safecall;
    procedure CreatePlaneAtOffset(val: Double; flipDir: WordBool); safecall;
    procedure Toolbars(m: WordBool; vw: WordBool; skMain: WordBool; sk: WordBool; feat: WordBool; 
                       constr: WordBool; macro: WordBool); safecall;
    procedure CreatePlaneAtAngle(val: Double; flipDir: WordBool); safecall;
    procedure SetParamValue(val: Double); safecall;
    procedure AddRelation(const relStr: WideString); safecall;
    procedure DeleteAllRelations; safecall;
    procedure HoleWizard(depth: Double; endType: Smallint; flip: WordBool; dir: WordBool; 
                         hType: Integer; d1: Double; d2: Double; d3: Double; d4: Double; 
                         d5: Double; d6: Double; d7: Double; d8: Double; d9: Double; d10: Double; 
                         d11: Double; d12: Double); safecall;
    function SaveAs(const newName: WideString): WordBool; safecall;
    procedure ActivateSelectedFeature; safecall;
    procedure SelectByName(flags: Integer; const idStr: WideString); safecall;
    procedure SketchAddConstraints(const idStr: WideString); safecall;
    procedure SketchConstraintsDel(constrInd: Integer; const idStr: WideString); safecall;
    procedure SketchConstraintsDelAll; safecall;
    procedure Lock; safecall;
    procedure UnLock; safecall;
    procedure InsertFeatureShell(thickness: Double; outward: WordBool); safecall;
    procedure SketchFillet(rad: Double); safecall;
    procedure FeatureChamfer(width: Double; angle: Double; flip: WordBool); safecall;
    procedure InsertMfDraft(angle: Double; flipDir: WordBool; isEdgeDraft: WordBool; 
                            propType: Integer); safecall;
    procedure ParentChildRelationship; safecall;
    procedure SketchSpline(morePts: Integer; x: Double; y: Double; z: Double); safecall;
    procedure SelectSketchPoint(x: Double; y: Double; incidence: Integer); safecall;
    procedure SelectSketchLine(x0: Double; y0: Double; inc0: Integer; x1: Double; y1: Double; 
                               inc1: Integer); safecall;
    procedure SelectSketchArc(x0: Double; y0: Double; inc0: Integer; x1: Double; y1: Double; 
                              inc1: Integer; xC: Double; yC: Double; incC: Integer; rotDir: Integer); safecall;
    procedure SelectSketchSpline(size: Integer; x0: Double; y0: Double; inc0: Integer; x1: Double; 
                                 y1: Double; inc1: Integer; xC: Double; yC: Double; incC: Integer); safecall;
    function CreateTangentArc(p1x: Double; p1y: Double; p1z: Double; p2x: Double; p2y: Double; 
                              p2z: Double): WordBool; safecall;
    function Create3PointArc(p1x: Double; p1y: Double; p1z: Double; p2x: Double; p2y: Double; 
                             p2z: Double; p3x: Double; p3y: Double; p3z: Double): WordBool; safecall;
    function CreateArcByCenter(p1x: Double; p1y: Double; p1z: Double; p2x: Double; p2y: Double; 
                               p2z: Double; p3x: Double; p3y: Double; p3z: Double): WordBool; safecall;
    function CreateCircle(p1x: Double; p1y: Double; p1z: Double; p2x: Double; p2y: Double; 
                          p2z: Double): WordBool; safecall;
    function AddDimension(x: Double; y: Double; z: Double): WordBool; safecall;
    function AddHorizontalDimension(x: Double; y: Double; z: Double): WordBool; safecall;
    function AddVerticalDimension(x: Double; y: Double; z: Double): WordBool; safecall;
    function SelectSketchItem(selOpt: Integer; const Name: WideString; x: Double; y: Double; 
                              z: Double): WordBool; safecall;
    procedure ClearSelection; safecall;
    procedure Select(const selID: WideString; const selParams: WideString; x: Double; y: Double; 
                     z: Double); safecall;
    procedure AndSelect(const selID: WideString; const selParams: WideString; x: Double; y: Double; 
                        z: Double); safecall;
    function CreatePoint(pointX: Double; pointY: Double; pointZ: Double): WordBool; safecall;
    function CreateLineDB(sx: Double; sy: Double; sz: Double; ex: Double; ey: Double; ez: Double): WordBool; safecall;
    function CreateArcDB(x1: Double; y1: Double; z1: Double; x2: Double; y2: Double; z2: Double; 
                         x3: Double; y3: Double; z3: Double; dir: Smallint): WordBool; safecall;
    function CreateCircleDB(cx: Double; cy: Double; cz: Double; radius: Double): WordBool; safecall;
    function CreatePointDB(x: Double; y: Double; z: Double): WordBool; safecall;
    function GetTitle: WideString; safecall;
    function GetPathName: WideString; safecall;
    function GetType: Integer; safecall;
    procedure InsertObject; safecall;
    procedure EditClearAll; safecall;
    procedure EditCopy; safecall;
    procedure EditCut; safecall;
    procedure ObjectDisplayContent; safecall;
    procedure ObjectDisplayAsIcon; safecall;
    procedure ObjectResetsize; safecall;
    procedure WindowRedraw; safecall;
    procedure Dummy3; safecall;
    procedure SetPickMode; safecall;
    procedure ViewRotateminusx; safecall;
    procedure ViewRotateminusy; safecall;
    procedure ViewRotateminusz; safecall;
    procedure ViewRotateplusx; safecall;
    procedure ViewRotateplusy; safecall;
    procedure ViewRotateplusz; safecall;
    procedure ViewTranslateminusx; safecall;
    procedure ViewTranslateminusy; safecall;
    procedure ViewTranslateplusx; safecall;
    procedure ViewTranslateplusy; safecall;
    procedure ViewRotXMinusNinety; safecall;
    procedure ViewRotYMinusNinety; safecall;
    procedure ViewRotYPlusNinety; safecall;
    procedure ViewZoomin; safecall;
    procedure ViewZoomout; safecall;
    procedure ViewDisplayHiddenremoved; safecall;
    procedure ViewDisplayWireframe; safecall;
    procedure ViewDisplayShaded; safecall;
    procedure ViewRwShading; safecall;
    procedure ViewOglShading; safecall;
    procedure ViewZoomtofit; safecall;
    procedure ViewRotate; safecall;
    procedure ViewTranslate; safecall;
    procedure ViewZoomto; safecall;
    procedure ViewDisplayHiddengreyed; safecall;
    procedure ViewDisplayFaceted; safecall;
    procedure ViewConstraint; safecall;
    procedure UserFavors; safecall;
    procedure FeatureCirPattern(num: Integer; spacing: Double; flipDir: WordBool; 
                                const dName: WideString); safecall;
    procedure EditSketch; safecall;
    procedure FeatEdit; safecall;
    procedure FeatEditDef; safecall;
    procedure InsertPoint; safecall;
    procedure InsertFamilyTableNew; safecall;
    procedure Dummy1; safecall;
    procedure InsertFamilyTableEdit; safecall;
    procedure Dummy2; safecall;
    procedure ToolsMacro; safecall;
    procedure ToolsGrid; safecall;
    procedure SketchCenterline; safecall;
    procedure SketchAlign; safecall;
    procedure SketchArc; safecall;
    procedure SketchTangentArc; safecall;
    procedure SketchCircle; safecall;
    procedure SketchUndo; safecall;
    procedure UserPreferences; safecall;
    procedure Lights; safecall;
    procedure SketchConstrainCoincident; safecall;
    procedure SketchConstrainConcentric; safecall;
    procedure SketchConstrainPerp; safecall;
    procedure SketchConstrainTangent; safecall;
    procedure SketchConstrainParallel; safecall;
    procedure SketchUseEdge; safecall;
    procedure SketchUseEdgeCtrline; safecall;
    procedure SketchMirror; safecall;
    procedure Save; safecall;
    procedure Close; safecall;
    procedure ViewDispRefaxes; safecall;
    procedure ViewDispRefplanes; safecall;
    procedure InsertSketch; safecall;
    procedure InsertProtrusionSwept(propagate: WordBool; alignment: WordBool; 
                                    keepNormalConstant: WordBool); safecall;
    procedure InsertProtrusionBlend(closed: WordBool); safecall;
    procedure ToolsMassProps; safecall;
    procedure PropertySheet; safecall;
    procedure BlankRefGeom; safecall;
    procedure UnBlankRefGeom; safecall;
    procedure EditDelete; safecall;
    procedure InsertProjectedSketch; safecall;
    function CreatePlaneFixed(P1: OleVariant; P2: OleVariant; P3: OleVariant; useGlobal: WordBool): WordBool; safecall;
    procedure Dummy5; safecall;
    procedure Dummy6; safecall;
    procedure DebugCheckBody; safecall;
    procedure Dummy8; safecall;
    procedure DimPreferences; safecall;
    procedure UnblankSketch; safecall;
    procedure EditSketchOrSingleSketchFeature; safecall;
    procedure DebugCheckIgesGeom; safecall;
    procedure BlankSketch; safecall;
    function GetDefaultTextHeight: Double; safecall;
    function IsActive(const compStr: WideString): WordBool; safecall;
    function CreateEllipse(center: OleVariant; major: OleVariant; minor: OleVariant): WordBool; safecall;
    function CreateEllipseVB(centerX: Double; centerY: Double; centerZ: Double; majorX: Double; 
                             majorY: Double; majorZ: Double; minorX: Double; minorY: Double; 
                             minorZ: Double): WordBool; safecall;
    function CreateEllipticalArcByCenter(center: OleVariant; major: OleVariant; minor: OleVariant; 
                                         start: OleVariant; end_: OleVariant): WordBool; safecall;
    function CreateEllipticalArcByCenterVB(centerX: Double; centerY: Double; centerZ: Double; 
                                           majorX: Double; majorY: Double; majorZ: Double; 
                                           minorX: Double; minorY: Double; minorZ: Double; 
                                           startX: Double; startY: Double; startZ: Double; 
                                           endX: Double; endY: Double; endZ: Double): WordBool; safecall;
    function GetActiveSketch: IDispatch; safecall;
    function IGetActiveSketch: ISketch; safecall;
    function GetTessellationQuality: Integer; safecall;
    procedure SetTessellationQuality(qualityNum: Integer); safecall;
    function Parameter(const stringIn: WideString): IDispatch; safecall;
    function IParameter(const stringIn: WideString): IDimension; safecall;
    function SelectByID(const selID: WideString; const selParams: WideString; x: Double; y: Double; 
                        z: Double): WordBool; safecall;
    function AndSelectByID(const selID: WideString; const selParams: WideString; x: Double; 
                           y: Double; z: Double): WordBool; safecall;
    procedure Insert3DSketch; safecall;
    function GetLightSourceName(id: Integer): WideString; safecall;
    function AddLightSource(const idName: WideString; lTyp: SYSINT; const userName: WideString): WordBool; safecall;
    function AddLightSourceExtProperty(id: Integer; PropertyExtension: OleVariant): Integer; safecall;
    procedure ResetLightSourceExtProperty(id: Integer); safecall;
    procedure DeleteLightSource(id: Integer); safecall;
    function GetLightSourceExtProperty(id: Integer; PropertyId: Integer): OleVariant; safecall;
    function AddLightToScene(const lpszNewValue: WideString): Integer; safecall;
    function AddSceneExtProperty(PropertyExtension: OleVariant): Integer; safecall;
    procedure ResetSceneExtProperty; safecall;
    function GetSceneExtProperty(PropertyId: Integer): OleVariant; safecall;
    procedure FileSummaryInfo; safecall;
    function GetGridSettings: OleVariant; safecall;
    procedure ToolsSketchTranslate; safecall;
    procedure ToolsDistance; safecall;
    procedure SkToolsAutoConstr; safecall;
    procedure ToolsSketchScale; safecall;
    procedure Paste; safecall;
    procedure ToolsConfiguration; safecall;
    procedure EntityProperties; safecall;
    function GetArcCentersDisplayed: WordBool; safecall;
    procedure SetArcCentersDisplayed(setting: WordBool); safecall;
    procedure AutoSolveToggle; safecall;
    procedure Dummy7; safecall;
    function IGetLines: Double; safecall;
    function GetLineCount: Integer; safecall;
    procedure ICreateEllipse(var center: Double; var major: Double; var minor: Double); safecall;
    procedure ICreateEllipticalArcByCenter(var center: Double; var major: Double; 
                                           var minor: Double; var start: Double; var end_: Double); safecall;
    function Get_ILightSourcePropertyValues(id: Integer): Double; safecall;
    procedure Set_ILightSourcePropertyValues(id: Integer; var retval: Double); safecall;
    procedure InsertCutSwept(propagate: WordBool; alignment: WordBool; keepNormalConstant: WordBool); safecall;
    procedure InsertCutBlend(closed: WordBool); safecall;
    procedure InsertHelix(reversed: WordBool; clockwised: WordBool; tapered: WordBool; 
                          outward: WordBool; helixdef: Integer; height: Double; pitch: Double; 
                          revolution: Double; taperangle: Double; startangle: Double); safecall;
    procedure ICreateLine(var P1: Double; var P2: Double); safecall;
    procedure ICreateCenterLine(var P1: Double; var P2: Double); safecall;
    procedure ICreateArc(var P1: Double; var P2: Double; var P3: Double; dir: Smallint); safecall;
    procedure ICreateCircleByRadius(var P1: Double; radius: Double); safecall;
    procedure GraphicsRedraw; safecall;
    function GetVisibilityOfConstructPlanes: WordBool; safecall;
    function GetDisplayWhenAdded: WordBool; safecall;
    procedure SetDisplayWhenAdded(setting: WordBool); safecall;
    function GetAddToDB: WordBool; safecall;
    procedure SetAddToDB(setting: WordBool); safecall;
    function DeSelectByID(const selID: WideString; const selParams: WideString; x: Double; 
                          y: Double; z: Double): WordBool; safecall;
    function Get_Visible: WordBool; safecall;
    procedure Set_Visible(retval: WordBool); safecall;
    procedure PrintDirect; safecall;
    procedure PrintPreview; safecall;
    procedure Quit; safecall;
    procedure CreatePlaneThru3Points; safecall;
    procedure ViewRotXPlusNinety; safecall;
    function GetUnits: OleVariant; safecall;
    procedure SetAngularUnits(uType: Smallint; fractBase: Smallint; fractDenom: Smallint; 
                              sigDigits: Smallint); safecall;
    function GetAngularUnits: OleVariant; safecall;
    function IGetUnits: Smallint; safecall;
    procedure ISetAngularUnits(uType: Smallint; fractBase: Smallint; fractDenom: Smallint; 
                               sigDigits: Smallint); safecall;
    function IGetAngularUnits: Smallint; safecall;
    procedure ShowConfiguration(const configurationName: WideString); safecall;
    procedure ResetConfiguration; safecall;
    procedure AddConfiguration(const Name: WideString; const comment: WideString; 
                               const alternateName: WideString; suppressByDefault: WordBool; 
                               hideByDefault: WordBool; minFeatureManager: WordBool; 
                               inheritProperties: WordBool; flags: LongWord); safecall;
    procedure DeleteConfiguration(const configurationName: WideString); safecall;
    procedure EditConfiguration(const Name: WideString; const newName: WideString; 
                                const comment: WideString; const alternateName: WideString; 
                                suppressByDefault: WordBool; hideByDefault: WordBool; 
                                minFeatureManager: WordBool; inheritProperties: WordBool; 
                                flags: LongWord); safecall;
    procedure CreatePlanePerCurveAndPassPoint(origAtCurve: WordBool); safecall;
    function CreateFeatureMgrView(var bitmap: Integer): IDispatch; safecall;
    function AddFeatureMgrView(var bitmap: Integer; var appView: Integer): WordBool; safecall;
    function GetStandardViewRotation(viewId: Integer): OleVariant; safecall;
    function IGetStandardViewRotation(viewId: Integer): Double; safecall;
    procedure FeatureExtruRefSurface(sd: WordBool; flip: WordBool; dir: WordBool; t1: Integer; 
                                     t2: Integer; d1: Double; d2: Double; dchk1: WordBool; 
                                     dchk2: WordBool; ddir1: WordBool; ddir2: WordBool; 
                                     dang1: Double; dang2: Double; offsetReverse1: WordBool; 
                                     offsetReverse2: WordBool); safecall;
    function IGet3rdPartyStorage(const stringIn: WideString; isStoring: WordBool): IUnknown; safecall;
    procedure DeleteFeatureMgrView(var appView: Integer); safecall;
    function GetMassProperties: OleVariant; safecall;
    function IGetMassProperties(var mPropsData: Double): WordBool; safecall;
    function GetLightSourceCount: Integer; safecall;
    function GetLightSourceIdFromName(const lightName: WideString): Integer; safecall;
    procedure SetNextSelectionGroupId(id: Integer); safecall;
    procedure ISetNextSelectionGroupId(id: Integer); safecall;
    function InsertMidSurfaceExt(placement: Double; knitFlag: WordBool): IDispatch; safecall;
    function IInsertMidSurfaceExt(placement: Double; knitFlag: WordBool): IMidSurface2; safecall;
    procedure ICreatePlaneFixed(var P1: Double; var P2: Double; var P3: Double; useGlobal: WordBool); safecall;
    function SelectByMark(const selID: WideString; const selParams: WideString; x: Double; 
                          y: Double; z: Double; mark: Integer): WordBool; safecall;
    function AndSelectByMark(const selID: WideString; const selParams: WideString; x: Double; 
                             y: Double; z: Double; mark: Integer): WordBool; safecall;
    function GetDependencies(traverseflag: Integer; searchflag: Integer): OleVariant; safecall;
    function IGetDependencies(traverseflag: Integer; searchflag: Integer): WideString; safecall;
    function GetNumDependencies(traverseflag: Integer; searchflag: Integer): Integer; safecall;
    function IGetNumDependencies(traverseflag: Integer; searchflag: Integer): Integer; safecall;
    function FirstFeature: IDispatch; safecall;
    function IFirstFeature: IFeature; safecall;
    procedure UnderiveSketch; safecall;
    procedure DeriveSketch; safecall;
    function IsExploded: WordBool; safecall;
    function DeleteSelection(confirmFlag: WordBool): WordBool; safecall;
    function DeleteNamedView(const viewname: WideString): WordBool; safecall;
    function SetLightSourceName(id: Integer; const newName: WideString): WordBool; safecall;
    procedure Insert3DSplineCurve(curveClosed: WordBool); safecall;
    function SetLightSourcePropertyValuesVB(const idName: WideString; lType: SYSINT; diff: Double; 
                                            rgbColor: Integer; dist: Double; dirX: Double; 
                                            dirY: Double; dirZ: Double; spotDirX: Double; 
                                            spotDirY: Double; spotDirZ: Double; spotAngle: Double; 
                                            fallOff0: Double; fallOff1: Double; fallOff2: Double; 
                                            ambient: Double; specular: Double; 
                                            spotExponent: Double; bDisable: WordBool): WordBool; safecall;
    function ICreateFeatureMgrView(var bitmap: Integer): IFeatMgrView; safecall;
    function SelectedEdgeProperties(const edgeName: WideString): WordBool; safecall;
    function SelectedFaceProperties(rgbColor: Integer; ambient: Double; diffuse: Double; 
                                    specular: Double; shininess: Double; transparency: Double; 
                                    emission: Double; usePartProps: WordBool; 
                                    const faceName: WideString): WordBool; safecall;
    function SelectedFeatureProperties(rgbColor: Integer; ambient: Double; diffuse: Double; 
                                       specular: Double; shininess: Double; transparency: Double; 
                                       emission: Double; usePartProps: WordBool; 
                                       suppressed: WordBool; const featureName: WideString): WordBool; safecall;
    procedure InsertSplitLineSil; safecall;
    procedure InsertSplitLineProject(isDirectional: WordBool; flipDir: WordBool); safecall;
    procedure InsertRib(is2Sided: WordBool; reverseThicknessDir: WordBool; thickness: Double; 
                        referenceEdgeIndex: Integer; reverseMaterialDir: WordBool; 
                        isDrafted: WordBool; draftOutward: WordBool; draftAngle: Double); safecall;
    function AddRadialDimension(x: Double; y: Double; z: Double): WordBool; safecall;
    function AddDiameterDimension(x: Double; y: Double; z: Double): WordBool; safecall;
    function GetModelViewNames: OleVariant; safecall;
    function IGetModelViewNames: WideString; safecall;
    function GetModelViewCount: SYSINT; safecall;
    function GetUserPreferenceDoubleValue(userPreferenceValue: Integer): Double; safecall;
    function SetUserPreferenceDoubleValue(userPreferenceValue: Integer; Value: Double): WordBool; safecall;
    procedure ViewDisplayCurvature; safecall;
    procedure Scale; safecall;
    procedure AddIns; safecall;
    function InsertCurveFile(const fileName: WideString): WordBool; safecall;
    procedure InsertCurveFileBegin; safecall;
    function InsertCurveFilePoint(x: Double; y: Double; z: Double): WordBool; safecall;
    function InsertCurveFileEnd: WordBool; safecall;
    function ChangeSketchPlane: WordBool; safecall;
    procedure ViewOrientationUndo; safecall;
    procedure PrintOut(fromPage: Integer; toPage: Integer; numCopies: Integer; collate: WordBool; 
                       const printer: WideString; Scale: Double; printToFile: WordBool); safecall;
    procedure SketchOffsetEntities(offset: Double; flip: WordBool); safecall;
    procedure InsertLibraryFeature(const libFeatPartNameIn: WideString); safecall;
    procedure SketchModifyTranslate(startX: Double; startY: Double; endX: Double; endY: Double); safecall;
    procedure SketchModifyRotate(centerX: Double; centerY: Double; angle: Double); safecall;
    procedure SketchModifyFlip(axisFlag: SYSINT); safecall;
    function SketchModifyScale(scaleFactor: Double): WordBool; safecall;
    function GetActiveConfiguration: IDispatch; safecall;
    function IGetActiveConfiguration: IConfiguration; safecall;
    function GetUserPreferenceToggle(userPreferenceToggle: Integer): WordBool; safecall;
    function SetUserPreferenceToggle(userPreferenceValue: Integer; onFlag: WordBool): WordBool; safecall;
    procedure InsertSweepRefSurface(propagate: WordBool; twistCtrlOption: Smallint; 
                                    keepTangency: WordBool; forceNonRational: WordBool); safecall;
    procedure InsertLoftRefSurface(closed: WordBool; keepTangency: WordBool; 
                                   forceNonRational: WordBool); safecall;
    procedure InsertProtrusionSwept2(propagate: WordBool; alignment: WordBool; 
                                     twistCtrlOption: Smallint; keepTangency: WordBool; 
                                     forceNonRational: WordBool); safecall;
    procedure InsertProtrusionBlend2(closed: WordBool; keepTangency: WordBool; 
                                     forceNonRational: WordBool); safecall;
    procedure InsertCutSwept2(propagate: WordBool; alignment: WordBool; twistCtrlOption: Smallint; 
                              keepTangency: WordBool; forceNonRational: WordBool); safecall;
    procedure InsertCutBlend2(closed: WordBool; keepTangency: WordBool; forceNonRational: WordBool); safecall;
    function IsEditingSelf: WordBool; safecall;
    procedure ShowNamedView2(const vName: WideString; viewId: Integer); safecall;
    procedure InsertDome(height: Double; reverseDir: WordBool; doEllipticSurface: WordBool); safecall;
    function Get_MaterialUserName: WideString; safecall;
    procedure Set_MaterialUserName(const retval: WideString); safecall;
    function Get_MaterialIdName: WideString; safecall;
    procedure Set_MaterialIdName(const retval: WideString); safecall;
    function Get_MaterialPropertyValues: OleVariant; safecall;
    procedure Set_MaterialPropertyValues(retval: OleVariant); safecall;
    function Get_IMaterialPropertyValues: Double; safecall;
    procedure Set_IMaterialPropertyValues(var retval: Double); safecall;
    function AddPropertyExtension(PropertyExtension: OleVariant): Integer; safecall;
    function GetPropertyExtension(id: Integer): OleVariant; safecall;
    procedure ResetPropertyExtension; safecall;
    function GetUpdateStamp: Integer; safecall;
    procedure ViewZoomTo2(x1: Double; y1: Double; z1: Double; x2: Double; y2: Double; z2: Double); safecall;
    procedure ScreenRotate; safecall;
    function Get_PrintSetup(setupType: Integer): Smallint; safecall;
    procedure Set_PrintSetup(setupType: Integer; setupValue: Smallint); safecall;
    procedure GraphicsRedraw2; safecall;
    procedure InsertCosmeticThread(type_: Smallint; depth: Double; length: Double; 
                                   const note: WideString); safecall;
    procedure HideCosmeticThread; safecall;
    procedure ShowCosmeticThread; safecall;
    procedure SimpleHole2(dia: Double; sd: WordBool; flip: WordBool; dir: WordBool; t1: Integer; 
                          t2: Integer; d1: Double; d2: Double; dchk1: WordBool; dchk2: WordBool; 
                          ddir1: WordBool; ddir2: WordBool; dang1: Double; dang2: Double; 
                          offsetReverse1: WordBool; offsetReverse2: WordBool); safecall;
    procedure IRelease3rdPartyStorage(const stringIn: WideString); safecall;
    function FeatureRevolve2(angle: Double; reverseDir: WordBool; angle2: Double; revType: Integer; 
                             options: Integer): Integer; safecall;
    function FeatureRevolveCut2(angle: Double; reverseDir: WordBool; angle2: Double; 
                                revType: Integer; options: Integer): Integer; safecall;
    procedure SetSaveFlag; safecall;
    function GetExternalReferenceName: WideString; safecall;
    function SelectByRay(doubleInfoIn: OleVariant; typeWanted: Integer): WordBool; safecall;
    function ISelectByRay(var pointIn: Double; var vectorIn: Double; radiusIn: Double; 
                          typeWanted: Integer): WordBool; safecall;
    procedure SetSceneBkgDIB(l_dib: Integer); safecall;
    function Get_SceneBkgImageFileName: WideString; safecall;
    procedure Set_SceneBkgImageFileName(const retval: WideString); safecall;
    procedure InsertBkgImage(const newName: WideString); safecall;
    procedure DeleteBkgImage; safecall;
    procedure InsertSplinePoint(x: Double; y: Double; z: Double); safecall;
    procedure InsertLoftRefSurface2(closed: WordBool; keepTangency: WordBool; 
                                    forceNonRational: WordBool; tessToleranceFactor: Double; 
                                    startMatchingType: Smallint; endMatchingType: Smallint); safecall;
    procedure InsertProtrusionBlend3(closed: WordBool; keepTangency: WordBool; 
                                     forceNonRational: WordBool; tessToleranceFactor: Double; 
                                     startMatchingType: Smallint; endMatchingType: Smallint); safecall;
    procedure InsertCutBlend3(closed: WordBool; keepTangency: WordBool; forceNonRational: WordBool; 
                              tessToleranceFactor: Double; startMatchingType: Smallint; 
                              endMatchingType: Smallint); safecall;
    procedure AlignDimensions; safecall;
    procedure BreakDimensionAlignment; safecall;
    procedure SketchFillet1(rad: Double); safecall;
    procedure FeatureChamferType(chamferType: Smallint; width: Double; angle: Double; 
                                 flip: WordBool; otherDist: Double; vertexChamDist1: Double; 
                                 vertexChamDist2: Double; vertexChamDist3: Double); safecall;
    procedure FeatureCutThin(sd: WordBool; flip: WordBool; dir: WordBool; t1: Integer; t2: Integer; 
                             d1: Double; d2: Double; dchk1: WordBool; dchk2: WordBool; 
                             ddir1: WordBool; ddir2: WordBool; dang1: Double; dang2: Double; 
                             offsetReverse1: WordBool; offsetReverse2: WordBool; thk1: Double; 
                             thk2: Double; endThk: Double; revThinDir: Integer; capEnds: Integer; 
                             addBends: WordBool; bendRad: Double); safecall;
    procedure FeatureBossThin(sd: WordBool; flip: WordBool; dir: WordBool; t1: Integer; 
                              t2: Integer; d1: Double; d2: Double; dchk1: WordBool; 
                              dchk2: WordBool; ddir1: WordBool; ddir2: WordBool; dang1: Double; 
                              dang2: Double; offsetReverse1: WordBool; offsetReverse2: WordBool; 
                              thk1: Double; thk2: Double; endThk: Double; revThinDir: Integer; 
                              capEnds: Integer; addBends: WordBool; bendRad: Double); safecall;
    function InsertDatumTargetSymbol(const datum1: WideString; const datum2: WideString; 
                                     const datum3: WideString; areaStyle: Smallint; 
                                     areaOutside: WordBool; value1: Double; value2: Double; 
                                     const valueStr1: WideString; const valueStr2: WideString; 
                                     arrowsSmart: WordBool; arrowStyle: Smallint; 
                                     leaderLineStyle: Smallint; leaderBent: WordBool; 
                                     showArea: WordBool; showSymbol: WordBool): WordBool; safecall;
    function EditDatumTargetSymbol(const datum1: WideString; const datum2: WideString; 
                                   const datum3: WideString; areaStyle: Smallint; 
                                   areaOutside: WordBool; value1: Double; value2: Double; 
                                   const valueStr1: WideString; const valueStr2: WideString; 
                                   arrowsSmart: WordBool; arrowStyle: Smallint; 
                                   leaderLineStyle: Smallint; leaderBent: WordBool; 
                                   showArea: WordBool; showSymbol: WordBool): WordBool; safecall;
    procedure InsertBOMBalloon; safecall;
    function FeatureReferenceCurve(numOfCurves: Integer; baseCurves: OleVariant; merge: WordBool; 
                                   const fromFileName: WideString; out errorCode: Integer): IDispatch; safecall;
    function IFeatureReferenceCurve(numOfCurves: Integer; var baseCurves: ICurve; merge: WordBool; 
                                    const fromFileName: WideString; out errorCode: Integer): IReferenceCurve; safecall;
    procedure FontBold(bold: WordBool); safecall;
    procedure FontItalic(italic: WordBool); safecall;
    procedure FontUnderline(underline: WordBool); safecall;
    procedure FontFace(const face: WideString); safecall;
    procedure FontPoints(points: Smallint); safecall;
    procedure FontUnits(units: Double); safecall;
    function SketchSplineByEqnParams(paramsIn: OleVariant): WordBool; safecall;
    procedure AlignParallelDimensions; safecall;
    procedure SetBlockingState(stateIn: Integer); safecall;
    procedure ResetBlockingState; safecall;
    function GetSceneBkgDIB: Integer; safecall;
    procedure InsertHatchedFace; safecall;
    function GetColorTable: IDispatch; safecall;
    function IGetColorTable: IColorTable; safecall;
    procedure InsertSweepRefSurface2(propagate: WordBool; twistCtrlOption: Smallint; 
                                     keepTangency: WordBool; forceNonRational: WordBool; 
                                     startMatchingType: Smallint; endMatchingType: Smallint); safecall;
    procedure InsertProtrusionSwept3(propagate: WordBool; alignment: WordBool; 
                                     twistCtrlOption: Smallint; keepTangency: WordBool; 
                                     forceNonRational: WordBool; startMatchingType: Smallint; 
                                     endMatchingType: Smallint); safecall;
    procedure InsertCutSwept3(propagate: WordBool; alignment: WordBool; twistCtrlOption: Smallint; 
                              keepTangency: WordBool; forceNonRational: WordBool; 
                              startMatchingType: Smallint; endMatchingType: Smallint); safecall;
    function IsOpenedViewOnly: WordBool; safecall;
    function IsOpenedReadOnly: WordBool; safecall;
    procedure ViewZoomToSelection; safecall;
    procedure FeatureBossThicken(thickness: Double; direction: Integer; faceIndex: Integer); safecall;
    procedure FeatureCutThicken(thickness: Double; direction: Integer; faceIndex: Integer); safecall;
    function InsertAxis: WordBool; safecall;
    procedure EditUndo(nSteps: LongWord); safecall;
    procedure SelectMidpoint; safecall;
    function ISketchSplineByEqnParams(var propArray: SYSINT; var knotsArray: Double; 
                                      var cntrlPntCoordArray: Double): Integer; safecall;
    function VersionHistory: OleVariant; safecall;
    function IVersionHistory: WideString; safecall;
    function IGetVersionHistoryCount: SYSINT; safecall;
    procedure Rebuild(options: Integer); safecall;
    procedure InsertFeatureShellAddThickness(thickness: Double); safecall;
    procedure InsertOffsetSurface(thickness: Double; reverse: WordBool); safecall;
    procedure SimplifySpline(toleranceIn: Double); safecall;
    function Get_SummaryInfo(FieldId: Integer): WideString; safecall;
    procedure Set_SummaryInfo(FieldId: Integer; const retval: WideString); safecall;
    function Get_CustomInfo(const FieldName: WideString): WideString; safecall;
    procedure Set_CustomInfo(const FieldName: WideString; const retval: WideString); safecall;
    function GetCustomInfoCount: Integer; safecall;
    function GetCustomInfoType(const FieldName: WideString): WideString; safecall;
    function GetCustomInfoNames: OleVariant; safecall;
    function IGetCustomInfoNames: WideString; safecall;
    function AddCustomInfo(const FieldName: WideString; const FieldType: WideString; 
                           const FieldValue: WideString): WordBool; safecall;
    function DeleteCustomInfo(const FieldName: WideString): WordBool; safecall;
    procedure PrintOut2(fromPage: Integer; toPage: Integer; numCopies: Integer; collate: WordBool; 
                        const printer: WideString; Scale: Double; printToFile: WordBool; 
                        const ptfName: WideString); safecall;
    function SetReadOnlyState(setReadOnly: WordBool): WordBool; safecall;
    function InsertFamilyTableOpen(const fileName: WideString): WordBool; safecall;
    function MultiSelectByRay(doubleInfoIn: OleVariant; typeWanted: Integer; Append: WordBool): WordBool; safecall;
    function IMultiSelectByRay(var pointIn: Double; var vectorIn: Double; radiusIn: Double; 
                               typeWanted: Integer; Append: WordBool): WordBool; safecall;
    procedure InsertNewNote3(const upperText: WideString; noLeader: WordBool; bentLeader: WordBool; 
                             arrowStyle: Smallint; leaderSide: Smallint; angle: Double; 
                             balloonStyle: Smallint; balloonFit: Smallint; smartArrow: WordBool); safecall;
    procedure InsertWeldSymbol2(const dim1: WideString; const symbol: WideString; 
                                const dim2: WideString; symmetric: WordBool; fieldWeld: WordBool; 
                                showOtherSide: WordBool; dashOnTop: WordBool; peripheral: WordBool; 
                                hasProcess: WordBool; const processValue: WideString); safecall;
    function InsertSurfaceFinishSymbol2(symType: Integer; leaderType: Integer; locX: Double; 
                                        locY: Double; locZ: Double; laySymbol: Integer; 
                                        arrowType: Integer; const machAllowance: WideString; 
                                        const otherVals: WideString; const prodMethod: WideString; 
                                        const sampleLen: WideString; 
                                        const maxRoughness: WideString; 
                                        const minRoughness: WideString; 
                                        const roughnessSpacing: WideString): WordBool; safecall;
    function SaveSilent: Integer; safecall;
    function SaveAsSilent(const newName: WideString; saveAsCopy: WordBool): Integer; safecall;
    function AddCustomInfo2(const FieldName: WideString; FieldType: Integer; 
                            const FieldValue: WideString): WordBool; safecall;
    function GetCustomInfoType2(const FieldName: WideString): Integer; safecall;
    function InsertRefPoint: WordBool; safecall;
    function FeatureFillet2(r1: Double; propagate: WordBool; ftyp: WordBool; varRadTyp: WordBool; 
                            overFlowType: Integer; nRadii: SYSINT; radii: OleVariant): Integer; safecall;
    function IFeatureFillet2(r1: Double; propagate: WordBool; ftyp: WordBool; varRadTyp: WordBool; 
                             overFlowType: Integer; nRadii: SYSINT; var radii: Double): Integer; safecall;
    function GetFirstAnnotation: IDispatch; safecall;
    function IGetFirstAnnotation: IAnnotation; safecall;
    function InsertCoordinateSystem(xFlippedIn: WordBool; yFlippedIn: WordBool; zFlippedIn: WordBool): WordBool; safecall;
    function GetToolbarVisibility(toolbar: Integer): WordBool; safecall;
    procedure SetToolbarVisibility(toolbar: Integer; visibility: WordBool); safecall;
    procedure ViewDispCoordinateSystems; safecall;
    procedure ViewDispTempRefaxes; safecall;
    procedure ViewDispRefPoints; safecall;
    procedure ViewDispOrigins; safecall;
    function GetCoordinateSystemXformByName(const nameIn: WideString): OleVariant; safecall;
    function IGetCoordinateSystemXformByName(const nameIn: WideString): Double; safecall;
    function GetCurrentCoordinateSystemName: WideString; safecall;
    function EnumModelViews: IEnumModelViews; safecall;
    function InsertCompositeCurve: WordBool; safecall;
    procedure SketchParabola(val1: Double; val2: Double; z1: Double; val3: Double; val4: Double; 
                             z2: Double; val5: Double; val6: Double; z3: Double; val7: Double; 
                             val8: Double; z4: Double); safecall;
    procedure InsertRadiateSurface(distance: Double; flipDir: WordBool; tangentPropagate: WordBool); safecall;
    procedure InsertSewRefSurface; safecall;
    function InsertShape(pressureOn: Integer; tangentsOn: Integer; pressureGain: Double; 
                         tangentGain: Double; curveSpringGain: Double; alpha: Double; beta: Double; 
                         gamma: Double; delta: Double; degree: Integer; split: Integer; 
                         tuning: Integer): Integer; safecall;
    procedure InsertMfDraft2(angle: Double; flipDir: WordBool; isEdgeDraft: WordBool; 
                             propType: Integer; stepDraft: WordBool); safecall;
    function GetConfigurationCount: Integer; safecall;
    function GetConfigurationNames: OleVariant; safecall;
    function IGetConfigurationNames(var count: Integer): WideString; safecall;
    procedure FeatureCut2(sd: WordBool; flip: WordBool; dir: WordBool; t1: Integer; t2: Integer; 
                          d1: Double; d2: Double; dchk1: WordBool; dchk2: WordBool; 
                          ddir1: WordBool; ddir2: WordBool; dang1: Double; dang2: Double; 
                          offsetReverse1: WordBool; offsetReverse2: WordBool; 
                          keepPieceIndex: Integer); safecall;
    procedure InsertCutSurface(flip: WordBool; keepPieceIndex: Integer); safecall;
    function GetDetailingDefaults: IDispatch; safecall;
    function IGetDetailingDefaults: IDetailingDefaults; safecall;
    function ListExternalFileReferencesCount(useSearchRules: WordBool): Integer; safecall;
    function ListExternalFileReferences(useSearchRules: WordBool): OleVariant; safecall;
    function IListExternalFileReferences(useSearchRules: WordBool; numRefs: Integer): WideString; safecall;
    function SketchSplineByEqnParams2(paramsIn: OleVariant): WordBool; safecall;
    function GetFirstModelView: IDispatch; safecall;
    function IGetFirstModelView: IModelView; safecall;
    function InsertPlanarRefSurface: WordBool; safecall;
    function GetNext: IDispatch; safecall;
    function GetSaveFlag: WordBool; safecall;
    function AddCustomInfo3(const configuration: WideString; const FieldName: WideString; 
                            FieldType: Integer; const FieldValue: WideString): WordBool; safecall;
    function Get_CustomInfo2(const configuration: WideString; const FieldName: WideString): WideString; safecall;
    procedure Set_CustomInfo2(const configuration: WideString; const FieldName: WideString; 
                              const retval: WideString); safecall;
    function DeleteCustomInfo2(const configuration: WideString; const FieldName: WideString): WordBool; safecall;
    function GetCustomInfoCount2(const configuration: WideString): Integer; safecall;
    function GetCustomInfoNames2(const configuration: WideString): OleVariant; safecall;
    function IGetCustomInfoNames2(const configuration: WideString): WideString; safecall;
    function GetCustomInfoType3(const configuration: WideString; const FieldName: WideString): Integer; safecall;
    function GetConsiderLeadersAsLines: WordBool; safecall;
    function SetConsiderLeadersAsLines(leadersAsLines: WordBool): WordBool; safecall;
    procedure InsertRevolvedRefSurface(angle: Double; reverseDir: WordBool; angle2: Double; 
                                       revType: SYSINT); safecall;
    function GetBendState: Integer; safecall;
    function SetBendState(bendState: Integer): Integer; safecall;
    function Get_ShowFeatureErrorDialog: WordBool; safecall;
    procedure Set_ShowFeatureErrorDialog(retval: WordBool); safecall;
    procedure ClearUndoList; safecall;
    function GetFeatureManagerWidth: Integer; safecall;
    function SetFeatureManagerWidth(width: Integer): Integer; safecall;
    function InsertProjectedSketch2(reverse: Integer): IDispatch; safecall;
    function IInsertProjectedSketch2(reverse: Integer): IFeature; safecall;
    function GetFeatureCount: Integer; safecall;
    function FeatureByPositionReverse(num: Integer): IDispatch; safecall;
    function IFeatureByPositionReverse(num: Integer): IFeature; safecall;
    function RayIntersections(bodiesIn: OleVariant; basePointsIn: OleVariant; 
                              vectorsIn: OleVariant; options: Integer; hitRadius: Double; 
                              offset: Double): Integer; safecall;
    function IRayIntersections(var bodiesIn: IBody2; numBodies: Integer; var basePointsIn: Double; 
                               var vectorsIn: Double; numRays: Integer; options: Integer; 
                               hitRadius: Double; offset: Double): Integer; safecall;
    function GetRayIntersectionsPoints: OleVariant; safecall;
    function IGetRayIntersectionsPoints: Double; safecall;
    function GetRayIntersectionsTopology: OleVariant; safecall;
    function IGetRayIntersectionsTopology: IUnknown; safecall;
    procedure EditSeedFeat; safecall;
    function EditSuppress: WordBool; safecall;
    function EditUnsuppress: WordBool; safecall;
    function EditUnsuppressDependent: WordBool; safecall;
    function EditRollback: WordBool; safecall;
    function Save2(silent: WordBool): Integer; safecall;
    function SaveAs2(const newName: WideString; saveAsVersion: Integer; saveAsCopy: WordBool; 
                     silent: WordBool): Integer; safecall;
    procedure SetPopupMenuMode(modeIn: SYSINT); safecall;
    function GetPopupMenuMode: SYSINT; safecall;
    procedure CloseFamilyTable; safecall;
    procedure CreatePlaneAtSurface(interIndex: SYSINT; projOpt: WordBool; reverseDir: WordBool; 
                                   normalPlane: WordBool; angle: Double); safecall;
    procedure SketchOffset(offset: Double; contourMode: WordBool); safecall;
    function CreateLinearSketchStepAndRepeat(numX: Integer; numY: Integer; spacingX: Double; 
                                             spacingY: Double; angleX: Double; angleY: Double; 
                                             const deleteInstances: WideString): WordBool; safecall;
    function SetAmbientLightProperties(const Name: WideString; ambient: Double; diffuse: Double; 
                                       specular: Double; colour: Integer; enabled: WordBool; 
                                       fixed: WordBool): WordBool; safecall;
    function GetAmbientLightProperties(const Name: WideString; var ambient: Double; 
                                       var diffuse: Double; var specular: Double; 
                                       var colour: Integer; var enabled: WordBool; 
                                       var fixed: WordBool): WordBool; safecall;
    function SetPointLightProperties(const Name: WideString; ambient: Double; diffuse: Double; 
                                     specular: Double; colour: Integer; enabled: WordBool; 
                                     fixed: WordBool; x: Double; y: Double; z: Double): WordBool; safecall;
    function GetPointLightProperties(const Name: WideString; var ambient: Double; 
                                     var diffuse: Double; var specular: Double; 
                                     var colour: Integer; var enabled: WordBool; 
                                     var fixed: WordBool; var x: Double; var y: Double; 
                                     var z: Double): WordBool; safecall;
    function SetDirectionLightProperties(const Name: WideString; ambient: Double; diffuse: Double; 
                                         specular: Double; colour: Integer; enabled: WordBool; 
                                         fixed: WordBool; x: Double; y: Double; z: Double): WordBool; safecall;
    function GetDirectionLightProperties(const Name: WideString; var ambient: Double; 
                                         var diffuse: Double; var specular: Double; 
                                         var colour: Integer; var enabled: WordBool; 
                                         var fixed: WordBool; var x: Double; var y: Double; 
                                         var z: Double): WordBool; safecall;
    function SetSpotlightProperties(const Name: WideString; ambient: Double; diffuse: Double; 
                                    specular: Double; colour: Integer; enabled: WordBool; 
                                    fixed: WordBool; posx: Double; posy: Double; posz: Double; 
                                    targetx: Double; targety: Double; targetz: Double; 
                                    coneAngle: Double): WordBool; safecall;
    function GetSpotlightProperties(const Name: WideString; var ambient: Double; 
                                    var diffuse: Double; var specular: Double; var colour: Integer; 
                                    var enabled: WordBool; var fixed: WordBool; var x: Double; 
                                    var y: Double; var z: Double; var targetx: Double; 
                                    var targety: Double; var targetz: Double; var coneAngle: Double): WordBool; safecall;
    procedure SplitOpenSegment(x: Double; y: Double; z: Double); safecall;
    procedure AutoInferToggle; safecall;
    procedure SketchRectangleAtAnyAngle(val1: Double; val2: Double; z1: Double; val3: Double; 
                                        val4: Double; z2: Double; val3x: Double; val3y: Double; 
                                        z3: Double; val5: WordBool); safecall;
    function CreateCircularSketchStepAndRepeat(arcRadius: Double; arcAngle: Double; 
                                               patternNum: Integer; patternSpacing: Double; 
                                               patternRotate: WordBool; 
                                               const deleteInstances: WideString): WordBool; safecall;
    procedure SplitClosedSegment(x0: Double; y0: Double; z0: Double; x1: Double; y1: Double; 
                                 z1: Double); safecall;
    function IsLightLockedToModel(lightId: Integer): WordBool; safecall;
    function LockLightToModel(lightId: Integer; fix: WordBool): WordBool; safecall;
    function FeatureFillet3(r1: Double; propagate: WordBool; ftyp: SYSINT; varRadTyp: WordBool; 
                            overFlowType: Integer; nRadii: SYSINT; radii: OleVariant; 
                            useHelpPoint: WordBool; useTangentHoldLine: WordBool): Integer; safecall;
    function IFeatureFillet3(r1: Double; propagate: WordBool; ftyp: SYSINT; varRadTyp: WordBool; 
                             overFlowType: Integer; nRadii: SYSINT; var radii: Double; 
                             useHelpPoint: WordBool; useTangentHoldLine: WordBool): Integer; safecall;
    procedure InsertConnectionPoint; safecall;
    procedure InsertRoutePoint; safecall;
    procedure FeatureBossThicken2(thickness: Double; direction: Integer; faceIndex: Integer; 
                                  fillVolume: WordBool); safecall;
    procedure FeatureCutThicken2(thickness: Double; direction: Integer; faceIndex: Integer; 
                                 fillVolume: WordBool); safecall;
    function GetConfigurationByName(const Name: WideString): IDispatch; safecall;
    function IGetConfigurationByName(const Name: WideString): IConfiguration; safecall;
    function CreatePoint2(pointX: Double; pointY: Double; pointZ: Double): IDispatch; safecall;
    function ICreatePoint2(pointX: Double; pointY: Double; pointZ: Double): ISketchPoint; safecall;
    function CreateLine2(p1x: Double; p1y: Double; p1z: Double; p2x: Double; p2y: Double; 
                         p2z: Double): IDispatch; safecall;
    function ICreateLine2(p1x: Double; p1y: Double; p1z: Double; p2x: Double; p2y: Double; 
                          p2z: Double): ISketchSegment; safecall;
    function GetActiveSketch2: IDispatch; safecall;
    function IGetActiveSketch2: ISketch; safecall;
    procedure DrawLightIcons; safecall;
    function GetLayerManager: IDispatch; safecall;
    function IGetLayerManager: ILayerMgr; safecall;
    function CreateCircle2(xC: Double; yC: Double; zc: Double; xp: Double; yp: Double; zp: Double): IDispatch; safecall;
    function ICreateCircle2(xC: Double; yC: Double; zc: Double; xp: Double; yp: Double; zp: Double): ISketchSegment; safecall;
    function CreateCircleByRadius2(xC: Double; yC: Double; zc: Double; radius: Double): IDispatch; safecall;
    function ICreateCircleByRadius2(xC: Double; yC: Double; zc: Double; radius: Double): ISketchSegment; safecall;
    function CreateArc2(xC: Double; yC: Double; zc: Double; xp1: Double; yp1: Double; zp1: Double; 
                        xp2: Double; yp2: Double; zp2: Double; direction: Smallint): IDispatch; safecall;
    function ICreateArc2(xC: Double; yC: Double; zc: Double; xp1: Double; yp1: Double; zp1: Double; 
                         xp2: Double; yp2: Double; zp2: Double; direction: Smallint): ISketchSegment; safecall;
    function CreateEllipse2(centerX: Double; centerY: Double; centerZ: Double; majorX: Double; 
                            majorY: Double; majorZ: Double; minorX: Double; minorY: Double; 
                            minorZ: Double): IDispatch; safecall;
    function ICreateEllipse2(centerX: Double; centerY: Double; centerZ: Double; majorX: Double; 
                             majorY: Double; majorZ: Double; minorX: Double; minorY: Double; 
                             minorZ: Double): ISketchSegment; safecall;
    function CreateEllipticalArc2(centerX: Double; centerY: Double; centerZ: Double; 
                                  majorX: Double; majorY: Double; majorZ: Double; minorX: Double; 
                                  minorY: Double; minorZ: Double; startX: Double; startY: Double; 
                                  startZ: Double; endX: Double; endY: Double; endZ: Double): IDispatch; safecall;
    function ICreateEllipticalArc2(centerX: Double; centerY: Double; centerZ: Double; 
                                   majorX: Double; majorY: Double; majorZ: Double; minorX: Double; 
                                   minorY: Double; minorZ: Double; startX: Double; startY: Double; 
                                   startZ: Double; endX: Double; endY: Double; endZ: Double): ISketchSegment; safecall;
    function CreateSpline(pointData: OleVariant): IDispatch; safecall;
    function ICreateSpline(PointCount: Integer; var pointData: Double): ISketchSegment; safecall;
    procedure ViewZoomtofit2; safecall;
    procedure SetInferenceMode(inferenceMode: WordBool); safecall;
    function GetInferenceMode: WordBool; safecall;
    function SetTitle2(const newTitle: WideString): WordBool; safecall;
    function SketchFillet2(rad: Double; constrainedCorners: Smallint): WordBool; safecall;
    function IsTessellationValid: WordBool; safecall;
    procedure EditRoute; safecall;
    procedure FileReload; safecall;
    function GetDesignTable: IDispatch; safecall;
    function IGetDesignTable: IDesignTable; safecall;
    function GetEntityName(const entity: IDispatch): WideString; safecall;
    function IGetEntityName(const entity: IEntity): WideString; safecall;
    function IGetNext: IModelDoc2; safecall;
    function ShowConfiguration2(const configurationName: WideString): WordBool; safecall;
    function AddConfiguration2(const Name: WideString; const comment: WideString; 
                               const alternateName: WideString; suppressByDefault: WordBool; 
                               hideByDefault: WordBool; minFeatureManager: WordBool; 
                               inheritProperties: WordBool; flags: LongWord): WordBool; safecall;
    function DeleteConfiguration2(const configurationName: WideString): WordBool; safecall;
    function EditConfiguration2(const Name: WideString; const newName: WideString; 
                                const comment: WideString; const alternateName: WideString; 
                                suppressByDefault: WordBool; hideByDefault: WordBool; 
                                minFeatureManager: WordBool; inheritProperties: WordBool; 
                                flags: LongWord): WordBool; safecall;
    function CreateSplineByEqnParams(paramsIn: OleVariant): IDispatch; safecall;
    function ICreateSplineByEqnParams(var propArray: SYSINT; var knotsArray: Double; 
                                      var cntrlPntCoordArray: Double): ISketchSegment; safecall;
    function CreateFeatureMgrView2(var bitmap: Integer; const toolTip: WideString): IDispatch; safecall;
    function ICreateFeatureMgrView2(var bitmap: Integer; const toolTip: WideString): IFeatMgrView; safecall;
    function AddFeatureMgrView2(var bitmap: Integer; var appView: Integer; const toolTip: WideString): WordBool; safecall;
    procedure FeatureCut3(sd: WordBool; flip: WordBool; dir: WordBool; t1: Integer; t2: Integer; 
                          d1: Double; d2: Double; dchk1: WordBool; dchk2: WordBool; 
                          ddir1: WordBool; ddir2: WordBool; dang1: Double; dang2: Double; 
                          offsetReverse1: WordBool; offsetReverse2: WordBool; 
                          keepPieceIndex: Integer); safecall;
    function GetFirstAnnotation2: IDispatch; safecall;
    function IGetFirstAnnotation2: IAnnotation; safecall;
    procedure InsertExtendSurface(extendLinear: WordBool; endCondition: Integer; distance: Double); safecall;
    procedure InsertTangencySurface(oneSide: WordBool; isFlip: WordBool); safecall;
    function CreateSplinesByEqnParams(paramsIn: OleVariant): OleVariant; safecall;
    function ICreateSplinesByEqnParams(var propArray: SYSINT; var knotsArray: Double; 
                                       var cntrlPntCoordArray: Double): IEnumSketchSegments; safecall;
    function CreateClippedSplines(paramsIn: OleVariant; x1: Double; y1: Double; x2: Double; 
                                  y2: Double): OleVariant; safecall;
    function ICreateClippedSplines(var propArray: SYSINT; var knotsArray: Double; 
                                   var cntrlPntCoordArray: Double; x1: Double; y1: Double; 
                                   x2: Double; y2: Double): IEnumSketchSegments; safecall;
    function EditSuppress2: WordBool; safecall;
    function EditUnsuppress2: WordBool; safecall;
    function EditUnsuppressDependent2: WordBool; safecall;
    function EditRollback2: WordBool; safecall;
    procedure HideDimension; safecall;
    procedure ShowFeatureDimensions; safecall;
    procedure HideFeatureDimensions; safecall;
    procedure Sketch3DIntersections; safecall;
    function FeatureFillet4(r1: Double; propagate: WordBool; uniformRadius: WordBool; ftyp: SYSINT; 
                            varRadTyp: WordBool; overFlowType: Integer; nRadii: SYSINT; 
                            radii: OleVariant; useHelpPoint: WordBool; 
                            useTangentHoldLine: WordBool; cornerType: WordBool; 
                            setbackDistCount: SYSINT; setBackDistances: OleVariant): Integer; safecall;
    function IFeatureFillet4(r1: Double; propagate: WordBool; uniformRadius: WordBool; 
                             ftyp: SYSINT; varRadTyp: WordBool; overFlowType: Integer; 
                             nRadii: SYSINT; var radii: Double; useHelpPoint: WordBool; 
                             useTangentHoldLine: WordBool; cornerType: WordBool; 
                             setbackDistCount: SYSINT; var setBackDistances: Double): Integer; safecall;
    procedure InsertDeleteFace; safecall;
    function GetDependencies2(traverseflag: WordBool; searchflag: WordBool; 
                              addReadOnlyInfo: WordBool): OleVariant; safecall;
    function IGetDependencies2(traverseflag: WordBool; searchflag: WordBool; 
                               addReadOnlyInfo: WordBool): WideString; safecall;
    function IGetNumDependencies2(traverseflag: WordBool; searchflag: WordBool; 
                                  addReadOnlyInfo: WordBool): Integer; safecall;
    procedure InsertScale(scaleFactor_x: Double; scaleFactor_y: Double; scaleFactor_z: Double; 
                          isUniform: WordBool; scaleType: SYSINT); safecall;
    procedure LockAllExternalReferences; safecall;
    procedure UnlockAllExternalReferences; safecall;
    procedure BreakAllExternalReferences; safecall;
    function EditDimensionProperties(tolType: Integer; tolMax: Double; tolMin: Double; 
                                     const tolMaxFit: WideString; const tolMinFit: WideString; 
                                     useDocPrec: WordBool; precision: Integer; arrowsIn: Integer; 
                                     useDocArrows: WordBool; arrow1: Integer; arrow2: Integer): WordBool; safecall;
    function SketchPolygon(xCenter: Double; yCenter: Double; xEdge: Double; yEdge: Double; 
                           nSides: SYSINT; bInscribed: WordBool): WordBool; safecall;
    function GetBlockingState: Integer; safecall;
    function CreateFeatureMgrView3(var bitmap: Integer; const toolTip: WideString; 
                                   whichPane: Integer): IDispatch; safecall;
    function ICreateFeatureMgrView3(var bitmap: Integer; const toolTip: WideString; 
                                    whichPane: Integer): IFeatMgrView; safecall;
    function AddFeatureMgrView3(var bitmap: Integer; var appView: Integer; 
                                const toolTip: WideString; whichPane: Integer): WordBool; safecall;
    function CreatePlaneAtOffset2(val: Double; flipDir: WordBool): IDispatch; safecall;
    function ICreatePlaneAtOffset2(val: Double; flipDir: WordBool): IRefPlane; safecall;
    function CreatePlaneAtAngle2(val: Double; flipDir: WordBool): IDispatch; safecall;
    function ICreatePlaneAtAngle2(val: Double; flipDir: WordBool): IRefPlane; safecall;
    function CreatePlaneThru3Points2: IDispatch; safecall;
    function ICreatePlaneThru3Points2: IRefPlane; safecall;
    function CreatePlanePerCurveAndPassPoint2(origAtCurve: WordBool): IDispatch; safecall;
    function ICreatePlanePerCurveAndPassPoint2(origAtCurve: WordBool): IRefPlane; safecall;
    function CreatePlaneAtSurface2(interIndex: SYSINT; projOpt: WordBool; reverseDir: WordBool; 
                                   normalPlane: WordBool; angle: Double): IDispatch; safecall;
    function ICreatePlaneAtSurface2(interIndex: SYSINT; projOpt: WordBool; reverseDir: WordBool; 
                                    normalPlane: WordBool; angle: Double): IRefPlane; safecall;
    function GetUserPreferenceIntegerValue(userPreferenceValue: Integer): Integer; safecall;
    function SetUserPreferenceIntegerValue(userPreferenceValue: Integer; Value: Integer): WordBool; safecall;
    function GetUserPreferenceTextFormat(userPreferenceValue: Integer): IDispatch; safecall;
    function IGetUserPreferenceTextFormat(userPreferenceValue: Integer): ITextFormat; safecall;
    function SetUserPreferenceTextFormat(userPreferenceValue: Integer; const Value: IDispatch): WordBool; safecall;
    function ISetUserPreferenceTextFormat(userPreferenceValue: Integer; const Value: ITextFormat): WordBool; safecall;
    procedure InsertRib2(is2Sided: WordBool; reverseThicknessDir: WordBool; thickness: Double; 
                         referenceEdgeIndex: Integer; reverseMaterialDir: WordBool; 
                         isDrafted: WordBool; draftOutward: WordBool; draftAngle: Double; 
                         isNormToSketch: WordBool); safecall;
    function InsertObjectFromFile(const filePath: WideString; createLink: WordBool; xx: Double; 
                                  yy: Double; zz: Double): WordBool; safecall;
    procedure InspectCurvature; safecall;
    procedure RemoveInspectCurvature; safecall;
    function InsertDatumTag2: IDispatch; safecall;
    function IInsertDatumTag2: IDatumTag; safecall;
    function ActivateFeatureMgrView(var appView: Integer): Integer; safecall;
    procedure FeatureSketchDrivenPattern(useCentroid: WordBool); safecall;
    procedure HideShowBodies; safecall;
    procedure HideSolidBody; safecall;
    procedure ShowSolidBody; safecall;
    procedure InsertFramePoint(xx: Double; yy: Double; zz: Double); safecall;
    procedure LockFramePoint; safecall;
    procedure UnlockFramePoint; safecall;
    function InsertGtol: IDispatch; safecall;
    function IInsertGtol: IGtol; safecall;
    function DeActivateFeatureMgrView(var appView: Integer): WordBool; safecall;
    function InsertNote(const text: WideString): IDispatch; safecall;
    function IInsertNote(const text: WideString): INote; safecall;
    procedure SetSaveAsFileName(const fileName: WideString); safecall;
    procedure ClosePrintPreview; safecall;
    procedure HideComponent2; safecall;
    procedure ShowComponent2; safecall;
    function SaveBMP(const filenameIn: WideString; widthIn: Integer; heightIn: Integer): WordBool; safecall;
    procedure InsertSketch2(updateEditRebuild: WordBool); safecall;
    procedure Insert3DSketch2(updateEditRebuild: WordBool); safecall;
    procedure InsertDeleteHole; safecall;
    procedure PreTrimSurface(bMutualTrimIn: WordBool); safecall;
    procedure PostTrimSurface(bSewSurfaceIn: WordBool); safecall;
    procedure SketchConvertIsoCurves(percentRatio: Double; vORuDir: WordBool; 
                                     doConstrain: WordBool; skipHoles: WordBool); safecall;
    procedure SelectLoop; safecall;
    procedure InsertSheetMetalBaseFlange(thickness: Double; thickenDir: WordBool; radius: Double; 
                                         extrudeDist1: Double; extrudeDist2: Double; 
                                         flipExtruDir: WordBool; endCondition1: Integer; 
                                         endCondition2: Integer; dirToUse: Integer); safecall;
    procedure InsertSheetMetalFold; safecall;
    procedure InsertSheetMetalUnfold; safecall;
    procedure InsertSheetMetalMiterFlange(useReliefRatio: WordBool; useDefaultGap: WordBool; 
                                          useAutoRelief: WordBool; globalRadius: Double; 
                                          ripGap: Double; autoReliefRatio: Double; 
                                          autoReliefWidth: Double; autoReliefDepth: Double; 
                                          reliefType: Integer; ripLocation: Integer; 
                                          trimSideBends: WordBool); safecall;
    procedure CreateGroup; safecall;
    procedure RemoveItemsFromGroup; safecall;
    procedure RemoveGroups; safecall;
    function InsertBOMBalloon2(Style: Integer; size: Integer; upperTextStyle: Integer; 
                               const upperText: WideString; lowerTextStyle: Integer; 
                               const lowerText: WideString): IDispatch; safecall;
    function IInsertBOMBalloon2(Style: Integer; size: Integer; upperTextStyle: Integer; 
                                const upperText: WideString; lowerTextStyle: Integer; 
                                const lowerText: WideString): INote; safecall;
    procedure EditRedo(nSteps: LongWord); safecall;
    procedure InsertProtrusionBlend4(closed: WordBool; keepTangency: WordBool; 
                                     forceNonRational: WordBool; tessToleranceFactor: Double; 
                                     startMatchingType: Smallint; endMatchingType: Smallint; 
                                     isThinBody: WordBool; thickness1: Double; thickness2: Double; 
                                     thinType: Smallint); safecall;
    procedure InsertCutBlend4(closed: WordBool; keepTangency: WordBool; forceNonRational: WordBool; 
                              tessToleranceFactor: Double; startMatchingType: Smallint; 
                              endMatchingType: Smallint; isThinBody: WordBool; thickness1: Double; 
                              thickness2: Double; thinType: Smallint); safecall;
    procedure InsertProtrusionSwept4(propagate: WordBool; alignment: WordBool; 
                                     twistCtrlOption: Smallint; keepTangency: WordBool; 
                                     forceNonRational: WordBool; startMatchingType: Smallint; 
                                     endMatchingType: Smallint; isThinBody: WordBool; 
                                     thickness1: Double; thickness2: Double; thinType: Smallint); safecall;
    procedure InsertCutSwept4(propagate: WordBool; alignment: WordBool; twistCtrlOption: Smallint; 
                              keepTangency: WordBool; forceNonRational: WordBool; 
                              startMatchingType: Smallint; endMatchingType: Smallint; 
                              isThinBody: WordBool; thickness1: Double; thickness2: Double; 
                              thinType: Smallint); safecall;
    procedure SelectTangency; safecall;
    function InsertBendTableOpen(const fileName: WideString): WordBool; safecall;
    function InsertBendTableNew(const fileName: WideString; const units: WideString; 
                                const type_: WideString): WordBool; safecall;
    procedure InsertBendTableEdit; safecall;
    procedure DeleteBendTable; safecall;
    procedure InsertSheetMetal3dBend(angle: Double; radius: Double; flipDir: WordBool; 
                                     bendPos: Smallint); safecall;
    function CreateTangentArc2(p1x: Double; p1y: Double; p1z: Double; p2x: Double; p2y: Double; 
                               p2z: Double; arcTypeIn: Integer): WordBool; safecall;
    function GetMassProperties2(var status: Integer): OleVariant; safecall;
    function IGetMassProperties2(var status: Integer): Double; safecall;
    procedure SketchChamfer(angleORdist: Double; dist1: Double; options: Integer); safecall;
    procedure FeatureCut4(sd: WordBool; flip: WordBool; dir: WordBool; t1: Integer; t2: Integer; 
                          d1: Double; d2: Double; dchk1: WordBool; dchk2: WordBool; 
                          ddir1: WordBool; ddir2: WordBool; dang1: Double; dang2: Double; 
                          offsetReverse1: WordBool; offsetReverse2: WordBool; 
                          keepPieceIndex: Integer; normalCut: WordBool); safecall;
    function GetPropertyManagerPage(dialogId: Integer; const title: WideString; 
                                    const handler: IUnknown): IPropertyManagerPage; safecall;
    procedure AlignOrdinate; safecall;
    procedure EditOrdinate; safecall;
    function ReattachOrdinate: WordBool; safecall;
    function EditBalloonProperties(Style: Integer; size: Integer; upperTextStyle: Integer; 
                                   const upperText: WideString; lowerTextStyle: Integer; 
                                   const lowerText: WideString): IDispatch; safecall;
    function EditDimensionProperties2(tolType: Integer; tolMax: Double; tolMin: Double; 
                                      const tolMaxFit: WideString; const tolMinFit: WideString; 
                                      useDocPrec: WordBool; precision: Integer; arrowsIn: Integer; 
                                      useDocArrows: WordBool; arrow1: Integer; arrow2: Integer; 
                                      const prefixText: WideString; const suffixText: WideString; 
                                      showValue: WordBool; const calloutText1: WideString; 
                                      const calloutText2: WideString; centerText: WordBool): WordBool; safecall;
    procedure InsertSheetMetalClosedCorner; safecall;
    function SketchUseEdge2(chain: WordBool): WordBool; safecall;
    function SketchOffsetEntities2(offset: Double; bothDirections: WordBool; chain: WordBool): WordBool; safecall;
    function SketchOffset2(offset: Double; bothDirections: WordBool; chain: WordBool): WordBool; safecall;
    function AddDimension2(x: Double; y: Double; z: Double): IDispatch; safecall;
    function IAddDimension2(x: Double; y: Double; z: Double): IDisplayDimension; safecall;
    function AddHorizontalDimension2(x: Double; y: Double; z: Double): IDispatch; safecall;
    function IAddHorizontalDimension2(x: Double; y: Double; z: Double): IDisplayDimension; safecall;
    function AddVerticalDimension2(x: Double; y: Double; z: Double): IDispatch; safecall;
    function IAddVerticalDimension2(x: Double; y: Double; z: Double): IDisplayDimension; safecall;
    function AddRadialDimension2(x: Double; y: Double; z: Double): IDispatch; safecall;
    function IAddRadialDimension2(x: Double; y: Double; z: Double): IDisplayDimension; safecall;
    function AddDiameterDimension2(x: Double; y: Double; z: Double): IDispatch; safecall;
    function IAddDiameterDimension2(x: Double; y: Double; z: Double): IDisplayDimension; safecall;
    function GetUserUnit(UnitType: Integer): IDispatch; safecall;
    function IGetUserUnit(UnitType: Integer): IUserUnit; safecall;
    function InsertWeldSymbol3: IDispatch; safecall;
    function IInsertWeldSymbol3: IWeldSymbol; safecall;
    function SaveAs3(const newName: WideString; saveAsVersion: Integer; options: Integer): Integer; safecall;
    function GetUserPreferenceStringValue(userPreference: Integer): WideString; safecall;
    function SetUserPreferenceStringValue(userPreference: Integer; const Value: WideString): WordBool; safecall;
    procedure DeleteDesignTable; safecall;
    function EditRebuild3: WordBool; safecall;
    function ForceRebuild3(topOnly: WordBool): WordBool; safecall;
    function FeatureFillet5(options: Integer; r1: Double; ftyp: Integer; overFlowType: Integer; 
                            radii: OleVariant; setBackDistances: OleVariant; 
                            pointRadiusArray: OleVariant): Integer; safecall;
    function IFeatureFillet5(options: Integer; r1: Double; ftyp: Integer; overFlowType: Integer; 
                             nRadii: Integer; var radii: Double; setbackDistCount: Integer; 
                             var setBackDistances: Double; PointCount: Integer; 
                             var pointRadiusArray: Double): Integer; safecall;
    procedure InsertSheetMetalBreakCorner(type_: Integer; distance: Double); safecall;
    procedure InsertSheetMetalHem(type_: Integer; position: Integer; reverse: WordBool; 
                                  dLength: Double; dGap: Double; dRad: Double; dAngle: Double; 
                                  dMiterGap: Double); safecall;
    function CreatePlaneAtOffset3(val: Double; flipDir: WordBool; autoSize: WordBool): IDispatch; safecall;
    function ICreatePlaneAtOffset3(val: Double; flipDir: WordBool; autoSize: WordBool): IRefPlane; safecall;
    function CreatePlaneAtAngle3(val: Double; flipDir: WordBool; autoSize: WordBool): IDispatch; safecall;
    function ICreatePlaneAtAngle3(val: Double; flipDir: WordBool; autoSize: WordBool): IRefPlane; safecall;
    function CreatePlaneThru3Points3(autoSize: WordBool): IDispatch; safecall;
    function ICreatePlaneThru3Points3(autoSize: WordBool): IRefPlane; safecall;
    function CreatePlaneThruPtParallelToPlane(autoSize: WordBool): IDispatch; safecall;
    function ICreatePlaneThruPtParallelToPlane(autoSize: WordBool): IRefPlane; safecall;
    function CreatePlaneThruLineAndPt(autoSize: WordBool): IDispatch; safecall;
    function ICreatePlaneThruLineAndPt(autoSize: WordBool): IRefPlane; safecall;
    function CreatePlanePerCurveAndPassPoint3(origAtCurve: WordBool; autoSize: WordBool): IDispatch; safecall;
    function ICreatePlanePerCurveAndPassPoint3(origAtCurve: WordBool; autoSize: WordBool): IRefPlane; safecall;
    function CreatePlaneAtSurface3(interIndex: Smallint; projOpt: WordBool; reverseDir: WordBool; 
                                   normalPlane: WordBool; angle: Double; autoSize: WordBool): IDispatch; safecall;
    function ICreatePlaneAtSurface3(interIndex: Smallint; projOpt: WordBool; reverseDir: WordBool; 
                                    normalPlane: WordBool; angle: Double; autoSize: WordBool): IRefPlane; safecall;
    function InsertAxis2(autoSize: WordBool): WordBool; safecall;
    function InsertSketchPicture(const fileName: WideString): WordBool; safecall;
    procedure GetZebraStripeData(var size: Double; var ratio: Double; var color1: Integer; 
                                 var color2: Integer); safecall;
    procedure SetZebraStripeData(size: Double; ratio: Double; color1: Integer; color2: Integer); safecall;
    procedure InsertSketchPictureData(width: Smallint; height: Smallint; pDataIn: Integer); safecall;
    procedure FeatureCurvePattern(num1: Integer; spacing1: Double; num2: Integer; spacing2: Double; 
                                  flipDir1: WordBool; flipDir2: WordBool; equalSpacing1: WordBool; 
                                  equalSpacing2: WordBool; useCentroid: WordBool; 
                                  alignToSeed: WordBool; offsetCurve: WordBool; 
                                  patternSeedOnly: WordBool); safecall;
    procedure InsertFeatureReplaceFace; safecall;
    procedure InsertRip(gap: Double); safecall;
    function InsertSheetMetalEdgeFlange(const flangeEdge: IDispatch; const sketchFeat: IDispatch; 
                                        booleanOptions: Integer; dAngle: Double; dRadius: Double; 
                                        bendPosition: Integer; dOffsetDist: Double; 
                                        reliefType: Integer; dReliefRatio: Double; 
                                        dReliefWidth: Double; dReliefDepth: Double): IDispatch; safecall;
    function IInsertSheetMetalEdgeFlange(const flangeEdge: IEdge; const sketchFeat: IFeature; 
                                         booleanOptions: Integer; dAngle: Double; dRadius: Double; 
                                         bendPosition: Integer; dOffsetDist: Double; 
                                         reliefType: Integer; dReliefRatio: Double; 
                                         dReliefWidth: Double; dReliefDepth: Double): IFeature; safecall;
    function InsertSketchText(Ptx: Double; Pty: Double; Ptz: Double; const text: WideString; 
                              alignment: Integer; flipDirection: Integer; 
                              horizontalMirror: Integer; WidthFactor: Integer; 
                              spaceBetweenChars: Integer): IDispatch; safecall;
    function IInsertSketchText(Ptx: Double; Pty: Double; Ptz: Double; const text: WideString; 
                               alignment: Integer; flipDirection: Integer; 
                               horizontalMirror: Integer; WidthFactor: Integer; 
                               spaceBetweenChars: Integer): ISketchText; safecall;
    procedure DissolveSketchText; safecall;
    procedure MoldDraftAnalysis(angle: Double; options: Integer; colors: OleVariant; shows: Integer); safecall;
    procedure InsertSheetMetalJog(angle: Double; radius: Double; offsetDist: Double; 
                                  flipDir: WordBool; fixProjLen: WordBool; dimPos: Smallint; 
                                  bendPos: Smallint); safecall;
    function InsertSketchForEdgeFlange(const flangeEdge: IDispatch; dAngle: Double; 
                                       flipDir: WordBool): IDispatch; safecall;
    function IInsertSketchForEdgeFlange(const flangeEdge: IEdge; dAngle: Double; flipDir: WordBool): IFeature; safecall;
    procedure ClearSelection2(All: WordBool); safecall;
    procedure ListExternalFileReferences2(out modelPathName: OleVariant; 
                                          out componentPathName: OleVariant; 
                                          out feature: OleVariant; out dataType: OleVariant; 
                                          out status: OleVariant; out refEntity: OleVariant; 
                                          out featCom: OleVariant); safecall;
    function ListExternalFileReferencesCount2: Integer; safecall;
    procedure IListExternalFileReferences2(numRefs: Integer; out modelPathName: WideString; 
                                           out compPathName: WideString; out feature: WideString; 
                                           out dataType: WideString; out status: Integer; 
                                           out refEntity: WideString; out featComp: WideString); safecall;
    function InsertDeleteFace2(refill: Integer): WordBool; safecall;
    procedure AddLoftSection; safecall;
    function InsertMacroFeature(const cmdFile: WideString; const cmdModule: WideString; 
                                const cmdProcedure: WideString; paramNames: OleVariant; 
                                paramTypes: OleVariant; paramValues: OleVariant; 
                                const pmFile: WideString; const pmModule: WideString; 
                                const pmProcedure: WideString): IDispatch; safecall;
    function IInsertMacroFeature(const cmdFile: WideString; const cmdModule: WideString; 
                                 const cmdProcedure: WideString; paramCount: Integer; 
                                 var paramNames: WideString; var paramTypes: Integer; 
                                 var paramValues: WideString; const pmFile: WideString; 
                                 const pmModule: WideString; const pmProcedure: WideString): IFeature; safecall;
    procedure ListAuxiliaryExternalFileReferences(out feature: OleVariant; 
                                                  out externalFileName: OleVariant); safecall;
    function ListAuxiliaryExternalFileReferencesCount: Integer; safecall;
    procedure IListAuxiliaryExternalFileReferences(numRefs: Integer; out feature: WideString; 
                                                   out externalFileName: WideString); safecall;
    procedure FeatureCut5(sd: WordBool; flip: WordBool; dir: WordBool; t1: Integer; t2: Integer; 
                          d1: Double; d2: Double; dchk1: WordBool; dchk2: WordBool; 
                          ddir1: WordBool; ddir2: WordBool; dang1: Double; dang2: Double; 
                          offsetReverse1: WordBool; offsetReverse2: WordBool; 
                          translateSurface1: WordBool; translateSurface2: WordBool; 
                          keepPieceIndex: Integer; normalCut: WordBool); safecall;
    procedure FeatureBoss2(sd: WordBool; flip: WordBool; dir: WordBool; t1: Integer; t2: Integer; 
                           d1: Double; d2: Double; dchk1: WordBool; dchk2: WordBool; 
                           ddir1: WordBool; ddir2: WordBool; dang1: Double; dang2: Double; 
                           offsetReverse1: WordBool; offsetReverse2: WordBool; 
                           translateSurface1: WordBool; translateSurface2: WordBool); safecall;
    function DissolveLibraryFeature: WordBool; safecall;
    procedure FeatureExtruRefSurface2(sd: WordBool; flip: WordBool; dir: WordBool; t1: Integer; 
                                      t2: Integer; d1: Double; d2: Double; dchk1: WordBool; 
                                      dchk2: WordBool; ddir1: WordBool; ddir2: WordBool; 
                                      dang1: Double; dang2: Double; offsetReverse1: WordBool; 
                                      offsetReverse2: WordBool; translateSurface1: WordBool; 
                                      translateSurface2: WordBool); safecall;
    procedure FeatureCutThin2(sd: WordBool; flip: WordBool; dir: WordBool; t1: Integer; 
                              t2: Integer; d1: Double; d2: Double; dchk1: WordBool; 
                              dchk2: WordBool; ddir1: WordBool; ddir2: WordBool; dang1: Double; 
                              dang2: Double; offsetReverse1: WordBool; offsetReverse2: WordBool; 
                              translateSurface1: WordBool; translateSurface2: WordBool; 
                              thk1: Double; thk2: Double; endThk: Double; revThinDir: Integer; 
                              capEnds: Integer; addBends: WordBool; bendRad: Double); safecall;
    procedure FeatureBossThin2(sd: WordBool; flip: WordBool; dir: WordBool; t1: Integer; 
                               t2: Integer; d1: Double; d2: Double; dchk1: WordBool; 
                               dchk2: WordBool; ddir1: WordBool; ddir2: WordBool; dang1: Double; 
                               dang2: Double; offsetReverse1: WordBool; offsetReverse2: WordBool; 
                               translateSurface1: WordBool; translateSurface2: WordBool; 
                               thk1: Double; thk2: Double; endThk: Double; revThinDir: Integer; 
                               capEnds: Integer; addBends: WordBool; bendRad: Double); safecall;
    procedure SimpleHole3(dia: Double; sd: WordBool; flip: WordBool; dir: WordBool; t1: Integer; 
                          t2: Integer; d1: Double; d2: Double; dchk1: WordBool; dchk2: WordBool; 
                          ddir1: WordBool; ddir2: WordBool; dang1: Double; dang2: Double; 
                          offsetReverse1: WordBool; offsetReverse2: WordBool; 
                          translateSurface1: WordBool; translateSurface2: WordBool); safecall;
    procedure EditUndo2(Steps: Integer); safecall;
    procedure EditRedo2(Steps: Integer); safecall;
    function AddConfiguration3(const Name: WideString; const comment: WideString; 
                               const alternateName: WideString; options: Integer): IDispatch; safecall;
    function IAddConfiguration3(const Name: WideString; const comment: WideString; 
                                const alternateName: WideString; options: Integer): IConfiguration; safecall;
    function EditConfiguration3(const Name: WideString; const newName: WideString; 
                                const comment: WideString; const alternateName: WideString; 
                                options: Integer): WordBool; safecall;
    function GetEquationMgr: IEquationMgr; safecall;
    function ClosestDistance(const object1: IDispatch; const object2: IDispatch; 
                             out point1: OleVariant; out point2: OleVariant): Double; safecall;
    function IClosestDistance(const object1: IDispatch; const object2: IDispatch; 
                              out point1: Double; out point2: Double): Double; safecall;
    function ReloadOrReplace(ReadOnly: WordBool; const ReplaceFileName: WideString; 
                             DiscardChanges: WordBool): Integer; safecall;
    function Get_FeatureManagerSplitterPosition: Double; safecall;
    procedure Set_FeatureManagerSplitterPosition(SplitterPosition: Double); safecall;
    function GetCustomInfoValue(const configuration: WideString; const FieldName: WideString): WideString; safecall;
    function Get_printer: WideString; safecall;
    procedure Set_printer(const Name: WideString); safecall;
    function Get_PageSetup: IDispatch; safecall;
    function Get_IPageSetup: IPageSetup; safecall;
    function InsertStackedBalloon(Style: Integer; size: Integer; upperTextStyle: Integer; 
                                  const upperText: WideString; lowerTextStyle: Integer; 
                                  const lowerText: WideString): INote; safecall;
    function SaveAs4(const Name: WideString; Version: Integer; options: Integer; 
                     var Errors: Integer; var Warnings: Integer): WordBool; safecall;
    function Save3(options: Integer; var Errors: Integer; var Warnings: Integer): WordBool; safecall;
    function CreatePlaneFixed2(P1: OleVariant; P2: OleVariant; P3: OleVariant; useGlobal: WordBool): IDispatch; safecall;
    function ICreatePlaneFixed2(var P1: Double; var P2: Double; var P3: Double; useGlobal: WordBool): IRefPlane; safecall;
    function Get_LargeAssemblyMode: WordBool; safecall;
    procedure Set_LargeAssemblyMode(Large: WordBool); safecall;
    function AddOrEditConfiguration(const configName: WideString; params: OleVariant; 
                                    values: OleVariant): Integer; safecall;
    function IAddOrEditConfiguration(const configName: WideString; paramCount: Integer; 
                                     var paramNames: WideString; var paramValues: WideString): Integer; safecall;
    function ForceReleaseLocks: Integer; safecall;
    function Get_FeatureManager: IFeatureManager; safecall;
    function Get_ModelViewManager: IModelViewManager; safecall;
    function Get_Extension: IModelDocExtension; safecall;
    function Get_ConfigurationManager: IConfigurationManager; safecall;
    property SelectionManager: IDispatch read Get_SelectionManager write Set_SelectionManager;
    property ISelectionManager: ISelectionMgr read Get_ISelectionManager;
    property ActiveView: IDispatch read Get_ActiveView write Set_ActiveView;
    property IActiveView: IModelView read Get_IActiveView;
    property LengthUnit: Integer read Get_LengthUnit write Set_LengthUnit;
    property LightSourceUserName[id: Integer]: WideString read Get_LightSourceUserName write Set_LightSourceUserName;
    property LightSourcePropertyValues[id: Integer]: OleVariant read Get_LightSourcePropertyValues write Set_LightSourcePropertyValues;
    property SceneName: WideString read Get_SceneName write Set_SceneName;
    property SceneUserName: WideString read Get_SceneUserName write Set_SceneUserName;
    property Visible: WordBool read Get_Visible write Set_Visible;
    property MaterialUserName: WideString read Get_MaterialUserName write Set_MaterialUserName;
    property MaterialIdName: WideString read Get_MaterialIdName write Set_MaterialIdName;
    property MaterialPropertyValues: OleVariant read Get_MaterialPropertyValues write Set_MaterialPropertyValues;
    property PrintSetup[setupType: Integer]: Smallint read Get_PrintSetup write Set_PrintSetup;
    property SceneBkgImageFileName: WideString read Get_SceneBkgImageFileName write Set_SceneBkgImageFileName;
    property SummaryInfo[FieldId: Integer]: WideString read Get_SummaryInfo write Set_SummaryInfo;
    property CustomInfo[const FieldName: WideString]: WideString read Get_CustomInfo write Set_CustomInfo;
    property CustomInfo2[const configuration: WideString; const FieldName: WideString]: WideString read Get_CustomInfo2 write Set_CustomInfo2;
    property ShowFeatureErrorDialog: WordBool read Get_ShowFeatureErrorDialog write Set_ShowFeatureErrorDialog;
    property FeatureManagerSplitterPosition: Double read Get_FeatureManagerSplitterPosition write Set_FeatureManagerSplitterPosition;
    property printer: WideString read Get_printer write Set_printer;
    property PageSetup: IDispatch read Get_PageSetup;
    property IPageSetup: IPageSetup read Get_IPageSetup;
    property LargeAssemblyMode: WordBool read Get_LargeAssemblyMode write Set_LargeAssemblyMode;
    property FeatureManager: IFeatureManager read Get_FeatureManager;
    property ModelViewManager: IModelViewManager read Get_ModelViewManager;
    property Extension: IModelDocExtension read Get_Extension;
    property ConfigurationManager: IConfigurationManager read Get_ConfigurationManager;
  end;

// *********************************************************************//
// DispIntf:  IModelDoc2Disp
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {B90793FB-EF3D-4B80-A5C4-99959CDB6CEB}
// *********************************************************************//
  IModelDoc2Disp = dispinterface
    ['{B90793FB-EF3D-4B80-A5C4-99959CDB6CEB}']
    property SelectionManager: IDispatch dispid 65537;
    property ISelectionManager: ISelectionMgr readonly dispid 65711;
    property ActiveView: IDispatch dispid 65538;
    property IActiveView: IModelView readonly dispid 65712;
    property LengthUnit: Integer dispid 65539;
    property LightSourceUserName[id: Integer]: WideString dispid 65716;
    property LightSourcePropertyValues[id: Integer]: OleVariant dispid 65717;
    property SceneName: WideString dispid 65718;
    property SceneUserName: WideString dispid 65719;
    procedure FeatureFillet(r1: Double; propagate: WordBool; ftyp: WordBool; varRadTyp: WordBool; 
                            overFlowType: Integer); dispid 65540;
    procedure GridOptions(dispGrid: WordBool; gridSpacing: Double; snap: WordBool; 
                          dotStyle: WordBool; nMajor: Smallint; nMinor: Smallint; 
                          align2edge: WordBool; angleSnap: WordBool; angleUnit: Double; 
                          minorAuto: WordBool); dispid 65541;
    procedure SetUnits(uType: Smallint; fractBase: Smallint; fractDenom: Smallint; 
                       sigDigits: Smallint; roundToFraction: WordBool); dispid 65542;
    procedure LBDownAt(flags: Integer; x: Double; y: Double; z: Double); dispid 65543;
    procedure LBUpAt(flags: Integer; x: Double; y: Double; z: Double); dispid 65544;
    procedure DragTo(flags: Integer; x: Double; y: Double; z: Double); dispid 65545;
    procedure SelectAt(flags: Integer; x: Double; y: Double; z: Double); dispid 65546;
    procedure CreateLineVB(x1: Double; y1: Double; z1: Double; x2: Double; y2: Double; z2: Double); dispid 65547;
    function CreateLine(P1: OleVariant; P2: OleVariant): WordBool; dispid 65548;
    procedure CreateCenterLineVB(x1: Double; y1: Double; z1: Double; x2: Double; y2: Double; 
                                 z2: Double); dispid 65549;
    function CreateCenterLine(P1: OleVariant; P2: OleVariant): WordBool; dispid 65550;
    procedure CreateArcVB(p1x: Double; p1y: Double; p1z: Double; p2x: Double; p2y: Double; 
                          p2z: Double; p3x: Double; p3y: Double; p3z: Double; dir: Smallint); dispid 65551;
    function CreateArc(P1: OleVariant; P2: OleVariant; P3: OleVariant; dir: Smallint): WordBool; dispid 65552;
    procedure CreateCircleVB(p1x: Double; p1y: Double; p1z: Double; radius: Double); dispid 65553;
    function CreateCircleByRadius(P1: OleVariant; radius: Double): WordBool; dispid 65554;
    function GetLines: OleVariant; dispid 65555;
    procedure SketchTrim(op: Integer; selEnd: Integer; x: Double; y: Double); dispid 65556;
    procedure SketchOffsetEdges(val: Double); dispid 65557;
    procedure SketchRectangle(val1: Double; val2: Double; z1: Double; val3: Double; val4: Double; 
                              z2: Double; val5: WordBool); dispid 65558;
    procedure SketchPoint(x: Double; y: Double; z: Double); dispid 65559;
    procedure FeatureCut(sd: WordBool; flip: WordBool; dir: WordBool; t1: Integer; t2: Integer; 
                         d1: Double; d2: Double; dchk1: WordBool; dchk2: WordBool; ddir1: WordBool; 
                         ddir2: WordBool; dang1: Double; dang2: Double; offsetReverse1: WordBool; 
                         offsetReverse2: WordBool); dispid 65560;
    procedure FeatureBoss(sd: WordBool; flip: WordBool; dir: WordBool; t1: Integer; t2: Integer; 
                          d1: Double; d2: Double; dchk1: WordBool; dchk2: WordBool; 
                          ddir1: WordBool; ddir2: WordBool; dang1: Double; dang2: Double; 
                          offsetReverse1: WordBool; offsetReverse2: WordBool); dispid 65561;
    procedure SimpleHole(sd: WordBool; flip: WordBool; dir: WordBool; t1: Integer; t2: Integer; 
                         d1: Double; d2: Double; dchk1: WordBool; dchk2: WordBool; ddir1: WordBool; 
                         ddir2: WordBool; dang1: Double; dang2: Double; offsetReverse1: WordBool; 
                         offsetReverse2: WordBool); dispid 65562;
    procedure FeatureLinearPattern(num1: Integer; spacing1: Double; num2: Integer; 
                                   spacing2: Double; flipDir1: WordBool; flipDir2: WordBool; 
                                   const dName1: WideString; const dName2: WideString); dispid 65563;
    procedure NameView(const vName: WideString); dispid 65564;
    procedure ShowNamedView(const vName: WideString); dispid 65565;
    procedure CreatePlaneAtOffset(val: Double; flipDir: WordBool); dispid 65566;
    procedure Toolbars(m: WordBool; vw: WordBool; skMain: WordBool; sk: WordBool; feat: WordBool; 
                       constr: WordBool; macro: WordBool); dispid 65567;
    procedure CreatePlaneAtAngle(val: Double; flipDir: WordBool); dispid 65568;
    procedure SetParamValue(val: Double); dispid 65569;
    procedure AddRelation(const relStr: WideString); dispid 65570;
    procedure DeleteAllRelations; dispid 65571;
    procedure HoleWizard(depth: Double; endType: Smallint; flip: WordBool; dir: WordBool; 
                         hType: Integer; d1: Double; d2: Double; d3: Double; d4: Double; 
                         d5: Double; d6: Double; d7: Double; d8: Double; d9: Double; d10: Double; 
                         d11: Double; d12: Double); dispid 65572;
    function SaveAs(const newName: WideString): WordBool; dispid 65573;
    procedure ActivateSelectedFeature; dispid 65574;
    procedure SelectByName(flags: Integer; const idStr: WideString); dispid 65575;
    procedure SketchAddConstraints(const idStr: WideString); dispid 65576;
    procedure SketchConstraintsDel(constrInd: Integer; const idStr: WideString); dispid 65577;
    procedure SketchConstraintsDelAll; dispid 65578;
    procedure Lock; dispid 65579;
    procedure UnLock; dispid 65580;
    procedure InsertFeatureShell(thickness: Double; outward: WordBool); dispid 65581;
    procedure SketchFillet(rad: Double); dispid 65582;
    procedure FeatureChamfer(width: Double; angle: Double; flip: WordBool); dispid 65583;
    procedure InsertMfDraft(angle: Double; flipDir: WordBool; isEdgeDraft: WordBool; 
                            propType: Integer); dispid 65584;
    procedure ParentChildRelationship; dispid 65585;
    procedure SketchSpline(morePts: Integer; x: Double; y: Double; z: Double); dispid 65586;
    procedure SelectSketchPoint(x: Double; y: Double; incidence: Integer); dispid 65587;
    procedure SelectSketchLine(x0: Double; y0: Double; inc0: Integer; x1: Double; y1: Double; 
                               inc1: Integer); dispid 65588;
    procedure SelectSketchArc(x0: Double; y0: Double; inc0: Integer; x1: Double; y1: Double; 
                              inc1: Integer; xC: Double; yC: Double; incC: Integer; rotDir: Integer); dispid 65589;
    procedure SelectSketchSpline(size: Integer; x0: Double; y0: Double; inc0: Integer; x1: Double; 
                                 y1: Double; inc1: Integer; xC: Double; yC: Double; incC: Integer); dispid 65590;
    function CreateTangentArc(p1x: Double; p1y: Double; p1z: Double; p2x: Double; p2y: Double; 
                              p2z: Double): WordBool; dispid 65591;
    function Create3PointArc(p1x: Double; p1y: Double; p1z: Double; p2x: Double; p2y: Double; 
                             p2z: Double; p3x: Double; p3y: Double; p3z: Double): WordBool; dispid 65592;
    function CreateArcByCenter(p1x: Double; p1y: Double; p1z: Double; p2x: Double; p2y: Double; 
                               p2z: Double; p3x: Double; p3y: Double; p3z: Double): WordBool; dispid 65593;
    function CreateCircle(p1x: Double; p1y: Double; p1z: Double; p2x: Double; p2y: Double; 
                          p2z: Double): WordBool; dispid 65594;
    function AddDimension(x: Double; y: Double; z: Double): WordBool; dispid 65595;
    function AddHorizontalDimension(x: Double; y: Double; z: Double): WordBool; dispid 65596;
    function AddVerticalDimension(x: Double; y: Double; z: Double): WordBool; dispid 65597;
    function SelectSketchItem(selOpt: Integer; const Name: WideString; x: Double; y: Double; 
                              z: Double): WordBool; dispid 65598;
    procedure ClearSelection; dispid 65599;
    procedure Select(const selID: WideString; const selParams: WideString; x: Double; y: Double; 
                     z: Double); dispid 65600;
    procedure AndSelect(const selID: WideString; const selParams: WideString; x: Double; y: Double; 
                        z: Double); dispid 65601;
    function CreatePoint(pointX: Double; pointY: Double; pointZ: Double): WordBool; dispid 65602;
    function CreateLineDB(sx: Double; sy: Double; sz: Double; ex: Double; ey: Double; ez: Double): WordBool; dispid 65603;
    function CreateArcDB(x1: Double; y1: Double; z1: Double; x2: Double; y2: Double; z2: Double; 
                         x3: Double; y3: Double; z3: Double; dir: Smallint): WordBool; dispid 65604;
    function CreateCircleDB(cx: Double; cy: Double; cz: Double; radius: Double): WordBool; dispid 65605;
    function CreatePointDB(x: Double; y: Double; z: Double): WordBool; dispid 65606;
    function GetTitle: WideString; dispid 65607;
    function GetPathName: WideString; dispid 65608;
    function GetType: Integer; dispid 65609;
    procedure InsertObject; dispid 65610;
    procedure EditClearAll; dispid 65611;
    procedure EditCopy; dispid 65612;
    procedure EditCut; dispid 65613;
    procedure ObjectDisplayContent; dispid 65614;
    procedure ObjectDisplayAsIcon; dispid 65615;
    procedure ObjectResetsize; dispid 65616;
    procedure WindowRedraw; dispid 65617;
    procedure Dummy3; dispid 65618;
    procedure SetPickMode; dispid 65619;
    procedure ViewRotateminusx; dispid 65620;
    procedure ViewRotateminusy; dispid 65621;
    procedure ViewRotateminusz; dispid 65622;
    procedure ViewRotateplusx; dispid 65623;
    procedure ViewRotateplusy; dispid 65624;
    procedure ViewRotateplusz; dispid 65625;
    procedure ViewTranslateminusx; dispid 65626;
    procedure ViewTranslateminusy; dispid 65627;
    procedure ViewTranslateplusx; dispid 65628;
    procedure ViewTranslateplusy; dispid 65629;
    procedure ViewRotXMinusNinety; dispid 65630;
    procedure ViewRotYMinusNinety; dispid 65631;
    procedure ViewRotYPlusNinety; dispid 65632;
    procedure ViewZoomin; dispid 65633;
    procedure ViewZoomout; dispid 65634;
    procedure ViewDisplayHiddenremoved; dispid 65635;
    procedure ViewDisplayWireframe; dispid 65636;
    procedure ViewDisplayShaded; dispid 65637;
    procedure ViewRwShading; dispid 65638;
    procedure ViewOglShading; dispid 65639;
    procedure ViewZoomtofit; dispid 65640;
    procedure ViewRotate; dispid 65641;
    procedure ViewTranslate; dispid 65642;
    procedure ViewZoomto; dispid 65643;
    procedure ViewDisplayHiddengreyed; dispid 65644;
    procedure ViewDisplayFaceted; dispid 65645;
    procedure ViewConstraint; dispid 65646;
    procedure UserFavors; dispid 65647;
    procedure FeatureCirPattern(num: Integer; spacing: Double; flipDir: WordBool; 
                                const dName: WideString); dispid 65648;
    procedure EditSketch; dispid 65649;
    procedure FeatEdit; dispid 65650;
    procedure FeatEditDef; dispid 65651;
    procedure InsertPoint; dispid 65652;
    procedure InsertFamilyTableNew; dispid 65653;
    procedure Dummy1; dispid 65654;
    procedure InsertFamilyTableEdit; dispid 65655;
    procedure Dummy2; dispid 65656;
    procedure ToolsMacro; dispid 65657;
    procedure ToolsGrid; dispid 65658;
    procedure SketchCenterline; dispid 65659;
    procedure SketchAlign; dispid 65660;
    procedure SketchArc; dispid 65661;
    procedure SketchTangentArc; dispid 65662;
    procedure SketchCircle; dispid 65663;
    procedure SketchUndo; dispid 65664;
    procedure UserPreferences; dispid 65665;
    procedure Lights; dispid 65666;
    procedure SketchConstrainCoincident; dispid 65667;
    procedure SketchConstrainConcentric; dispid 65668;
    procedure SketchConstrainPerp; dispid 65669;
    procedure SketchConstrainTangent; dispid 65670;
    procedure SketchConstrainParallel; dispid 65671;
    procedure SketchUseEdge; dispid 65672;
    procedure SketchUseEdgeCtrline; dispid 65673;
    procedure SketchMirror; dispid 65674;
    procedure Save; dispid 65675;
    procedure Close; dispid 65676;
    procedure ViewDispRefaxes; dispid 65677;
    procedure ViewDispRefplanes; dispid 65678;
    procedure InsertSketch; dispid 65679;
    procedure InsertProtrusionSwept(propagate: WordBool; alignment: WordBool; 
                                    keepNormalConstant: WordBool); dispid 65680;
    procedure InsertProtrusionBlend(closed: WordBool); dispid 65681;
    procedure ToolsMassProps; dispid 65682;
    procedure PropertySheet; dispid 65683;
    procedure BlankRefGeom; dispid 65684;
    procedure UnBlankRefGeom; dispid 65685;
    procedure EditDelete; dispid 65686;
    procedure InsertProjectedSketch; dispid 65687;
    function CreatePlaneFixed(P1: OleVariant; P2: OleVariant; P3: OleVariant; useGlobal: WordBool): WordBool; dispid 65688;
    procedure Dummy5; dispid 65689;
    procedure Dummy6; dispid 65690;
    procedure DebugCheckBody; dispid 65691;
    procedure Dummy8; dispid 65692;
    procedure DimPreferences; dispid 65693;
    procedure UnblankSketch; dispid 65694;
    procedure EditSketchOrSingleSketchFeature; dispid 65695;
    procedure DebugCheckIgesGeom; dispid 65696;
    procedure BlankSketch; dispid 65697;
    function GetDefaultTextHeight: Double; dispid 65698;
    function IsActive(const compStr: WideString): WordBool; dispid 65699;
    function CreateEllipse(center: OleVariant; major: OleVariant; minor: OleVariant): WordBool; dispid 65700;
    function CreateEllipseVB(centerX: Double; centerY: Double; centerZ: Double; majorX: Double; 
                             majorY: Double; majorZ: Double; minorX: Double; minorY: Double; 
                             minorZ: Double): WordBool; dispid 65701;
    function CreateEllipticalArcByCenter(center: OleVariant; major: OleVariant; minor: OleVariant; 
                                         start: OleVariant; end_: OleVariant): WordBool; dispid 65702;
    function CreateEllipticalArcByCenterVB(centerX: Double; centerY: Double; centerZ: Double; 
                                           majorX: Double; majorY: Double; majorZ: Double; 
                                           minorX: Double; minorY: Double; minorZ: Double; 
                                           startX: Double; startY: Double; startZ: Double; 
                                           endX: Double; endY: Double; endZ: Double): WordBool; dispid 65703;
    function GetActiveSketch: IDispatch; dispid 65704;
    function IGetActiveSketch: ISketch; dispid 65713;
    function GetTessellationQuality: Integer; dispid 65705;
    procedure SetTessellationQuality(qualityNum: Integer); dispid 65706;
    function Parameter(const stringIn: WideString): IDispatch; dispid 65707;
    function IParameter(const stringIn: WideString): IDimension; dispid 65714;
    function SelectByID(const selID: WideString; const selParams: WideString; x: Double; y: Double; 
                        z: Double): WordBool; dispid 65708;
    function AndSelectByID(const selID: WideString; const selParams: WideString; x: Double; 
                           y: Double; z: Double): WordBool; dispid 65709;
    procedure Insert3DSketch; dispid 65710;
    function GetLightSourceName(id: Integer): WideString; dispid 65715;
    function AddLightSource(const idName: WideString; lTyp: SYSINT; const userName: WideString): WordBool; dispid 65720;
    function AddLightSourceExtProperty(id: Integer; PropertyExtension: OleVariant): Integer; dispid 65721;
    procedure ResetLightSourceExtProperty(id: Integer); dispid 65722;
    procedure DeleteLightSource(id: Integer); dispid 65723;
    function GetLightSourceExtProperty(id: Integer; PropertyId: Integer): OleVariant; dispid 65724;
    function AddLightToScene(const lpszNewValue: WideString): Integer; dispid 65725;
    function AddSceneExtProperty(PropertyExtension: OleVariant): Integer; dispid 65726;
    procedure ResetSceneExtProperty; dispid 65727;
    function GetSceneExtProperty(PropertyId: Integer): OleVariant; dispid 65728;
    procedure FileSummaryInfo; dispid 65729;
    function GetGridSettings: OleVariant; dispid 65730;
    procedure ToolsSketchTranslate; dispid 65731;
    procedure ToolsDistance; dispid 65732;
    procedure SkToolsAutoConstr; dispid 65733;
    procedure ToolsSketchScale; dispid 65734;
    procedure Paste; dispid 65735;
    procedure ToolsConfiguration; dispid 65736;
    procedure EntityProperties; dispid 65737;
    function GetArcCentersDisplayed: WordBool; dispid 65738;
    procedure SetArcCentersDisplayed(setting: WordBool); dispid 65739;
    procedure AutoSolveToggle; dispid 65740;
    procedure Dummy7; dispid 65741;
    function IGetLines: Double; dispid 65742;
    function GetLineCount: Integer; dispid 65743;
    procedure ICreateEllipse(var center: Double; var major: Double; var minor: Double); dispid 65744;
    procedure ICreateEllipticalArcByCenter(var center: Double; var major: Double; 
                                           var minor: Double; var start: Double; var end_: Double); dispid 65745;
    function ILightSourcePropertyValues(id: Integer): Double; dispid 65746;
    procedure InsertCutSwept(propagate: WordBool; alignment: WordBool; keepNormalConstant: WordBool); dispid 65747;
    procedure InsertCutBlend(closed: WordBool); dispid 65748;
    procedure InsertHelix(reversed: WordBool; clockwised: WordBool; tapered: WordBool; 
                          outward: WordBool; helixdef: Integer; height: Double; pitch: Double; 
                          revolution: Double; taperangle: Double; startangle: Double); dispid 65749;
    procedure ICreateLine(var P1: Double; var P2: Double); dispid 65750;
    procedure ICreateCenterLine(var P1: Double; var P2: Double); dispid 65751;
    procedure ICreateArc(var P1: Double; var P2: Double; var P3: Double; dir: Smallint); dispid 65752;
    procedure ICreateCircleByRadius(var P1: Double; radius: Double); dispid 65753;
    procedure GraphicsRedraw; dispid 65754;
    function GetVisibilityOfConstructPlanes: WordBool; dispid 65755;
    function GetDisplayWhenAdded: WordBool; dispid 65756;
    procedure SetDisplayWhenAdded(setting: WordBool); dispid 65757;
    function GetAddToDB: WordBool; dispid 65758;
    procedure SetAddToDB(setting: WordBool); dispid 65759;
    function DeSelectByID(const selID: WideString; const selParams: WideString; x: Double; 
                          y: Double; z: Double): WordBool; dispid 65760;
    property Visible: WordBool dispid 65761;
    procedure PrintDirect; dispid 65762;
    procedure PrintPreview; dispid 65763;
    procedure Quit; dispid 65764;
    procedure CreatePlaneThru3Points; dispid 65765;
    procedure ViewRotXPlusNinety; dispid 65766;
    function GetUnits: OleVariant; dispid 65767;
    procedure SetAngularUnits(uType: Smallint; fractBase: Smallint; fractDenom: Smallint; 
                              sigDigits: Smallint); dispid 65768;
    function GetAngularUnits: OleVariant; dispid 65769;
    function IGetUnits: Smallint; dispid 65770;
    procedure ISetAngularUnits(uType: Smallint; fractBase: Smallint; fractDenom: Smallint; 
                               sigDigits: Smallint); dispid 65771;
    function IGetAngularUnits: Smallint; dispid 65772;
    procedure ShowConfiguration(const configurationName: WideString); dispid 65773;
    procedure ResetConfiguration; dispid 65774;
    procedure AddConfiguration(const Name: WideString; const comment: WideString; 
                               const alternateName: WideString; suppressByDefault: WordBool; 
                               hideByDefault: WordBool; minFeatureManager: WordBool; 
                               inheritProperties: WordBool; flags: LongWord); dispid 65775;
    procedure DeleteConfiguration(const configurationName: WideString); dispid 65776;
    procedure EditConfiguration(const Name: WideString; const newName: WideString; 
                                const comment: WideString; const alternateName: WideString; 
                                suppressByDefault: WordBool; hideByDefault: WordBool; 
                                minFeatureManager: WordBool; inheritProperties: WordBool; 
                                flags: LongWord); dispid 65777;
    procedure CreatePlanePerCurveAndPassPoint(origAtCurve: WordBool); dispid 65778;
    function CreateFeatureMgrView(var bitmap: Integer): IDispatch; dispid 65779;
    function AddFeatureMgrView(var bitmap: Integer; var appView: Integer): WordBool; dispid 65780;
    function GetStandardViewRotation(viewId: Integer): OleVariant; dispid 65781;
    function IGetStandardViewRotation(viewId: Integer): Double; dispid 65782;
    procedure FeatureExtruRefSurface(sd: WordBool; flip: WordBool; dir: WordBool; t1: Integer; 
                                     t2: Integer; d1: Double; d2: Double; dchk1: WordBool; 
                                     dchk2: WordBool; ddir1: WordBool; ddir2: WordBool; 
                                     dang1: Double; dang2: Double; offsetReverse1: WordBool; 
                                     offsetReverse2: WordBool); dispid 65783;
    function IGet3rdPartyStorage(const stringIn: WideString; isStoring: WordBool): IUnknown; dispid 65784;
    procedure DeleteFeatureMgrView(var appView: Integer); dispid 65785;
    function GetMassProperties: OleVariant; dispid 65786;
    function IGetMassProperties(var mPropsData: Double): WordBool; dispid 65787;
    function GetLightSourceCount: Integer; dispid 65788;
    function GetLightSourceIdFromName(const lightName: WideString): Integer; dispid 65789;
    procedure SetNextSelectionGroupId(id: Integer); dispid 65790;
    procedure ISetNextSelectionGroupId(id: Integer); dispid 65791;
    function InsertMidSurfaceExt(placement: Double; knitFlag: WordBool): IDispatch; dispid 65792;
    function IInsertMidSurfaceExt(placement: Double; knitFlag: WordBool): IMidSurface2; dispid 65793;
    procedure ICreatePlaneFixed(var P1: Double; var P2: Double; var P3: Double; useGlobal: WordBool); dispid 65794;
    function SelectByMark(const selID: WideString; const selParams: WideString; x: Double; 
                          y: Double; z: Double; mark: Integer): WordBool; dispid 65795;
    function AndSelectByMark(const selID: WideString; const selParams: WideString; x: Double; 
                             y: Double; z: Double; mark: Integer): WordBool; dispid 65796;
    function GetDependencies(traverseflag: Integer; searchflag: Integer): OleVariant; dispid 65797;
    function IGetDependencies(traverseflag: Integer; searchflag: Integer): WideString; dispid 65798;
    function GetNumDependencies(traverseflag: Integer; searchflag: Integer): Integer; dispid 65799;
    function IGetNumDependencies(traverseflag: Integer; searchflag: Integer): Integer; dispid 65800;
    function FirstFeature: IDispatch; dispid 65801;
    function IFirstFeature: IFeature; dispid 65802;
    procedure UnderiveSketch; dispid 65803;
    procedure DeriveSketch; dispid 65804;
    function IsExploded: WordBool; dispid 65805;
    function DeleteSelection(confirmFlag: WordBool): WordBool; dispid 65806;
    function DeleteNamedView(const viewname: WideString): WordBool; dispid 65807;
    function SetLightSourceName(id: Integer; const newName: WideString): WordBool; dispid 65808;
    procedure Insert3DSplineCurve(curveClosed: WordBool); dispid 65809;
    function SetLightSourcePropertyValuesVB(const idName: WideString; lType: SYSINT; diff: Double; 
                                            rgbColor: Integer; dist: Double; dirX: Double; 
                                            dirY: Double; dirZ: Double; spotDirX: Double; 
                                            spotDirY: Double; spotDirZ: Double; spotAngle: Double; 
                                            fallOff0: Double; fallOff1: Double; fallOff2: Double; 
                                            ambient: Double; specular: Double; 
                                            spotExponent: Double; bDisable: WordBool): WordBool; dispid 65810;
    function ICreateFeatureMgrView(var bitmap: Integer): IFeatMgrView; dispid 65811;
    function SelectedEdgeProperties(const edgeName: WideString): WordBool; dispid 65812;
    function SelectedFaceProperties(rgbColor: Integer; ambient: Double; diffuse: Double; 
                                    specular: Double; shininess: Double; transparency: Double; 
                                    emission: Double; usePartProps: WordBool; 
                                    const faceName: WideString): WordBool; dispid 65813;
    function SelectedFeatureProperties(rgbColor: Integer; ambient: Double; diffuse: Double; 
                                       specular: Double; shininess: Double; transparency: Double; 
                                       emission: Double; usePartProps: WordBool; 
                                       suppressed: WordBool; const featureName: WideString): WordBool; dispid 65814;
    procedure InsertSplitLineSil; dispid 65815;
    procedure InsertSplitLineProject(isDirectional: WordBool; flipDir: WordBool); dispid 65816;
    procedure InsertRib(is2Sided: WordBool; reverseThicknessDir: WordBool; thickness: Double; 
                        referenceEdgeIndex: Integer; reverseMaterialDir: WordBool; 
                        isDrafted: WordBool; draftOutward: WordBool; draftAngle: Double); dispid 65817;
    function AddRadialDimension(x: Double; y: Double; z: Double): WordBool; dispid 65818;
    function AddDiameterDimension(x: Double; y: Double; z: Double): WordBool; dispid 65819;
    function GetModelViewNames: OleVariant; dispid 65820;
    function IGetModelViewNames: WideString; dispid 65821;
    function GetModelViewCount: SYSINT; dispid 65822;
    function GetUserPreferenceDoubleValue(userPreferenceValue: Integer): Double; dispid 65823;
    function SetUserPreferenceDoubleValue(userPreferenceValue: Integer; Value: Double): WordBool; dispid 65824;
    procedure ViewDisplayCurvature; dispid 65825;
    procedure Scale; dispid 65826;
    procedure AddIns; dispid 65827;
    function InsertCurveFile(const fileName: WideString): WordBool; dispid 65828;
    procedure InsertCurveFileBegin; dispid 65829;
    function InsertCurveFilePoint(x: Double; y: Double; z: Double): WordBool; dispid 65830;
    function InsertCurveFileEnd: WordBool; dispid 65831;
    function ChangeSketchPlane: WordBool; dispid 65832;
    procedure ViewOrientationUndo; dispid 65833;
    procedure PrintOut(fromPage: Integer; toPage: Integer; numCopies: Integer; collate: WordBool; 
                       const printer: WideString; Scale: Double; printToFile: WordBool); dispid 65834;
    procedure SketchOffsetEntities(offset: Double; flip: WordBool); dispid 65835;
    procedure InsertLibraryFeature(const libFeatPartNameIn: WideString); dispid 65836;
    procedure SketchModifyTranslate(startX: Double; startY: Double; endX: Double; endY: Double); dispid 65837;
    procedure SketchModifyRotate(centerX: Double; centerY: Double; angle: Double); dispid 65838;
    procedure SketchModifyFlip(axisFlag: SYSINT); dispid 65839;
    function SketchModifyScale(scaleFactor: Double): WordBool; dispid 65840;
    function GetActiveConfiguration: IDispatch; dispid 65841;
    function IGetActiveConfiguration: IConfiguration; dispid 65842;
    function GetUserPreferenceToggle(userPreferenceToggle: Integer): WordBool; dispid 65843;
    function SetUserPreferenceToggle(userPreferenceValue: Integer; onFlag: WordBool): WordBool; dispid 65844;
    procedure InsertSweepRefSurface(propagate: WordBool; twistCtrlOption: Smallint; 
                                    keepTangency: WordBool; forceNonRational: WordBool); dispid 65845;
    procedure InsertLoftRefSurface(closed: WordBool; keepTangency: WordBool; 
                                   forceNonRational: WordBool); dispid 65846;
    procedure InsertProtrusionSwept2(propagate: WordBool; alignment: WordBool; 
                                     twistCtrlOption: Smallint; keepTangency: WordBool; 
                                     forceNonRational: WordBool); dispid 65847;
    procedure InsertProtrusionBlend2(closed: WordBool; keepTangency: WordBool; 
                                     forceNonRational: WordBool); dispid 65848;
    procedure InsertCutSwept2(propagate: WordBool; alignment: WordBool; twistCtrlOption: Smallint; 
                              keepTangency: WordBool; forceNonRational: WordBool); dispid 65849;
    procedure InsertCutBlend2(closed: WordBool; keepTangency: WordBool; forceNonRational: WordBool); dispid 65850;
    function IsEditingSelf: WordBool; dispid 65851;
    procedure ShowNamedView2(const vName: WideString; viewId: Integer); dispid 65852;
    procedure InsertDome(height: Double; reverseDir: WordBool; doEllipticSurface: WordBool); dispid 65853;
    property MaterialUserName: WideString dispid 65854;
    property MaterialIdName: WideString dispid 65855;
    property MaterialPropertyValues: OleVariant dispid 65856;
    function IMaterialPropertyValues: Double; dispid 65857;
    function AddPropertyExtension(PropertyExtension: OleVariant): Integer; dispid 65858;
    function GetPropertyExtension(id: Integer): OleVariant; dispid 65859;
    procedure ResetPropertyExtension; dispid 65860;
    function GetUpdateStamp: Integer; dispid 65861;
    procedure ViewZoomTo2(x1: Double; y1: Double; z1: Double; x2: Double; y2: Double; z2: Double); dispid 65862;
    procedure ScreenRotate; dispid 65863;
    property PrintSetup[setupType: Integer]: Smallint dispid 65864;
    procedure GraphicsRedraw2; dispid 65865;
    procedure InsertCosmeticThread(type_: Smallint; depth: Double; length: Double; 
                                   const note: WideString); dispid 65866;
    procedure HideCosmeticThread; dispid 65867;
    procedure ShowCosmeticThread; dispid 65868;
    procedure SimpleHole2(dia: Double; sd: WordBool; flip: WordBool; dir: WordBool; t1: Integer; 
                          t2: Integer; d1: Double; d2: Double; dchk1: WordBool; dchk2: WordBool; 
                          ddir1: WordBool; ddir2: WordBool; dang1: Double; dang2: Double; 
                          offsetReverse1: WordBool; offsetReverse2: WordBool); dispid 65869;
    procedure IRelease3rdPartyStorage(const stringIn: WideString); dispid 65870;
    function FeatureRevolve2(angle: Double; reverseDir: WordBool; angle2: Double; revType: Integer; 
                             options: Integer): Integer; dispid 65871;
    function FeatureRevolveCut2(angle: Double; reverseDir: WordBool; angle2: Double; 
                                revType: Integer; options: Integer): Integer; dispid 65872;
    procedure SetSaveFlag; dispid 65873;
    function GetExternalReferenceName: WideString; dispid 65874;
    function SelectByRay(doubleInfoIn: OleVariant; typeWanted: Integer): WordBool; dispid 65875;
    function ISelectByRay(var pointIn: Double; var vectorIn: Double; radiusIn: Double; 
                          typeWanted: Integer): WordBool; dispid 65876;
    procedure SetSceneBkgDIB(l_dib: Integer); dispid 65877;
    property SceneBkgImageFileName: WideString dispid 65878;
    procedure InsertBkgImage(const newName: WideString); dispid 65879;
    procedure DeleteBkgImage; dispid 65880;
    procedure InsertSplinePoint(x: Double; y: Double; z: Double); dispid 65881;
    procedure InsertLoftRefSurface2(closed: WordBool; keepTangency: WordBool; 
                                    forceNonRational: WordBool; tessToleranceFactor: Double; 
                                    startMatchingType: Smallint; endMatchingType: Smallint); dispid 65882;
    procedure InsertProtrusionBlend3(closed: WordBool; keepTangency: WordBool; 
                                     forceNonRational: WordBool; tessToleranceFactor: Double; 
                                     startMatchingType: Smallint; endMatchingType: Smallint); dispid 65883;
    procedure InsertCutBlend3(closed: WordBool; keepTangency: WordBool; forceNonRational: WordBool; 
                              tessToleranceFactor: Double; startMatchingType: Smallint; 
                              endMatchingType: Smallint); dispid 65884;
    procedure AlignDimensions; dispid 65885;
    procedure BreakDimensionAlignment; dispid 65886;
    procedure SketchFillet1(rad: Double); dispid 65887;
    procedure FeatureChamferType(chamferType: Smallint; width: Double; angle: Double; 
                                 flip: WordBool; otherDist: Double; vertexChamDist1: Double; 
                                 vertexChamDist2: Double; vertexChamDist3: Double); dispid 65888;
    procedure FeatureCutThin(sd: WordBool; flip: WordBool; dir: WordBool; t1: Integer; t2: Integer; 
                             d1: Double; d2: Double; dchk1: WordBool; dchk2: WordBool; 
                             ddir1: WordBool; ddir2: WordBool; dang1: Double; dang2: Double; 
                             offsetReverse1: WordBool; offsetReverse2: WordBool; thk1: Double; 
                             thk2: Double; endThk: Double; revThinDir: Integer; capEnds: Integer; 
                             addBends: WordBool; bendRad: Double); dispid 65889;
    procedure FeatureBossThin(sd: WordBool; flip: WordBool; dir: WordBool; t1: Integer; 
                              t2: Integer; d1: Double; d2: Double; dchk1: WordBool; 
                              dchk2: WordBool; ddir1: WordBool; ddir2: WordBool; dang1: Double; 
                              dang2: Double; offsetReverse1: WordBool; offsetReverse2: WordBool; 
                              thk1: Double; thk2: Double; endThk: Double; revThinDir: Integer; 
                              capEnds: Integer; addBends: WordBool; bendRad: Double); dispid 65890;
    function InsertDatumTargetSymbol(const datum1: WideString; const datum2: WideString; 
                                     const datum3: WideString; areaStyle: Smallint; 
                                     areaOutside: WordBool; value1: Double; value2: Double; 
                                     const valueStr1: WideString; const valueStr2: WideString; 
                                     arrowsSmart: WordBool; arrowStyle: Smallint; 
                                     leaderLineStyle: Smallint; leaderBent: WordBool; 
                                     showArea: WordBool; showSymbol: WordBool): WordBool; dispid 65891;
    function EditDatumTargetSymbol(const datum1: WideString; const datum2: WideString; 
                                   const datum3: WideString; areaStyle: Smallint; 
                                   areaOutside: WordBool; value1: Double; value2: Double; 
                                   const valueStr1: WideString; const valueStr2: WideString; 
                                   arrowsSmart: WordBool; arrowStyle: Smallint; 
                                   leaderLineStyle: Smallint; leaderBent: WordBool; 
                                   showArea: WordBool; showSymbol: WordBool): WordBool; dispid 65892;
    procedure InsertBOMBalloon; dispid 65893;
    function FeatureReferenceCurve(numOfCurves: Integer; baseCurves: OleVariant; merge: WordBool; 
                                   const fromFileName: WideString; out errorCode: Integer): IDispatch; dispid 65894;
    function IFeatureReferenceCurve(numOfCurves: Integer; var baseCurves: ICurve; merge: WordBool; 
                                    const fromFileName: WideString; out errorCode: Integer): IReferenceCurve; dispid 65895;
    procedure FontBold(bold: WordBool); dispid 65896;
    procedure FontItalic(italic: WordBool); dispid 65897;
    procedure FontUnderline(underline: WordBool); dispid 65898;
    procedure FontFace(const face: WideString); dispid 65899;
    procedure FontPoints(points: Smallint); dispid 65900;
    procedure FontUnits(units: Double); dispid 65901;
    function SketchSplineByEqnParams(paramsIn: OleVariant): WordBool; dispid 65902;
    procedure AlignParallelDimensions; dispid 65903;
    procedure SetBlockingState(stateIn: Integer); dispid 65904;
    procedure ResetBlockingState; dispid 65905;
    function GetSceneBkgDIB: Integer; dispid 65906;
    procedure InsertHatchedFace; dispid 65907;
    function GetColorTable: IDispatch; dispid 65908;
    function IGetColorTable: IColorTable; dispid 65909;
    procedure InsertSweepRefSurface2(propagate: WordBool; twistCtrlOption: Smallint; 
                                     keepTangency: WordBool; forceNonRational: WordBool; 
                                     startMatchingType: Smallint; endMatchingType: Smallint); dispid 65910;
    procedure InsertProtrusionSwept3(propagate: WordBool; alignment: WordBool; 
                                     twistCtrlOption: Smallint; keepTangency: WordBool; 
                                     forceNonRational: WordBool; startMatchingType: Smallint; 
                                     endMatchingType: Smallint); dispid 65911;
    procedure InsertCutSwept3(propagate: WordBool; alignment: WordBool; twistCtrlOption: Smallint; 
                              keepTangency: WordBool; forceNonRational: WordBool; 
                              startMatchingType: Smallint; endMatchingType: Smallint); dispid 65912;
    function IsOpenedViewOnly: WordBool; dispid 65913;
    function IsOpenedReadOnly: WordBool; dispid 65914;
    procedure ViewZoomToSelection; dispid 65915;
    procedure FeatureBossThicken(thickness: Double; direction: Integer; faceIndex: Integer); dispid 65916;
    procedure FeatureCutThicken(thickness: Double; direction: Integer; faceIndex: Integer); dispid 65917;
    function InsertAxis: WordBool; dispid 65918;
    procedure EditUndo(nSteps: LongWord); dispid 65919;
    procedure SelectMidpoint; dispid 65920;
    function ISketchSplineByEqnParams(var propArray: SYSINT; var knotsArray: Double; 
                                      var cntrlPntCoordArray: Double): Integer; dispid 65921;
    function VersionHistory: OleVariant; dispid 65922;
    function IVersionHistory: WideString; dispid 65923;
    function IGetVersionHistoryCount: SYSINT; dispid 65924;
    procedure Rebuild(options: Integer); dispid 65925;
    procedure InsertFeatureShellAddThickness(thickness: Double); dispid 65926;
    procedure InsertOffsetSurface(thickness: Double; reverse: WordBool); dispid 65927;
    procedure SimplifySpline(toleranceIn: Double); dispid 65928;
    property SummaryInfo[FieldId: Integer]: WideString dispid 65929;
    property CustomInfo[const FieldName: WideString]: WideString dispid 65930;
    function GetCustomInfoCount: Integer; dispid 65931;
    function GetCustomInfoType(const FieldName: WideString): WideString; dispid 65932;
    function GetCustomInfoNames: OleVariant; dispid 65933;
    function IGetCustomInfoNames: WideString; dispid 65934;
    function AddCustomInfo(const FieldName: WideString; const FieldType: WideString; 
                           const FieldValue: WideString): WordBool; dispid 65935;
    function DeleteCustomInfo(const FieldName: WideString): WordBool; dispid 65936;
    procedure PrintOut2(fromPage: Integer; toPage: Integer; numCopies: Integer; collate: WordBool; 
                        const printer: WideString; Scale: Double; printToFile: WordBool; 
                        const ptfName: WideString); dispid 65937;
    function SetReadOnlyState(setReadOnly: WordBool): WordBool; dispid 65938;
    function InsertFamilyTableOpen(const fileName: WideString): WordBool; dispid 65939;
    function MultiSelectByRay(doubleInfoIn: OleVariant; typeWanted: Integer; Append: WordBool): WordBool; dispid 65940;
    function IMultiSelectByRay(var pointIn: Double; var vectorIn: Double; radiusIn: Double; 
                               typeWanted: Integer; Append: WordBool): WordBool; dispid 65941;
    procedure InsertNewNote3(const upperText: WideString; noLeader: WordBool; bentLeader: WordBool; 
                             arrowStyle: Smallint; leaderSide: Smallint; angle: Double; 
                             balloonStyle: Smallint; balloonFit: Smallint; smartArrow: WordBool); dispid 65942;
    procedure InsertWeldSymbol2(const dim1: WideString; const symbol: WideString; 
                                const dim2: WideString; symmetric: WordBool; fieldWeld: WordBool; 
                                showOtherSide: WordBool; dashOnTop: WordBool; peripheral: WordBool; 
                                hasProcess: WordBool; const processValue: WideString); dispid 65943;
    function InsertSurfaceFinishSymbol2(symType: Integer; leaderType: Integer; locX: Double; 
                                        locY: Double; locZ: Double; laySymbol: Integer; 
                                        arrowType: Integer; const machAllowance: WideString; 
                                        const otherVals: WideString; const prodMethod: WideString; 
                                        const sampleLen: WideString; 
                                        const maxRoughness: WideString; 
                                        const minRoughness: WideString; 
                                        const roughnessSpacing: WideString): WordBool; dispid 65944;
    function SaveSilent: Integer; dispid 65945;
    function SaveAsSilent(const newName: WideString; saveAsCopy: WordBool): Integer; dispid 65946;
    function AddCustomInfo2(const FieldName: WideString; FieldType: Integer; 
                            const FieldValue: WideString): WordBool; dispid 65947;
    function GetCustomInfoType2(const FieldName: WideString): Integer; dispid 65948;
    function InsertRefPoint: WordBool; dispid 65949;
    function FeatureFillet2(r1: Double; propagate: WordBool; ftyp: WordBool; varRadTyp: WordBool; 
                            overFlowType: Integer; nRadii: SYSINT; radii: OleVariant): Integer; dispid 65950;
    function IFeatureFillet2(r1: Double; propagate: WordBool; ftyp: WordBool; varRadTyp: WordBool; 
                             overFlowType: Integer; nRadii: SYSINT; var radii: Double): Integer; dispid 65951;
    function GetFirstAnnotation: IDispatch; dispid 65952;
    function IGetFirstAnnotation: IAnnotation; dispid 65953;
    function InsertCoordinateSystem(xFlippedIn: WordBool; yFlippedIn: WordBool; zFlippedIn: WordBool): WordBool; dispid 65954;
    function GetToolbarVisibility(toolbar: Integer): WordBool; dispid 65955;
    procedure SetToolbarVisibility(toolbar: Integer; visibility: WordBool); dispid 65956;
    procedure ViewDispCoordinateSystems; dispid 65957;
    procedure ViewDispTempRefaxes; dispid 65958;
    procedure ViewDispRefPoints; dispid 65959;
    procedure ViewDispOrigins; dispid 65960;
    function GetCoordinateSystemXformByName(const nameIn: WideString): OleVariant; dispid 65961;
    function IGetCoordinateSystemXformByName(const nameIn: WideString): Double; dispid 65962;
    function GetCurrentCoordinateSystemName: WideString; dispid 65963;
    function EnumModelViews: IEnumModelViews; dispid 65964;
    function InsertCompositeCurve: WordBool; dispid 65965;
    procedure SketchParabola(val1: Double; val2: Double; z1: Double; val3: Double; val4: Double; 
                             z2: Double; val5: Double; val6: Double; z3: Double; val7: Double; 
                             val8: Double; z4: Double); dispid 65966;
    procedure InsertRadiateSurface(distance: Double; flipDir: WordBool; tangentPropagate: WordBool); dispid 65967;
    procedure InsertSewRefSurface; dispid 65968;
    function InsertShape(pressureOn: Integer; tangentsOn: Integer; pressureGain: Double; 
                         tangentGain: Double; curveSpringGain: Double; alpha: Double; beta: Double; 
                         gamma: Double; delta: Double; degree: Integer; split: Integer; 
                         tuning: Integer): Integer; dispid 65969;
    procedure InsertMfDraft2(angle: Double; flipDir: WordBool; isEdgeDraft: WordBool; 
                             propType: Integer; stepDraft: WordBool); dispid 65970;
    function GetConfigurationCount: Integer; dispid 65971;
    function GetConfigurationNames: OleVariant; dispid 65972;
    function IGetConfigurationNames(var count: Integer): WideString; dispid 65973;
    procedure FeatureCut2(sd: WordBool; flip: WordBool; dir: WordBool; t1: Integer; t2: Integer; 
                          d1: Double; d2: Double; dchk1: WordBool; dchk2: WordBool; 
                          ddir1: WordBool; ddir2: WordBool; dang1: Double; dang2: Double; 
                          offsetReverse1: WordBool; offsetReverse2: WordBool; 
                          keepPieceIndex: Integer); dispid 65974;
    procedure InsertCutSurface(flip: WordBool; keepPieceIndex: Integer); dispid 65975;
    function GetDetailingDefaults: IDispatch; dispid 65976;
    function IGetDetailingDefaults: IDetailingDefaults; dispid 65977;
    function ListExternalFileReferencesCount(useSearchRules: WordBool): Integer; dispid 65978;
    function ListExternalFileReferences(useSearchRules: WordBool): OleVariant; dispid 65979;
    function IListExternalFileReferences(useSearchRules: WordBool; numRefs: Integer): WideString; dispid 65980;
    function SketchSplineByEqnParams2(paramsIn: OleVariant): WordBool; dispid 65981;
    function GetFirstModelView: IDispatch; dispid 65982;
    function IGetFirstModelView: IModelView; dispid 65983;
    function InsertPlanarRefSurface: WordBool; dispid 65984;
    function GetNext: IDispatch; dispid 65985;
    function GetSaveFlag: WordBool; dispid 65986;
    function AddCustomInfo3(const configuration: WideString; const FieldName: WideString; 
                            FieldType: Integer; const FieldValue: WideString): WordBool; dispid 65987;
    property CustomInfo2[const configuration: WideString; const FieldName: WideString]: WideString dispid 65988;
    function DeleteCustomInfo2(const configuration: WideString; const FieldName: WideString): WordBool; dispid 65989;
    function GetCustomInfoCount2(const configuration: WideString): Integer; dispid 65990;
    function GetCustomInfoNames2(const configuration: WideString): OleVariant; dispid 65991;
    function IGetCustomInfoNames2(const configuration: WideString): WideString; dispid 65992;
    function GetCustomInfoType3(const configuration: WideString; const FieldName: WideString): Integer; dispid 65993;
    function GetConsiderLeadersAsLines: WordBool; dispid 65994;
    function SetConsiderLeadersAsLines(leadersAsLines: WordBool): WordBool; dispid 65995;
    procedure InsertRevolvedRefSurface(angle: Double; reverseDir: WordBool; angle2: Double; 
                                       revType: SYSINT); dispid 65996;
    function GetBendState: Integer; dispid 65997;
    function SetBendState(bendState: Integer): Integer; dispid 65998;
    property ShowFeatureErrorDialog: WordBool dispid 65999;
    procedure ClearUndoList; dispid 66000;
    function GetFeatureManagerWidth: Integer; dispid 66001;
    function SetFeatureManagerWidth(width: Integer): Integer; dispid 66002;
    function InsertProjectedSketch2(reverse: Integer): IDispatch; dispid 66003;
    function IInsertProjectedSketch2(reverse: Integer): IFeature; dispid 66004;
    function GetFeatureCount: Integer; dispid 66005;
    function FeatureByPositionReverse(num: Integer): IDispatch; dispid 66006;
    function IFeatureByPositionReverse(num: Integer): IFeature; dispid 66007;
    function RayIntersections(bodiesIn: OleVariant; basePointsIn: OleVariant; 
                              vectorsIn: OleVariant; options: Integer; hitRadius: Double; 
                              offset: Double): Integer; dispid 66008;
    function IRayIntersections(var bodiesIn: IBody2; numBodies: Integer; var basePointsIn: Double; 
                               var vectorsIn: Double; numRays: Integer; options: Integer; 
                               hitRadius: Double; offset: Double): Integer; dispid 66009;
    function GetRayIntersectionsPoints: OleVariant; dispid 66010;
    function IGetRayIntersectionsPoints: Double; dispid 66011;
    function GetRayIntersectionsTopology: OleVariant; dispid 66012;
    function IGetRayIntersectionsTopology: IUnknown; dispid 66013;
    procedure EditSeedFeat; dispid 66014;
    function EditSuppress: WordBool; dispid 66015;
    function EditUnsuppress: WordBool; dispid 66016;
    function EditUnsuppressDependent: WordBool; dispid 66017;
    function EditRollback: WordBool; dispid 66018;
    function Save2(silent: WordBool): Integer; dispid 66019;
    function SaveAs2(const newName: WideString; saveAsVersion: Integer; saveAsCopy: WordBool; 
                     silent: WordBool): Integer; dispid 66020;
    procedure SetPopupMenuMode(modeIn: SYSINT); dispid 66021;
    function GetPopupMenuMode: SYSINT; dispid 66022;
    procedure CloseFamilyTable; dispid 66023;
    procedure CreatePlaneAtSurface(interIndex: SYSINT; projOpt: WordBool; reverseDir: WordBool; 
                                   normalPlane: WordBool; angle: Double); dispid 66024;
    procedure SketchOffset(offset: Double; contourMode: WordBool); dispid 66025;
    function CreateLinearSketchStepAndRepeat(numX: Integer; numY: Integer; spacingX: Double; 
                                             spacingY: Double; angleX: Double; angleY: Double; 
                                             const deleteInstances: WideString): WordBool; dispid 66026;
    function SetAmbientLightProperties(const Name: WideString; ambient: Double; diffuse: Double; 
                                       specular: Double; colour: Integer; enabled: WordBool; 
                                       fixed: WordBool): WordBool; dispid 66027;
    function GetAmbientLightProperties(const Name: WideString; var ambient: Double; 
                                       var diffuse: Double; var specular: Double; 
                                       var colour: Integer; var enabled: WordBool; 
                                       var fixed: WordBool): WordBool; dispid 66028;
    function SetPointLightProperties(const Name: WideString; ambient: Double; diffuse: Double; 
                                     specular: Double; colour: Integer; enabled: WordBool; 
                                     fixed: WordBool; x: Double; y: Double; z: Double): WordBool; dispid 66029;
    function GetPointLightProperties(const Name: WideString; var ambient: Double; 
                                     var diffuse: Double; var specular: Double; 
                                     var colour: Integer; var enabled: WordBool; 
                                     var fixed: WordBool; var x: Double; var y: Double; 
                                     var z: Double): WordBool; dispid 66030;
    function SetDirectionLightProperties(const Name: WideString; ambient: Double; diffuse: Double; 
                                         specular: Double; colour: Integer; enabled: WordBool; 
                                         fixed: WordBool; x: Double; y: Double; z: Double): WordBool; dispid 66031;
    function GetDirectionLightProperties(const Name: WideString; var ambient: Double; 
                                         var diffuse: Double; var specular: Double; 
                                         var colour: Integer; var enabled: WordBool; 
                                         var fixed: WordBool; var x: Double; var y: Double; 
                                         var z: Double): WordBool; dispid 66032;
    function SetSpotlightProperties(const Name: WideString; ambient: Double; diffuse: Double; 
                                    specular: Double; colour: Integer; enabled: WordBool; 
                                    fixed: WordBool; posx: Double; posy: Double; posz: Double; 
                                    targetx: Double; targety: Double; targetz: Double; 
                                    coneAngle: Double): WordBool; dispid 66033;
    function GetSpotlightProperties(const Name: WideString; var ambient: Double; 
                                    var diffuse: Double; var specular: Double; var colour: Integer; 
                                    var enabled: WordBool; var fixed: WordBool; var x: Double; 
                                    var y: Double; var z: Double; var targetx: Double; 
                                    var targety: Double; var targetz: Double; var coneAngle: Double): WordBool; dispid 66034;
    procedure SplitOpenSegment(x: Double; y: Double; z: Double); dispid 66035;
    procedure AutoInferToggle; dispid 66036;
    procedure SketchRectangleAtAnyAngle(val1: Double; val2: Double; z1: Double; val3: Double; 
                                        val4: Double; z2: Double; val3x: Double; val3y: Double; 
                                        z3: Double; val5: WordBool); dispid 66037;
    function CreateCircularSketchStepAndRepeat(arcRadius: Double; arcAngle: Double; 
                                               patternNum: Integer; patternSpacing: Double; 
                                               patternRotate: WordBool; 
                                               const deleteInstances: WideString): WordBool; dispid 66038;
    procedure SplitClosedSegment(x0: Double; y0: Double; z0: Double; x1: Double; y1: Double; 
                                 z1: Double); dispid 66039;
    function IsLightLockedToModel(lightId: Integer): WordBool; dispid 66040;
    function LockLightToModel(lightId: Integer; fix: WordBool): WordBool; dispid 66041;
    function FeatureFillet3(r1: Double; propagate: WordBool; ftyp: SYSINT; varRadTyp: WordBool; 
                            overFlowType: Integer; nRadii: SYSINT; radii: OleVariant; 
                            useHelpPoint: WordBool; useTangentHoldLine: WordBool): Integer; dispid 66042;
    function IFeatureFillet3(r1: Double; propagate: WordBool; ftyp: SYSINT; varRadTyp: WordBool; 
                             overFlowType: Integer; nRadii: SYSINT; var radii: Double; 
                             useHelpPoint: WordBool; useTangentHoldLine: WordBool): Integer; dispid 66043;
    procedure InsertConnectionPoint; dispid 66044;
    procedure InsertRoutePoint; dispid 66045;
    procedure FeatureBossThicken2(thickness: Double; direction: Integer; faceIndex: Integer; 
                                  fillVolume: WordBool); dispid 66046;
    procedure FeatureCutThicken2(thickness: Double; direction: Integer; faceIndex: Integer; 
                                 fillVolume: WordBool); dispid 66047;
    function GetConfigurationByName(const Name: WideString): IDispatch; dispid 66048;
    function IGetConfigurationByName(const Name: WideString): IConfiguration; dispid 66049;
    function CreatePoint2(pointX: Double; pointY: Double; pointZ: Double): IDispatch; dispid 66050;
    function ICreatePoint2(pointX: Double; pointY: Double; pointZ: Double): ISketchPoint; dispid 66051;
    function CreateLine2(p1x: Double; p1y: Double; p1z: Double; p2x: Double; p2y: Double; 
                         p2z: Double): IDispatch; dispid 66052;
    function ICreateLine2(p1x: Double; p1y: Double; p1z: Double; p2x: Double; p2y: Double; 
                          p2z: Double): ISketchSegment; dispid 66053;
    function GetActiveSketch2: IDispatch; dispid 66054;
    function IGetActiveSketch2: ISketch; dispid 66055;
    procedure DrawLightIcons; dispid 66056;
    function GetLayerManager: IDispatch; dispid 66057;
    function IGetLayerManager: ILayerMgr; dispid 66058;
    function CreateCircle2(xC: Double; yC: Double; zc: Double; xp: Double; yp: Double; zp: Double): IDispatch; dispid 66059;
    function ICreateCircle2(xC: Double; yC: Double; zc: Double; xp: Double; yp: Double; zp: Double): ISketchSegment; dispid 66060;
    function CreateCircleByRadius2(xC: Double; yC: Double; zc: Double; radius: Double): IDispatch; dispid 66061;
    function ICreateCircleByRadius2(xC: Double; yC: Double; zc: Double; radius: Double): ISketchSegment; dispid 66062;
    function CreateArc2(xC: Double; yC: Double; zc: Double; xp1: Double; yp1: Double; zp1: Double; 
                        xp2: Double; yp2: Double; zp2: Double; direction: Smallint): IDispatch; dispid 66063;
    function ICreateArc2(xC: Double; yC: Double; zc: Double; xp1: Double; yp1: Double; zp1: Double; 
                         xp2: Double; yp2: Double; zp2: Double; direction: Smallint): ISketchSegment; dispid 66064;
    function CreateEllipse2(centerX: Double; centerY: Double; centerZ: Double; majorX: Double; 
                            majorY: Double; majorZ: Double; minorX: Double; minorY: Double; 
                            minorZ: Double): IDispatch; dispid 66065;
    function ICreateEllipse2(centerX: Double; centerY: Double; centerZ: Double; majorX: Double; 
                             majorY: Double; majorZ: Double; minorX: Double; minorY: Double; 
                             minorZ: Double): ISketchSegment; dispid 66066;
    function CreateEllipticalArc2(centerX: Double; centerY: Double; centerZ: Double; 
                                  majorX: Double; majorY: Double; majorZ: Double; minorX: Double; 
                                  minorY: Double; minorZ: Double; startX: Double; startY: Double; 
                                  startZ: Double; endX: Double; endY: Double; endZ: Double): IDispatch; dispid 66067;
    function ICreateEllipticalArc2(centerX: Double; centerY: Double; centerZ: Double; 
                                   majorX: Double; majorY: Double; majorZ: Double; minorX: Double; 
                                   minorY: Double; minorZ: Double; startX: Double; startY: Double; 
                                   startZ: Double; endX: Double; endY: Double; endZ: Double): ISketchSegment; dispid 66068;
    function CreateSpline(pointData: OleVariant): IDispatch; dispid 66069;
    function ICreateSpline(PointCount: Integer; var pointData: Double): ISketchSegment; dispid 66070;
    procedure ViewZoomtofit2; dispid 66071;
    procedure SetInferenceMode(inferenceMode: WordBool); dispid 66072;
    function GetInferenceMode: WordBool; dispid 66073;
    function SetTitle2(const newTitle: WideString): WordBool; dispid 66074;
    function SketchFillet2(rad: Double; constrainedCorners: Smallint): WordBool; dispid 66075;
    function IsTessellationValid: WordBool; dispid 66076;
    procedure EditRoute; dispid 66077;
    procedure FileReload; dispid 66078;
    function GetDesignTable: IDispatch; dispid 66079;
    function IGetDesignTable: IDesignTable; dispid 66080;
    function GetEntityName(const entity: IDispatch): WideString; dispid 66081;
    function IGetEntityName(const entity: IEntity): WideString; dispid 66082;
    function IGetNext: IModelDoc2; dispid 66083;
    function ShowConfiguration2(const configurationName: WideString): WordBool; dispid 66084;
    function AddConfiguration2(const Name: WideString; const comment: WideString; 
                               const alternateName: WideString; suppressByDefault: WordBool; 
                               hideByDefault: WordBool; minFeatureManager: WordBool; 
                               inheritProperties: WordBool; flags: LongWord): WordBool; dispid 66085;
    function DeleteConfiguration2(const configurationName: WideString): WordBool; dispid 66086;
    function EditConfiguration2(const Name: WideString; const newName: WideString; 
                                const comment: WideString; const alternateName: WideString; 
                                suppressByDefault: WordBool; hideByDefault: WordBool; 
                                minFeatureManager: WordBool; inheritProperties: WordBool; 
                                flags: LongWord): WordBool; dispid 66087;
    function CreateSplineByEqnParams(paramsIn: OleVariant): IDispatch; dispid 66088;
    function ICreateSplineByEqnParams(var propArray: SYSINT; var knotsArray: Double; 
                                      var cntrlPntCoordArray: Double): ISketchSegment; dispid 66089;
    function CreateFeatureMgrView2(var bitmap: Integer; const toolTip: WideString): IDispatch; dispid 66090;
    function ICreateFeatureMgrView2(var bitmap: Integer; const toolTip: WideString): IFeatMgrView; dispid 66091;
    function AddFeatureMgrView2(var bitmap: Integer; var appView: Integer; const toolTip: WideString): WordBool; dispid 66092;
    procedure FeatureCut3(sd: WordBool; flip: WordBool; dir: WordBool; t1: Integer; t2: Integer; 
                          d1: Double; d2: Double; dchk1: WordBool; dchk2: WordBool; 
                          ddir1: WordBool; ddir2: WordBool; dang1: Double; dang2: Double; 
                          offsetReverse1: WordBool; offsetReverse2: WordBool; 
                          keepPieceIndex: Integer); dispid 66093;
    function GetFirstAnnotation2: IDispatch; dispid 66094;
    function IGetFirstAnnotation2: IAnnotation; dispid 66095;
    procedure InsertExtendSurface(extendLinear: WordBool; endCondition: Integer; distance: Double); dispid 66096;
    procedure InsertTangencySurface(oneSide: WordBool; isFlip: WordBool); dispid 66097;
    function CreateSplinesByEqnParams(paramsIn: OleVariant): OleVariant; dispid 66098;
    function ICreateSplinesByEqnParams(var propArray: SYSINT; var knotsArray: Double; 
                                       var cntrlPntCoordArray: Double): IEnumSketchSegments; dispid 66099;
    function CreateClippedSplines(paramsIn: OleVariant; x1: Double; y1: Double; x2: Double; 
                                  y2: Double): OleVariant; dispid 66100;
    function ICreateClippedSplines(var propArray: SYSINT; var knotsArray: Double; 
                                   var cntrlPntCoordArray: Double; x1: Double; y1: Double; 
                                   x2: Double; y2: Double): IEnumSketchSegments; dispid 66101;
    function EditSuppress2: WordBool; dispid 66102;
    function EditUnsuppress2: WordBool; dispid 66103;
    function EditUnsuppressDependent2: WordBool; dispid 66104;
    function EditRollback2: WordBool; dispid 66105;
    procedure HideDimension; dispid 66106;
    procedure ShowFeatureDimensions; dispid 66107;
    procedure HideFeatureDimensions; dispid 66108;
    procedure Sketch3DIntersections; dispid 66109;
    function FeatureFillet4(r1: Double; propagate: WordBool; uniformRadius: WordBool; ftyp: SYSINT; 
                            varRadTyp: WordBool; overFlowType: Integer; nRadii: SYSINT; 
                            radii: OleVariant; useHelpPoint: WordBool; 
                            useTangentHoldLine: WordBool; cornerType: WordBool; 
                            setbackDistCount: SYSINT; setBackDistances: OleVariant): Integer; dispid 66110;
    function IFeatureFillet4(r1: Double; propagate: WordBool; uniformRadius: WordBool; 
                             ftyp: SYSINT; varRadTyp: WordBool; overFlowType: Integer; 
                             nRadii: SYSINT; var radii: Double; useHelpPoint: WordBool; 
                             useTangentHoldLine: WordBool; cornerType: WordBool; 
                             setbackDistCount: SYSINT; var setBackDistances: Double): Integer; dispid 66111;
    procedure InsertDeleteFace; dispid 66112;
    function GetDependencies2(traverseflag: WordBool; searchflag: WordBool; 
                              addReadOnlyInfo: WordBool): OleVariant; dispid 66113;
    function IGetDependencies2(traverseflag: WordBool; searchflag: WordBool; 
                               addReadOnlyInfo: WordBool): WideString; dispid 66114;
    function IGetNumDependencies2(traverseflag: WordBool; searchflag: WordBool; 
                                  addReadOnlyInfo: WordBool): Integer; dispid 66115;
    procedure InsertScale(scaleFactor_x: Double; scaleFactor_y: Double; scaleFactor_z: Double; 
                          isUniform: WordBool; scaleType: SYSINT); dispid 66116;
    procedure LockAllExternalReferences; dispid 66117;
    procedure UnlockAllExternalReferences; dispid 66118;
    procedure BreakAllExternalReferences; dispid 66119;
    function EditDimensionProperties(tolType: Integer; tolMax: Double; tolMin: Double; 
                                     const tolMaxFit: WideString; const tolMinFit: WideString; 
                                     useDocPrec: WordBool; precision: Integer; arrowsIn: Integer; 
                                     useDocArrows: WordBool; arrow1: Integer; arrow2: Integer): WordBool; dispid 66120;
    function SketchPolygon(xCenter: Double; yCenter: Double; xEdge: Double; yEdge: Double; 
                           nSides: SYSINT; bInscribed: WordBool): WordBool; dispid 66121;
    function GetBlockingState: Integer; dispid 66122;
    function CreateFeatureMgrView3(var bitmap: Integer; const toolTip: WideString; 
                                   whichPane: Integer): IDispatch; dispid 66123;
    function ICreateFeatureMgrView3(var bitmap: Integer; const toolTip: WideString; 
                                    whichPane: Integer): IFeatMgrView; dispid 66124;
    function AddFeatureMgrView3(var bitmap: Integer; var appView: Integer; 
                                const toolTip: WideString; whichPane: Integer): WordBool; dispid 66125;
    function CreatePlaneAtOffset2(val: Double; flipDir: WordBool): IDispatch; dispid 66126;
    function ICreatePlaneAtOffset2(val: Double; flipDir: WordBool): IRefPlane; dispid 66127;
    function CreatePlaneAtAngle2(val: Double; flipDir: WordBool): IDispatch; dispid 66128;
    function ICreatePlaneAtAngle2(val: Double; flipDir: WordBool): IRefPlane; dispid 66129;
    function CreatePlaneThru3Points2: IDispatch; dispid 66130;
    function ICreatePlaneThru3Points2: IRefPlane; dispid 66131;
    function CreatePlanePerCurveAndPassPoint2(origAtCurve: WordBool): IDispatch; dispid 66132;
    function ICreatePlanePerCurveAndPassPoint2(origAtCurve: WordBool): IRefPlane; dispid 66133;
    function CreatePlaneAtSurface2(interIndex: SYSINT; projOpt: WordBool; reverseDir: WordBool; 
                                   normalPlane: WordBool; angle: Double): IDispatch; dispid 66134;
    function ICreatePlaneAtSurface2(interIndex: SYSINT; projOpt: WordBool; reverseDir: WordBool; 
                                    normalPlane: WordBool; angle: Double): IRefPlane; dispid 66135;
    function GetUserPreferenceIntegerValue(userPreferenceValue: Integer): Integer; dispid 66136;
    function SetUserPreferenceIntegerValue(userPreferenceValue: Integer; Value: Integer): WordBool; dispid 66137;
    function GetUserPreferenceTextFormat(userPreferenceValue: Integer): IDispatch; dispid 66138;
    function IGetUserPreferenceTextFormat(userPreferenceValue: Integer): ITextFormat; dispid 66139;
    function SetUserPreferenceTextFormat(userPreferenceValue: Integer; const Value: IDispatch): WordBool; dispid 66140;
    function ISetUserPreferenceTextFormat(userPreferenceValue: Integer; const Value: ITextFormat): WordBool; dispid 66141;
    procedure InsertRib2(is2Sided: WordBool; reverseThicknessDir: WordBool; thickness: Double; 
                         referenceEdgeIndex: Integer; reverseMaterialDir: WordBool; 
                         isDrafted: WordBool; draftOutward: WordBool; draftAngle: Double; 
                         isNormToSketch: WordBool); dispid 66142;
    function InsertObjectFromFile(const filePath: WideString; createLink: WordBool; xx: Double; 
                                  yy: Double; zz: Double): WordBool; dispid 66143;
    procedure InspectCurvature; dispid 66144;
    procedure RemoveInspectCurvature; dispid 66145;
    function InsertDatumTag2: IDispatch; dispid 66146;
    function IInsertDatumTag2: IDatumTag; dispid 66147;
    function ActivateFeatureMgrView(var appView: Integer): Integer; dispid 66148;
    procedure FeatureSketchDrivenPattern(useCentroid: WordBool); dispid 66149;
    procedure HideShowBodies; dispid 66150;
    procedure HideSolidBody; dispid 66151;
    procedure ShowSolidBody; dispid 66152;
    procedure InsertFramePoint(xx: Double; yy: Double; zz: Double); dispid 66153;
    procedure LockFramePoint; dispid 66154;
    procedure UnlockFramePoint; dispid 66155;
    function InsertGtol: IDispatch; dispid 66156;
    function IInsertGtol: IGtol; dispid 66157;
    function DeActivateFeatureMgrView(var appView: Integer): WordBool; dispid 66158;
    function InsertNote(const text: WideString): IDispatch; dispid 66159;
    function IInsertNote(const text: WideString): INote; dispid 66160;
    procedure SetSaveAsFileName(const fileName: WideString); dispid 66161;
    procedure ClosePrintPreview; dispid 66162;
    procedure HideComponent2; dispid 66163;
    procedure ShowComponent2; dispid 66164;
    function SaveBMP(const filenameIn: WideString; widthIn: Integer; heightIn: Integer): WordBool; dispid 66165;
    procedure InsertSketch2(updateEditRebuild: WordBool); dispid 66166;
    procedure Insert3DSketch2(updateEditRebuild: WordBool); dispid 66167;
    procedure InsertDeleteHole; dispid 66168;
    procedure PreTrimSurface(bMutualTrimIn: WordBool); dispid 66169;
    procedure PostTrimSurface(bSewSurfaceIn: WordBool); dispid 66170;
    procedure SketchConvertIsoCurves(percentRatio: Double; vORuDir: WordBool; 
                                     doConstrain: WordBool; skipHoles: WordBool); dispid 66171;
    procedure SelectLoop; dispid 66172;
    procedure InsertSheetMetalBaseFlange(thickness: Double; thickenDir: WordBool; radius: Double; 
                                         extrudeDist1: Double; extrudeDist2: Double; 
                                         flipExtruDir: WordBool; endCondition1: Integer; 
                                         endCondition2: Integer; dirToUse: Integer); dispid 66173;
    procedure InsertSheetMetalFold; dispid 66174;
    procedure InsertSheetMetalUnfold; dispid 66175;
    procedure InsertSheetMetalMiterFlange(useReliefRatio: WordBool; useDefaultGap: WordBool; 
                                          useAutoRelief: WordBool; globalRadius: Double; 
                                          ripGap: Double; autoReliefRatio: Double; 
                                          autoReliefWidth: Double; autoReliefDepth: Double; 
                                          reliefType: Integer; ripLocation: Integer; 
                                          trimSideBends: WordBool); dispid 66176;
    procedure CreateGroup; dispid 66177;
    procedure RemoveItemsFromGroup; dispid 66178;
    procedure RemoveGroups; dispid 66179;
    function InsertBOMBalloon2(Style: Integer; size: Integer; upperTextStyle: Integer; 
                               const upperText: WideString; lowerTextStyle: Integer; 
                               const lowerText: WideString): IDispatch; dispid 66180;
    function IInsertBOMBalloon2(Style: Integer; size: Integer; upperTextStyle: Integer; 
                                const upperText: WideString; lowerTextStyle: Integer; 
                                const lowerText: WideString): INote; dispid 66181;
    procedure EditRedo(nSteps: LongWord); dispid 66182;
    procedure InsertProtrusionBlend4(closed: WordBool; keepTangency: WordBool; 
                                     forceNonRational: WordBool; tessToleranceFactor: Double; 
                                     startMatchingType: Smallint; endMatchingType: Smallint; 
                                     isThinBody: WordBool; thickness1: Double; thickness2: Double; 
                                     thinType: Smallint); dispid 66183;
    procedure InsertCutBlend4(closed: WordBool; keepTangency: WordBool; forceNonRational: WordBool; 
                              tessToleranceFactor: Double; startMatchingType: Smallint; 
                              endMatchingType: Smallint; isThinBody: WordBool; thickness1: Double; 
                              thickness2: Double; thinType: Smallint); dispid 66184;
    procedure InsertProtrusionSwept4(propagate: WordBool; alignment: WordBool; 
                                     twistCtrlOption: Smallint; keepTangency: WordBool; 
                                     forceNonRational: WordBool; startMatchingType: Smallint; 
                                     endMatchingType: Smallint; isThinBody: WordBool; 
                                     thickness1: Double; thickness2: Double; thinType: Smallint); dispid 66185;
    procedure InsertCutSwept4(propagate: WordBool; alignment: WordBool; twistCtrlOption: Smallint; 
                              keepTangency: WordBool; forceNonRational: WordBool; 
                              startMatchingType: Smallint; endMatchingType: Smallint; 
                              isThinBody: WordBool; thickness1: Double; thickness2: Double; 
                              thinType: Smallint); dispid 66186;
    procedure SelectTangency; dispid 66187;
    function InsertBendTableOpen(const fileName: WideString): WordBool; dispid 66188;
    function InsertBendTableNew(const fileName: WideString; const units: WideString; 
                                const type_: WideString): WordBool; dispid 66189;
    procedure InsertBendTableEdit; dispid 66190;
    procedure DeleteBendTable; dispid 66191;
    procedure InsertSheetMetal3dBend(angle: Double; radius: Double; flipDir: WordBool; 
                                     bendPos: Smallint); dispid 66192;
    function CreateTangentArc2(p1x: Double; p1y: Double; p1z: Double; p2x: Double; p2y: Double; 
                               p2z: Double; arcTypeIn: Integer): WordBool; dispid 66193;
    function GetMassProperties2(var status: Integer): OleVariant; dispid 66194;
    function IGetMassProperties2(var status: Integer): Double; dispid 66195;
    procedure SketchChamfer(angleORdist: Double; dist1: Double; options: Integer); dispid 66196;
    procedure FeatureCut4(sd: WordBool; flip: WordBool; dir: WordBool; t1: Integer; t2: Integer; 
                          d1: Double; d2: Double; dchk1: WordBool; dchk2: WordBool; 
                          ddir1: WordBool; ddir2: WordBool; dang1: Double; dang2: Double; 
                          offsetReverse1: WordBool; offsetReverse2: WordBool; 
                          keepPieceIndex: Integer; normalCut: WordBool); dispid 66197;
    function GetPropertyManagerPage(dialogId: Integer; const title: WideString; 
                                    const handler: IUnknown): IPropertyManagerPage; dispid 66198;
    procedure AlignOrdinate; dispid 66199;
    procedure EditOrdinate; dispid 66200;
    function ReattachOrdinate: WordBool; dispid 66201;
    function EditBalloonProperties(Style: Integer; size: Integer; upperTextStyle: Integer; 
                                   const upperText: WideString; lowerTextStyle: Integer; 
                                   const lowerText: WideString): IDispatch; dispid 66202;
    function EditDimensionProperties2(tolType: Integer; tolMax: Double; tolMin: Double; 
                                      const tolMaxFit: WideString; const tolMinFit: WideString; 
                                      useDocPrec: WordBool; precision: Integer; arrowsIn: Integer; 
                                      useDocArrows: WordBool; arrow1: Integer; arrow2: Integer; 
                                      const prefixText: WideString; const suffixText: WideString; 
                                      showValue: WordBool; const calloutText1: WideString; 
                                      const calloutText2: WideString; centerText: WordBool): WordBool; dispid 66203;
    procedure InsertSheetMetalClosedCorner; dispid 66204;
    function SketchUseEdge2(chain: WordBool): WordBool; dispid 66205;
    function SketchOffsetEntities2(offset: Double; bothDirections: WordBool; chain: WordBool): WordBool; dispid 66206;
    function SketchOffset2(offset: Double; bothDirections: WordBool; chain: WordBool): WordBool; dispid 66207;
    function AddDimension2(x: Double; y: Double; z: Double): IDispatch; dispid 66208;
    function IAddDimension2(x: Double; y: Double; z: Double): IDisplayDimension; dispid 66209;
    function AddHorizontalDimension2(x: Double; y: Double; z: Double): IDispatch; dispid 66210;
    function IAddHorizontalDimension2(x: Double; y: Double; z: Double): IDisplayDimension; dispid 66211;
    function AddVerticalDimension2(x: Double; y: Double; z: Double): IDispatch; dispid 66212;
    function IAddVerticalDimension2(x: Double; y: Double; z: Double): IDisplayDimension; dispid 66213;
    function AddRadialDimension2(x: Double; y: Double; z: Double): IDispatch; dispid 66214;
    function IAddRadialDimension2(x: Double; y: Double; z: Double): IDisplayDimension; dispid 66215;
    function AddDiameterDimension2(x: Double; y: Double; z: Double): IDispatch; dispid 66216;
    function IAddDiameterDimension2(x: Double; y: Double; z: Double): IDisplayDimension; dispid 66217;
    function GetUserUnit(UnitType: Integer): IDispatch; dispid 66218;
    function IGetUserUnit(UnitType: Integer): IUserUnit; dispid 66219;
    function InsertWeldSymbol3: IDispatch; dispid 66220;
    function IInsertWeldSymbol3: IWeldSymbol; dispid 66221;
    function SaveAs3(const newName: WideString; saveAsVersion: Integer; options: Integer): Integer; dispid 66222;
    function GetUserPreferenceStringValue(userPreference: Integer): WideString; dispid 66223;
    function SetUserPreferenceStringValue(userPreference: Integer; const Value: WideString): WordBool; dispid 66224;
    procedure DeleteDesignTable; dispid 66225;
    function EditRebuild3: WordBool; dispid 66226;
    function ForceRebuild3(topOnly: WordBool): WordBool; dispid 66227;
    function FeatureFillet5(options: Integer; r1: Double; ftyp: Integer; overFlowType: Integer; 
                            radii: OleVariant; setBackDistances: OleVariant; 
                            pointRadiusArray: OleVariant): Integer; dispid 66228;
    function IFeatureFillet5(options: Integer; r1: Double; ftyp: Integer; overFlowType: Integer; 
                             nRadii: Integer; var radii: Double; setbackDistCount: Integer; 
                             var setBackDistances: Double; PointCount: Integer; 
                             var pointRadiusArray: Double): Integer; dispid 66229;
    procedure InsertSheetMetalBreakCorner(type_: Integer; distance: Double); dispid 66230;
    procedure InsertSheetMetalHem(type_: Integer; position: Integer; reverse: WordBool; 
                                  dLength: Double; dGap: Double; dRad: Double; dAngle: Double; 
                                  dMiterGap: Double); dispid 66231;
    function CreatePlaneAtOffset3(val: Double; flipDir: WordBool; autoSize: WordBool): IDispatch; dispid 66232;
    function ICreatePlaneAtOffset3(val: Double; flipDir: WordBool; autoSize: WordBool): IRefPlane; dispid 66233;
    function CreatePlaneAtAngle3(val: Double; flipDir: WordBool; autoSize: WordBool): IDispatch; dispid 66234;
    function ICreatePlaneAtAngle3(val: Double; flipDir: WordBool; autoSize: WordBool): IRefPlane; dispid 66235;
    function CreatePlaneThru3Points3(autoSize: WordBool): IDispatch; dispid 66236;
    function ICreatePlaneThru3Points3(autoSize: WordBool): IRefPlane; dispid 66237;
    function CreatePlaneThruPtParallelToPlane(autoSize: WordBool): IDispatch; dispid 66238;
    function ICreatePlaneThruPtParallelToPlane(autoSize: WordBool): IRefPlane; dispid 66239;
    function CreatePlaneThruLineAndPt(autoSize: WordBool): IDispatch; dispid 66240;
    function ICreatePlaneThruLineAndPt(autoSize: WordBool): IRefPlane; dispid 66241;
    function CreatePlanePerCurveAndPassPoint3(origAtCurve: WordBool; autoSize: WordBool): IDispatch; dispid 66242;
    function ICreatePlanePerCurveAndPassPoint3(origAtCurve: WordBool; autoSize: WordBool): IRefPlane; dispid 66243;
    function CreatePlaneAtSurface3(interIndex: Smallint; projOpt: WordBool; reverseDir: WordBool; 
                                   normalPlane: WordBool; angle: Double; autoSize: WordBool): IDispatch; dispid 66244;
    function ICreatePlaneAtSurface3(interIndex: Smallint; projOpt: WordBool; reverseDir: WordBool; 
                                    normalPlane: WordBool; angle: Double; autoSize: WordBool): IRefPlane; dispid 66245;
    function InsertAxis2(autoSize: WordBool): WordBool; dispid 66246;
    function InsertSketchPicture(const fileName: WideString): WordBool; dispid 66247;
    procedure GetZebraStripeData(var size: Double; var ratio: Double; var color1: Integer; 
                                 var color2: Integer); dispid 66248;
    procedure SetZebraStripeData(size: Double; ratio: Double; color1: Integer; color2: Integer); dispid 66249;
    procedure InsertSketchPictureData(width: Smallint; height: Smallint; pDataIn: Integer); dispid 66250;
    procedure FeatureCurvePattern(num1: Integer; spacing1: Double; num2: Integer; spacing2: Double; 
                                  flipDir1: WordBool; flipDir2: WordBool; equalSpacing1: WordBool; 
                                  equalSpacing2: WordBool; useCentroid: WordBool; 
                                  alignToSeed: WordBool; offsetCurve: WordBool; 
                                  patternSeedOnly: WordBool); dispid 66251;
    procedure InsertFeatureReplaceFace; dispid 66252;
    procedure InsertRip(gap: Double); dispid 66253;
    function InsertSheetMetalEdgeFlange(const flangeEdge: IDispatch; const sketchFeat: IDispatch; 
                                        booleanOptions: Integer; dAngle: Double; dRadius: Double; 
                                        bendPosition: Integer; dOffsetDist: Double; 
                                        reliefType: Integer; dReliefRatio: Double; 
                                        dReliefWidth: Double; dReliefDepth: Double): IDispatch; dispid 66254;
    function IInsertSheetMetalEdgeFlange(const flangeEdge: IEdge; const sketchFeat: IFeature; 
                                         booleanOptions: Integer; dAngle: Double; dRadius: Double; 
                                         bendPosition: Integer; dOffsetDist: Double; 
                                         reliefType: Integer; dReliefRatio: Double; 
                                         dReliefWidth: Double; dReliefDepth: Double): IFeature; dispid 66255;
    function InsertSketchText(Ptx: Double; Pty: Double; Ptz: Double; const text: WideString; 
                              alignment: Integer; flipDirection: Integer; 
                              horizontalMirror: Integer; WidthFactor: Integer; 
                              spaceBetweenChars: Integer): IDispatch; dispid 66256;
    function IInsertSketchText(Ptx: Double; Pty: Double; Ptz: Double; const text: WideString; 
                               alignment: Integer; flipDirection: Integer; 
                               horizontalMirror: Integer; WidthFactor: Integer; 
                               spaceBetweenChars: Integer): ISketchText; dispid 66257;
    procedure DissolveSketchText; dispid 66258;
    procedure MoldDraftAnalysis(angle: Double; options: Integer; colors: OleVariant; shows: Integer); dispid 66259;
    procedure InsertSheetMetalJog(angle: Double; radius: Double; offsetDist: Double; 
                                  flipDir: WordBool; fixProjLen: WordBool; dimPos: Smallint; 
                                  bendPos: Smallint); dispid 66260;
    function InsertSketchForEdgeFlange(const flangeEdge: IDispatch; dAngle: Double; 
                                       flipDir: WordBool): IDispatch; dispid 66261;
    function IInsertSketchForEdgeFlange(const flangeEdge: IEdge; dAngle: Double; flipDir: WordBool): IFeature; dispid 66262;
    procedure ClearSelection2(All: WordBool); dispid 66263;
    procedure ListExternalFileReferences2(out modelPathName: OleVariant; 
                                          out componentPathName: OleVariant; 
                                          out feature: OleVariant; out dataType: OleVariant; 
                                          out status: OleVariant; out refEntity: OleVariant; 
                                          out featCom: OleVariant); dispid 66264;
    function ListExternalFileReferencesCount2: Integer; dispid 66265;
    procedure IListExternalFileReferences2(numRefs: Integer; out modelPathName: WideString; 
                                           out compPathName: WideString; out feature: WideString; 
                                           out dataType: WideString; out status: Integer; 
                                           out refEntity: WideString; out featComp: WideString); dispid 66266;
    function InsertDeleteFace2(refill: Integer): WordBool; dispid 66267;
    procedure AddLoftSection; dispid 66268;
    function InsertMacroFeature(const cmdFile: WideString; const cmdModule: WideString; 
                                const cmdProcedure: WideString; paramNames: OleVariant; 
                                paramTypes: OleVariant; paramValues: OleVariant; 
                                const pmFile: WideString; const pmModule: WideString; 
                                const pmProcedure: WideString): IDispatch; dispid 66269;
    function IInsertMacroFeature(const cmdFile: WideString; const cmdModule: WideString; 
                                 const cmdProcedure: WideString; paramCount: Integer; 
                                 var paramNames: WideString; var paramTypes: Integer; 
                                 var paramValues: WideString; const pmFile: WideString; 
                                 const pmModule: WideString; const pmProcedure: WideString): IFeature; dispid 66270;
    procedure ListAuxiliaryExternalFileReferences(out feature: OleVariant; 
                                                  out externalFileName: OleVariant); dispid 66271;
    function ListAuxiliaryExternalFileReferencesCount: Integer; dispid 66272;
    procedure IListAuxiliaryExternalFileReferences(numRefs: Integer; out feature: WideString; 
                                                   out externalFileName: WideString); dispid 66273;
    procedure FeatureCut5(sd: WordBool; flip: WordBool; dir: WordBool; t1: Integer; t2: Integer; 
                          d1: Double; d2: Double; dchk1: WordBool; dchk2: WordBool; 
                          ddir1: WordBool; ddir2: WordBool; dang1: Double; dang2: Double; 
                          offsetReverse1: WordBool; offsetReverse2: WordBool; 
                          translateSurface1: WordBool; translateSurface2: WordBool; 
                          keepPieceIndex: Integer; normalCut: WordBool); dispid 66274;
    procedure FeatureBoss2(sd: WordBool; flip: WordBool; dir: WordBool; t1: Integer; t2: Integer; 
                           d1: Double; d2: Double; dchk1: WordBool; dchk2: WordBool; 
                           ddir1: WordBool; ddir2: WordBool; dang1: Double; dang2: Double; 
                           offsetReverse1: WordBool; offsetReverse2: WordBool; 
                           translateSurface1: WordBool; translateSurface2: WordBool); dispid 66275;
    function DissolveLibraryFeature: WordBool; dispid 66276;
    procedure FeatureExtruRefSurface2(sd: WordBool; flip: WordBool; dir: WordBool; t1: Integer; 
                                      t2: Integer; d1: Double; d2: Double; dchk1: WordBool; 
                                      dchk2: WordBool; ddir1: WordBool; ddir2: WordBool; 
                                      dang1: Double; dang2: Double; offsetReverse1: WordBool; 
                                      offsetReverse2: WordBool; translateSurface1: WordBool; 
                                      translateSurface2: WordBool); dispid 66277;
    procedure FeatureCutThin2(sd: WordBool; flip: WordBool; dir: WordBool; t1: Integer; 
                              t2: Integer; d1: Double; d2: Double; dchk1: WordBool; 
                              dchk2: WordBool; ddir1: WordBool; ddir2: WordBool; dang1: Double; 
                              dang2: Double; offsetReverse1: WordBool; offsetReverse2: WordBool; 
                              translateSurface1: WordBool; translateSurface2: WordBool; 
                              thk1: Double; thk2: Double; endThk: Double; revThinDir: Integer; 
                              capEnds: Integer; addBends: WordBool; bendRad: Double); dispid 66278;
    procedure FeatureBossThin2(sd: WordBool; flip: WordBool; dir: WordBool; t1: Integer; 
                               t2: Integer; d1: Double; d2: Double; dchk1: WordBool; 
                               dchk2: WordBool; ddir1: WordBool; ddir2: WordBool; dang1: Double; 
                               dang2: Double; offsetReverse1: WordBool; offsetReverse2: WordBool; 
                               translateSurface1: WordBool; translateSurface2: WordBool; 
                               thk1: Double; thk2: Double; endThk: Double; revThinDir: Integer; 
                               capEnds: Integer; addBends: WordBool; bendRad: Double); dispid 66279;
    procedure SimpleHole3(dia: Double; sd: WordBool; flip: WordBool; dir: WordBool; t1: Integer; 
                          t2: Integer; d1: Double; d2: Double; dchk1: WordBool; dchk2: WordBool; 
                          ddir1: WordBool; ddir2: WordBool; dang1: Double; dang2: Double; 
                          offsetReverse1: WordBool; offsetReverse2: WordBool; 
                          translateSurface1: WordBool; translateSurface2: WordBool); dispid 66280;
    procedure EditUndo2(Steps: Integer); dispid 66281;
    procedure EditRedo2(Steps: Integer); dispid 66282;
    function AddConfiguration3(const Name: WideString; const comment: WideString; 
                               const alternateName: WideString; options: Integer): IDispatch; dispid 66283;
    function IAddConfiguration3(const Name: WideString; const comment: WideString; 
                                const alternateName: WideString; options: Integer): IConfiguration; dispid 66284;
    function EditConfiguration3(const Name: WideString; const newName: WideString; 
                                const comment: WideString; const alternateName: WideString; 
                                options: Integer): WordBool; dispid 66285;
    function GetEquationMgr: IEquationMgr; dispid 66286;
    function ClosestDistance(const object1: IDispatch; const object2: IDispatch; 
                             out point1: OleVariant; out point2: OleVariant): Double; dispid 66287;
    function IClosestDistance(const object1: IDispatch; const object2: IDispatch; 
                              out point1: Double; out point2: Double): Double; dispid 66288;
    function ReloadOrReplace(ReadOnly: WordBool; const ReplaceFileName: WideString; 
                             DiscardChanges: WordBool): Integer; dispid 66289;
    property FeatureManagerSplitterPosition: Double dispid 66290;
    function GetCustomInfoValue(const configuration: WideString; const FieldName: WideString): WideString; dispid 66291;
    property printer: WideString dispid 66292;
    property PageSetup: IDispatch readonly dispid 66293;
    property IPageSetup: IPageSetup readonly dispid 66294;
    function InsertStackedBalloon(Style: Integer; size: Integer; upperTextStyle: Integer; 
                                  const upperText: WideString; lowerTextStyle: Integer; 
                                  const lowerText: WideString): INote; dispid 66295;
    function SaveAs4(const Name: WideString; Version: Integer; options: Integer; 
                     var Errors: Integer; var Warnings: Integer): WordBool; dispid 66296;
    function Save3(options: Integer; var Errors: Integer; var Warnings: Integer): WordBool; dispid 66297;
    function CreatePlaneFixed2(P1: OleVariant; P2: OleVariant; P3: OleVariant; useGlobal: WordBool): IDispatch; dispid 66298;
    function ICreatePlaneFixed2(var P1: Double; var P2: Double; var P3: Double; useGlobal: WordBool): IRefPlane; dispid 66299;
    property LargeAssemblyMode: WordBool dispid 66300;
    function AddOrEditConfiguration(const configName: WideString; params: OleVariant; 
                                    values: OleVariant): Integer; dispid 66301;
    function IAddOrEditConfiguration(const configName: WideString; paramCount: Integer; 
                                     var paramNames: WideString; var paramValues: WideString): Integer; dispid 66302;
    function ForceReleaseLocks: Integer; dispid 66303;
    property FeatureManager: IFeatureManager readonly dispid 66304;
    property ModelViewManager: IModelViewManager readonly dispid 66305;
    property Extension: IModelDocExtension readonly dispid 66306;
    property ConfigurationManager: IConfigurationManager readonly dispid 66307;
  end;

// *********************************************************************//
// Interface: IModelView
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {83A33D4C-27C5-11CE-BFD4-00400513BB57}
// *********************************************************************//
  IModelView = interface(IDispatch)
    ['{83A33D4C-27C5-11CE-BFD4-00400513BB57}']
    function Get_xform: OleVariant; safecall;
    procedure Set_xform(retval: OleVariant); safecall;
    function Get_Orientation: OleVariant; safecall;
    procedure Set_Orientation(retval: OleVariant); safecall;
    function Get_Translation: OleVariant; safecall;
    procedure Set_Translation(retval: OleVariant); safecall;
    function Get_Scale: Double; safecall;
    procedure Set_Scale(retval: Double); safecall;
    function Get_IXform: Double; safecall;
    procedure Set_IXform(var retval: Double); safecall;
    function Get_IOrientation: Double; safecall;
    procedure Set_IOrientation(var retval: Double); safecall;
    function Get_ITranslation: Double; safecall;
    procedure Set_ITranslation(var retval: Double); safecall;
    function GetViewHWnd: Integer; safecall;
    procedure StartDynamics; safecall;
    procedure StopDynamics; safecall;
    procedure AddPerspective; safecall;
    procedure RemovePerspective; safecall;
    function HasPerspective: WordBool; safecall;
    function GetEyePoint: OleVariant; safecall;
    procedure IGetEyePoint(var eyept: Double); safecall;
    function GetViewPlaneDistance: Double; safecall;
    procedure InitializeShading; safecall;
    function Get_Orientation2: OleVariant; safecall;
    procedure Set_Orientation2(retval: OleVariant); safecall;
    function Get_Translation2: OleVariant; safecall;
    procedure Set_Translation2(retval: OleVariant); safecall;
    function Get_IOrientation2: Double; safecall;
    procedure Set_IOrientation2(var retval: Double); safecall;
    function Get_ITranslation2: Double; safecall;
    procedure Set_ITranslation2(var retval: Double); safecall;
    function GetDisplayState(displayType: Integer): WordBool; safecall;
    function GetViewDIB: Integer; safecall;
    procedure ZoomByFactor(factor: Double); safecall;
    procedure TranslateBy(x: Double; y: Double); safecall;
    procedure RotateAboutCenter(xAngle: Double; yAngle: Double); safecall;
    procedure RotateAboutPoint(xAngle: Double; yAngle: Double; Ptx: Double; Pty: Double; Ptz: Double); safecall;
    procedure RotateAboutAxis(angle: Double; Ptx: Double; Pty: Double; Ptz: Double; 
                              AxisVecX: Double; AxisVecY: Double; AxisVecZ: Double); safecall;
    function SetEyePoint(eyept: OleVariant): WordBool; safecall;
    function ISetEyePoint(var eyept: Double): WordBool; safecall;
    function SetStereoSeparation(dfSeparation: OleVariant): WordBool; safecall;
    function ISetStereoSeparation(var dfSeparation: Double): WordBool; safecall;
    function GetStereoSeparation: OleVariant; safecall;
    function IGetStereoSeparation: Double; safecall;
    procedure GetDIBHeader(ldib: Integer); safecall;
    procedure GetStripsOfDIB(ldib: Integer; nScanLinesPerStrip: Integer; stripIndex: Integer); safecall;
    procedure Set_FrameLeft(Param1: SYSINT); safecall;
    procedure Set_FrameTop(Param1: SYSINT); safecall;
    procedure Set_FrameWidth(Param1: SYSINT); safecall;
    procedure Set_FrameHeight(Param1: SYSINT); safecall;
    procedure Set_FrameState(Param1: SYSINT); safecall;
    function Get_ObjectSizesAway: Double; safecall;
    procedure Set_ObjectSizesAway(retval: Double); safecall;
    function Get_DynamicMode: Integer; safecall;
    procedure DrawHighlightedItems; safecall;
    function GetNext: IDispatch; safecall;
    function IGetNext: IModelView; safecall;
    function Get_Scale2: Double; safecall;
    procedure Set_Scale2(retval: Double); safecall;
    function Get_HlrQuality: Integer; safecall;
    procedure Set_HlrQuality(retval: Integer); safecall;
    function Get_XorHighlight: WordBool; safecall;
    procedure Set_XorHighlight(retval: WordBool); safecall;
    function Get_DisplayZebraStripes: WordBool; safecall;
    procedure Set_DisplayZebraStripes(retval: WordBool); safecall;
    function Get_Transform: IMathTransform; safecall;
    procedure Set_Transform(const xform: IMathTransform); safecall;
    function Get_Orientation3: IMathTransform; safecall;
    procedure Set_Orientation3(const xform: IMathTransform); safecall;
    function Get_Translation3: IMathVector; safecall;
    procedure Set_Translation3(const VectorObj: IMathVector); safecall;
    procedure ProjectModelPoint(x: Double; y: Double; z: Double; out xOut: Double; 
                                out yOut: Double; out zOut: Double); safecall;
    procedure UnprojectModelPoint(x: Double; y: Double; z: Double; out xOut: Double; 
                                  out yOut: Double; out zOut: Double); safecall;
    property xform: OleVariant read Get_xform write Set_xform;
    property Orientation: OleVariant read Get_Orientation write Set_Orientation;
    property Translation: OleVariant read Get_Translation write Set_Translation;
    property Scale: Double read Get_Scale write Set_Scale;
    property Orientation2: OleVariant read Get_Orientation2 write Set_Orientation2;
    property Translation2: OleVariant read Get_Translation2 write Set_Translation2;
    property FrameLeft: SYSINT write Set_FrameLeft;
    property FrameTop: SYSINT write Set_FrameTop;
    property FrameWidth: SYSINT write Set_FrameWidth;
    property FrameHeight: SYSINT write Set_FrameHeight;
    property FrameState: SYSINT write Set_FrameState;
    property ObjectSizesAway: Double read Get_ObjectSizesAway write Set_ObjectSizesAway;
    property DynamicMode: Integer read Get_DynamicMode;
    property Scale2: Double read Get_Scale2 write Set_Scale2;
    property HlrQuality: Integer read Get_HlrQuality write Set_HlrQuality;
    property XorHighlight: WordBool read Get_XorHighlight write Set_XorHighlight;
    property DisplayZebraStripes: WordBool read Get_DisplayZebraStripes write Set_DisplayZebraStripes;
    property Transform: IMathTransform read Get_Transform write Set_Transform;
    property Orientation3: IMathTransform read Get_Orientation3 write Set_Orientation3;
    property Translation3: IMathVector read Get_Translation3 write Set_Translation3;
  end;

// *********************************************************************//
// DispIntf:  IModelViewDisp
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {83A33D4C-27C5-11CE-BFD4-00400513BB57}
// *********************************************************************//
  IModelViewDisp = dispinterface
    ['{83A33D4C-27C5-11CE-BFD4-00400513BB57}']
    property xform: OleVariant dispid 1;
    property Orientation: OleVariant dispid 3;
    property Translation: OleVariant dispid 4;
    property Scale: Double dispid 5;
    function IXform: Double; dispid 6;
    function IOrientation: Double; dispid 7;
    function ITranslation: Double; dispid 8;
    function GetViewHWnd: Integer; dispid 2;
    procedure StartDynamics; dispid 9;
    procedure StopDynamics; dispid 10;
    procedure AddPerspective; dispid 11;
    procedure RemovePerspective; dispid 12;
    function HasPerspective: WordBool; dispid 13;
    function GetEyePoint: OleVariant; dispid 14;
    procedure IGetEyePoint(var eyept: Double); dispid 15;
    function GetViewPlaneDistance: Double; dispid 16;
    procedure InitializeShading; dispid 17;
    property Orientation2: OleVariant dispid 18;
    property Translation2: OleVariant dispid 19;
    function IOrientation2: Double; dispid 20;
    function ITranslation2: Double; dispid 21;
    function GetDisplayState(displayType: Integer): WordBool; dispid 22;
    function GetViewDIB: Integer; dispid 23;
    procedure ZoomByFactor(factor: Double); dispid 24;
    procedure TranslateBy(x: Double; y: Double); dispid 25;
    procedure RotateAboutCenter(xAngle: Double; yAngle: Double); dispid 26;
    procedure RotateAboutPoint(xAngle: Double; yAngle: Double; Ptx: Double; Pty: Double; Ptz: Double); dispid 27;
    procedure RotateAboutAxis(angle: Double; Ptx: Double; Pty: Double; Ptz: Double; 
                              AxisVecX: Double; AxisVecY: Double; AxisVecZ: Double); dispid 28;
    function SetEyePoint(eyept: OleVariant): WordBool; dispid 29;
    function ISetEyePoint(var eyept: Double): WordBool; dispid 30;
    function SetStereoSeparation(dfSeparation: OleVariant): WordBool; dispid 31;
    function ISetStereoSeparation(var dfSeparation: Double): WordBool; dispid 32;
    function GetStereoSeparation: OleVariant; dispid 33;
    function IGetStereoSeparation: Double; dispid 34;
    procedure GetDIBHeader(ldib: Integer); dispid 35;
    procedure GetStripsOfDIB(ldib: Integer; nScanLinesPerStrip: Integer; stripIndex: Integer); dispid 36;
    property FrameLeft: SYSINT writeonly dispid 37;
    property FrameTop: SYSINT writeonly dispid 38;
    property FrameWidth: SYSINT writeonly dispid 39;
    property FrameHeight: SYSINT writeonly dispid 40;
    property FrameState: SYSINT writeonly dispid 41;
    property ObjectSizesAway: Double dispid 42;
    property DynamicMode: Integer readonly dispid 43;
    procedure DrawHighlightedItems; dispid 44;
    function GetNext: IDispatch; dispid 45;
    function IGetNext: IModelView; dispid 46;
    property Scale2: Double dispid 47;
    property HlrQuality: Integer dispid 48;
    property XorHighlight: WordBool dispid 49;
    property DisplayZebraStripes: WordBool dispid 50;
    property Transform: IMathTransform dispid 51;
    property Orientation3: IMathTransform dispid 52;
    property Translation3: IMathVector dispid 53;
    procedure ProjectModelPoint(x: Double; y: Double; z: Double; out xOut: Double; 
                                out yOut: Double; out zOut: Double); dispid 54;
    procedure UnprojectModelPoint(x: Double; y: Double; z: Double; out xOut: Double; 
                                  out yOut: Double; out zOut: Double); dispid 55;
  end;

// *********************************************************************//
// Interface: IMathTransform
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {F7D97F82-162E-11D4-AEAB-00C04FA0AC51}
// *********************************************************************//
  IMathTransform = interface(IDispatch)
    ['{F7D97F82-162E-11D4-AEAB-00C04FA0AC51}']
    function Multiply(const TransformObjIn: IDispatch): IDispatch; safecall;
    function IMultiply(const TransformObjIn: IMathTransform): IMathTransform; safecall;
    function Get_ArrayData: OleVariant; safecall;
    procedure Set_ArrayData(ArrayDataOut: OleVariant); safecall;
    function Get_IArrayData: Double; safecall;
    procedure Set_IArrayData(var ArrayDataOut: Double); safecall;
    procedure GetData(var xAxisObjOut: IDispatch; var yAxisObjOut: IDispatch; 
                      var zAxisObjOut: IDispatch; var TransformObjOut: IDispatch; 
                      var scaleOut: Double); safecall;
    procedure IGetData(var xAxisObjOut: IMathVector; var yAxisObjOut: IMathVector; 
                       var zAxisObjOut: IMathVector; var TransformObjOut: IMathVector; 
                       var scaleOut: Double); safecall;
    procedure SetData(const xAxisObjIn: IDispatch; const yAxisObjIn: IDispatch; 
                      const zAxisObjIn: IDispatch; const TransformObjIn: IDispatch; 
                      scaleValIn: Double); safecall;
    procedure ISetData(const xAxisObjIn: IMathVector; const yAxisObjIn: IMathVector; 
                       const zAxisObjIn: IMathVector; const TransformObjIn: IMathVector; 
                       scaleValIn: Double); safecall;
    function Inverse: IDispatch; safecall;
    function IInverse: IMathTransform; safecall;
    property ArrayData: OleVariant read Get_ArrayData write Set_ArrayData;
  end;

// *********************************************************************//
// DispIntf:  IMathTransformDisp
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {F7D97F82-162E-11D4-AEAB-00C04FA0AC51}
// *********************************************************************//
  IMathTransformDisp = dispinterface
    ['{F7D97F82-162E-11D4-AEAB-00C04FA0AC51}']
    function Multiply(const TransformObjIn: IDispatch): IDispatch; dispid 1;
    function IMultiply(const TransformObjIn: IMathTransform): IMathTransform; dispid 2;
    property ArrayData: OleVariant dispid 3;
    function IArrayData: Double; dispid 4;
    procedure GetData(var xAxisObjOut: IDispatch; var yAxisObjOut: IDispatch; 
                      var zAxisObjOut: IDispatch; var TransformObjOut: IDispatch; 
                      var scaleOut: Double); dispid 5;
    procedure IGetData(var xAxisObjOut: IMathVector; var yAxisObjOut: IMathVector; 
                       var zAxisObjOut: IMathVector; var TransformObjOut: IMathVector; 
                       var scaleOut: Double); dispid 6;
    procedure SetData(const xAxisObjIn: IDispatch; const yAxisObjIn: IDispatch; 
                      const zAxisObjIn: IDispatch; const TransformObjIn: IDispatch; 
                      scaleValIn: Double); dispid 7;
    procedure ISetData(const xAxisObjIn: IMathVector; const yAxisObjIn: IMathVector; 
                       const zAxisObjIn: IMathVector; const TransformObjIn: IMathVector; 
                       scaleValIn: Double); dispid 8;
    function Inverse: IDispatch; dispid 9;
    function IInverse: IMathTransform; dispid 10;
  end;

// *********************************************************************//
// Interface: IMathVector
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {F7D97F86-162E-11D4-AEAB-00C04FA0AC51}
// *********************************************************************//
  IMathVector = interface(IDispatch)
    ['{F7D97F86-162E-11D4-AEAB-00C04FA0AC51}']
    function MultiplyTransform(const TransformObjIn: IDispatch): IDispatch; safecall;
    function IMultiplyTransform(const TransformObjIn: IMathTransform): IMathVector; safecall;
    function Get_ArrayData: OleVariant; safecall;
    procedure Set_ArrayData(ArrayDataOut: OleVariant); safecall;
    function Get_IArrayData: Double; safecall;
    procedure Set_IArrayData(var ArrayDataOut: Double); safecall;
    function Add(const vectorObjIn: IDispatch): IDispatch; safecall;
    function IAdd(const vectorObjIn: IMathVector): IMathVector; safecall;
    function Subtract(const vectorObjIn: IDispatch): IDispatch; safecall;
    function ISubtract(const vectorObjIn: IMathVector): IMathVector; safecall;
    function Scale(valueIn: Double): IDispatch; safecall;
    function IScale(valueIn: Double): IMathVector; safecall;
    function GetLength: Double; safecall;
    function Dot(const vectorObjIn: IDispatch): Double; safecall;
    function IDot(const vectorObjIn: IMathVector): Double; safecall;
    function Cross(const vectorObjIn: IDispatch): IDispatch; safecall;
    function ICross(const vectorObjIn: IMathVector): IMathVector; safecall;
    function ConvertToPoint: IDispatch; safecall;
    function IConvertToPoint: IMathPoint; safecall;
    function Normalise: IMathVector; safecall;
    property ArrayData: OleVariant read Get_ArrayData write Set_ArrayData;
  end;

// *********************************************************************//
// DispIntf:  IMathVectorDisp
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {F7D97F86-162E-11D4-AEAB-00C04FA0AC51}
// *********************************************************************//
  IMathVectorDisp = dispinterface
    ['{F7D97F86-162E-11D4-AEAB-00C04FA0AC51}']
    function MultiplyTransform(const TransformObjIn: IDispatch): IDispatch; dispid 1;
    function IMultiplyTransform(const TransformObjIn: IMathTransform): IMathVector; dispid 2;
    property ArrayData: OleVariant dispid 3;
    function IArrayData: Double; dispid 4;
    function Add(const vectorObjIn: IDispatch): IDispatch; dispid 5;
    function IAdd(const vectorObjIn: IMathVector): IMathVector; dispid 6;
    function Subtract(const vectorObjIn: IDispatch): IDispatch; dispid 7;
    function ISubtract(const vectorObjIn: IMathVector): IMathVector; dispid 8;
    function Scale(valueIn: Double): IDispatch; dispid 9;
    function IScale(valueIn: Double): IMathVector; dispid 10;
    function GetLength: Double; dispid 11;
    function Dot(const vectorObjIn: IDispatch): Double; dispid 12;
    function IDot(const vectorObjIn: IMathVector): Double; dispid 13;
    function Cross(const vectorObjIn: IDispatch): IDispatch; dispid 14;
    function ICross(const vectorObjIn: IMathVector): IMathVector; dispid 15;
    function ConvertToPoint: IDispatch; dispid 16;
    function IConvertToPoint: IMathPoint; dispid 17;
    function Normalise: IMathVector; dispid 18;
  end;

// *********************************************************************//
// Interface: IMathPoint
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {F7D97F84-162E-11D4-AEAB-00C04FA0AC51}
// *********************************************************************//
  IMathPoint = interface(IDispatch)
    ['{F7D97F84-162E-11D4-AEAB-00C04FA0AC51}']
    function MultiplyTransform(const TransformObjIn: IDispatch): IDispatch; safecall;
    function IMultiplyTransform(const TransformObjIn: IMathTransform): IMathPoint; safecall;
    function Get_ArrayData: OleVariant; safecall;
    procedure Set_ArrayData(ArrayDataOut: OleVariant); safecall;
    function Get_IArrayData: Double; safecall;
    procedure Set_IArrayData(var ArrayDataOut: Double); safecall;
    function AddVector(const vectorObjIn: IDispatch): IDispatch; safecall;
    function IAddVector(const vectorObjIn: IMathVector): IMathPoint; safecall;
    function SubtractVector(const vectorObjIn: IDispatch): IDispatch; safecall;
    function ISubtractVector(const vectorObjIn: IMathVector): IMathPoint; safecall;
    function Subtract(const pointObjIn: IDispatch): IDispatch; safecall;
    function ISubtract(const pointObjIn: IMathPoint): IMathVector; safecall;
    function Scale(valueIn: Double): IDispatch; safecall;
    function IScale(valueIn: Double): IMathPoint; safecall;
    function ConvertToVector: IDispatch; safecall;
    function IConvertToVector: IMathVector; safecall;
    property ArrayData: OleVariant read Get_ArrayData write Set_ArrayData;
  end;

// *********************************************************************//
// DispIntf:  IMathPointDisp
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {F7D97F84-162E-11D4-AEAB-00C04FA0AC51}
// *********************************************************************//
  IMathPointDisp = dispinterface
    ['{F7D97F84-162E-11D4-AEAB-00C04FA0AC51}']
    function MultiplyTransform(const TransformObjIn: IDispatch): IDispatch; dispid 1;
    function IMultiplyTransform(const TransformObjIn: IMathTransform): IMathPoint; dispid 2;
    property ArrayData: OleVariant dispid 3;
    function IArrayData: Double; dispid 4;
    function AddVector(const vectorObjIn: IDispatch): IDispatch; dispid 5;
    function IAddVector(const vectorObjIn: IMathVector): IMathPoint; dispid 6;
    function SubtractVector(const vectorObjIn: IDispatch): IDispatch; dispid 7;
    function ISubtractVector(const vectorObjIn: IMathVector): IMathPoint; dispid 8;
    function Subtract(const pointObjIn: IDispatch): IDispatch; dispid 9;
    function ISubtract(const pointObjIn: IMathPoint): IMathVector; dispid 10;
    function Scale(valueIn: Double): IDispatch; dispid 11;
    function IScale(valueIn: Double): IMathPoint; dispid 12;
    function ConvertToVector: IDispatch; dispid 13;
    function IConvertToVector: IMathVector; dispid 14;
  end;

// *********************************************************************//
// Interface: ISketch
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {83A33D51-27C5-11CE-BFD4-00400513BB57}
// *********************************************************************//
  ISketch = interface(IDispatch)
    ['{83A33D51-27C5-11CE-BFD4-00400513BB57}']
    function Get_ModelToSketchXform: OleVariant; safecall;
    procedure Set_ModelToSketchXform(retval: OleVariant); safecall;
    function GetLines: OleVariant; safecall;
    function IGetLines: Double; safecall;
    function GetLineCount: Integer; safecall;
    function GetArcs: OleVariant; safecall;
    function IGetArcs: Double; safecall;
    function GetArcCount: Integer; safecall;
    function GetPolylines: OleVariant; safecall;
    function IGetPolylines: Double; safecall;
    function GetPolyLineCount(var PointCount: Integer): Integer; safecall;
    function GetSplines: OleVariant; safecall;
    function IGetSplines: Double; safecall;
    function GetSplineCount(var PointCount: Integer): Integer; safecall;
    function GetEllipses: OleVariant; safecall;
    function IGetEllipses: Double; safecall;
    function GetEllipseCount: Integer; safecall;
    function Get_IModelToSketchXform: Double; safecall;
    function GetUserPoints: OleVariant; safecall;
    function IGetUserPoints: Double; safecall;
    function GetUserPointsCount: Integer; safecall;
    function GetSplinesInterpolate: OleVariant; safecall;
    function IGetSplinesInterpolate: Double; safecall;
    function GetSplineInterpolateCount(var PointCount: Integer): Integer; safecall;
    function GetAutomaticSolve: WordBool; safecall;
    function SetAutomaticSolve(solveFlag: WordBool): WordBool; safecall;
    function ConstrainAll: Integer; safecall;
    function GetSplineParams: OleVariant; safecall;
    function IGetSplineParams: Double; safecall;
    function GetSplineParamsCount(out size: Integer): Integer; safecall;
    function GetParabolas: OleVariant; safecall;
    function IGetParabolas: Double; safecall;
    function GetParabolaCount: Integer; safecall;
    function GetEllipses2: OleVariant; safecall;
    function IGetEllipses2: Double; safecall;
    function GetSketchPoints: OleVariant; safecall;
    function IEnumSketchPoints: IEnumSketchPoints; safecall;
    function GetSketchSegments: OleVariant; safecall;
    function IEnumSketchSegments: IEnumSketchSegments; safecall;
    function Is3D: WordBool; safecall;
    function GetSketchPointsCount: Integer; safecall;
    function GetSketchHatches: OleVariant; safecall;
    function IEnumSketchHatches: IEnumSketchHatches; safecall;
    function GetSplineParams2: OleVariant; safecall;
    function IGetSplineParams2: Double; safecall;
    function GetSplineParamsCount2(out size: Integer): Integer; safecall;
    function GetSketchTextSegments: OleVariant; safecall;
    function IEnumSketchTextSegments: IEnumSketchSegments; safecall;
    function GetConstrainedStatus: Integer; safecall;
    function SetEntityCount(entityType: Integer; entityCount: Integer): WordBool; safecall;
    function CheckFeatureUse(featureType: Integer; var openCount: Integer; var closedCount: Integer): Integer; safecall;
    function MergePoints(distance: Double): WordBool; safecall;
    function GetReferenceEntity(var lEntityType: Integer): IDispatch; safecall;
    function GetContourEdgeCount: Integer; safecall;
    function GetContourEdges(xform: OleVariant): OleVariant; safecall;
    function IGetContourEdges(var xform: Double; edgeCount: Integer): IEdge; safecall;
    function Get_ModelToSketchTransform: IMathTransform; safecall;
    procedure Set_ModelToSketchTransform(const xform: IMathTransform); safecall;
    function AutoDimension(entitiesToDimension: Integer; horizontalScheme: Integer; 
                           horizontalPlacement: Integer; verticalScheme: Integer; 
                           verticalPlacement: Integer): Integer; safecall;
    function GetLineCount2(crossHatchOption: Smallint): Integer; safecall;
    function GetLines2(crossHatchOption: Smallint): OleVariant; safecall;
    function IGetLines2(crossHatchOption: Smallint; arraySize: Integer): Double; safecall;
    function GetArcs2: OleVariant; safecall;
    function IGetArcs2(arraySize: Integer): Double; safecall;
    function GetUserPoints2: OleVariant; safecall;
    function IGetUserPoints2(arraySize: Integer): Double; safecall;
    function GetEllipses3: OleVariant; safecall;
    function IGetEllipses3(arraySize: Integer): Double; safecall;
    function GetParabolas2: OleVariant; safecall;
    function IGetParabolas2(arraySize: Integer): Double; safecall;
    function IsShared: WordBool; safecall;
    property ModelToSketchXform: OleVariant read Get_ModelToSketchXform write Set_ModelToSketchXform;
    property IModelToSketchXform: Double read Get_IModelToSketchXform;
    property ModelToSketchTransform: IMathTransform read Get_ModelToSketchTransform write Set_ModelToSketchTransform;
  end;

// *********************************************************************//
// DispIntf:  ISketchDisp
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {83A33D51-27C5-11CE-BFD4-00400513BB57}
// *********************************************************************//
  ISketchDisp = dispinterface
    ['{83A33D51-27C5-11CE-BFD4-00400513BB57}']
    property ModelToSketchXform: OleVariant dispid 1;
    function GetLines: OleVariant; dispid 2;
    function IGetLines: Double; dispid 3;
    function GetLineCount: Integer; dispid 4;
    function GetArcs: OleVariant; dispid 5;
    function IGetArcs: Double; dispid 6;
    function GetArcCount: Integer; dispid 7;
    function GetPolylines: OleVariant; dispid 8;
    function IGetPolylines: Double; dispid 9;
    function GetPolyLineCount(var PointCount: Integer): Integer; dispid 10;
    function GetSplines: OleVariant; dispid 11;
    function IGetSplines: Double; dispid 12;
    function GetSplineCount(var PointCount: Integer): Integer; dispid 13;
    function GetEllipses: OleVariant; dispid 14;
    function IGetEllipses: Double; dispid 15;
    function GetEllipseCount: Integer; dispid 16;
    property IModelToSketchXform: Double readonly dispid 17;
    function GetUserPoints: OleVariant; dispid 18;
    function IGetUserPoints: Double; dispid 19;
    function GetUserPointsCount: Integer; dispid 20;
    function GetSplinesInterpolate: OleVariant; dispid 21;
    function IGetSplinesInterpolate: Double; dispid 22;
    function GetSplineInterpolateCount(var PointCount: Integer): Integer; dispid 23;
    function GetAutomaticSolve: WordBool; dispid 24;
    function SetAutomaticSolve(solveFlag: WordBool): WordBool; dispid 25;
    function ConstrainAll: Integer; dispid 26;
    function GetSplineParams: OleVariant; dispid 27;
    function IGetSplineParams: Double; dispid 28;
    function GetSplineParamsCount(out size: Integer): Integer; dispid 29;
    function GetParabolas: OleVariant; dispid 30;
    function IGetParabolas: Double; dispid 31;
    function GetParabolaCount: Integer; dispid 32;
    function GetEllipses2: OleVariant; dispid 33;
    function IGetEllipses2: Double; dispid 34;
    function GetSketchPoints: OleVariant; dispid 35;
    function IEnumSketchPoints: IEnumSketchPoints; dispid 36;
    function GetSketchSegments: OleVariant; dispid 37;
    function IEnumSketchSegments: IEnumSketchSegments; dispid 38;
    function Is3D: WordBool; dispid 39;
    function GetSketchPointsCount: Integer; dispid 40;
    function GetSketchHatches: OleVariant; dispid 41;
    function IEnumSketchHatches: IEnumSketchHatches; dispid 42;
    function GetSplineParams2: OleVariant; dispid 43;
    function IGetSplineParams2: Double; dispid 44;
    function GetSplineParamsCount2(out size: Integer): Integer; dispid 45;
    function GetSketchTextSegments: OleVariant; dispid 46;
    function IEnumSketchTextSegments: IEnumSketchSegments; dispid 47;
    function GetConstrainedStatus: Integer; dispid 48;
    function SetEntityCount(entityType: Integer; entityCount: Integer): WordBool; dispid 49;
    function CheckFeatureUse(featureType: Integer; var openCount: Integer; var closedCount: Integer): Integer; dispid 50;
    function MergePoints(distance: Double): WordBool; dispid 51;
    function GetReferenceEntity(var lEntityType: Integer): IDispatch; dispid 52;
    function GetContourEdgeCount: Integer; dispid 53;
    function GetContourEdges(xform: OleVariant): OleVariant; dispid 54;
    function IGetContourEdges(var xform: Double; edgeCount: Integer): IEdge; dispid 55;
    property ModelToSketchTransform: IMathTransform dispid 56;
    function AutoDimension(entitiesToDimension: Integer; horizontalScheme: Integer; 
                           horizontalPlacement: Integer; verticalScheme: Integer; 
                           verticalPlacement: Integer): Integer; dispid 57;
    function GetLineCount2(crossHatchOption: Smallint): Integer; dispid 58;
    function GetLines2(crossHatchOption: Smallint): OleVariant; dispid 59;
    function IGetLines2(crossHatchOption: Smallint; arraySize: Integer): Double; dispid 60;
    function GetArcs2: OleVariant; dispid 61;
    function IGetArcs2(arraySize: Integer): Double; dispid 62;
    function GetUserPoints2: OleVariant; dispid 63;
    function IGetUserPoints2(arraySize: Integer): Double; dispid 64;
    function GetEllipses3: OleVariant; dispid 65;
    function IGetEllipses3(arraySize: Integer): Double; dispid 66;
    function GetParabolas2: OleVariant; dispid 67;
    function IGetParabolas2(arraySize: Integer): Double; dispid 68;
    function IsShared: WordBool; dispid 69;
  end;

// *********************************************************************//
// Interface: IEnumSketchPoints
// Flags:     (272) Hidden OleAutomation
// GUID:      {83A33DCD-27C5-11CE-BFD4-00400513BB57}
// *********************************************************************//
  IEnumSketchPoints = interface(IUnknown)
    ['{83A33DCD-27C5-11CE-BFD4-00400513BB57}']
    function Next(celt: Integer; out rgelt: ISketchPoint; var pceltFetched: Integer): HResult; stdcall;
    function Skip(celt: Integer): HResult; stdcall;
    function Reset: HResult; stdcall;
    function Clone(out ppenum: IEnumSketchPoints): HResult; stdcall;
  end;

// *********************************************************************//
// Interface: ISketchPoint
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {83A33DBD-27C5-11CE-BFD4-00400513BB57}
// *********************************************************************//
  ISketchPoint = interface(IDispatch)
    ['{83A33DBD-27C5-11CE-BFD4-00400513BB57}']
    function Get_x: Double; safecall;
    function Get_y: Double; safecall;
    function Get_z: Double; safecall;
    function GetCoords: Double; safecall;
    function GetId: OleVariant; safecall;
    function IGetID: Integer; safecall;
    function Select(appendFlag: WordBool): WordBool; safecall;
    function SelectByMark(appendFlag: WordBool; mark: Integer): WordBool; safecall;
    function DeSelect: WordBool; safecall;
    function Get_Layer: WideString; safecall;
    procedure Set_Layer(const retval: WideString); safecall;
    function Get_LayerOverride: SYSINT; safecall;
    procedure Set_LayerOverride(retval: SYSINT); safecall;
    function Get_Color: Integer; safecall;
    procedure Set_Color(retval: Integer); safecall;
    function SetCoords(xx: Double; yy: Double; zz: Double): WordBool; safecall;
    function GetFramePointTangent(out status: WordBool): OleVariant; safecall;
    function IGetFramePointTangent(out status: WordBool): Double; safecall;
    function SetFramePointTangent(toVector: OleVariant): WordBool; safecall;
    function ISetFramePointTangent(var toVector: Double): WordBool; safecall;
    function GetSketch: ISketch; safecall;
    function Select2(Append: WordBool; mark: Integer): WordBool; safecall;
    function Select3(Append: WordBool; mark: Integer; const Callout: ICallout): WordBool; safecall;
    property x: Double read Get_x;
    property y: Double read Get_y;
    property z: Double read Get_z;
    property Layer: WideString read Get_Layer write Set_Layer;
    property LayerOverride: SYSINT read Get_LayerOverride write Set_LayerOverride;
    property Color: Integer read Get_Color write Set_Color;
  end;

// *********************************************************************//
// DispIntf:  ISketchPointDisp
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {83A33DBD-27C5-11CE-BFD4-00400513BB57}
// *********************************************************************//
  ISketchPointDisp = dispinterface
    ['{83A33DBD-27C5-11CE-BFD4-00400513BB57}']
    property x: Double readonly dispid 1;
    property y: Double readonly dispid 2;
    property z: Double readonly dispid 3;
    function GetCoords: Double; dispid 4;
    function GetId: OleVariant; dispid 5;
    function IGetID: Integer; dispid 6;
    function Select(appendFlag: WordBool): WordBool; dispid 7;
    function SelectByMark(appendFlag: WordBool; mark: Integer): WordBool; dispid 8;
    function DeSelect: WordBool; dispid 9;
    property Layer: WideString dispid 10;
    property LayerOverride: SYSINT dispid 11;
    property Color: Integer dispid 12;
    function SetCoords(xx: Double; yy: Double; zz: Double): WordBool; dispid 13;
    function GetFramePointTangent(out status: WordBool): OleVariant; dispid 14;
    function IGetFramePointTangent(out status: WordBool): Double; dispid 15;
    function SetFramePointTangent(toVector: OleVariant): WordBool; dispid 16;
    function ISetFramePointTangent(var toVector: Double): WordBool; dispid 17;
    function GetSketch: ISketch; dispid 18;
    function Select2(Append: WordBool; mark: Integer): WordBool; dispid 19;
    function Select3(Append: WordBool; mark: Integer; const Callout: ICallout): WordBool; dispid 20;
  end;

// *********************************************************************//
// Interface: ICallout
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {9CAAA1AA-F2FC-11D5-AF66-00C04F603FAF}
// *********************************************************************//
  ICallout = interface(IDispatch)
    ['{9CAAA1AA-F2FC-11D5-AF66-00C04F603FAF}']
    function Get_Label_: WideString; safecall;
    procedure Set_Label_(const retval: WideString); safecall;
    function Get_TargetStyle: Integer; safecall;
    procedure Set_TargetStyle(Style: Integer); safecall;
    function Get_TextBox: WordBool; safecall;
    procedure Set_TextBox(Box: WordBool); safecall;
    property Label_: WideString read Get_Label_ write Set_Label_;
    property TargetStyle: Integer read Get_TargetStyle write Set_TargetStyle;
    property TextBox: WordBool read Get_TextBox write Set_TextBox;
  end;

// *********************************************************************//
// DispIntf:  ICalloutDisp
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {9CAAA1AA-F2FC-11D5-AF66-00C04F603FAF}
// *********************************************************************//
  ICalloutDisp = dispinterface
    ['{9CAAA1AA-F2FC-11D5-AF66-00C04F603FAF}']
    property Label_: WideString dispid 1;
    property TargetStyle: Integer dispid 2;
    property TextBox: WordBool dispid 3;
  end;

// *********************************************************************//
// Interface: IEnumSketchSegments
// Flags:     (272) Hidden OleAutomation
// GUID:      {83A33DCF-27C5-11CE-BFD4-00400513BB57}
// *********************************************************************//
  IEnumSketchSegments = interface(IUnknown)
    ['{83A33DCF-27C5-11CE-BFD4-00400513BB57}']
    function Next(celt: Integer; out rgelt: ISketchSegment; var pceltFetched: Integer): HResult; stdcall;
    function Skip(celt: Integer): HResult; stdcall;
    function Reset: HResult; stdcall;
    function Clone(out ppenum: IEnumSketchSegments): HResult; stdcall;
  end;

// *********************************************************************//
// Interface: ISketchSegment
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {83A33DBF-27C5-11CE-BFD4-00400513BB57}
// *********************************************************************//
  ISketchSegment = interface(IDispatch)
    ['{83A33DBF-27C5-11CE-BFD4-00400513BB57}']
    function Get_Layer: WideString; safecall;
    procedure Set_Layer(const retval: WideString); safecall;
    function Get_LayerOverride: SYSINT; safecall;
    procedure Set_LayerOverride(retval: SYSINT); safecall;
    function Get_Color: Integer; safecall;
    procedure Set_Color(retval: Integer); safecall;
    function Get_Style: Integer; safecall;
    procedure Set_Style(retval: Integer); safecall;
    function Get_width: Integer; safecall;
    procedure Set_width(retval: Integer); safecall;
    function GetType: Integer; safecall;
    function GetId: OleVariant; safecall;
    function IGetID: Integer; safecall;
    function Select(appendFlag: WordBool): WordBool; safecall;
    function SelectByMark(appendFlag: WordBool; mark: Integer): WordBool; safecall;
    function DeSelect: WordBool; safecall;
    function Get_ConstructionGeometry: WordBool; safecall;
    procedure Set_ConstructionGeometry(retval: WordBool); safecall;
    function GetCurve: IDispatch; safecall;
    function IGetCurve: ICurve; safecall;
    function GetSketch: ISketch; safecall;
    function GetConstraints: OleVariant; safecall;
    function IGetConstraintsCount: Integer; safecall;
    function IGetConstraints: WideString; safecall;
    function GetLength: Double; safecall;
    function Select2(Append: WordBool; mark: Integer): WordBool; safecall;
    function Select3(Append: WordBool; mark: Integer; const Callout: ICallout): WordBool; safecall;
    property Layer: WideString read Get_Layer write Set_Layer;
    property LayerOverride: SYSINT read Get_LayerOverride write Set_LayerOverride;
    property Color: Integer read Get_Color write Set_Color;
    property Style: Integer read Get_Style write Set_Style;
    property width: Integer read Get_width write Set_width;
    property ConstructionGeometry: WordBool read Get_ConstructionGeometry write Set_ConstructionGeometry;
  end;

// *********************************************************************//
// DispIntf:  ISketchSegmentDisp
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {83A33DBF-27C5-11CE-BFD4-00400513BB57}
// *********************************************************************//
  ISketchSegmentDisp = dispinterface
    ['{83A33DBF-27C5-11CE-BFD4-00400513BB57}']
    property Layer: WideString dispid 65538;
    property LayerOverride: SYSINT dispid 65539;
    property Color: Integer dispid 65540;
    property Style: Integer dispid 65541;
    property width: Integer dispid 65542;
    function GetType: Integer; dispid 65537;
    function GetId: OleVariant; dispid 65543;
    function IGetID: Integer; dispid 65544;
    function Select(appendFlag: WordBool): WordBool; dispid 65545;
    function SelectByMark(appendFlag: WordBool; mark: Integer): WordBool; dispid 65546;
    function DeSelect: WordBool; dispid 65547;
    property ConstructionGeometry: WordBool dispid 65548;
    function GetCurve: IDispatch; dispid 65549;
    function IGetCurve: ICurve; dispid 65550;
    function GetSketch: ISketch; dispid 65551;
    function GetConstraints: OleVariant; dispid 65552;
    function IGetConstraintsCount: Integer; dispid 65553;
    function IGetConstraints: WideString; dispid 65554;
    function GetLength: Double; dispid 65555;
    function Select2(Append: WordBool; mark: Integer): WordBool; dispid 65556;
    function Select3(Append: WordBool; mark: Integer; const Callout: ICallout): WordBool; dispid 65557;
  end;

// *********************************************************************//
// Interface: IEnumSketchHatches
// Flags:     (272) Hidden OleAutomation
// GUID:      {54729B8E-4086-11D3-AE9B-00C04F683CBA}
// *********************************************************************//
  IEnumSketchHatches = interface(IUnknown)
    ['{54729B8E-4086-11D3-AE9B-00C04F683CBA}']
    function Next(celt: Integer; out rgelt: ISketchHatch; var pceltFetched: Integer): HResult; stdcall;
    function Skip(celt: Integer): HResult; stdcall;
    function Reset: HResult; stdcall;
    function Clone(out ppenum: IEnumSketchHatches): HResult; stdcall;
  end;

// *********************************************************************//
// Interface: ISketchHatch
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {C3D00926-4068-11D3-AE9B-00C04F683CBA}
// *********************************************************************//
  ISketchHatch = interface(IDispatch)
    ['{C3D00926-4068-11D3-AE9B-00C04F683CBA}']
    function GetId: OleVariant; safecall;
    function IGetID: Integer; safecall;
    function Select(appendFlag: WordBool): WordBool; safecall;
    function SelectByMark(appendFlag: WordBool; mark: Integer): WordBool; safecall;
    function DeSelect: WordBool; safecall;
    function Get_Layer: WideString; safecall;
    procedure Set_Layer(const retval: WideString); safecall;
    function Get_LayerOverride: SYSINT; safecall;
    procedure Set_LayerOverride(retval: SYSINT); safecall;
    function Get_Color: Integer; safecall;
    procedure Set_Color(retval: Integer); safecall;
    function Get_Pattern: WideString; safecall;
    procedure Set_Pattern(const retval: WideString); safecall;
    function Get_Scale: Double; safecall;
    procedure Set_Scale(retval: Double); safecall;
    function Get_angle: Double; safecall;
    procedure Set_angle(retval: Double); safecall;
    function GetFace: IDispatch; safecall;
    function IGetFace: IFace; safecall;
    function GetSketch: ISketch; safecall;
    function Get_Scale2: Double; safecall;
    procedure Set_Scale2(retval: Double); safecall;
    function IGetFace2: IFace2; safecall;
    function Select2(Append: WordBool; mark: Integer): WordBool; safecall;
    function Select3(Append: WordBool; mark: Integer; const Callout: ICallout): WordBool; safecall;
    function Get_SolidFill: WordBool; safecall;
    procedure Set_SolidFill(retval: WordBool); safecall;
    property Layer: WideString read Get_Layer write Set_Layer;
    property LayerOverride: SYSINT read Get_LayerOverride write Set_LayerOverride;
    property Color: Integer read Get_Color write Set_Color;
    property Pattern: WideString read Get_Pattern write Set_Pattern;
    property Scale: Double read Get_Scale write Set_Scale;
    property angle: Double read Get_angle write Set_angle;
    property Scale2: Double read Get_Scale2 write Set_Scale2;
    property SolidFill: WordBool read Get_SolidFill write Set_SolidFill;
  end;

// *********************************************************************//
// DispIntf:  ISketchHatchDisp
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {C3D00926-4068-11D3-AE9B-00C04F683CBA}
// *********************************************************************//
  ISketchHatchDisp = dispinterface
    ['{C3D00926-4068-11D3-AE9B-00C04F683CBA}']
    function GetId: OleVariant; dispid 1;
    function IGetID: Integer; dispid 2;
    function Select(appendFlag: WordBool): WordBool; dispid 3;
    function SelectByMark(appendFlag: WordBool; mark: Integer): WordBool; dispid 4;
    function DeSelect: WordBool; dispid 5;
    property Layer: WideString dispid 6;
    property LayerOverride: SYSINT dispid 7;
    property Color: Integer dispid 8;
    property Pattern: WideString dispid 9;
    property Scale: Double dispid 10;
    property angle: Double dispid 11;
    function GetFace: IDispatch; dispid 12;
    function IGetFace: IFace; dispid 13;
    function GetSketch: ISketch; dispid 14;
    property Scale2: Double dispid 15;
    function IGetFace2: IFace2; dispid 16;
    function Select2(Append: WordBool; mark: Integer): WordBool; dispid 17;
    function Select3(Append: WordBool; mark: Integer; const Callout: ICallout): WordBool; dispid 18;
    property SolidFill: WordBool dispid 19;
  end;

// *********************************************************************//
// Interface: IMidSurface2
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {5B6E8476-461F-43AF-B784-90D3CD74337C}
// *********************************************************************//
  IMidSurface2 = interface(IDispatch)
    ['{5B6E8476-461F-43AF-B784-90D3CD74337C}']
    function GetFacePairCount: Integer; safecall;
    function GetFirstFacePair(out thickness: Double; out partnerFaceDisp: IDispatch): IDispatch; safecall;
    function IGetFirstFacePair(out thickness: Double; out partnerFaceDisp: IFace2): IFace2; safecall;
    function GetNextFacePair(out thickness: Double; out partnerFaceDisp: IDispatch): IDispatch; safecall;
    function IGetNextFacePair(out thickness: Double; out partnerFaceDisp: IFace2): IFace2; safecall;
    function GetFirstNeutralSheet: IDispatch; safecall;
    function IGetFirstNeutralSheet: IBody2; safecall;
    function GetNextNeutralSheet: IDispatch; safecall;
    function IGetNextNeutralSheet: IBody2; safecall;
    function GetNeutralSheetCount: Integer; safecall;
    function GetFaceCount: Integer; safecall;
    function GetFirstFace(out fromFace1Disp: IDispatch; out fromFace2Disp: IDispatch; 
                          out thickness: Double): IDispatch; safecall;
    function IGetFirstFace(out fromFace1Disp: IFace2; out fromFace2Disp: IFace2; 
                           out thickness: Double): IFace2; safecall;
    function GetNextFace(out fromFace1Disp: IDispatch; out fromFace2Disp: IDispatch; 
                         out thickness: Double): IDispatch; safecall;
    function IGetNextFace(out fromFace1Disp: IFace2; out fromFace2Disp: IFace2; 
                          out thickness: Double): IFace2; safecall;
    function EdgeGetFace(const edgeInDisp: IDispatch): IDispatch; safecall;
    function IEdgeGetFace(const edgeInDisp: IEdge): IFace2; safecall;
    function IGetFirstFaceArray(out fromFrontFaceListDisp: IFace2; 
                                out sizeOfFrontFaceList: Integer; out fromFaceBackListDisp: IFace2; 
                                out sizeOfBackFaceList: Integer; out thickness: Double): IFace2; safecall;
    function IGetNextFaceArray(out fromFrontFaceListDisp: IFace2; out sizeOfFrontFaceList: Integer; 
                               out fromFaceBackListDisp: IFace2; out sizeOfBackFaceList: Integer; 
                               out thickness: Double): IFace2; safecall;
    function GetFirstFaceArray(out thickness: Double): OleVariant; safecall;
    function GetNextFaceArray(out thickness: Double): OleVariant; safecall;
  end;

// *********************************************************************//
// DispIntf:  IMidSurface2Disp
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {5B6E8476-461F-43AF-B784-90D3CD74337C}
// *********************************************************************//
  IMidSurface2Disp = dispinterface
    ['{5B6E8476-461F-43AF-B784-90D3CD74337C}']
    function GetFacePairCount: Integer; dispid 1;
    function GetFirstFacePair(out thickness: Double; out partnerFaceDisp: IDispatch): IDispatch; dispid 2;
    function IGetFirstFacePair(out thickness: Double; out partnerFaceDisp: IFace2): IFace2; dispid 3;
    function GetNextFacePair(out thickness: Double; out partnerFaceDisp: IDispatch): IDispatch; dispid 4;
    function IGetNextFacePair(out thickness: Double; out partnerFaceDisp: IFace2): IFace2; dispid 5;
    function GetFirstNeutralSheet: IDispatch; dispid 6;
    function IGetFirstNeutralSheet: IBody2; dispid 7;
    function GetNextNeutralSheet: IDispatch; dispid 8;
    function IGetNextNeutralSheet: IBody2; dispid 9;
    function GetNeutralSheetCount: Integer; dispid 10;
    function GetFaceCount: Integer; dispid 11;
    function GetFirstFace(out fromFace1Disp: IDispatch; out fromFace2Disp: IDispatch; 
                          out thickness: Double): IDispatch; dispid 12;
    function IGetFirstFace(out fromFace1Disp: IFace2; out fromFace2Disp: IFace2; 
                           out thickness: Double): IFace2; dispid 13;
    function GetNextFace(out fromFace1Disp: IDispatch; out fromFace2Disp: IDispatch; 
                         out thickness: Double): IDispatch; dispid 14;
    function IGetNextFace(out fromFace1Disp: IFace2; out fromFace2Disp: IFace2; 
                          out thickness: Double): IFace2; dispid 15;
    function EdgeGetFace(const edgeInDisp: IDispatch): IDispatch; dispid 16;
    function IEdgeGetFace(const edgeInDisp: IEdge): IFace2; dispid 17;
    function IGetFirstFaceArray(out fromFrontFaceListDisp: IFace2; 
                                out sizeOfFrontFaceList: Integer; out fromFaceBackListDisp: IFace2; 
                                out sizeOfBackFaceList: Integer; out thickness: Double): IFace2; dispid 18;
    function IGetNextFaceArray(out fromFrontFaceListDisp: IFace2; out sizeOfFrontFaceList: Integer; 
                               out fromFaceBackListDisp: IFace2; out sizeOfBackFaceList: Integer; 
                               out thickness: Double): IFace2; dispid 19;
    function GetFirstFaceArray(out thickness: Double): OleVariant; dispid 20;
    function GetNextFaceArray(out thickness: Double): OleVariant; dispid 21;
  end;

// *********************************************************************//
// Interface: IFeatMgrView
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {83A33D75-27C5-11CE-BFD4-00400513BB57}
// *********************************************************************//
  IFeatMgrView = interface(IDispatch)
    ['{83A33D75-27C5-11CE-BFD4-00400513BB57}']
    function GetFeatMgrViewWnd: Integer; safecall;
    function GetControl: IDispatch; safecall;
    function IGetControl: IUnknown; safecall;
    function ActivateView: Integer; safecall;
    function DeActivateView: WordBool; safecall;
    function DeleteView: WordBool; safecall;
  end;

// *********************************************************************//
// DispIntf:  IFeatMgrViewDisp
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {83A33D75-27C5-11CE-BFD4-00400513BB57}
// *********************************************************************//
  IFeatMgrViewDisp = dispinterface
    ['{83A33D75-27C5-11CE-BFD4-00400513BB57}']
    function GetFeatMgrViewWnd: Integer; dispid 1;
    function GetControl: IDispatch; dispid 2;
    function IGetControl: IUnknown; dispid 3;
    function ActivateView: Integer; dispid 4;
    function DeActivateView: WordBool; dispid 5;
    function DeleteView: WordBool; dispid 6;
  end;

// *********************************************************************//
// Interface: IConfiguration
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {83A33D98-27C5-11CE-BFD4-00400513BB57}
// *********************************************************************//
  IConfiguration = interface(IDispatch)
    ['{83A33D98-27C5-11CE-BFD4-00400513BB57}']
    function GetRootComponent: IDispatch; safecall;
    function IGetRootComponent: IComponent; safecall;
    function Get_Name: WideString; safecall;
    procedure Set_Name(const retval: WideString); safecall;
    function Get_comment: WideString; safecall;
    procedure Set_comment(const retval: WideString); safecall;
    function Get_alternateName: WideString; safecall;
    procedure Set_alternateName(const retval: WideString); safecall;
    function Get_UseAlternateNameInBOM: WordBool; safecall;
    procedure Set_UseAlternateNameInBOM(retval: WordBool); safecall;
    function Get_SuppressNewFeatures: WordBool; safecall;
    procedure Set_SuppressNewFeatures(retval: WordBool); safecall;
    function Get_HideNewComponentModels: WordBool; safecall;
    procedure Set_HideNewComponentModels(retval: WordBool); safecall;
    function Get_SuppressNewComponentModels: WordBool; safecall;
    procedure Set_SuppressNewComponentModels(retval: WordBool); safecall;
    function Get_ShowChildComponentsInBOM: WordBool; safecall;
    procedure Set_ShowChildComponentsInBOM(retval: WordBool); safecall;
    function GetNumberOfExplodeSteps: SYSINT; safecall;
    function GetExplodeStep(explodeStepIndex: Integer): IDispatch; safecall;
    function IGetExplodeStep(explodeStepIndex: Integer): IExplodeStep; safecall;
    function AddExplodeStep(explDist: Double; reverseDir: WordBool; rigidSubassembly: WordBool; 
                            explodeRelated: WordBool): IDispatch; safecall;
    function IAddExplodeStep(explDist: Double; reverseDir: WordBool; rigidSubassembly: WordBool; 
                             explodeRelated: WordBool): IExplodeStep; safecall;
    function DeleteExplodeStep(const explodeStepName: WideString): WordBool; safecall;
    function GetStreamName: WideString; safecall;
    function IGetRootComponent2: IComponent2; safecall;
    function GetComponentSuppressionState(const compName: WideString): WordBool; safecall;
    function GetComponentConfigName(const compName: WideString): WideString; safecall;
    function Get_Lock: WordBool; safecall;
    procedure Set_Lock(retval: WordBool); safecall;
    function GetCustomProperties(var propNames: OleVariant; var propValues: OleVariant; 
                                 var propTypes: OleVariant): Integer; safecall;
    function GetCustomPropertiesCount: Integer; safecall;
    procedure IGetCustomProperties(numProps: Integer; var propNames: WideString; 
                                   var propValues: WideString; var propTypes: Integer); safecall;
    function SetColor(colorIn: Integer): WordBool; safecall;
    function Get_Description: WideString; safecall;
    procedure Set_Description(const retval: WideString); safecall;
    property Name: WideString read Get_Name write Set_Name;
    property comment: WideString read Get_comment write Set_comment;
    property alternateName: WideString read Get_alternateName write Set_alternateName;
    property UseAlternateNameInBOM: WordBool read Get_UseAlternateNameInBOM write Set_UseAlternateNameInBOM;
    property SuppressNewFeatures: WordBool read Get_SuppressNewFeatures write Set_SuppressNewFeatures;
    property HideNewComponentModels: WordBool read Get_HideNewComponentModels write Set_HideNewComponentModels;
    property SuppressNewComponentModels: WordBool read Get_SuppressNewComponentModels write Set_SuppressNewComponentModels;
    property ShowChildComponentsInBOM: WordBool read Get_ShowChildComponentsInBOM write Set_ShowChildComponentsInBOM;
    property Lock: WordBool read Get_Lock write Set_Lock;
    property Description: WideString read Get_Description write Set_Description;
  end;

// *********************************************************************//
// DispIntf:  IConfigurationDisp
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {83A33D98-27C5-11CE-BFD4-00400513BB57}
// *********************************************************************//
  IConfigurationDisp = dispinterface
    ['{83A33D98-27C5-11CE-BFD4-00400513BB57}']
    function GetRootComponent: IDispatch; dispid 1;
    function IGetRootComponent: IComponent; dispid 2;
    property Name: WideString dispid 3;
    property comment: WideString dispid 4;
    property alternateName: WideString dispid 5;
    property UseAlternateNameInBOM: WordBool dispid 6;
    property SuppressNewFeatures: WordBool dispid 7;
    property HideNewComponentModels: WordBool dispid 8;
    property SuppressNewComponentModels: WordBool dispid 9;
    property ShowChildComponentsInBOM: WordBool dispid 10;
    function GetNumberOfExplodeSteps: SYSINT; dispid 11;
    function GetExplodeStep(explodeStepIndex: Integer): IDispatch; dispid 12;
    function IGetExplodeStep(explodeStepIndex: Integer): IExplodeStep; dispid 13;
    function AddExplodeStep(explDist: Double; reverseDir: WordBool; rigidSubassembly: WordBool; 
                            explodeRelated: WordBool): IDispatch; dispid 14;
    function IAddExplodeStep(explDist: Double; reverseDir: WordBool; rigidSubassembly: WordBool; 
                             explodeRelated: WordBool): IExplodeStep; dispid 15;
    function DeleteExplodeStep(const explodeStepName: WideString): WordBool; dispid 16;
    function GetStreamName: WideString; dispid 17;
    function IGetRootComponent2: IComponent2; dispid 18;
    function GetComponentSuppressionState(const compName: WideString): WordBool; dispid 19;
    function GetComponentConfigName(const compName: WideString): WideString; dispid 20;
    property Lock: WordBool dispid 21;
    function GetCustomProperties(var propNames: OleVariant; var propValues: OleVariant; 
                                 var propTypes: OleVariant): Integer; dispid 22;
    function GetCustomPropertiesCount: Integer; dispid 23;
    procedure IGetCustomProperties(numProps: Integer; var propNames: WideString; 
                                   var propValues: WideString; var propTypes: Integer); dispid 24;
    function SetColor(colorIn: Integer): WordBool; dispid 25;
    property Description: WideString dispid 26;
  end;

// *********************************************************************//
// Interface: IExplodeStep
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {7241680B-0BC6-11D4-AEEE-00C04F61025C}
// *********************************************************************//
  IExplodeStep = interface(IDispatch)
    ['{7241680B-0BC6-11D4-AEEE-00C04F61025C}']
    function GetNumOfComponents: SYSINT; safecall;
    function GetComponentName(index: SYSINT): WideString; safecall;
    function GetComponentXform: OleVariant; safecall;
    function IGetComponentXform: Double; safecall;
    function GetComponent(index: SYSINT): IDispatch; safecall;
    function IGetComponent(index: SYSINT): IComponent; safecall;
    function Get_Name: WideString; safecall;
    procedure Set_Name(const retval: WideString); safecall;
    function IsSubAssemblyRigid: WordBool; safecall;
    property Name: WideString read Get_Name write Set_Name;
  end;

// *********************************************************************//
// DispIntf:  IExplodeStepDisp
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {7241680B-0BC6-11D4-AEEE-00C04F61025C}
// *********************************************************************//
  IExplodeStepDisp = dispinterface
    ['{7241680B-0BC6-11D4-AEEE-00C04F61025C}']
    function GetNumOfComponents: SYSINT; dispid 1;
    function GetComponentName(index: SYSINT): WideString; dispid 2;
    function GetComponentXform: OleVariant; dispid 3;
    function IGetComponentXform: Double; dispid 4;
    function GetComponent(index: SYSINT): IDispatch; dispid 5;
    function IGetComponent(index: SYSINT): IComponent; dispid 6;
    property Name: WideString dispid 7;
    function IsSubAssemblyRigid: WordBool; dispid 8;
  end;

// *********************************************************************//
// Interface: IComponent2
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {655D6F2A-5441-45D1-8CBA-D35FB26988E4}
// *********************************************************************//
  IComponent2 = interface(IDispatch)
    ['{655D6F2A-5441-45D1-8CBA-D35FB26988E4}']
    function GetChildren: OleVariant; safecall;
    function IGetChildren: IComponent2; safecall;
    function IGetChildrenCount: SYSINT; safecall;
    function GetXform: OleVariant; safecall;
    function IGetXform: Double; safecall;
    function GetBody: IDispatch; safecall;
    function IGetBody: IBody2; safecall;
    function Get_MaterialPropertyValues: OleVariant; safecall;
    procedure Set_MaterialPropertyValues(retval: OleVariant); safecall;
    function Get_IMaterialPropertyValues: Double; safecall;
    procedure Set_IMaterialPropertyValues(var retval: Double); safecall;
    function AddPropertyExtension(PropertyExtension: OleVariant): Integer; safecall;
    function GetPropertyExtension(id: Integer): OleVariant; safecall;
    procedure ResetPropertyExtension; safecall;
    function GetMaterialIdName: WideString; safecall;
    function SetMaterialIdName(const Name: WideString): WordBool; safecall;
    function GetMaterialUserName: WideString; safecall;
    function SetMaterialUserName(const Name: WideString): WordBool; safecall;
    function GetSectionedBodies(const viewIn: IDispatch): OleVariant; safecall;
    function GetBox(includeRefPlanes: WordBool; includeSketches: WordBool): OleVariant; safecall;
    function IGetBox(includeRefPlanes: WordBool; includeSketches: WordBool): Double; safecall;
    function SetXform(xformIn: OleVariant): WordBool; safecall;
    function ISetXform(var xformIn: Double): WordBool; safecall;
    function GetModelDoc: IDispatch; safecall;
    function IGetModelDoc: IModelDoc2; safecall;
    function IsFixed: WordBool; safecall;
    function EnumRelatedBodies: IEnumBodies2; safecall;
    function IsSuppressed: WordBool; safecall;
    function EnumSectionedBodies(const viewIn: IModelView): IEnumBodies2; safecall;
    function IsHidden(considerSuppressed: WordBool): WordBool; safecall;
    function Get_Name: WideString; safecall;
    procedure Set_ReferencedConfiguration(const retval: WideString); safecall;
    function Get_ReferencedConfiguration: WideString; safecall;
    function GetSuppression: Integer; safecall;
    function SetSuppression(state: Integer): Integer; safecall;
    function Get_Visible: Integer; safecall;
    procedure Set_Visible(retval: Integer); safecall;
    function GetPathName: WideString; safecall;
    function SetXformAndSolve(xformIn: OleVariant): WordBool; safecall;
    function ISetXformAndSolve(var xformIn: Double): WordBool; safecall;
    function GetTessTriangles(noConversion: WordBool): OleVariant; safecall;
    function IGetTessTriangles(noConversion: WordBool): Single; safecall;
    function IGetTessTriangleCount: Integer; safecall;
    function GetTessNorms: OleVariant; safecall;
    function IGetTessNorms: Single; safecall;
    function GetTessTriStrips(noConversion: WordBool): OleVariant; safecall;
    function IGetTessTriStrips(noConversion: WordBool): Single; safecall;
    function IGetTessTriStripSize: Integer; safecall;
    function GetTessTriStripNorms: OleVariant; safecall;
    function IGetTessTriStripNorms: Single; safecall;
    function GetTessTriStripEdges: OleVariant; safecall;
    function IGetTessTriStripEdges: Integer; safecall;
    function IGetTessTriStripEdgeSize: Integer; safecall;
    function IsDisplayDataOutOfDate: Integer; safecall;
    function GetConstrainedStatus: Integer; safecall;
    function RemoveMaterialProperty: WordBool; safecall;
    function IGetTemporaryBodyID: Integer; safecall;
    function FindAttribute(const attributeDef: IDispatch; whichOne: Integer): IDispatch; safecall;
    function IFindAttribute(const attributeDef: IAttributeDef; whichOne: Integer): IAttribute; safecall;
    function Select(appendFlag: WordBool): WordBool; safecall;
    function SelectByMark(appendFlag: WordBool; mark: Integer): WordBool; safecall;
    function DeSelect: WordBool; safecall;
    function Get_Name2: WideString; safecall;
    procedure Set_Name2(const newName: WideString); safecall;
    function Get_Solving: Integer; safecall;
    procedure ListExternalFileReferences(out modelPathName: OleVariant; 
                                         out componentPathName: OleVariant; 
                                         out feature: OleVariant; out dataType: OleVariant; 
                                         out status: OleVariant; out refEntity: OleVariant; 
                                         out featCom: OleVariant); safecall;
    function ListExternalFileReferencesCount: Integer; safecall;
    procedure IListExternalFileReferences(numRefs: Integer; out modelPathName: WideString; 
                                          out compPathName: WideString; out feature: WideString; 
                                          out dataType: WideString; out status: Integer; 
                                          out refEntity: WideString; out featComp: WideString); safecall;
    function ReplaceReference(const fileName: WideString): Integer; safecall;
    function Select2(Append: WordBool; mark: Integer): WordBool; safecall;
    function GetCorrespondingEntity(const entity: IDispatch): IDispatch; safecall;
    function IGetCorrespondingEntity(const pEntity: IEntity): IEntity; safecall;
    function IsEnvelope: WordBool; safecall;
    function Get_Transform: IMathTransform; safecall;
    procedure Set_Transform(const xform: IMathTransform); safecall;
    function SetTransformAndSolve(const xformIn: IMathTransform): WordBool; safecall;
    function GetParent: IComponent2; safecall;
    function FirstFeature: IFeature; safecall;
    function Get_PresentationTransform: IMathTransform; safecall;
    procedure Set_PresentationTransform(const xform: IMathTransform); safecall;
    procedure RemovePresentationTransform; safecall;
    function EnumBodies(bodyType: Integer): IEnumBodies2; safecall;
    function GetBodies(bodyType: Integer): OleVariant; safecall;
    function GetTotalTransform(includePresentationXform: WordBool): IMathTransform; safecall;
    function Get_Transform2: IMathTransform; safecall;
    procedure Set_Transform2(const xform: IMathTransform); safecall;
    function SetTransformAndSolve2(const xformIn: IMathTransform): WordBool; safecall;
    property MaterialPropertyValues: OleVariant read Get_MaterialPropertyValues write Set_MaterialPropertyValues;
    property Name: WideString read Get_Name;
    property ReferencedConfiguration: WideString read Get_ReferencedConfiguration write Set_ReferencedConfiguration;
    property Visible: Integer read Get_Visible write Set_Visible;
    property Name2: WideString read Get_Name2 write Set_Name2;
    property Solving: Integer read Get_Solving;
    property Transform: IMathTransform read Get_Transform write Set_Transform;
    property PresentationTransform: IMathTransform read Get_PresentationTransform write Set_PresentationTransform;
    property Transform2: IMathTransform read Get_Transform2 write Set_Transform2;
  end;

// *********************************************************************//
// DispIntf:  IComponent2Disp
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {655D6F2A-5441-45D1-8CBA-D35FB26988E4}
// *********************************************************************//
  IComponent2Disp = dispinterface
    ['{655D6F2A-5441-45D1-8CBA-D35FB26988E4}']
    function GetChildren: OleVariant; dispid 1;
    function IGetChildren: IComponent2; dispid 2;
    function IGetChildrenCount: SYSINT; dispid 3;
    function GetXform: OleVariant; dispid 4;
    function IGetXform: Double; dispid 5;
    function GetBody: IDispatch; dispid 6;
    function IGetBody: IBody2; dispid 7;
    property MaterialPropertyValues: OleVariant dispid 8;
    function IMaterialPropertyValues: Double; dispid 9;
    function AddPropertyExtension(PropertyExtension: OleVariant): Integer; dispid 10;
    function GetPropertyExtension(id: Integer): OleVariant; dispid 11;
    procedure ResetPropertyExtension; dispid 12;
    function GetMaterialIdName: WideString; dispid 13;
    function SetMaterialIdName(const Name: WideString): WordBool; dispid 14;
    function GetMaterialUserName: WideString; dispid 15;
    function SetMaterialUserName(const Name: WideString): WordBool; dispid 16;
    function GetSectionedBodies(const viewIn: IDispatch): OleVariant; dispid 17;
    function GetBox(includeRefPlanes: WordBool; includeSketches: WordBool): OleVariant; dispid 18;
    function IGetBox(includeRefPlanes: WordBool; includeSketches: WordBool): Double; dispid 19;
    function SetXform(xformIn: OleVariant): WordBool; dispid 20;
    function ISetXform(var xformIn: Double): WordBool; dispid 21;
    function GetModelDoc: IDispatch; dispid 22;
    function IGetModelDoc: IModelDoc2; dispid 23;
    function IsFixed: WordBool; dispid 24;
    function EnumRelatedBodies: IEnumBodies2; dispid 25;
    function IsSuppressed: WordBool; dispid 26;
    function EnumSectionedBodies(const viewIn: IModelView): IEnumBodies2; dispid 27;
    function IsHidden(considerSuppressed: WordBool): WordBool; dispid 28;
    property Name: WideString readonly dispid 29;
    property ReferencedConfiguration: WideString dispid 30;
    function GetSuppression: Integer; dispid 31;
    function SetSuppression(state: Integer): Integer; dispid 32;
    property Visible: Integer dispid 33;
    function GetPathName: WideString; dispid 34;
    function SetXformAndSolve(xformIn: OleVariant): WordBool; dispid 35;
    function ISetXformAndSolve(var xformIn: Double): WordBool; dispid 36;
    function GetTessTriangles(noConversion: WordBool): OleVariant; dispid 37;
    function IGetTessTriangles(noConversion: WordBool): Single; dispid 38;
    function IGetTessTriangleCount: Integer; dispid 39;
    function GetTessNorms: OleVariant; dispid 40;
    function IGetTessNorms: Single; dispid 41;
    function GetTessTriStrips(noConversion: WordBool): OleVariant; dispid 42;
    function IGetTessTriStrips(noConversion: WordBool): Single; dispid 43;
    function IGetTessTriStripSize: Integer; dispid 44;
    function GetTessTriStripNorms: OleVariant; dispid 45;
    function IGetTessTriStripNorms: Single; dispid 46;
    function GetTessTriStripEdges: OleVariant; dispid 47;
    function IGetTessTriStripEdges: Integer; dispid 48;
    function IGetTessTriStripEdgeSize: Integer; dispid 49;
    function IsDisplayDataOutOfDate: Integer; dispid 50;
    function GetConstrainedStatus: Integer; dispid 51;
    function RemoveMaterialProperty: WordBool; dispid 52;
    function IGetTemporaryBodyID: Integer; dispid 53;
    function FindAttribute(const attributeDef: IDispatch; whichOne: Integer): IDispatch; dispid 54;
    function IFindAttribute(const attributeDef: IAttributeDef; whichOne: Integer): IAttribute; dispid 55;
    function Select(appendFlag: WordBool): WordBool; dispid 56;
    function SelectByMark(appendFlag: WordBool; mark: Integer): WordBool; dispid 57;
    function DeSelect: WordBool; dispid 58;
    property Name2: WideString dispid 59;
    property Solving: Integer readonly dispid 60;
    procedure ListExternalFileReferences(out modelPathName: OleVariant; 
                                         out componentPathName: OleVariant; 
                                         out feature: OleVariant; out dataType: OleVariant; 
                                         out status: OleVariant; out refEntity: OleVariant; 
                                         out featCom: OleVariant); dispid 61;
    function ListExternalFileReferencesCount: Integer; dispid 62;
    procedure IListExternalFileReferences(numRefs: Integer; out modelPathName: WideString; 
                                          out compPathName: WideString; out feature: WideString; 
                                          out dataType: WideString; out status: Integer; 
                                          out refEntity: WideString; out featComp: WideString); dispid 63;
    function ReplaceReference(const fileName: WideString): Integer; dispid 64;
    function Select2(Append: WordBool; mark: Integer): WordBool; dispid 65;
    function GetCorrespondingEntity(const entity: IDispatch): IDispatch; dispid 66;
    function IGetCorrespondingEntity(const pEntity: IEntity): IEntity; dispid 67;
    function IsEnvelope: WordBool; dispid 68;
    property Transform: IMathTransform dispid 69;
    function SetTransformAndSolve(const xformIn: IMathTransform): WordBool; dispid 70;
    function GetParent: IComponent2; dispid 71;
    function FirstFeature: IFeature; dispid 72;
    property PresentationTransform: IMathTransform dispid 73;
    procedure RemovePresentationTransform; dispid 74;
    function EnumBodies(bodyType: Integer): IEnumBodies2; dispid 75;
    function GetBodies(bodyType: Integer): OleVariant; dispid 76;
    function GetTotalTransform(includePresentationXform: WordBool): IMathTransform; dispid 77;
    property Transform2: IMathTransform dispid 78;
    function SetTransformAndSolve2(const xformIn: IMathTransform): WordBool; dispid 79;
  end;

// *********************************************************************//
// Interface: IEnumBodies2
// Flags:     (272) Hidden OleAutomation
// GUID:      {97A9BEFA-6814-4FA6-ACB4-8CC84F76FB99}
// *********************************************************************//
  IEnumBodies2 = interface(IUnknown)
    ['{97A9BEFA-6814-4FA6-ACB4-8CC84F76FB99}']
    function Next(celt: Integer; out rgelt: IBody2; var pceltFetched: Integer): HResult; stdcall;
    function Skip(celt: Integer): HResult; stdcall;
    function Reset: HResult; stdcall;
    function Clone(out ppenum: IEnumBodies2): HResult; stdcall;
  end;

// *********************************************************************//
// Interface: IAttributeDef
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {83A33D67-27C5-11CE-BFD4-00400513BB57}
// *********************************************************************//
  IAttributeDef = interface(IDispatch)
    ['{83A33D67-27C5-11CE-BFD4-00400513BB57}']
    function CreateInstance(const ownerDoc: IDispatch; const ownerEntity: IDispatch; 
                            const nameIn: WideString): IDispatch; safecall;
    function ICreateInstance(const ownerDoc: IModelDoc; const ownerEntity: IEntity; 
                             const nameIn: WideString): IAttribute; safecall;
    function AddParameter(const nameIn: WideString; type_: Integer; defaultValue: Double; 
                          options: Integer): WordBool; safecall;
    function SetOption(whichOption: Integer; optionValue: Integer): WordBool; safecall;
    function GetOption(whichOption: Integer): Integer; safecall;
    function AddCallback(whichCallback: Integer; const CallbackFcnAndModule: WideString; 
                         whichOption: Integer): WordBool; safecall;
    function Register: WordBool; safecall;
    function CreateInstance2(const ownerDoc: IDispatch; const ownerEntity: IDispatch; 
                             const nameIn: WideString; options: Integer): IDispatch; safecall;
    function ICreateInstance2(const ownerDoc: IModelDoc; const ownerEntity: IEntity; 
                              const nameIn: WideString; options: Integer): IAttribute; safecall;
    function CreateInstance3(const ownerDoc: IDispatch; const ownerComp: IDispatch; 
                             const ownerEntity: IDispatch; const nameIn: WideString; 
                             options: Integer; configurationOption: Integer): IDispatch; safecall;
    function ICreateInstance3(const ownerDoc: IModelDoc; const ownerComp: IComponent; 
                              const ownerEntity: IEntity; const nameIn: WideString; 
                              options: Integer; configurationOption: Integer): IAttribute; safecall;
    function ICreateInstance4(const ownerDoc: IModelDoc2; const ownerComp: IComponent2; 
                              const ownerEntity: IEntity; const nameIn: WideString; 
                              options: Integer; configurationOption: Integer): IAttribute; safecall;
    function CreateInstance4(const ownerDoc: IModelDoc2; const ownerObj: IDispatch; 
                             const nameIn: WideString; options: Integer; 
                             configurationOption: Integer): IAttribute; safecall;
  end;

// *********************************************************************//
// DispIntf:  IAttributeDefDisp
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {83A33D67-27C5-11CE-BFD4-00400513BB57}
// *********************************************************************//
  IAttributeDefDisp = dispinterface
    ['{83A33D67-27C5-11CE-BFD4-00400513BB57}']
    function CreateInstance(const ownerDoc: IDispatch; const ownerEntity: IDispatch; 
                            const nameIn: WideString): IDispatch; dispid 1;
    function ICreateInstance(const ownerDoc: IModelDoc; const ownerEntity: IEntity; 
                             const nameIn: WideString): IAttribute; dispid 2;
    function AddParameter(const nameIn: WideString; type_: Integer; defaultValue: Double; 
                          options: Integer): WordBool; dispid 3;
    function SetOption(whichOption: Integer; optionValue: Integer): WordBool; dispid 4;
    function GetOption(whichOption: Integer): Integer; dispid 5;
    function AddCallback(whichCallback: Integer; const CallbackFcnAndModule: WideString; 
                         whichOption: Integer): WordBool; dispid 6;
    function Register: WordBool; dispid 7;
    function CreateInstance2(const ownerDoc: IDispatch; const ownerEntity: IDispatch; 
                             const nameIn: WideString; options: Integer): IDispatch; dispid 8;
    function ICreateInstance2(const ownerDoc: IModelDoc; const ownerEntity: IEntity; 
                              const nameIn: WideString; options: Integer): IAttribute; dispid 9;
    function CreateInstance3(const ownerDoc: IDispatch; const ownerComp: IDispatch; 
                             const ownerEntity: IDispatch; const nameIn: WideString; 
                             options: Integer; configurationOption: Integer): IDispatch; dispid 10;
    function ICreateInstance3(const ownerDoc: IModelDoc; const ownerComp: IComponent; 
                              const ownerEntity: IEntity; const nameIn: WideString; 
                              options: Integer; configurationOption: Integer): IAttribute; dispid 11;
    function ICreateInstance4(const ownerDoc: IModelDoc2; const ownerComp: IComponent2; 
                              const ownerEntity: IEntity; const nameIn: WideString; 
                              options: Integer; configurationOption: Integer): IAttribute; dispid 12;
    function CreateInstance4(const ownerDoc: IModelDoc2; const ownerObj: IDispatch; 
                             const nameIn: WideString; options: Integer; 
                             configurationOption: Integer): IAttribute; dispid 13;
  end;

// *********************************************************************//
// Interface: IEntity
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {83A33D65-27C5-11CE-BFD4-00400513BB57}
// *********************************************************************//
  IEntity = interface(IDispatch)
    ['{83A33D65-27C5-11CE-BFD4-00400513BB57}']
    function CreateStringAttributeDefinition(const identifierString: WideString): Integer; safecall;
    function CreateStringAttribute(definitionTag: Integer; const StringValue: WideString): WordBool; safecall;
    function FindStringAttribute(definitionTag: Integer): WideString; safecall;
    function RemoveStringAttribute(definitionTag: Integer): WordBool; safecall;
    function FindAttribute(const attributeDef: IDispatch; whichOne: Integer): IDispatch; safecall;
    function IFindAttribute(const attributeDef: IAttributeDef; whichOne: Integer): IAttribute; safecall;
    function Select(appendFlag: WordBool): WordBool; safecall;
    function GetType: Integer; safecall;
    function GetComponent: IDispatch; safecall;
    function IGetComponent: IComponent; safecall;
    function SelectByMark(appendFlag: WordBool; mark: Integer): WordBool; safecall;
    function Get_ModelName: WideString; safecall;
    procedure Set_ModelName(const retval: WideString); safecall;
    procedure DeleteModelName; safecall;
    function DeSelect: WordBool; safecall;
    function IGetComponent2: IComponent2; safecall;
    function Select2(Append: WordBool; mark: Integer): WordBool; safecall;
    function Select3(Append: WordBool; mark: Integer; const Callout: ICallout): WordBool; safecall;
    function Get_IsSafe: WordBool; safecall;
    function GetSafeEntity: IEntity; safecall;
    property ModelName: WideString read Get_ModelName write Set_ModelName;
    property IsSafe: WordBool read Get_IsSafe;
  end;

// *********************************************************************//
// DispIntf:  IEntityDisp
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {83A33D65-27C5-11CE-BFD4-00400513BB57}
// *********************************************************************//
  IEntityDisp = dispinterface
    ['{83A33D65-27C5-11CE-BFD4-00400513BB57}']
    function CreateStringAttributeDefinition(const identifierString: WideString): Integer; dispid 65537;
    function CreateStringAttribute(definitionTag: Integer; const StringValue: WideString): WordBool; dispid 65538;
    function FindStringAttribute(definitionTag: Integer): WideString; dispid 65539;
    function RemoveStringAttribute(definitionTag: Integer): WordBool; dispid 65540;
    function FindAttribute(const attributeDef: IDispatch; whichOne: Integer): IDispatch; dispid 65541;
    function IFindAttribute(const attributeDef: IAttributeDef; whichOne: Integer): IAttribute; dispid 65542;
    function Select(appendFlag: WordBool): WordBool; dispid 65543;
    function GetType: Integer; dispid 65544;
    function GetComponent: IDispatch; dispid 65545;
    function IGetComponent: IComponent; dispid 65546;
    function SelectByMark(appendFlag: WordBool; mark: Integer): WordBool; dispid 65547;
    property ModelName: WideString dispid 65548;
    procedure DeleteModelName; dispid 65549;
    function DeSelect: WordBool; dispid 65550;
    function IGetComponent2: IComponent2; dispid 65551;
    function Select2(Append: WordBool; mark: Integer): WordBool; dispid 65552;
    function Select3(Append: WordBool; mark: Integer; const Callout: ICallout): WordBool; dispid 65553;
    property IsSafe: WordBool readonly dispid 65554;
    function GetSafeEntity: IEntity; dispid 65555;
  end;

// *********************************************************************//
// Interface: IAttribute
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {83A33D71-27C5-11CE-BFD4-00400513BB57}
// *********************************************************************//
  IAttribute = interface(IDispatch)
    ['{83A33D71-27C5-11CE-BFD4-00400513BB57}']
    function GetParameter(const nameIn: WideString): IDispatch; safecall;
    function IGetParameter(const nameIn: WideString): IParameter; safecall;
    function GetEntity: IDispatch; safecall;
    function IGetEntity: IEntity; safecall;
    function GetDefinition: IDispatch; safecall;
    function IGetDefinition: IAttributeDef; safecall;
    function GetName: WideString; safecall;
    function GetEntityState(whichState: Integer): WordBool; safecall;
    function GetComponent: IDispatch; safecall;
    function IGetComponent: IComponent; safecall;
    function IGetComponent2: IComponent2; safecall;
    function GetEntity2: IDispatch; safecall;
    function IGetEntity2: IEntity; safecall;
    function GetBody: IBody2; safecall;
    function Delete(buildTree: WordBool): WordBool; safecall;
  end;

// *********************************************************************//
// DispIntf:  IAttributeDisp
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {83A33D71-27C5-11CE-BFD4-00400513BB57}
// *********************************************************************//
  IAttributeDisp = dispinterface
    ['{83A33D71-27C5-11CE-BFD4-00400513BB57}']
    function GetParameter(const nameIn: WideString): IDispatch; dispid 1;
    function IGetParameter(const nameIn: WideString): IParameter; dispid 2;
    function GetEntity: IDispatch; dispid 3;
    function IGetEntity: IEntity; dispid 4;
    function GetDefinition: IDispatch; dispid 5;
    function IGetDefinition: IAttributeDef; dispid 6;
    function GetName: WideString; dispid 7;
    function GetEntityState(whichState: Integer): WordBool; dispid 8;
    function GetComponent: IDispatch; dispid 9;
    function IGetComponent: IComponent; dispid 10;
    function IGetComponent2: IComponent2; dispid 11;
    function GetEntity2: IDispatch; dispid 12;
    function IGetEntity2: IEntity; dispid 13;
    function GetBody: IBody2; dispid 14;
    function Delete(buildTree: WordBool): WordBool; dispid 15;
  end;

// *********************************************************************//
// Interface: IParameter
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {83A33D69-27C5-11CE-BFD4-00400513BB57}
// *********************************************************************//
  IParameter = interface(IDispatch)
    ['{83A33D69-27C5-11CE-BFD4-00400513BB57}']
    function GetDoubleValue: Double; safecall;
    function SetDoubleValue(Value: Double): WordBool; safecall;
    function GetType: Integer; safecall;
    function GetName: WideString; safecall;
    function GetOption(whichOption: Integer): Integer; safecall;
    function SetOption(whichOption: Integer; optionValue: Integer): WordBool; safecall;
    function GetStringValue: WideString; safecall;
    function SetStringValue(const StringValue: WideString): WordBool; safecall;
    procedure GetVector(out x: Double; out y: Double; out z: Double); safecall;
    function SetVector(x: Double; y: Double; z: Double): WordBool; safecall;
    function GetVectorVB: OleVariant; safecall;
    function SetDoubleValue2(Value: Double; configurationOption: Integer; 
                             const configurationName: WideString): WordBool; safecall;
    function SetStringValue2(const StringValue: WideString; configurationOption: Integer; 
                             const configurationName: WideString): WordBool; safecall;
    function SetVector2(x: Double; y: Double; z: Double; configurationOption: Integer; 
                        const configurationName: WideString): WordBool; safecall;
  end;

// *********************************************************************//
// DispIntf:  IParameterDisp
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {83A33D69-27C5-11CE-BFD4-00400513BB57}
// *********************************************************************//
  IParameterDisp = dispinterface
    ['{83A33D69-27C5-11CE-BFD4-00400513BB57}']
    function GetDoubleValue: Double; dispid 1;
    function SetDoubleValue(Value: Double): WordBool; dispid 2;
    function GetType: Integer; dispid 3;
    function GetName: WideString; dispid 4;
    function GetOption(whichOption: Integer): Integer; dispid 5;
    function SetOption(whichOption: Integer; optionValue: Integer): WordBool; dispid 6;
    function GetStringValue: WideString; dispid 7;
    function SetStringValue(const StringValue: WideString): WordBool; dispid 8;
    procedure GetVector(out x: Double; out y: Double; out z: Double); dispid 9;
    function SetVector(x: Double; y: Double; z: Double): WordBool; dispid 10;
    function GetVectorVB: OleVariant; dispid 11;
    function SetDoubleValue2(Value: Double; configurationOption: Integer; 
                             const configurationName: WideString): WordBool; dispid 12;
    function SetStringValue2(const StringValue: WideString; configurationOption: Integer; 
                             const configurationName: WideString): WordBool; dispid 13;
    function SetVector2(x: Double; y: Double; z: Double; configurationOption: Integer; 
                        const configurationName: WideString): WordBool; dispid 14;
  end;

// *********************************************************************//
// Interface: IReferenceCurve
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {83A33DA3-27C5-11CE-BFD4-00400513BB57}
// *********************************************************************//
  IReferenceCurve = interface(IDispatch)
    ['{83A33DA3-27C5-11CE-BFD4-00400513BB57}']
    function GetSegmentCount: Integer; safecall;
    function GetFirstSegment: IDispatch; safecall;
    function IGetFirstSegment: IEdge; safecall;
    function GetNextSegment: IDispatch; safecall;
    function IGetNextSegment: IEdge; safecall;
    function SetColor(colorIn: Integer): WordBool; safecall;
    function SetVisible(Visible: WordBool): WordBool; safecall;
  end;

// *********************************************************************//
// DispIntf:  IReferenceCurveDisp
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {83A33DA3-27C5-11CE-BFD4-00400513BB57}
// *********************************************************************//
  IReferenceCurveDisp = dispinterface
    ['{83A33DA3-27C5-11CE-BFD4-00400513BB57}']
    function GetSegmentCount: Integer; dispid 1;
    function GetFirstSegment: IDispatch; dispid 2;
    function IGetFirstSegment: IEdge; dispid 3;
    function GetNextSegment: IDispatch; dispid 4;
    function IGetNextSegment: IEdge; dispid 5;
    function SetColor(colorIn: Integer): WordBool; dispid 6;
    function SetVisible(Visible: WordBool): WordBool; dispid 7;
  end;

// *********************************************************************//
// Interface: IColorTable
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {83A33DA5-27C5-11CE-BFD4-00400513BB57}
// *********************************************************************//
  IColorTable = interface(IDispatch)
    ['{83A33DA5-27C5-11CE-BFD4-00400513BB57}']
    function GetCount: Integer; safecall;
    function GetNameAtIndex(index: Integer): WideString; safecall;
    function GetColorRefAtIndex(index: Integer): Integer; safecall;
    function GetStandardCount: Integer; safecall;
    procedure SetColorRefAtIndex(index: Integer; colorRef: Integer; applyTo: SYSINT); safecall;
    function GetBasicColorCount: Integer; safecall;
    function GetBasicColors: OleVariant; safecall;
    function IGetBasicColors(ColorCount: Integer): Integer; safecall;
    function GetCustomColorCount: Integer; safecall;
    function GetCustomColors: OleVariant; safecall;
    function IGetCustomColors(ColorCount: Integer): Integer; safecall;
    function SetCustomColor(index: Integer; colorRef: Integer): WordBool; safecall;
  end;

// *********************************************************************//
// DispIntf:  IColorTableDisp
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {83A33DA5-27C5-11CE-BFD4-00400513BB57}
// *********************************************************************//
  IColorTableDisp = dispinterface
    ['{83A33DA5-27C5-11CE-BFD4-00400513BB57}']
    function GetCount: Integer; dispid 1;
    function GetNameAtIndex(index: Integer): WideString; dispid 2;
    function GetColorRefAtIndex(index: Integer): Integer; dispid 3;
    function GetStandardCount: Integer; dispid 4;
    procedure SetColorRefAtIndex(index: Integer; colorRef: Integer; applyTo: SYSINT); dispid 5;
    function GetBasicColorCount: Integer; dispid 6;
    function GetBasicColors: OleVariant; dispid 7;
    function IGetBasicColors(ColorCount: Integer): Integer; dispid 8;
    function GetCustomColorCount: Integer; dispid 9;
    function GetCustomColors: OleVariant; dispid 10;
    function IGetCustomColors(ColorCount: Integer): Integer; dispid 11;
    function SetCustomColor(index: Integer; colorRef: Integer): WordBool; dispid 12;
  end;

// *********************************************************************//
// Interface: IAnnotation
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {83A33DA9-27C5-11CE-BFD4-00400513BB57}
// *********************************************************************//
  IAnnotation = interface(IDispatch)
    ['{83A33DA9-27C5-11CE-BFD4-00400513BB57}']
    function GetNext: IDispatch; safecall;
    function IGetNext: IAnnotation; safecall;
    function GetDisplayData: IDispatch; safecall;
    function IGetDisplayData: IDisplayData; safecall;
    function GetType: Integer; safecall;
    function GetSpecificAnnotation: IDispatch; safecall;
    function IGetSpecificAnnotation: IUnknown; safecall;
    function GetPosition: OleVariant; safecall;
    function IGetPosition: Double; safecall;
    function SetPosition(x: Double; y: Double; z: Double): WordBool; safecall;
    function GetLeaderCount: Integer; safecall;
    function GetLeaderPointsAtIndex(index: Integer): OleVariant; safecall;
    function IGetLeaderPointsAtIndex(index: Integer; PointCount: Integer): Double; safecall;
    function GetArrowHeadStyleAtIndex(index: Integer): Integer; safecall;
    function SetArrowHeadStyleAtIndex(index: Integer; arrowHeadStyle: Integer): Integer; safecall;
    function GetLeader: WordBool; safecall;
    function GetBentLeader: WordBool; safecall;
    function GetLeaderSide: Integer; safecall;
    function GetSmartArrowHeadStyle: WordBool; safecall;
    function SetLeader(leader: WordBool; leaderSide: Integer; smartArrowHeadStyle: WordBool; 
                       bentLeader: WordBool): Integer; safecall;
    function GetName: WideString; safecall;
    function SetName(const nameIn: WideString): WordBool; safecall;
    function GetVisualProperties: OleVariant; safecall;
    function IGetVisualProperties: Integer; safecall;
    function Get_Layer: WideString; safecall;
    procedure Set_Layer(const retval: WideString); safecall;
    function Get_LayerOverride: SYSINT; safecall;
    procedure Set_LayerOverride(retval: SYSINT); safecall;
    function Get_Color: Integer; safecall;
    procedure Set_Color(retval: Integer); safecall;
    function Get_Style: Integer; safecall;
    procedure Set_Style(retval: Integer); safecall;
    function Get_width: Integer; safecall;
    procedure Set_width(retval: Integer); safecall;
    function IGetAttachedEntityCount: Integer; safecall;
    function GetAttachedEntities: OleVariant; safecall;
    function IGetAttachedEntities: IUnknown; safecall;
    function GetAttachedEntityTypes: OleVariant; safecall;
    function IGetAttachedEntityTypes: Integer; safecall;
    function GetNext2: IDispatch; safecall;
    function IGetNext2: IAnnotation; safecall;
    function Get_Visible: Integer; safecall;
    procedure Set_Visible(retval: Integer); safecall;
    function GetTextFormatCount: Integer; safecall;
    function GetUseDocTextFormat(index: Integer): WordBool; safecall;
    function GetTextFormat(index: Integer): IDispatch; safecall;
    function IGetTextFormat(index: Integer): ITextFormat; safecall;
    function SetTextFormat(index: Integer; useDoc: WordBool; const textFormat: IDispatch): WordBool; safecall;
    function ISetTextFormat(index: Integer; useDoc: WordBool; const textFormat: ITextFormat): WordBool; safecall;
    function GetLeaderPerpendicular: WordBool; safecall;
    function GetLeaderAllAround: WordBool; safecall;
    function SetLeader2(leader: WordBool; leaderSide: Integer; smartArrowHeadStyle: WordBool; 
                        bentLeader: WordBool; perpendicular: WordBool; allAround: WordBool): Integer; safecall;
    function Select(appendFlag: WordBool): WordBool; safecall;
    function SelectByMark(appendFlag: WordBool; mark: Integer): WordBool; safecall;
    function DeSelect: WordBool; safecall;
    function Select2(Append: WordBool; mark: Integer): WordBool; safecall;
    property Layer: WideString read Get_Layer write Set_Layer;
    property LayerOverride: SYSINT read Get_LayerOverride write Set_LayerOverride;
    property Color: Integer read Get_Color write Set_Color;
    property Style: Integer read Get_Style write Set_Style;
    property width: Integer read Get_width write Set_width;
    property Visible: Integer read Get_Visible write Set_Visible;
  end;

// *********************************************************************//
// DispIntf:  IAnnotationDisp
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {83A33DA9-27C5-11CE-BFD4-00400513BB57}
// *********************************************************************//
  IAnnotationDisp = dispinterface
    ['{83A33DA9-27C5-11CE-BFD4-00400513BB57}']
    function GetNext: IDispatch; dispid 1;
    function IGetNext: IAnnotation; dispid 2;
    function GetDisplayData: IDispatch; dispid 3;
    function IGetDisplayData: IDisplayData; dispid 4;
    function GetType: Integer; dispid 5;
    function GetSpecificAnnotation: IDispatch; dispid 6;
    function IGetSpecificAnnotation: IUnknown; dispid 7;
    function GetPosition: OleVariant; dispid 8;
    function IGetPosition: Double; dispid 9;
    function SetPosition(x: Double; y: Double; z: Double): WordBool; dispid 10;
    function GetLeaderCount: Integer; dispid 11;
    function GetLeaderPointsAtIndex(index: Integer): OleVariant; dispid 12;
    function IGetLeaderPointsAtIndex(index: Integer; PointCount: Integer): Double; dispid 13;
    function GetArrowHeadStyleAtIndex(index: Integer): Integer; dispid 14;
    function SetArrowHeadStyleAtIndex(index: Integer; arrowHeadStyle: Integer): Integer; dispid 15;
    function GetLeader: WordBool; dispid 16;
    function GetBentLeader: WordBool; dispid 17;
    function GetLeaderSide: Integer; dispid 18;
    function GetSmartArrowHeadStyle: WordBool; dispid 19;
    function SetLeader(leader: WordBool; leaderSide: Integer; smartArrowHeadStyle: WordBool; 
                       bentLeader: WordBool): Integer; dispid 20;
    function GetName: WideString; dispid 21;
    function SetName(const nameIn: WideString): WordBool; dispid 22;
    function GetVisualProperties: OleVariant; dispid 23;
    function IGetVisualProperties: Integer; dispid 24;
    property Layer: WideString dispid 25;
    property LayerOverride: SYSINT dispid 26;
    property Color: Integer dispid 27;
    property Style: Integer dispid 28;
    property width: Integer dispid 29;
    function IGetAttachedEntityCount: Integer; dispid 30;
    function GetAttachedEntities: OleVariant; dispid 31;
    function IGetAttachedEntities: IUnknown; dispid 32;
    function GetAttachedEntityTypes: OleVariant; dispid 33;
    function IGetAttachedEntityTypes: Integer; dispid 34;
    function GetNext2: IDispatch; dispid 35;
    function IGetNext2: IAnnotation; dispid 36;
    property Visible: Integer dispid 37;
    function GetTextFormatCount: Integer; dispid 38;
    function GetUseDocTextFormat(index: Integer): WordBool; dispid 39;
    function GetTextFormat(index: Integer): IDispatch; dispid 40;
    function IGetTextFormat(index: Integer): ITextFormat; dispid 41;
    function SetTextFormat(index: Integer; useDoc: WordBool; const textFormat: IDispatch): WordBool; dispid 42;
    function ISetTextFormat(index: Integer; useDoc: WordBool; const textFormat: ITextFormat): WordBool; dispid 43;
    function GetLeaderPerpendicular: WordBool; dispid 44;
    function GetLeaderAllAround: WordBool; dispid 45;
    function SetLeader2(leader: WordBool; leaderSide: Integer; smartArrowHeadStyle: WordBool; 
                        bentLeader: WordBool; perpendicular: WordBool; allAround: WordBool): Integer; dispid 46;
    function Select(appendFlag: WordBool): WordBool; dispid 47;
    function SelectByMark(appendFlag: WordBool; mark: Integer): WordBool; dispid 48;
    function DeSelect: WordBool; dispid 49;
    function Select2(Append: WordBool; mark: Integer): WordBool; dispid 50;
  end;

// *********************************************************************//
// Interface: IDisplayData
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {83A33D9C-27C5-11CE-BFD4-00400513BB57}
// *********************************************************************//
  IDisplayData = interface(IDispatch)
    ['{83A33D9C-27C5-11CE-BFD4-00400513BB57}']
    function GetTextCount: Integer; safecall;
    function GetTextAtIndex(index: Integer): WideString; safecall;
    function GetTextHeightAtIndex(index: Integer): Double; safecall;
    function GetTextPositionAtIndex(index: Integer): OleVariant; safecall;
    function IGetTextPositionAtIndex(index: Integer): Double; safecall;
    function GetTextAngleAtIndex(index: Integer): Double; safecall;
    function GetTextRefPositionAtIndex(index: Integer): Integer; safecall;
    function GetTextInvertAtIndex(index: Integer): Integer; safecall;
    function GetTextFontAtIndex(index: Integer): WideString; safecall;
    function GetLineCount: Integer; safecall;
    function GetLineAtIndex(index: Integer): OleVariant; safecall;
    function IGetLineAtIndex(index: Integer): Double; safecall;
    function GetArcCount: Integer; safecall;
    function GetArcAtIndex(index: Integer): OleVariant; safecall;
    function IGetArcAtIndex(index: Integer): Double; safecall;
    function GetArrowHeadCount: Integer; safecall;
    function GetArrowHeadAtIndex(index: Integer): OleVariant; safecall;
    function IGetArrowHeadAtIndex(index: Integer): Double; safecall;
    function GetTriangleCount: Integer; safecall;
    function GetTriangleAtIndex(index: Integer): OleVariant; safecall;
    function IGetTriangleAtIndex(index: Integer): Double; safecall;
    function GetPolyLineCount: Integer; safecall;
    function GetPolylineSizeAtIndex(index: Integer): Integer; safecall;
    function GetPolylineAtIndex(index: Integer): OleVariant; safecall;
    function IGetPolylineAtIndex(index: Integer): Double; safecall;
    function GetEllipseCount: Integer; safecall;
    function GetEllipseAtIndex(index: Integer): OleVariant; safecall;
    function IGetEllipseAtIndex(index: Integer): Double; safecall;
    function GetTextLineSpacingAtIndex(index: Integer): Double; safecall;
    function GetLineAtIndex2(index: Integer): OleVariant; safecall;
    function IGetLineAtIndex2(index: Integer): Double; safecall;
    function GetArcAtIndex2(index: Integer): OleVariant; safecall;
    function IGetArcAtIndex2(index: Integer): Double; safecall;
    function GetPolylineSizeAtIndex2(index: Integer): Integer; safecall;
    function GetPolylineAtIndex2(index: Integer): OleVariant; safecall;
    function IGetPolylineAtIndex2(index: Integer): Double; safecall;
    function GetEllipseAtIndex2(index: Integer): OleVariant; safecall;
    function IGetEllipseAtIndex2(index: Integer): Double; safecall;
    procedure Dummy1; safecall;
    procedure Dummy2; safecall;
    procedure Dummy3; safecall;
    procedure Dummy4; safecall;
    function GetParabolaCount: Integer; safecall;
    function GetParabolaAtIndex(index: Integer): OleVariant; safecall;
    function IGetParabolaAtIndex(index: Integer): Double; safecall;
    function GetPolygonCount: Integer; safecall;
    function GetPolygonSizeAtIndex(index: Integer): Integer; safecall;
    function GetPolygonAtIndex(index: Integer): OleVariant; safecall;
    function IGetPolygonAtIndex(index: Integer): Double; safecall;
  end;

// *********************************************************************//
// DispIntf:  IDisplayDataDisp
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {83A33D9C-27C5-11CE-BFD4-00400513BB57}
// *********************************************************************//
  IDisplayDataDisp = dispinterface
    ['{83A33D9C-27C5-11CE-BFD4-00400513BB57}']
    function GetTextCount: Integer; dispid 1;
    function GetTextAtIndex(index: Integer): WideString; dispid 2;
    function GetTextHeightAtIndex(index: Integer): Double; dispid 3;
    function GetTextPositionAtIndex(index: Integer): OleVariant; dispid 4;
    function IGetTextPositionAtIndex(index: Integer): Double; dispid 5;
    function GetTextAngleAtIndex(index: Integer): Double; dispid 6;
    function GetTextRefPositionAtIndex(index: Integer): Integer; dispid 7;
    function GetTextInvertAtIndex(index: Integer): Integer; dispid 8;
    function GetTextFontAtIndex(index: Integer): WideString; dispid 9;
    function GetLineCount: Integer; dispid 10;
    function GetLineAtIndex(index: Integer): OleVariant; dispid 11;
    function IGetLineAtIndex(index: Integer): Double; dispid 12;
    function GetArcCount: Integer; dispid 13;
    function GetArcAtIndex(index: Integer): OleVariant; dispid 14;
    function IGetArcAtIndex(index: Integer): Double; dispid 15;
    function GetArrowHeadCount: Integer; dispid 16;
    function GetArrowHeadAtIndex(index: Integer): OleVariant; dispid 17;
    function IGetArrowHeadAtIndex(index: Integer): Double; dispid 18;
    function GetTriangleCount: Integer; dispid 19;
    function GetTriangleAtIndex(index: Integer): OleVariant; dispid 20;
    function IGetTriangleAtIndex(index: Integer): Double; dispid 21;
    function GetPolyLineCount: Integer; dispid 22;
    function GetPolylineSizeAtIndex(index: Integer): Integer; dispid 23;
    function GetPolylineAtIndex(index: Integer): OleVariant; dispid 24;
    function IGetPolylineAtIndex(index: Integer): Double; dispid 25;
    function GetEllipseCount: Integer; dispid 26;
    function GetEllipseAtIndex(index: Integer): OleVariant; dispid 27;
    function IGetEllipseAtIndex(index: Integer): Double; dispid 28;
    function GetTextLineSpacingAtIndex(index: Integer): Double; dispid 29;
    function GetLineAtIndex2(index: Integer): OleVariant; dispid 30;
    function IGetLineAtIndex2(index: Integer): Double; dispid 31;
    function GetArcAtIndex2(index: Integer): OleVariant; dispid 32;
    function IGetArcAtIndex2(index: Integer): Double; dispid 33;
    function GetPolylineSizeAtIndex2(index: Integer): Integer; dispid 34;
    function GetPolylineAtIndex2(index: Integer): OleVariant; dispid 35;
    function IGetPolylineAtIndex2(index: Integer): Double; dispid 36;
    function GetEllipseAtIndex2(index: Integer): OleVariant; dispid 37;
    function IGetEllipseAtIndex2(index: Integer): Double; dispid 38;
    procedure Dummy1; dispid 39;
    procedure Dummy2; dispid 40;
    procedure Dummy3; dispid 41;
    procedure Dummy4; dispid 42;
    function GetParabolaCount: Integer; dispid 43;
    function GetParabolaAtIndex(index: Integer): OleVariant; dispid 44;
    function IGetParabolaAtIndex(index: Integer): Double; dispid 45;
    function GetPolygonCount: Integer; dispid 46;
    function GetPolygonSizeAtIndex(index: Integer): Integer; dispid 47;
    function GetPolygonAtIndex(index: Integer): OleVariant; dispid 48;
    function IGetPolygonAtIndex(index: Integer): Double; dispid 49;
  end;

// *********************************************************************//
// Interface: ITextFormat
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {83A33DB9-27C5-11CE-BFD4-00400513BB57}
// *********************************************************************//
  ITextFormat = interface(IDispatch)
    ['{83A33DB9-27C5-11CE-BFD4-00400513BB57}']
    function GetAllValues: OleVariant; safecall;
    function IGetAllValues(count: Integer): Double; safecall;
    function Get_italic: WordBool; safecall;
    procedure Set_italic(italic: WordBool); safecall;
    function Get_underline: WordBool; safecall;
    procedure Set_underline(underline: WordBool); safecall;
    function Get_Strikeout: WordBool; safecall;
    procedure Set_Strikeout(Strikeout: WordBool); safecall;
    function Get_bold: WordBool; safecall;
    procedure Set_bold(bold: WordBool); safecall;
    function Get_Escapement: Double; safecall;
    procedure Set_Escapement(Escapement: Double); safecall;
    function Get_LineSpacing: Double; safecall;
    procedure Set_LineSpacing(spacing: Double); safecall;
    function Get_CharHeight: Double; safecall;
    procedure Set_CharHeight(height: Double); safecall;
    function Get_CharHeightInPts: SYSINT; safecall;
    procedure Set_CharHeightInPts(height: SYSINT); safecall;
    function IsHeightSpecifiedInPts: WordBool; safecall;
    function Get_TypeFaceName: WideString; safecall;
    procedure Set_TypeFaceName(const Name: WideString); safecall;
    function Get_WidthFactor: Double; safecall;
    procedure Set_WidthFactor(spacing: Double); safecall;
    function Get_ObliqueAngle: Double; safecall;
    procedure Set_ObliqueAngle(ObliqueAngle: Double); safecall;
    function Get_LineLength: Double; safecall;
    procedure Set_LineLength(LineLength: Double); safecall;
    function Get_Vertical: WordBool; safecall;
    procedure Set_Vertical(Vertical: WordBool); safecall;
    function Get_BackWards: WordBool; safecall;
    procedure Set_BackWards(BackWards: WordBool); safecall;
    function Get_UpsideDown: WordBool; safecall;
    procedure Set_UpsideDown(UpsideDown: WordBool); safecall;
    function Get_CharSpacingFactor: Double; safecall;
    procedure Set_CharSpacingFactor(factor: Double); safecall;
    property italic: WordBool read Get_italic write Set_italic;
    property underline: WordBool read Get_underline write Set_underline;
    property Strikeout: WordBool read Get_Strikeout write Set_Strikeout;
    property bold: WordBool read Get_bold write Set_bold;
    property Escapement: Double read Get_Escapement write Set_Escapement;
    property LineSpacing: Double read Get_LineSpacing write Set_LineSpacing;
    property CharHeight: Double read Get_CharHeight write Set_CharHeight;
    property CharHeightInPts: SYSINT read Get_CharHeightInPts write Set_CharHeightInPts;
    property TypeFaceName: WideString read Get_TypeFaceName write Set_TypeFaceName;
    property WidthFactor: Double read Get_WidthFactor write Set_WidthFactor;
    property ObliqueAngle: Double read Get_ObliqueAngle write Set_ObliqueAngle;
    property LineLength: Double read Get_LineLength write Set_LineLength;
    property Vertical: WordBool read Get_Vertical write Set_Vertical;
    property BackWards: WordBool read Get_BackWards write Set_BackWards;
    property UpsideDown: WordBool read Get_UpsideDown write Set_UpsideDown;
    property CharSpacingFactor: Double read Get_CharSpacingFactor write Set_CharSpacingFactor;
  end;

// *********************************************************************//
// DispIntf:  ITextFormatDisp
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {83A33DB9-27C5-11CE-BFD4-00400513BB57}
// *********************************************************************//
  ITextFormatDisp = dispinterface
    ['{83A33DB9-27C5-11CE-BFD4-00400513BB57}']
    function GetAllValues: OleVariant; dispid 1;
    function IGetAllValues(count: Integer): Double; dispid 2;
    property italic: WordBool dispid 3;
    property underline: WordBool dispid 4;
    property Strikeout: WordBool dispid 5;
    property bold: WordBool dispid 6;
    property Escapement: Double dispid 7;
    property LineSpacing: Double dispid 8;
    property CharHeight: Double dispid 9;
    property CharHeightInPts: SYSINT dispid 10;
    function IsHeightSpecifiedInPts: WordBool; dispid 11;
    property TypeFaceName: WideString dispid 12;
    property WidthFactor: Double dispid 13;
    property ObliqueAngle: Double dispid 14;
    property LineLength: Double dispid 15;
    property Vertical: WordBool dispid 16;
    property BackWards: WordBool dispid 17;
    property UpsideDown: WordBool dispid 18;
    property CharSpacingFactor: Double dispid 19;
  end;

// *********************************************************************//
// Interface: IEnumModelViews
// Flags:     (272) Hidden OleAutomation
// GUID:      {83A33DB1-27C5-11CE-BFD4-00400513BB57}
// *********************************************************************//
  IEnumModelViews = interface(IUnknown)
    ['{83A33DB1-27C5-11CE-BFD4-00400513BB57}']
    function Next(celt: Integer; out rgelt: IModelView; var pceltFetched: Integer): HResult; stdcall;
    function Skip(celt: Integer): HResult; stdcall;
    function Reset: HResult; stdcall;
    function Clone(out ppenum: IEnumModelViews): HResult; stdcall;
  end;

// *********************************************************************//
// Interface: IDetailingDefaults
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {83A33DB7-27C5-11CE-BFD4-00400513BB57}
// *********************************************************************//
  IDetailingDefaults = interface(IDispatch)
    ['{83A33DB7-27C5-11CE-BFD4-00400513BB57}']
    function GetAllValues: OleVariant; safecall;
    function IGetAllValues(count: Integer): Double; safecall;
    function GetTextFormat: IDispatch; safecall;
    function IGetTextFormat: ITextFormat; safecall;
    procedure SetTextFormat(const textFormat: IDispatch); safecall;
    procedure ISetTextFormat(const textFormat: ITextFormat); safecall;
    function GetDimensionTextFormat: IDispatch; safecall;
    function IGetDimensionTextFormat: ITextFormat; safecall;
    procedure SetDimensionTextFormat(const textFormat: IDispatch); safecall;
    procedure ISetDimensionTextFormat(const textFormat: ITextFormat); safecall;
    function GetSectionTextFormat: IDispatch; safecall;
    function IGetSectionTextFormat: ITextFormat; safecall;
    procedure SetSectionTextFormat(const textFormat: IDispatch); safecall;
    procedure ISetSectionTextFormat(const textFormat: ITextFormat); safecall;
    function GetDetailTextFormat: IDispatch; safecall;
    function IGetDetailTextFormat: ITextFormat; safecall;
    procedure SetDetailTextFormat(const textFormat: IDispatch); safecall;
    procedure ISetDetailTextFormat(const textFormat: ITextFormat); safecall;
  end;

// *********************************************************************//
// DispIntf:  IDetailingDefaultsDisp
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {83A33DB7-27C5-11CE-BFD4-00400513BB57}
// *********************************************************************//
  IDetailingDefaultsDisp = dispinterface
    ['{83A33DB7-27C5-11CE-BFD4-00400513BB57}']
    function GetAllValues: OleVariant; dispid 1;
    function IGetAllValues(count: Integer): Double; dispid 2;
    function GetTextFormat: IDispatch; dispid 3;
    function IGetTextFormat: ITextFormat; dispid 4;
    procedure SetTextFormat(const textFormat: IDispatch); dispid 5;
    procedure ISetTextFormat(const textFormat: ITextFormat); dispid 6;
    function GetDimensionTextFormat: IDispatch; dispid 7;
    function IGetDimensionTextFormat: ITextFormat; dispid 8;
    procedure SetDimensionTextFormat(const textFormat: IDispatch); dispid 9;
    procedure ISetDimensionTextFormat(const textFormat: ITextFormat); dispid 10;
    function GetSectionTextFormat: IDispatch; dispid 11;
    function IGetSectionTextFormat: ITextFormat; dispid 12;
    procedure SetSectionTextFormat(const textFormat: IDispatch); dispid 13;
    procedure ISetSectionTextFormat(const textFormat: ITextFormat); dispid 14;
    function GetDetailTextFormat: IDispatch; dispid 15;
    function IGetDetailTextFormat: ITextFormat; dispid 16;
    procedure SetDetailTextFormat(const textFormat: IDispatch); dispid 17;
    procedure ISetDetailTextFormat(const textFormat: ITextFormat); dispid 18;
  end;

// *********************************************************************//
// Interface: ILayerMgr
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {75173E30-F19E-11D2-B8E9-00C04F8EF738}
// *********************************************************************//
  ILayerMgr = interface(IDispatch)
    ['{75173E30-F19E-11D2-B8E9-00C04F8EF738}']
    function AddLayer(const nameIn: WideString; const descIn: WideString; colorIn: Integer; 
                      styleIn: Integer; widthIn: Integer): SYSINT; safecall;
    function SetCurrentLayer(const nameIn: WideString): SYSINT; safecall;
    function GetCurrentLayer: WideString; safecall;
    function GetLayer(const nameIn: WideString): IDispatch; safecall;
    function IGetLayer(const nameIn: WideString): ILayer; safecall;
    function GetCount: SYSINT; safecall;
    function GetLayerList: OleVariant; safecall;
    function IGetLayerList: WideString; safecall;
    function GetLayerById(layerId: Smallint): IDispatch; safecall;
    function IGetLayerById(layerId: Smallint): ILayer; safecall;
    function DeleteLayer(const Name: WideString): WordBool; safecall;
  end;

// *********************************************************************//
// DispIntf:  ILayerMgrDisp
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {75173E30-F19E-11D2-B8E9-00C04F8EF738}
// *********************************************************************//
  ILayerMgrDisp = dispinterface
    ['{75173E30-F19E-11D2-B8E9-00C04F8EF738}']
    function AddLayer(const nameIn: WideString; const descIn: WideString; colorIn: Integer; 
                      styleIn: Integer; widthIn: Integer): SYSINT; dispid 1;
    function SetCurrentLayer(const nameIn: WideString): SYSINT; dispid 2;
    function GetCurrentLayer: WideString; dispid 3;
    function GetLayer(const nameIn: WideString): IDispatch; dispid 4;
    function IGetLayer(const nameIn: WideString): ILayer; dispid 5;
    function GetCount: SYSINT; dispid 6;
    function GetLayerList: OleVariant; dispid 7;
    function IGetLayerList: WideString; dispid 8;
    function GetLayerById(layerId: Smallint): IDispatch; dispid 9;
    function IGetLayerById(layerId: Smallint): ILayer; dispid 10;
    function DeleteLayer(const Name: WideString): WordBool; dispid 11;
  end;

// *********************************************************************//
// Interface: ILayer
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {04B7287C-F19D-11D2-B8E9-00C04F8EF738}
// *********************************************************************//
  ILayer = interface(IDispatch)
    ['{04B7287C-F19D-11D2-B8E9-00C04F8EF738}']
    function Get_Name: WideString; safecall;
    function Get_Color: Integer; safecall;
    function Get_Style: SYSINT; safecall;
    function Get_width: SYSINT; safecall;
    function Get_Visible: WordBool; safecall;
    procedure Set_Visible(retval: WordBool); safecall;
    function Get_Description: WideString; safecall;
    procedure Set_Description(const retval: WideString); safecall;
    function GetId: Integer; safecall;
    property Name: WideString read Get_Name;
    property Color: Integer read Get_Color;
    property Style: SYSINT read Get_Style;
    property width: SYSINT read Get_width;
    property Visible: WordBool read Get_Visible write Set_Visible;
    property Description: WideString read Get_Description write Set_Description;
  end;

// *********************************************************************//
// DispIntf:  ILayerDisp
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {04B7287C-F19D-11D2-B8E9-00C04F8EF738}
// *********************************************************************//
  ILayerDisp = dispinterface
    ['{04B7287C-F19D-11D2-B8E9-00C04F8EF738}']
    property Name: WideString readonly dispid 1;
    property Color: Integer readonly dispid 2;
    property Style: SYSINT readonly dispid 3;
    property width: SYSINT readonly dispid 4;
    property Visible: WordBool dispid 5;
    property Description: WideString dispid 6;
    function GetId: Integer; dispid 7;
  end;

// *********************************************************************//
// Interface: IDesignTable
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {CE1EAA88-25AD-11D3-AE91-00C04F683CBA}
// *********************************************************************//
  IDesignTable = interface(IDispatch)
    ['{CE1EAA88-25AD-11D3-AE91-00C04F683CBA}']
    function GetRowCount: Integer; safecall;
    function GetColumnCount: Integer; safecall;
    function GetHeaderText(col: Integer): WideString; safecall;
    function GetEntryText(row: Integer; col: Integer): WideString; safecall;
    function Attach: WordBool; safecall;
    procedure Detach; safecall;
    function GetEntryValue(row: Integer; col: Integer): OleVariant; safecall;
    function GetTitle: WideString; safecall;
    function GetTotalRowCount: Integer; safecall;
    function GetTotalColumnCount: Integer; safecall;
    function GetVisibleRowCount: Integer; safecall;
    function GetVisibleColumnCount: Integer; safecall;
    procedure SetEntryText(row: Integer; col: Integer; const textIn: WideString); safecall;
    function AddRow(cellValues: OleVariant): WordBool; safecall;
    function UpdateModel: WordBool; safecall;
  end;

// *********************************************************************//
// DispIntf:  IDesignTableDisp
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {CE1EAA88-25AD-11D3-AE91-00C04F683CBA}
// *********************************************************************//
  IDesignTableDisp = dispinterface
    ['{CE1EAA88-25AD-11D3-AE91-00C04F683CBA}']
    function GetRowCount: Integer; dispid 1;
    function GetColumnCount: Integer; dispid 2;
    function GetHeaderText(col: Integer): WideString; dispid 3;
    function GetEntryText(row: Integer; col: Integer): WideString; dispid 4;
    function Attach: WordBool; dispid 5;
    procedure Detach; dispid 6;
    function GetEntryValue(row: Integer; col: Integer): OleVariant; dispid 7;
    function GetTitle: WideString; dispid 8;
    function GetTotalRowCount: Integer; dispid 9;
    function GetTotalColumnCount: Integer; dispid 10;
    function GetVisibleRowCount: Integer; dispid 11;
    function GetVisibleColumnCount: Integer; dispid 12;
    procedure SetEntryText(row: Integer; col: Integer; const textIn: WideString); dispid 13;
    function AddRow(cellValues: OleVariant): WordBool; dispid 14;
    function UpdateModel: WordBool; dispid 15;
  end;

// *********************************************************************//
// Interface: IRefPlane
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {83A33D84-27C5-11CE-BFD4-00400513BB57}
// *********************************************************************//
  IRefPlane = interface(IDispatch)
    ['{83A33D84-27C5-11CE-BFD4-00400513BB57}']
    function GetRefPlaneParams: OleVariant; safecall;
    function IGetRefPlaneParams: Double; safecall;
  end;

// *********************************************************************//
// DispIntf:  IRefPlaneDisp
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {83A33D84-27C5-11CE-BFD4-00400513BB57}
// *********************************************************************//
  IRefPlaneDisp = dispinterface
    ['{83A33D84-27C5-11CE-BFD4-00400513BB57}']
    function GetRefPlaneParams: OleVariant; dispid 1;
    function IGetRefPlaneParams: Double; dispid 2;
  end;

// *********************************************************************//
// Interface: IDatumTag
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {83A33D90-27C5-11CE-BFD4-00400513BB57}
// *********************************************************************//
  IDatumTag = interface(IDispatch)
    ['{83A33D90-27C5-11CE-BFD4-00400513BB57}']
    function GetNext: IDispatch; safecall;
    function IGetNext: IDatumTag; safecall;
    function GetTextCount: Integer; safecall;
    function GetTextAtIndex(index: Integer): WideString; safecall;
    function GetTextHeightAtIndex(index: Integer): Double; safecall;
    function GetTextPositionAtIndex(index: Integer): OleVariant; safecall;
    function IGetTextPositionAtIndex(index: Integer): Double; safecall;
    function GetTextAngleAtIndex(index: Integer): Double; safecall;
    function GetTextRefPositionAtIndex(index: Integer): Integer; safecall;
    function GetTextInvertAtIndex(index: Integer): Integer; safecall;
    function GetLineCount: Integer; safecall;
    function GetLineAtIndex(index: Integer): OleVariant; safecall;
    function IGetLineAtIndex(index: Integer): Double; safecall;
    function GetArcCount: Integer; safecall;
    function GetArcAtIndex(index: Integer): OleVariant; safecall;
    function IGetArcAtIndex(index: Integer): Double; safecall;
    function GetArrowHeadCount: Integer; safecall;
    function GetArrowHeadAtIndex(index: Integer): OleVariant; safecall;
    function IGetArrowHeadAtIndex(index: Integer): Double; safecall;
    function GetTriangleCount: Integer; safecall;
    function GetTriangleAtIndex(index: Integer): OleVariant; safecall;
    function IGetTriangleAtIndex(index: Integer): Double; safecall;
    function GetAnnotation: IDispatch; safecall;
    function IGetAnnotation: IAnnotation; safecall;
    function GetLabel: WideString; safecall;
    function SetLabel(const Label_: WideString): WordBool; safecall;
    function Get_FilledTriangle: WordBool; safecall;
    procedure Set_FilledTriangle(retval: WordBool); safecall;
    function Get_Shoulder: WordBool; safecall;
    procedure Set_Shoulder(retval: WordBool); safecall;
    property FilledTriangle: WordBool read Get_FilledTriangle write Set_FilledTriangle;
    property Shoulder: WordBool read Get_Shoulder write Set_Shoulder;
  end;

// *********************************************************************//
// DispIntf:  IDatumTagDisp
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {83A33D90-27C5-11CE-BFD4-00400513BB57}
// *********************************************************************//
  IDatumTagDisp = dispinterface
    ['{83A33D90-27C5-11CE-BFD4-00400513BB57}']
    function GetNext: IDispatch; dispid 1;
    function IGetNext: IDatumTag; dispid 2;
    function GetTextCount: Integer; dispid 3;
    function GetTextAtIndex(index: Integer): WideString; dispid 4;
    function GetTextHeightAtIndex(index: Integer): Double; dispid 5;
    function GetTextPositionAtIndex(index: Integer): OleVariant; dispid 6;
    function IGetTextPositionAtIndex(index: Integer): Double; dispid 7;
    function GetTextAngleAtIndex(index: Integer): Double; dispid 8;
    function GetTextRefPositionAtIndex(index: Integer): Integer; dispid 9;
    function GetTextInvertAtIndex(index: Integer): Integer; dispid 10;
    function GetLineCount: Integer; dispid 11;
    function GetLineAtIndex(index: Integer): OleVariant; dispid 12;
    function IGetLineAtIndex(index: Integer): Double; dispid 13;
    function GetArcCount: Integer; dispid 14;
    function GetArcAtIndex(index: Integer): OleVariant; dispid 15;
    function IGetArcAtIndex(index: Integer): Double; dispid 16;
    function GetArrowHeadCount: Integer; dispid 17;
    function GetArrowHeadAtIndex(index: Integer): OleVariant; dispid 18;
    function IGetArrowHeadAtIndex(index: Integer): Double; dispid 19;
    function GetTriangleCount: Integer; dispid 20;
    function GetTriangleAtIndex(index: Integer): OleVariant; dispid 21;
    function IGetTriangleAtIndex(index: Integer): Double; dispid 22;
    function GetAnnotation: IDispatch; dispid 23;
    function IGetAnnotation: IAnnotation; dispid 24;
    function GetLabel: WideString; dispid 25;
    function SetLabel(const Label_: WideString): WordBool; dispid 26;
    property FilledTriangle: WordBool dispid 27;
    property Shoulder: WordBool dispid 28;
  end;

// *********************************************************************//
// Interface: IGtol
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {83A33D4A-27C5-11CE-BFD4-00400513BB57}
// *********************************************************************//
  IGtol = interface(IDispatch)
    ['{83A33D4A-27C5-11CE-BFD4-00400513BB57}']
    procedure SetFrameValues(frameNumber: Smallint; const tol1: WideString; const tol2: WideString; 
                             const datum1: WideString; const datum2: WideString; 
                             const datum3: WideString); safecall;
    procedure SetFrameSymbols(frameNumber: Smallint; GCS: Smallint; tolDia1: WordBool; 
                              tolMC1: Smallint; tolDia2: WordBool; tolMC2: Smallint; 
                              datumMC1: Smallint; datumMC2: Smallint; datumMC3: Smallint); safecall;
    procedure SetPTZHeight(const ptzHt: WideString; displayIn: WordBool); safecall;
    procedure SetDatumIdentifier(const datumIdentifier: WideString); safecall;
    function GetNextGTOL: IDispatch; safecall;
    function IGetNextGTOL: IGtol; safecall;
    function GetFrameValues(frameNumber: Smallint): OleVariant; safecall;
    function GetFrameSymbols(frameNumber: Smallint): OleVariant; safecall;
    function GetPTZHeight: WideString; safecall;
    function GetDatumIdentifier: WideString; safecall;
    function GetHeight: Double; safecall;
    function GetAttachPos: OleVariant; safecall;
    function GetFontInfo: OleVariant; safecall;
    function GetLeaderInfo: OleVariant; safecall;
    function IsAttached: WordBool; safecall;
    function HasExtraLeader: WordBool; safecall;
    procedure Dummy1; safecall;
    procedure Dummy2; safecall;
    function GetTextPoint: OleVariant; safecall;
    function GetArrowHeadInfo: OleVariant; safecall;
    function IGetAttachPos: Double; safecall;
    function IGetFontInfo: Double; safecall;
    function IGetLeaderInfo(out PointCount: Integer): Double; safecall;
    procedure Dummy3; safecall;
    function IGetTextPoint: Double; safecall;
    function IGetArrowHeadInfo: Double; safecall;
    function GetSymName(symIdx: Smallint): WideString; safecall;
    function GetSymDesc(symIdx: Smallint): WideString; safecall;
    function GetSymText(symIdx: Smallint): OleVariant; safecall;
    function GetSymEdgeCounts(symIdx: Smallint): OleVariant; safecall;
    function GetSymLines(symIdx: Smallint): OleVariant; safecall;
    function GetSymArcs(symIdx: Smallint): OleVariant; safecall;
    function GetSymCircles(symIdx: Smallint): OleVariant; safecall;
    function GetSymTextPoints(symIdx: Smallint): OleVariant; safecall;
    function IGetSymEdgeCounts(symIdx: Smallint): Smallint; safecall;
    function IGetSymLines(symIdx: Smallint): Double; safecall;
    function IGetSymArcs(symIdx: Smallint): Double; safecall;
    function IGetSymCircles(symIdx: Smallint): Double; safecall;
    function IGetSymTextPoints(symIdx: Smallint): Double; safecall;
    function GetTextCount: Integer; safecall;
    function GetTextAtIndex(index: Integer): WideString; safecall;
    function GetTextHeightAtIndex(index: Integer): Double; safecall;
    function GetTextPositionAtIndex(index: Integer): OleVariant; safecall;
    function IGetTextPositionAtIndex(index: Integer): Double; safecall;
    function GetTextAngleAtIndex(index: Integer): Double; safecall;
    function GetTextRefPositionAtIndex(index: Integer): Integer; safecall;
    function GetTextInvertAtIndex(index: Integer): Integer; safecall;
    function GetLineCount: Integer; safecall;
    function GetLineAtIndex(index: Integer): OleVariant; safecall;
    function IGetLineAtIndex(index: Integer): Double; safecall;
    function GetArcCount: Integer; safecall;
    function GetArcAtIndex(index: Integer): OleVariant; safecall;
    function IGetArcAtIndex(index: Integer): Double; safecall;
    function GetArrowHeadCount: Integer; safecall;
    function GetArrowHeadAtIndex(index: Integer): OleVariant; safecall;
    function IGetArrowHeadAtIndex(index: Integer): Double; safecall;
    function GetTriangleCount: Integer; safecall;
    function GetTriangleAtIndex(index: Integer): OleVariant; safecall;
    function IGetTriangleAtIndex(index: Integer): Double; safecall;
    function IGetFrameValues(frameNumber: Smallint): WideString; safecall;
    function IGetFrameSymbols(frameNumber: Smallint): Smallint; safecall;
    function IGetSymText(symIdx: Smallint): WideString; safecall;
    procedure SetFrameSymbols2(frameNumber: Smallint; const GCS: WideString; tolDia1: WordBool; 
                               const tolMC1: WideString; tolDia2: WordBool; 
                               const tolMC2: WideString; const datumMC1: WideString; 
                               const datumMC2: WideString; const datumMC3: WideString); safecall;
    function GetTextFont: WideString; safecall;
    function GetLeaderCount: Integer; safecall;
    function GetLeaderAtIndex(index: Integer): OleVariant; safecall;
    function IGetLeaderAtIndex(index: Integer; out PointCount: Integer): Double; safecall;
    procedure SetPosition(x: Double; y: Double; z: Double); safecall;
    function GetUseDocTextFormat: WordBool; safecall;
    function GetTextFormat: IDispatch; safecall;
    function IGetTextFormat: ITextFormat; safecall;
    function SetTextFormat(textFormatType: Integer; const textFormat: IDispatch): WordBool; safecall;
    function ISetTextFormat(textFormatType: Integer; const textFormat: ITextFormat): WordBool; safecall;
    function GetCompositeFrame: WordBool; safecall;
    procedure SetCompositeFrame(composite: WordBool); safecall;
    function GetBetweenTwoPoints: WordBool; safecall;
    function GetBetweenTwoPointsText(index: Integer): WideString; safecall;
    procedure SetBetweenTwoPoints(between: WordBool; const textFrom: WideString; 
                                  const textTo: WideString); safecall;
    function GetAllAround: WordBool; safecall;
    function GetLeaderSide: Integer; safecall;
    procedure SetLeader(leader: WordBool; leaderSide: Integer; bentLeader: WordBool; 
                        allAround: WordBool); safecall;
    function GetAnnotation: IDispatch; safecall;
    function IGetAnnotation: IAnnotation; safecall;
    function GetFrameSymbols2(frameNumber: Smallint): OleVariant; safecall;
    function IGetFrameSymbols2(frameNumber: Smallint): WideString; safecall;
    function GetFrameDiameterSymbols(frameNumber: Smallint): OleVariant; safecall;
    function IGetFrameDiameterSymbols(frameNumber: Smallint): WordBool; safecall;
    function GetFrameCount: Smallint; safecall;
  end;

// *********************************************************************//
// DispIntf:  IGtolDisp
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {83A33D4A-27C5-11CE-BFD4-00400513BB57}
// *********************************************************************//
  IGtolDisp = dispinterface
    ['{83A33D4A-27C5-11CE-BFD4-00400513BB57}']
    procedure SetFrameValues(frameNumber: Smallint; const tol1: WideString; const tol2: WideString; 
                             const datum1: WideString; const datum2: WideString; 
                             const datum3: WideString); dispid 1;
    procedure SetFrameSymbols(frameNumber: Smallint; GCS: Smallint; tolDia1: WordBool; 
                              tolMC1: Smallint; tolDia2: WordBool; tolMC2: Smallint; 
                              datumMC1: Smallint; datumMC2: Smallint; datumMC3: Smallint); dispid 2;
    procedure SetPTZHeight(const ptzHt: WideString; displayIn: WordBool); dispid 3;
    procedure SetDatumIdentifier(const datumIdentifier: WideString); dispid 4;
    function GetNextGTOL: IDispatch; dispid 5;
    function IGetNextGTOL: IGtol; dispid 6;
    function GetFrameValues(frameNumber: Smallint): OleVariant; dispid 7;
    function GetFrameSymbols(frameNumber: Smallint): OleVariant; dispid 8;
    function GetPTZHeight: WideString; dispid 9;
    function GetDatumIdentifier: WideString; dispid 10;
    function GetHeight: Double; dispid 11;
    function GetAttachPos: OleVariant; dispid 12;
    function GetFontInfo: OleVariant; dispid 13;
    function GetLeaderInfo: OleVariant; dispid 14;
    function IsAttached: WordBool; dispid 15;
    function HasExtraLeader: WordBool; dispid 16;
    procedure Dummy1; dispid 17;
    procedure Dummy2; dispid 18;
    function GetTextPoint: OleVariant; dispid 19;
    function GetArrowHeadInfo: OleVariant; dispid 20;
    function IGetAttachPos: Double; dispid 21;
    function IGetFontInfo: Double; dispid 22;
    function IGetLeaderInfo(out PointCount: Integer): Double; dispid 23;
    procedure Dummy3; dispid 24;
    function IGetTextPoint: Double; dispid 25;
    function IGetArrowHeadInfo: Double; dispid 26;
    function GetSymName(symIdx: Smallint): WideString; dispid 27;
    function GetSymDesc(symIdx: Smallint): WideString; dispid 28;
    function GetSymText(symIdx: Smallint): OleVariant; dispid 29;
    function GetSymEdgeCounts(symIdx: Smallint): OleVariant; dispid 30;
    function GetSymLines(symIdx: Smallint): OleVariant; dispid 31;
    function GetSymArcs(symIdx: Smallint): OleVariant; dispid 32;
    function GetSymCircles(symIdx: Smallint): OleVariant; dispid 33;
    function GetSymTextPoints(symIdx: Smallint): OleVariant; dispid 34;
    function IGetSymEdgeCounts(symIdx: Smallint): Smallint; dispid 35;
    function IGetSymLines(symIdx: Smallint): Double; dispid 36;
    function IGetSymArcs(symIdx: Smallint): Double; dispid 37;
    function IGetSymCircles(symIdx: Smallint): Double; dispid 38;
    function IGetSymTextPoints(symIdx: Smallint): Double; dispid 39;
    function GetTextCount: Integer; dispid 40;
    function GetTextAtIndex(index: Integer): WideString; dispid 41;
    function GetTextHeightAtIndex(index: Integer): Double; dispid 42;
    function GetTextPositionAtIndex(index: Integer): OleVariant; dispid 43;
    function IGetTextPositionAtIndex(index: Integer): Double; dispid 44;
    function GetTextAngleAtIndex(index: Integer): Double; dispid 45;
    function GetTextRefPositionAtIndex(index: Integer): Integer; dispid 46;
    function GetTextInvertAtIndex(index: Integer): Integer; dispid 47;
    function GetLineCount: Integer; dispid 48;
    function GetLineAtIndex(index: Integer): OleVariant; dispid 49;
    function IGetLineAtIndex(index: Integer): Double; dispid 50;
    function GetArcCount: Integer; dispid 51;
    function GetArcAtIndex(index: Integer): OleVariant; dispid 52;
    function IGetArcAtIndex(index: Integer): Double; dispid 53;
    function GetArrowHeadCount: Integer; dispid 54;
    function GetArrowHeadAtIndex(index: Integer): OleVariant; dispid 55;
    function IGetArrowHeadAtIndex(index: Integer): Double; dispid 56;
    function GetTriangleCount: Integer; dispid 57;
    function GetTriangleAtIndex(index: Integer): OleVariant; dispid 58;
    function IGetTriangleAtIndex(index: Integer): Double; dispid 59;
    function IGetFrameValues(frameNumber: Smallint): WideString; dispid 60;
    function IGetFrameSymbols(frameNumber: Smallint): Smallint; dispid 61;
    function IGetSymText(symIdx: Smallint): WideString; dispid 62;
    procedure SetFrameSymbols2(frameNumber: Smallint; const GCS: WideString; tolDia1: WordBool; 
                               const tolMC1: WideString; tolDia2: WordBool; 
                               const tolMC2: WideString; const datumMC1: WideString; 
                               const datumMC2: WideString; const datumMC3: WideString); dispid 63;
    function GetTextFont: WideString; dispid 64;
    function GetLeaderCount: Integer; dispid 65;
    function GetLeaderAtIndex(index: Integer): OleVariant; dispid 66;
    function IGetLeaderAtIndex(index: Integer; out PointCount: Integer): Double; dispid 67;
    procedure SetPosition(x: Double; y: Double; z: Double); dispid 68;
    function GetUseDocTextFormat: WordBool; dispid 69;
    function GetTextFormat: IDispatch; dispid 70;
    function IGetTextFormat: ITextFormat; dispid 71;
    function SetTextFormat(textFormatType: Integer; const textFormat: IDispatch): WordBool; dispid 72;
    function ISetTextFormat(textFormatType: Integer; const textFormat: ITextFormat): WordBool; dispid 73;
    function GetCompositeFrame: WordBool; dispid 74;
    procedure SetCompositeFrame(composite: WordBool); dispid 75;
    function GetBetweenTwoPoints: WordBool; dispid 76;
    function GetBetweenTwoPointsText(index: Integer): WideString; dispid 77;
    procedure SetBetweenTwoPoints(between: WordBool; const textFrom: WideString; 
                                  const textTo: WideString); dispid 78;
    function GetAllAround: WordBool; dispid 79;
    function GetLeaderSide: Integer; dispid 80;
    procedure SetLeader(leader: WordBool; leaderSide: Integer; bentLeader: WordBool; 
                        allAround: WordBool); dispid 81;
    function GetAnnotation: IDispatch; dispid 82;
    function IGetAnnotation: IAnnotation; dispid 83;
    function GetFrameSymbols2(frameNumber: Smallint): OleVariant; dispid 84;
    function IGetFrameSymbols2(frameNumber: Smallint): WideString; dispid 85;
    function GetFrameDiameterSymbols(frameNumber: Smallint): OleVariant; dispid 86;
    function IGetFrameDiameterSymbols(frameNumber: Smallint): WordBool; dispid 87;
    function GetFrameCount: Smallint; dispid 88;
  end;

// *********************************************************************//
// Interface: INote
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {83A33D55-27C5-11CE-BFD4-00400513BB57}
// *********************************************************************//
  INote = interface(IDispatch)
    ['{83A33D55-27C5-11CE-BFD4-00400513BB57}']
    function GetNext: IDispatch; safecall;
    function IGetNext: INote; safecall;
    function GetText: WideString; safecall;
    function GetHeight: Double; safecall;
    function GetAttachPos: OleVariant; safecall;
    function GetFontInfo: OleVariant; safecall;
    function GetLeaderInfo: OleVariant; safecall;
    function IsAttached: WordBool; safecall;
    function HasExtraLeader: WordBool; safecall;
    function HasBalloon: WordBool; safecall;
    function GetBalloonInfo: OleVariant; safecall;
    function GetTextPoint: OleVariant; safecall;
    function GetArrowHeadInfo: OleVariant; safecall;
    function IGetAttachPos: Double; safecall;
    function IGetFontInfo: Double; safecall;
    function IGetLeaderInfo(out PointCount: Integer): Double; safecall;
    function IGetBalloonInfo: Double; safecall;
    function IGetTextPoint: Double; safecall;
    function IGetArrowHeadInfo: Double; safecall;
    function GetUpperRight: OleVariant; safecall;
    function IGetUpperRight: Double; safecall;
    function GetExtent: OleVariant; safecall;
    function IGetExtent: Double; safecall;
    function IsCompoundNote: WordBool; safecall;
    function AddText(const txt: WideString; x: Double; y: Double; z: Double): WordBool; safecall;
    function GetTextCount: Integer; safecall;
    function GetTextAtIndex(index: Integer): WideString; safecall;
    function GetHeightAtIndex(index: Integer): Double; safecall;
    function GetTextOffsetAtIndex(index: Integer): OleVariant; safecall;
    function IGetTextOffsetAtIndex(index: Integer): Double; safecall;
    procedure BeginSketchEdit; safecall;
    procedure EndSketchEdit; safecall;
    function GetExtentAtIndex(index: Integer): OleVariant; safecall;
    function IGetExtentAtIndex(index: Integer): Double; safecall;
    procedure SetTextOffsetAtIndex(index: Integer; x: Double; y: Double; z: Double); safecall;
    function GetSketch: IDispatch; safecall;
    function IGetSketch: ISketch; safecall;
    function SetTextAtIndex(index: Integer; const txt: WideString): WordBool; safecall;
    function SetText(const txt: WideString): WordBool; safecall;
    function SetZeroLengthLeader(flag: WordBool): WordBool; safecall;
    procedure SetHeight(heightIn: Double); safecall;
    function GetHeightInPoints: Integer; safecall;
    procedure SetHeightInPoints(heightIn: Integer); safecall;
    function GetName: WideString; safecall;
    function SetName(const nameIn: WideString): WordBool; safecall;
    function GetTextHeightAtIndex(index: Integer): Double; safecall;
    function GetTextPositionAtIndex(index: Integer): OleVariant; safecall;
    function IGetTextPositionAtIndex(index: Integer): Double; safecall;
    function GetTextAngleAtIndex(index: Integer): Double; safecall;
    function GetTextRefPositionAtIndex(index: Integer): Integer; safecall;
    function GetTextInvertAtIndex(index: Integer): Integer; safecall;
    function GetLineCount: Integer; safecall;
    function GetLineAtIndex(index: Integer): OleVariant; safecall;
    function IGetLineAtIndex(index: Integer): Double; safecall;
    function GetArcCount: Integer; safecall;
    function GetArcAtIndex(index: Integer): OleVariant; safecall;
    function IGetArcAtIndex(index: Integer): Double; safecall;
    function GetArrowHeadCount: Integer; safecall;
    function GetArrowHeadAtIndex(index: Integer): OleVariant; safecall;
    function IGetArrowHeadAtIndex(index: Integer): Double; safecall;
    function GetTriangleCount: Integer; safecall;
    function GetTriangleAtIndex(index: Integer): OleVariant; safecall;
    function IGetTriangleAtIndex(index: Integer): Double; safecall;
    function GetTextFontAtIndex(index: Integer): WideString; safecall;
    procedure SetTextPoint(x: Double; y: Double; z: Double); safecall;
    function GetTextLineSpacingAtIndex(index: Integer): Double; safecall;
    function GetLeaderCount: Integer; safecall;
    function GetLeaderAtIndex(index: Integer): OleVariant; safecall;
    function IGetLeaderAtIndex(index: Integer; out PointCount: Integer): Double; safecall;
    function GetTextFormat: IDispatch; safecall;
    function IGetTextFormat: ITextFormat; safecall;
    function SetTextFormat(textFormatType: Integer; const textFormat: IDispatch): WordBool; safecall;
    function ISetTextFormat(textFormatType: Integer; const textFormat: ITextFormat): WordBool; safecall;
    function GetTextFormatAtIndex(index: Integer): IDispatch; safecall;
    function IGetTextFormatAtIndex(index: Integer): ITextFormat; safecall;
    procedure SetTextFormatAtIndex(index: Integer; const textFormat: IDispatch); safecall;
    procedure ISetTextFormatAtIndex(index: Integer; const textFormat: ITextFormat); safecall;
    function GetTextJustification: Integer; safecall;
    procedure SetTextJustification(justification: Integer); safecall;
    function GetTextJustificationAtIndex(index: Integer): Integer; safecall;
    procedure SetTextJustificationAtIndex(index: Integer; justification: Integer); safecall;
    function GetUseDocTextFormat: WordBool; safecall;
    function GetHyperlinkText: WideString; safecall;
    function SetHyperlinkText(const text: WideString): WordBool; safecall;
    function GetAnnotation: IDispatch; safecall;
    function IGetAnnotation: IAnnotation; safecall;
    function Get_angle: Double; safecall;
    procedure Set_angle(retval: Double); safecall;
    function GetBalloonStyle: Integer; safecall;
    function GetBalloonSize: Integer; safecall;
    function SetBalloon(Style: Integer; size: Integer): WordBool; safecall;
    function IGetTextTokenCount: Integer; safecall;
    function GetTextTokens(out positions: OleVariant; out widths: OleVariant; 
                           out heights: OleVariant): OleVariant; safecall;
    function IGetTextTokens(out positions: Double; out widths: Double; out heights: Double): WideString; safecall;
    function IsBomBalloon: WordBool; safecall;
    function GetBomBalloonTextStyle(whichOne: WordBool): Integer; safecall;
    function GetBomBalloonText(whichOne: WordBool): WideString; safecall;
    function SetBomBalloonText(upperTextStyle: Integer; const upperText: WideString; 
                               lowerTextStyle: Integer; const lowerText: WideString): WordBool; safecall;
    function Get_ReadOnly: WordBool; safecall;
    procedure Set_ReadOnly(ReadOnlyOut: WordBool); safecall;
    function Get_PromptText: WideString; safecall;
    procedure Set_PromptText(const PromptTextOut: WideString); safecall;
    function Get_TagName: WideString; safecall;
    procedure Set_TagName(const TagNameOut: WideString); safecall;
    function Get_Visible: WordBool; safecall;
    procedure Set_Visible(VisibleOut: WordBool); safecall;
    function IsAttribute: WordBool; safecall;
    function IsStackedBalloon: WordBool; safecall;
    function IsStackedBalloonMaster: WordBool; safecall;
    function GetBalloonStack: IBalloonStack; safecall;
    property angle: Double read Get_angle write Set_angle;
    property ReadOnly: WordBool read Get_ReadOnly write Set_ReadOnly;
    property PromptText: WideString read Get_PromptText write Set_PromptText;
    property TagName: WideString read Get_TagName write Set_TagName;
    property Visible: WordBool read Get_Visible write Set_Visible;
  end;

// *********************************************************************//
// DispIntf:  INoteDisp
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {83A33D55-27C5-11CE-BFD4-00400513BB57}
// *********************************************************************//
  INoteDisp = dispinterface
    ['{83A33D55-27C5-11CE-BFD4-00400513BB57}']
    function GetNext: IDispatch; dispid 1;
    function IGetNext: INote; dispid 13;
    function GetText: WideString; dispid 2;
    function GetHeight: Double; dispid 3;
    function GetAttachPos: OleVariant; dispid 4;
    function GetFontInfo: OleVariant; dispid 5;
    function GetLeaderInfo: OleVariant; dispid 6;
    function IsAttached: WordBool; dispid 7;
    function HasExtraLeader: WordBool; dispid 8;
    function HasBalloon: WordBool; dispid 9;
    function GetBalloonInfo: OleVariant; dispid 10;
    function GetTextPoint: OleVariant; dispid 11;
    function GetArrowHeadInfo: OleVariant; dispid 12;
    function IGetAttachPos: Double; dispid 14;
    function IGetFontInfo: Double; dispid 15;
    function IGetLeaderInfo(out PointCount: Integer): Double; dispid 16;
    function IGetBalloonInfo: Double; dispid 17;
    function IGetTextPoint: Double; dispid 18;
    function IGetArrowHeadInfo: Double; dispid 19;
    function GetUpperRight: OleVariant; dispid 20;
    function IGetUpperRight: Double; dispid 21;
    function GetExtent: OleVariant; dispid 22;
    function IGetExtent: Double; dispid 23;
    function IsCompoundNote: WordBool; dispid 24;
    function AddText(const txt: WideString; x: Double; y: Double; z: Double): WordBool; dispid 25;
    function GetTextCount: Integer; dispid 26;
    function GetTextAtIndex(index: Integer): WideString; dispid 27;
    function GetHeightAtIndex(index: Integer): Double; dispid 28;
    function GetTextOffsetAtIndex(index: Integer): OleVariant; dispid 29;
    function IGetTextOffsetAtIndex(index: Integer): Double; dispid 30;
    procedure BeginSketchEdit; dispid 31;
    procedure EndSketchEdit; dispid 32;
    function GetExtentAtIndex(index: Integer): OleVariant; dispid 33;
    function IGetExtentAtIndex(index: Integer): Double; dispid 34;
    procedure SetTextOffsetAtIndex(index: Integer; x: Double; y: Double; z: Double); dispid 35;
    function GetSketch: IDispatch; dispid 36;
    function IGetSketch: ISketch; dispid 37;
    function SetTextAtIndex(index: Integer; const txt: WideString): WordBool; dispid 38;
    function SetText(const txt: WideString): WordBool; dispid 39;
    function SetZeroLengthLeader(flag: WordBool): WordBool; dispid 40;
    procedure SetHeight(heightIn: Double); dispid 41;
    function GetHeightInPoints: Integer; dispid 42;
    procedure SetHeightInPoints(heightIn: Integer); dispid 43;
    function GetName: WideString; dispid 44;
    function SetName(const nameIn: WideString): WordBool; dispid 45;
    function GetTextHeightAtIndex(index: Integer): Double; dispid 46;
    function GetTextPositionAtIndex(index: Integer): OleVariant; dispid 47;
    function IGetTextPositionAtIndex(index: Integer): Double; dispid 48;
    function GetTextAngleAtIndex(index: Integer): Double; dispid 49;
    function GetTextRefPositionAtIndex(index: Integer): Integer; dispid 50;
    function GetTextInvertAtIndex(index: Integer): Integer; dispid 51;
    function GetLineCount: Integer; dispid 52;
    function GetLineAtIndex(index: Integer): OleVariant; dispid 53;
    function IGetLineAtIndex(index: Integer): Double; dispid 54;
    function GetArcCount: Integer; dispid 55;
    function GetArcAtIndex(index: Integer): OleVariant; dispid 56;
    function IGetArcAtIndex(index: Integer): Double; dispid 57;
    function GetArrowHeadCount: Integer; dispid 58;
    function GetArrowHeadAtIndex(index: Integer): OleVariant; dispid 59;
    function IGetArrowHeadAtIndex(index: Integer): Double; dispid 60;
    function GetTriangleCount: Integer; dispid 61;
    function GetTriangleAtIndex(index: Integer): OleVariant; dispid 62;
    function IGetTriangleAtIndex(index: Integer): Double; dispid 63;
    function GetTextFontAtIndex(index: Integer): WideString; dispid 64;
    procedure SetTextPoint(x: Double; y: Double; z: Double); dispid 65;
    function GetTextLineSpacingAtIndex(index: Integer): Double; dispid 66;
    function GetLeaderCount: Integer; dispid 67;
    function GetLeaderAtIndex(index: Integer): OleVariant; dispid 68;
    function IGetLeaderAtIndex(index: Integer; out PointCount: Integer): Double; dispid 69;
    function GetTextFormat: IDispatch; dispid 70;
    function IGetTextFormat: ITextFormat; dispid 71;
    function SetTextFormat(textFormatType: Integer; const textFormat: IDispatch): WordBool; dispid 72;
    function ISetTextFormat(textFormatType: Integer; const textFormat: ITextFormat): WordBool; dispid 73;
    function GetTextFormatAtIndex(index: Integer): IDispatch; dispid 74;
    function IGetTextFormatAtIndex(index: Integer): ITextFormat; dispid 75;
    procedure SetTextFormatAtIndex(index: Integer; const textFormat: IDispatch); dispid 76;
    procedure ISetTextFormatAtIndex(index: Integer; const textFormat: ITextFormat); dispid 77;
    function GetTextJustification: Integer; dispid 78;
    procedure SetTextJustification(justification: Integer); dispid 79;
    function GetTextJustificationAtIndex(index: Integer): Integer; dispid 80;
    procedure SetTextJustificationAtIndex(index: Integer; justification: Integer); dispid 81;
    function GetUseDocTextFormat: WordBool; dispid 82;
    function GetHyperlinkText: WideString; dispid 83;
    function SetHyperlinkText(const text: WideString): WordBool; dispid 84;
    function GetAnnotation: IDispatch; dispid 85;
    function IGetAnnotation: IAnnotation; dispid 86;
    property angle: Double dispid 87;
    function GetBalloonStyle: Integer; dispid 88;
    function GetBalloonSize: Integer; dispid 89;
    function SetBalloon(Style: Integer; size: Integer): WordBool; dispid 90;
    function IGetTextTokenCount: Integer; dispid 91;
    function GetTextTokens(out positions: OleVariant; out widths: OleVariant; 
                           out heights: OleVariant): OleVariant; dispid 92;
    function IGetTextTokens(out positions: Double; out widths: Double; out heights: Double): WideString; dispid 93;
    function IsBomBalloon: WordBool; dispid 94;
    function GetBomBalloonTextStyle(whichOne: WordBool): Integer; dispid 95;
    function GetBomBalloonText(whichOne: WordBool): WideString; dispid 96;
    function SetBomBalloonText(upperTextStyle: Integer; const upperText: WideString; 
                               lowerTextStyle: Integer; const lowerText: WideString): WordBool; dispid 97;
    property ReadOnly: WordBool dispid 98;
    property PromptText: WideString dispid 99;
    property TagName: WideString dispid 100;
    property Visible: WordBool dispid 101;
    function IsAttribute: WordBool; dispid 102;
    function IsStackedBalloon: WordBool; dispid 103;
    function IsStackedBalloonMaster: WordBool; dispid 104;
    function GetBalloonStack: IBalloonStack; dispid 105;
  end;

// *********************************************************************//
// Interface: IBalloonStack
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {4944F9E6-BF50-11D5-AF56-00C04F603FAF}
// *********************************************************************//
  IBalloonStack = interface(IDispatch)
    ['{4944F9E6-BF50-11D5-AF56-00C04F603FAF}']
    function Get_Master: INote; safecall;
    function Get_count: Integer; safecall;
    function Get_Stack: OleVariant; safecall;
    function IGetStack(count: Integer): INote; safecall;
    function Get_length: Integer; safecall;
    procedure Set_length(length: Integer); safecall;
    function Get_direction: Integer; safecall;
    procedure Set_direction(direction: Integer); safecall;
    function AddTo(upperTextStyle: Integer; const upperText: WideString; lowerTextStyle: Integer; 
                   const lowerText: WideString): INote; safecall;
    property Master: INote read Get_Master;
    property count: Integer read Get_count;
    property Stack: OleVariant read Get_Stack;
    property length: Integer read Get_length write Set_length;
    property direction: Integer read Get_direction write Set_direction;
  end;

// *********************************************************************//
// DispIntf:  IBalloonStackDisp
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {4944F9E6-BF50-11D5-AF56-00C04F603FAF}
// *********************************************************************//
  IBalloonStackDisp = dispinterface
    ['{4944F9E6-BF50-11D5-AF56-00C04F603FAF}']
    property Master: INote readonly dispid 1;
    property count: Integer readonly dispid 2;
    property Stack: OleVariant readonly dispid 3;
    function IGetStack(count: Integer): INote; dispid 4;
    property length: Integer dispid 5;
    property direction: Integer dispid 6;
    function AddTo(upperTextStyle: Integer; const upperText: WideString; lowerTextStyle: Integer; 
                   const lowerText: WideString): INote; dispid 7;
  end;

// *********************************************************************//
// Interface: IPropertyManagerPage
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {E981B4FA-7E86-11D4-AEF2-00C04F603FAF}
// *********************************************************************//
  IPropertyManagerPage = interface(IDispatch)
    ['{E981B4FA-7E86-11D4-AEF2-00C04F603FAF}']
    function SetButtons(ButtonTypes: Integer): Integer; safecall;
    function SetGroupRange(FirstGroupId: Integer; FirstCheckId: Integer; GroupCount: Integer): Integer; safecall;
    function Show: Integer; safecall;
    function GetDialogWindow(var status: Integer): Integer; safecall;
    function GetGroupVisible(GroupId: Integer; var status: Integer): WordBool; safecall;
    function SetGroupVisible(GroupId: Integer; Visible: WordBool): Integer; safecall;
    function GetGroupExpanded(GroupId: Integer; var status: Integer): WordBool; safecall;
    function SetGroupExpanded(GroupId: Integer; Expanded: WordBool): Integer; safecall;
  end;

// *********************************************************************//
// DispIntf:  IPropertyManagerPageDisp
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {E981B4FA-7E86-11D4-AEF2-00C04F603FAF}
// *********************************************************************//
  IPropertyManagerPageDisp = dispinterface
    ['{E981B4FA-7E86-11D4-AEF2-00C04F603FAF}']
    function SetButtons(ButtonTypes: Integer): Integer; dispid 1;
    function SetGroupRange(FirstGroupId: Integer; FirstCheckId: Integer; GroupCount: Integer): Integer; dispid 2;
    function Show: Integer; dispid 3;
    function GetDialogWindow(var status: Integer): Integer; dispid 4;
    function GetGroupVisible(GroupId: Integer; var status: Integer): WordBool; dispid 5;
    function SetGroupVisible(GroupId: Integer; Visible: WordBool): Integer; dispid 6;
    function GetGroupExpanded(GroupId: Integer; var status: Integer): WordBool; dispid 7;
    function SetGroupExpanded(GroupId: Integer; Expanded: WordBool): Integer; dispid 8;
  end;

// *********************************************************************//
// Interface: IDisplayDimension
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {83A33DA1-27C5-11CE-BFD4-00400513BB57}
// *********************************************************************//
  IDisplayDimension = interface(IDispatch)
    ['{83A33DA1-27C5-11CE-BFD4-00400513BB57}']
    function GetNext: IDispatch; safecall;
    function IGetNext: IDisplayDimension; safecall;
    function GetDisplayData: IDispatch; safecall;
    function IGetDisplayData: IDisplayData; safecall;
    function Get_WitnessVisibility: Integer; safecall;
    procedure Set_WitnessVisibility(retval: Integer); safecall;
    function Get_LeaderVisibility: Integer; safecall;
    procedure Set_LeaderVisibility(retval: Integer); safecall;
    function Get_BrokenLeader: WordBool; safecall;
    procedure Set_BrokenLeader(retval: WordBool); safecall;
    function Get_SmartWitness: WordBool; safecall;
    procedure Set_SmartWitness(retval: WordBool); safecall;
    function Get_ShowParenthesis: WordBool; safecall;
    procedure Set_ShowParenthesis(retval: WordBool); safecall;
    function Get_ArrowSide: Integer; safecall;
    procedure Set_ArrowSide(retval: Integer); safecall;
    function Get_ShowDimensionValue: WordBool; safecall;
    procedure Set_ShowDimensionValue(retval: WordBool); safecall;
    function GetText(whichText: Integer): WideString; safecall;
    procedure SetText(whichText: Integer; const text: WideString); safecall;
    function GetDimension: IDispatch; safecall;
    function IGetDimension: IDimension; safecall;
    function GetUseDocTextFormat: WordBool; safecall;
    function GetTextFormat: IDispatch; safecall;
    function IGetTextFormat: ITextFormat; safecall;
    function SetTextFormat(textFormatType: Integer; const textFormat: IDispatch): WordBool; safecall;
    function ISetTextFormat(textFormatType: Integer; const textFormat: ITextFormat): WordBool; safecall;
    function GetAnnotation: IDispatch; safecall;
    function IGetAnnotation: IAnnotation; safecall;
    function Get_SolidLeader: WordBool; safecall;
    procedure Set_SolidLeader(retval: WordBool); safecall;
    function Get_Diametric: WordBool; safecall;
    procedure Set_Diametric(retval: WordBool); safecall;
    function Get_DisplayAsLinear: WordBool; safecall;
    procedure Set_DisplayAsLinear(retval: WordBool); safecall;
    function GetUseDocSecondArrow: WordBool; safecall;
    function GetSecondArrow: WordBool; safecall;
    procedure SetSecondArrow(useDoc: WordBool; secondArrow: WordBool); safecall;
    function Get_ShortenedRadius: WordBool; safecall;
    procedure Set_ShortenedRadius(retval: WordBool); safecall;
    function Get_DimensionToInside: WordBool; safecall;
    procedure Set_DimensionToInside(retval: WordBool); safecall;
    function GetUseDocDual: WordBool; safecall;
    procedure SetDual(useDoc: WordBool); safecall;
    function GetUseDocArrowHeadStyle: WordBool; safecall;
    function GetArrowHeadStyle: Integer; safecall;
    procedure SetArrowHeadStyle(useDoc: WordBool; arrowHeadStyle: Integer); safecall;
    function Get_centerText: WordBool; safecall;
    procedure Set_centerText(retval: WordBool); safecall;
    function Get_Inspection: WordBool; safecall;
    procedure Set_Inspection(Inspection: WordBool); safecall;
    function GetUseDocPrecision: WordBool; safecall;
    function GetPrimaryPrecision: Integer; safecall;
    function GetAlternatePrecision: Integer; safecall;
    function GetPrimaryTolPrecision: Integer; safecall;
    function GetAlternateTolPrecision: Integer; safecall;
    function SetPrecision(useDoc: WordBool; primary: Integer; alternate: Integer; 
                          primaryTol: Integer; alternateTol: Integer): Integer; safecall;
    function GetAutoArcLengthLeader: WordBool; safecall;
    function GetArcLengthLeader: Integer; safecall;
    function SetArcLengthLeader(autoLeader: WordBool; leaderType: Integer): Integer; safecall;
    function GetUseDocUnits: WordBool; safecall;
    function GetUnits: Integer; safecall;
    function GetFractionBase: Integer; safecall;
    function GetFractionValue: Integer; safecall;
    function GetRoundToFraction: WordBool; safecall;
    function SetUnits(useDoc: WordBool; uType: Integer; fractBase: Integer; fractDenom: Integer; 
                      roundToFraction: WordBool): Integer; safecall;
    function GetUseDocBrokenLeader: WordBool; safecall;
    function GetBrokenLeader2: Integer; safecall;
    function SetBrokenLeader2(useDoc: WordBool; broken: Integer): Integer; safecall;
    function GetNext2: IDispatch; safecall;
    function IGetNext2: IDisplayDimension; safecall;
    function GetType: Integer; safecall;
    function Get_Scale2: Double; safecall;
    procedure Set_Scale2(retval: Double); safecall;
    function Get_DisplayAsChain: WordBool; safecall;
    procedure Set_DisplayAsChain(retval: WordBool); safecall;
    function GetNext3: IDispatch; safecall;
    function IGetNext3: IDisplayDimension; safecall;
    function AddDisplayEnt(type_: SYSINT; data: OleVariant): WordBool; safecall;
    function IAddDisplayEnt(type_: SYSINT; var data: Double): WordBool; safecall;
    function AddDisplayText(const text: WideString; position: OleVariant; const format: IDispatch; 
                            attachment: SYSINT; WidthFactor: Double): WordBool; safecall;
    function IAddDisplayText(const text: WideString; var position: Double; 
                             const format: ITextFormat; attachment: SYSINT; WidthFactor: Double): WordBool; safecall;
    function Get_Jogged: WordBool; safecall;
    procedure Set_Jogged(retval: WordBool); safecall;
    function AutoJogOrdinate: WordBool; safecall;
    property WitnessVisibility: Integer read Get_WitnessVisibility write Set_WitnessVisibility;
    property LeaderVisibility: Integer read Get_LeaderVisibility write Set_LeaderVisibility;
    property BrokenLeader: WordBool read Get_BrokenLeader write Set_BrokenLeader;
    property SmartWitness: WordBool read Get_SmartWitness write Set_SmartWitness;
    property ShowParenthesis: WordBool read Get_ShowParenthesis write Set_ShowParenthesis;
    property ArrowSide: Integer read Get_ArrowSide write Set_ArrowSide;
    property ShowDimensionValue: WordBool read Get_ShowDimensionValue write Set_ShowDimensionValue;
    property SolidLeader: WordBool read Get_SolidLeader write Set_SolidLeader;
    property Diametric: WordBool read Get_Diametric write Set_Diametric;
    property DisplayAsLinear: WordBool read Get_DisplayAsLinear write Set_DisplayAsLinear;
    property ShortenedRadius: WordBool read Get_ShortenedRadius write Set_ShortenedRadius;
    property DimensionToInside: WordBool read Get_DimensionToInside write Set_DimensionToInside;
    property centerText: WordBool read Get_centerText write Set_centerText;
    property Inspection: WordBool read Get_Inspection write Set_Inspection;
    property Scale2: Double read Get_Scale2 write Set_Scale2;
    property DisplayAsChain: WordBool read Get_DisplayAsChain write Set_DisplayAsChain;
    property Jogged: WordBool read Get_Jogged write Set_Jogged;
  end;

// *********************************************************************//
// DispIntf:  IDisplayDimensionDisp
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {83A33DA1-27C5-11CE-BFD4-00400513BB57}
// *********************************************************************//
  IDisplayDimensionDisp = dispinterface
    ['{83A33DA1-27C5-11CE-BFD4-00400513BB57}']
    function GetNext: IDispatch; dispid 1;
    function IGetNext: IDisplayDimension; dispid 2;
    function GetDisplayData: IDispatch; dispid 3;
    function IGetDisplayData: IDisplayData; dispid 4;
    property WitnessVisibility: Integer dispid 5;
    property LeaderVisibility: Integer dispid 6;
    property BrokenLeader: WordBool dispid 7;
    property SmartWitness: WordBool dispid 8;
    property ShowParenthesis: WordBool dispid 9;
    property ArrowSide: Integer dispid 10;
    property ShowDimensionValue: WordBool dispid 11;
    function GetText(whichText: Integer): WideString; dispid 12;
    procedure SetText(whichText: Integer; const text: WideString); dispid 13;
    function GetDimension: IDispatch; dispid 14;
    function IGetDimension: IDimension; dispid 15;
    function GetUseDocTextFormat: WordBool; dispid 16;
    function GetTextFormat: IDispatch; dispid 17;
    function IGetTextFormat: ITextFormat; dispid 18;
    function SetTextFormat(textFormatType: Integer; const textFormat: IDispatch): WordBool; dispid 19;
    function ISetTextFormat(textFormatType: Integer; const textFormat: ITextFormat): WordBool; dispid 20;
    function GetAnnotation: IDispatch; dispid 21;
    function IGetAnnotation: IAnnotation; dispid 22;
    property SolidLeader: WordBool dispid 23;
    property Diametric: WordBool dispid 24;
    property DisplayAsLinear: WordBool dispid 25;
    function GetUseDocSecondArrow: WordBool; dispid 26;
    function GetSecondArrow: WordBool; dispid 27;
    procedure SetSecondArrow(useDoc: WordBool; secondArrow: WordBool); dispid 28;
    property ShortenedRadius: WordBool dispid 29;
    property DimensionToInside: WordBool dispid 30;
    function GetUseDocDual: WordBool; dispid 31;
    procedure SetDual(useDoc: WordBool); dispid 32;
    function GetUseDocArrowHeadStyle: WordBool; dispid 33;
    function GetArrowHeadStyle: Integer; dispid 34;
    procedure SetArrowHeadStyle(useDoc: WordBool; arrowHeadStyle: Integer); dispid 35;
    property centerText: WordBool dispid 36;
    property Inspection: WordBool dispid 37;
    function GetUseDocPrecision: WordBool; dispid 38;
    function GetPrimaryPrecision: Integer; dispid 39;
    function GetAlternatePrecision: Integer; dispid 40;
    function GetPrimaryTolPrecision: Integer; dispid 41;
    function GetAlternateTolPrecision: Integer; dispid 42;
    function SetPrecision(useDoc: WordBool; primary: Integer; alternate: Integer; 
                          primaryTol: Integer; alternateTol: Integer): Integer; dispid 43;
    function GetAutoArcLengthLeader: WordBool; dispid 44;
    function GetArcLengthLeader: Integer; dispid 45;
    function SetArcLengthLeader(autoLeader: WordBool; leaderType: Integer): Integer; dispid 46;
    function GetUseDocUnits: WordBool; dispid 47;
    function GetUnits: Integer; dispid 48;
    function GetFractionBase: Integer; dispid 49;
    function GetFractionValue: Integer; dispid 50;
    function GetRoundToFraction: WordBool; dispid 51;
    function SetUnits(useDoc: WordBool; uType: Integer; fractBase: Integer; fractDenom: Integer; 
                      roundToFraction: WordBool): Integer; dispid 52;
    function GetUseDocBrokenLeader: WordBool; dispid 53;
    function GetBrokenLeader2: Integer; dispid 54;
    function SetBrokenLeader2(useDoc: WordBool; broken: Integer): Integer; dispid 55;
    function GetNext2: IDispatch; dispid 56;
    function IGetNext2: IDisplayDimension; dispid 57;
    function GetType: Integer; dispid 58;
    property Scale2: Double dispid 59;
    property DisplayAsChain: WordBool dispid 60;
    function GetNext3: IDispatch; dispid 61;
    function IGetNext3: IDisplayDimension; dispid 62;
    function AddDisplayEnt(type_: SYSINT; data: OleVariant): WordBool; dispid 63;
    function IAddDisplayEnt(type_: SYSINT; var data: Double): WordBool; dispid 64;
    function AddDisplayText(const text: WideString; position: OleVariant; const format: IDispatch; 
                            attachment: SYSINT; WidthFactor: Double): WordBool; dispid 65;
    function IAddDisplayText(const text: WideString; var position: Double; 
                             const format: ITextFormat; attachment: SYSINT; WidthFactor: Double): WordBool; dispid 66;
    property Jogged: WordBool dispid 67;
    function AutoJogOrdinate: WordBool; dispid 68;
  end;

// *********************************************************************//
// Interface: IUserUnit
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {82071121-8B32-4F51-8983-9304756503E7}
// *********************************************************************//
  IUserUnit = interface(IDispatch)
    ['{82071121-8B32-4F51-8983-9304756503E7}']
    function Get_FractionBase: Integer; safecall;
    procedure Set_FractionBase(Value: Integer); safecall;
    function Get_FractionValue: Integer; safecall;
    procedure Set_FractionValue(Value: Integer); safecall;
    function Get_roundToFraction: WordBool; safecall;
    procedure Set_roundToFraction(Value: WordBool); safecall;
    function Get_SignificantDigits: Integer; safecall;
    procedure Set_SignificantDigits(numDigits: Integer); safecall;
    function Get_DisplayLeadingZero: WordBool; safecall;
    procedure Set_DisplayLeadingZero(Value: WordBool); safecall;
    function Get_PadZero: WordBool; safecall;
    procedure Set_PadZero(Value: WordBool); safecall;
    function Get_SeparatorCharacter: WideString; safecall;
    procedure Set_SeparatorCharacter(const Value: WideString); safecall;
    function GetConversionFactor: Double; safecall;
    function IsMetric: WordBool; safecall;
    function GetFullUnitName(plural: WordBool): WideString; safecall;
    function ConvertToUserUnit(valueIn: Double; showUsernames: WordBool; nameInEnglish: WordBool): WideString; safecall;
    function ConvertToSystemValue(const unitText: WideString; var computedValue: Double): WordBool; safecall;
    function ConvertDoubleToSystemValue(userValue: Double): Double; safecall;
    function GetUnitsString(inEnglish: WordBool): WideString; safecall;
    function Get_UnitType: Integer; safecall;
    function Get_SpecificUnitType: Integer; safecall;
    procedure Set_SpecificUnitType(SpecificUnitType: Integer); safecall;
    function GetUserAngleTolerance: Double; safecall;
    property FractionBase: Integer read Get_FractionBase write Set_FractionBase;
    property FractionValue: Integer read Get_FractionValue write Set_FractionValue;
    property roundToFraction: WordBool read Get_roundToFraction write Set_roundToFraction;
    property SignificantDigits: Integer read Get_SignificantDigits write Set_SignificantDigits;
    property DisplayLeadingZero: WordBool read Get_DisplayLeadingZero write Set_DisplayLeadingZero;
    property PadZero: WordBool read Get_PadZero write Set_PadZero;
    property SeparatorCharacter: WideString read Get_SeparatorCharacter write Set_SeparatorCharacter;
    property UnitType: Integer read Get_UnitType;
    property SpecificUnitType: Integer read Get_SpecificUnitType write Set_SpecificUnitType;
  end;

// *********************************************************************//
// DispIntf:  IUserUnitDisp
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {82071121-8B32-4F51-8983-9304756503E7}
// *********************************************************************//
  IUserUnitDisp = dispinterface
    ['{82071121-8B32-4F51-8983-9304756503E7}']
    property FractionBase: Integer dispid 1;
    property FractionValue: Integer dispid 2;
    property roundToFraction: WordBool dispid 3;
    property SignificantDigits: Integer dispid 4;
    property DisplayLeadingZero: WordBool dispid 5;
    property PadZero: WordBool dispid 6;
    property SeparatorCharacter: WideString dispid 7;
    function GetConversionFactor: Double; dispid 8;
    function IsMetric: WordBool; dispid 9;
    function GetFullUnitName(plural: WordBool): WideString; dispid 10;
    function ConvertToUserUnit(valueIn: Double; showUsernames: WordBool; nameInEnglish: WordBool): WideString; dispid 11;
    function ConvertToSystemValue(const unitText: WideString; var computedValue: Double): WordBool; dispid 12;
    function ConvertDoubleToSystemValue(userValue: Double): Double; dispid 13;
    function GetUnitsString(inEnglish: WordBool): WideString; dispid 14;
    property UnitType: Integer readonly dispid 15;
    property SpecificUnitType: Integer dispid 16;
    function GetUserAngleTolerance: Double; dispid 17;
  end;

// *********************************************************************//
// Interface: IWeldSymbol
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {83A33D94-27C5-11CE-BFD4-00400513BB57}
// *********************************************************************//
  IWeldSymbol = interface(IDispatch)
    ['{83A33D94-27C5-11CE-BFD4-00400513BB57}']
    function GetNext: IDispatch; safecall;
    function IGetNext: IWeldSymbol; safecall;
    function GetTextCount: Integer; safecall;
    function GetTextAtIndex(index: Integer): WideString; safecall;
    function GetTextHeightAtIndex(index: Integer): Double; safecall;
    function GetTextPositionAtIndex(index: Integer): OleVariant; safecall;
    function IGetTextPositionAtIndex(index: Integer): Double; safecall;
    function GetTextAngleAtIndex(index: Integer): Double; safecall;
    function GetTextRefPositionAtIndex(index: Integer): Integer; safecall;
    function GetTextInvertAtIndex(index: Integer): Integer; safecall;
    function GetLineCount: Integer; safecall;
    function GetLineAtIndex(index: Integer): OleVariant; safecall;
    function IGetLineAtIndex(index: Integer): Double; safecall;
    function GetArcCount: Integer; safecall;
    function GetArcAtIndex(index: Integer): OleVariant; safecall;
    function IGetArcAtIndex(index: Integer): Double; safecall;
    function GetArrowHeadCount: Integer; safecall;
    function GetArrowHeadAtIndex(index: Integer): OleVariant; safecall;
    function IGetArrowHeadAtIndex(index: Integer): Double; safecall;
    function GetTriangleCount: Integer; safecall;
    function GetTriangleAtIndex(index: Integer): OleVariant; safecall;
    function IGetTriangleAtIndex(index: Integer): Double; safecall;
    function IsAttached: WordBool; safecall;
    function HasExtraLeader: WordBool; safecall;
    function GetLeaderCount: Integer; safecall;
    function GetLeaderAtIndex(index: Integer): OleVariant; safecall;
    function IGetLeaderAtIndex(index: Integer; out PointCount: Integer): Double; safecall;
    function IGetArrowHeadInfo: Double; safecall;
    function GetArrowHeadInfo: OleVariant; safecall;
    function GetAnnotation: IDispatch; safecall;
    function IGetAnnotation: IAnnotation; safecall;
    function GetText(whichText: Integer): WideString; safecall;
    function GetContour(top: WordBool): Integer; safecall;
    function GetSymmetric: Integer; safecall;
    function GetPeripheral: WordBool; safecall;
    function GetFieldWeld: Integer; safecall;
    function GetProcess: WordBool; safecall;
    function GetProcessReference: WordBool; safecall;
    function GetStagger: WordBool; safecall;
    function SetText(top: WordBool; const left: WideString; const symbol: WideString; 
                     const right: WideString; const stagger: WideString; contour: Integer): WordBool; safecall;
    function SetSymmetric(symmetric: Integer): WordBool; safecall;
    function SetPeripheral(peripheral: WordBool): WordBool; safecall;
    function SetFieldWeld(fieldWeld: Integer): WordBool; safecall;
    function SetProcess(process: WordBool; const text: WideString; reference: WordBool): WordBool; safecall;
    function SetStagger(stagger: WordBool): WordBool; safecall;
  end;

// *********************************************************************//
// DispIntf:  IWeldSymbolDisp
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {83A33D94-27C5-11CE-BFD4-00400513BB57}
// *********************************************************************//
  IWeldSymbolDisp = dispinterface
    ['{83A33D94-27C5-11CE-BFD4-00400513BB57}']
    function GetNext: IDispatch; dispid 1;
    function IGetNext: IWeldSymbol; dispid 2;
    function GetTextCount: Integer; dispid 3;
    function GetTextAtIndex(index: Integer): WideString; dispid 4;
    function GetTextHeightAtIndex(index: Integer): Double; dispid 5;
    function GetTextPositionAtIndex(index: Integer): OleVariant; dispid 6;
    function IGetTextPositionAtIndex(index: Integer): Double; dispid 7;
    function GetTextAngleAtIndex(index: Integer): Double; dispid 8;
    function GetTextRefPositionAtIndex(index: Integer): Integer; dispid 9;
    function GetTextInvertAtIndex(index: Integer): Integer; dispid 10;
    function GetLineCount: Integer; dispid 11;
    function GetLineAtIndex(index: Integer): OleVariant; dispid 12;
    function IGetLineAtIndex(index: Integer): Double; dispid 13;
    function GetArcCount: Integer; dispid 14;
    function GetArcAtIndex(index: Integer): OleVariant; dispid 15;
    function IGetArcAtIndex(index: Integer): Double; dispid 16;
    function GetArrowHeadCount: Integer; dispid 17;
    function GetArrowHeadAtIndex(index: Integer): OleVariant; dispid 18;
    function IGetArrowHeadAtIndex(index: Integer): Double; dispid 19;
    function GetTriangleCount: Integer; dispid 20;
    function GetTriangleAtIndex(index: Integer): OleVariant; dispid 21;
    function IGetTriangleAtIndex(index: Integer): Double; dispid 22;
    function IsAttached: WordBool; dispid 23;
    function HasExtraLeader: WordBool; dispid 24;
    function GetLeaderCount: Integer; dispid 25;
    function GetLeaderAtIndex(index: Integer): OleVariant; dispid 26;
    function IGetLeaderAtIndex(index: Integer; out PointCount: Integer): Double; dispid 27;
    function IGetArrowHeadInfo: Double; dispid 28;
    function GetArrowHeadInfo: OleVariant; dispid 29;
    function GetAnnotation: IDispatch; dispid 30;
    function IGetAnnotation: IAnnotation; dispid 31;
    function GetText(whichText: Integer): WideString; dispid 32;
    function GetContour(top: WordBool): Integer; dispid 33;
    function GetSymmetric: Integer; dispid 34;
    function GetPeripheral: WordBool; dispid 35;
    function GetFieldWeld: Integer; dispid 36;
    function GetProcess: WordBool; dispid 37;
    function GetProcessReference: WordBool; dispid 38;
    function GetStagger: WordBool; dispid 39;
    function SetText(top: WordBool; const left: WideString; const symbol: WideString; 
                     const right: WideString; const stagger: WideString; contour: Integer): WordBool; dispid 40;
    function SetSymmetric(symmetric: Integer): WordBool; dispid 41;
    function SetPeripheral(peripheral: WordBool): WordBool; dispid 42;
    function SetFieldWeld(fieldWeld: Integer): WordBool; dispid 43;
    function SetProcess(process: WordBool; const text: WideString; reference: WordBool): WordBool; dispid 44;
    function SetStagger(stagger: WordBool): WordBool; dispid 45;
  end;

// *********************************************************************//
// Interface: ISketchText
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {83A33DC5-27C5-11CE-BFD4-00400513BB57}
// *********************************************************************//
  ISketchText = interface(IDispatch)
    ['{83A33DC5-27C5-11CE-BFD4-00400513BB57}']
    function GetEdges: OleVariant; safecall;
    function EnumEdges: IEnumEdges; safecall;
    function Get_text: WideString; safecall;
    procedure Set_text(const retval: WideString); safecall;
    function GetCoordinates: OleVariant; safecall;
    function IGetCoordinates: Double; safecall;
    function SetCoordinates(x: Double; y: Double; z: Double): WordBool; safecall;
    function GetUseDocTextFormat: WordBool; safecall;
    function GetTextFormat: IDispatch; safecall;
    function IGetTextFormat: ITextFormat; safecall;
    function SetTextFormat(useDoc: WordBool; const textFormat: IDispatch): WordBool; safecall;
    function ISetTextFormat(useDoc: WordBool; const textFormat: ITextFormat): WordBool; safecall;
    property text: WideString read Get_text write Set_text;
  end;

// *********************************************************************//
// DispIntf:  ISketchTextDisp
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {83A33DC5-27C5-11CE-BFD4-00400513BB57}
// *********************************************************************//
  ISketchTextDisp = dispinterface
    ['{83A33DC5-27C5-11CE-BFD4-00400513BB57}']
    function GetEdges: OleVariant; dispid 1;
    function EnumEdges: IEnumEdges; dispid 2;
    property text: WideString dispid 3;
    function GetCoordinates: OleVariant; dispid 4;
    function IGetCoordinates: Double; dispid 5;
    function SetCoordinates(x: Double; y: Double; z: Double): WordBool; dispid 6;
    function GetUseDocTextFormat: WordBool; dispid 7;
    function GetTextFormat: IDispatch; dispid 8;
    function IGetTextFormat: ITextFormat; dispid 9;
    function SetTextFormat(useDoc: WordBool; const textFormat: IDispatch): WordBool; dispid 10;
    function ISetTextFormat(useDoc: WordBool; const textFormat: ITextFormat): WordBool; dispid 11;
  end;

// *********************************************************************//
// Interface: IEquationMgr
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {02272CE8-FE52-4B94-B120-6D1826FDBE32}
// *********************************************************************//
  IEquationMgr = interface(IDispatch)
    ['{02272CE8-FE52-4B94-B120-6D1826FDBE32}']
    function Get_Suppression(index: Integer): WordBool; safecall;
    procedure Set_Suppression(index: Integer; retval: WordBool); safecall;
    function Add(index: Integer; const equation: WideString): Integer; safecall;
    function Delete(index: Integer): Integer; safecall;
    function ChangeSuppressionForAllConfigurations(index: Integer; state: WordBool): Integer; safecall;
    function ChangeSuppressionForConfiguration(index: Integer; const configName: WideString; 
                                               state: WordBool): Integer; safecall;
    function Get_status: Integer; safecall;
    function Get_Value(index: Integer): Double; safecall;
    function Get_equation(index: Integer): WideString; safecall;
    procedure Set_equation(index: Integer; const equation: WideString); safecall;
    function GetCount: Integer; safecall;
    property Suppression[index: Integer]: WordBool read Get_Suppression write Set_Suppression;
    property status: Integer read Get_status;
    property Value[index: Integer]: Double read Get_Value;
    property equation[index: Integer]: WideString read Get_equation write Set_equation;
  end;

// *********************************************************************//
// DispIntf:  IEquationMgrDisp
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {02272CE8-FE52-4B94-B120-6D1826FDBE32}
// *********************************************************************//
  IEquationMgrDisp = dispinterface
    ['{02272CE8-FE52-4B94-B120-6D1826FDBE32}']
    property Suppression[index: Integer]: WordBool dispid 1;
    function Add(index: Integer; const equation: WideString): Integer; dispid 2;
    function Delete(index: Integer): Integer; dispid 3;
    function ChangeSuppressionForAllConfigurations(index: Integer; state: WordBool): Integer; dispid 4;
    function ChangeSuppressionForConfiguration(index: Integer; const configName: WideString; 
                                               state: WordBool): Integer; dispid 5;
    property status: Integer readonly dispid 6;
    property Value[index: Integer]: Double readonly dispid 7;
    property equation[index: Integer]: WideString dispid 8;
    function GetCount: Integer; dispid 9;
  end;

// *********************************************************************//
// Interface: IPageSetup
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {931374CC-CE0E-11D5-AF59-00C04F603FAF}
// *********************************************************************//
  IPageSetup = interface(IDispatch)
    ['{931374CC-CE0E-11D5-AF59-00C04F603FAF}']
    function Get_ScaleToFit: WordBool; safecall;
    procedure Set_ScaleToFit(Fit: WordBool); safecall;
    function Get_Scale2: Double; safecall;
    procedure Set_Scale2(Scale: Double); safecall;
    function Get_Orientation: Integer; safecall;
    procedure Set_Orientation(Orientation: Integer); safecall;
    function Get_LeftHeader: WideString; safecall;
    procedure Set_LeftHeader(const Header: WideString); safecall;
    function Get_CenterHeader: WideString; safecall;
    procedure Set_CenterHeader(const Header: WideString); safecall;
    function Get_RightHeader: WideString; safecall;
    procedure Set_RightHeader(const Header: WideString); safecall;
    function SetHeader(const left: WideString; const center: WideString; const right: WideString): WordBool; safecall;
    function Get_LeftFooter: WideString; safecall;
    procedure Set_LeftFooter(const Footer: WideString); safecall;
    function Get_CenterFooter: WideString; safecall;
    procedure Set_CenterFooter(const Footer: WideString); safecall;
    function Get_RightFooter: WideString; safecall;
    procedure Set_RightFooter(const Footer: WideString); safecall;
    function SetFooter(const left: WideString; const center: WideString; const right: WideString): WordBool; safecall;
    function Get_HeaderTextFormat: ITextFormat; safecall;
    function Get_FooterTextFormat: ITextFormat; safecall;
    function GetHeaderFooterString(whichOne: Integer): WideString; safecall;
    function Get_UsePageSetupOnSheets: WordBool; safecall;
    procedure Set_UsePageSetupOnSheets(UseSheet: WordBool); safecall;
    function Get_PrinterPaperSize: Integer; safecall;
    procedure Set_PrinterPaperSize(size: Integer); safecall;
    function Get_PrinterPaperLength: Integer; safecall;
    procedure Set_PrinterPaperLength(length: Integer); safecall;
    function Get_PrinterPaperWidth: Integer; safecall;
    procedure Set_PrinterPaperWidth(width: Integer); safecall;
    function Get_PrinterPaperSource: Integer; safecall;
    procedure Set_PrinterPaperSource(Source: Integer); safecall;
    property ScaleToFit: WordBool read Get_ScaleToFit write Set_ScaleToFit;
    property Scale2: Double read Get_Scale2 write Set_Scale2;
    property Orientation: Integer read Get_Orientation write Set_Orientation;
    property LeftHeader: WideString read Get_LeftHeader write Set_LeftHeader;
    property CenterHeader: WideString read Get_CenterHeader write Set_CenterHeader;
    property RightHeader: WideString read Get_RightHeader write Set_RightHeader;
    property LeftFooter: WideString read Get_LeftFooter write Set_LeftFooter;
    property CenterFooter: WideString read Get_CenterFooter write Set_CenterFooter;
    property RightFooter: WideString read Get_RightFooter write Set_RightFooter;
    property HeaderTextFormat: ITextFormat read Get_HeaderTextFormat;
    property FooterTextFormat: ITextFormat read Get_FooterTextFormat;
    property UsePageSetupOnSheets: WordBool read Get_UsePageSetupOnSheets write Set_UsePageSetupOnSheets;
    property PrinterPaperSize: Integer read Get_PrinterPaperSize write Set_PrinterPaperSize;
    property PrinterPaperLength: Integer read Get_PrinterPaperLength write Set_PrinterPaperLength;
    property PrinterPaperWidth: Integer read Get_PrinterPaperWidth write Set_PrinterPaperWidth;
    property PrinterPaperSource: Integer read Get_PrinterPaperSource write Set_PrinterPaperSource;
  end;

// *********************************************************************//
// DispIntf:  IPageSetupDisp
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {931374CC-CE0E-11D5-AF59-00C04F603FAF}
// *********************************************************************//
  IPageSetupDisp = dispinterface
    ['{931374CC-CE0E-11D5-AF59-00C04F603FAF}']
    property ScaleToFit: WordBool dispid 1;
    property Scale2: Double dispid 2;
    property Orientation: Integer dispid 3;
    property LeftHeader: WideString dispid 4;
    property CenterHeader: WideString dispid 5;
    property RightHeader: WideString dispid 6;
    function SetHeader(const left: WideString; const center: WideString; const right: WideString): WordBool; dispid 7;
    property LeftFooter: WideString dispid 8;
    property CenterFooter: WideString dispid 9;
    property RightFooter: WideString dispid 10;
    function SetFooter(const left: WideString; const center: WideString; const right: WideString): WordBool; dispid 11;
    property HeaderTextFormat: ITextFormat readonly dispid 12;
    property FooterTextFormat: ITextFormat readonly dispid 13;
    function GetHeaderFooterString(whichOne: Integer): WideString; dispid 14;
    property UsePageSetupOnSheets: WordBool dispid 15;
    property PrinterPaperSize: Integer dispid 16;
    property PrinterPaperLength: Integer dispid 17;
    property PrinterPaperWidth: Integer dispid 18;
    property PrinterPaperSource: Integer dispid 19;
  end;

// *********************************************************************//
// Interface: IFeatureManager
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {6B39655E-381B-4BD0-89F5-640D48593F15}
// *********************************************************************//
  IFeatureManager = interface(IDispatch)
    ['{6B39655E-381B-4BD0-89F5-640D48593F15}']
    function CreateCustomBendAllowance: ICustomBendAllowance; safecall;
    function InsertSheetMetalBaseFlange(thickness: Double; thickenDir: WordBool; radius: Double; 
                                        extrudeDist1: Double; extrudeDist2: Double; 
                                        flipExtruDir: WordBool; endCondition1: Integer; 
                                        endCondition2: Integer; dirToUse: Integer; 
                                        const pCBA: ICustomBendAllowance; 
                                        useDefaultRelief: WordBool; reliefType: Integer; 
                                        reliefWidth: Double; reliefDepth: Double; 
                                        releifRatio: Double; useReleifRatio: WordBool): IFeature; safecall;
    function InsertDeleteBody: IFeature; safecall;
    function FeatureExtrusion(sd: WordBool; flip: WordBool; dir: WordBool; t1: Integer; 
                              t2: Integer; d1: Double; d2: Double; dchk1: WordBool; 
                              dchk2: WordBool; ddir1: WordBool; ddir2: WordBool; dang1: Double; 
                              dang2: Double; offsetReverse1: WordBool; offsetReverse2: WordBool; 
                              translateSurface1: WordBool; translateSurface2: WordBool; 
                              merge: WordBool; useFeatScope: WordBool; useAutoSelect: WordBool): IFeature; safecall;
    function FeatureExtrusionThin(sd: WordBool; flip: WordBool; dir: WordBool; t1: Integer; 
                                  t2: Integer; d1: Double; d2: Double; dchk1: WordBool; 
                                  dchk2: WordBool; ddir1: WordBool; ddir2: WordBool; dang1: Double; 
                                  dang2: Double; offsetReverse1: WordBool; 
                                  offsetReverse2: WordBool; translateSurface1: WordBool; 
                                  translateSurface2: WordBool; merge: WordBool; thk1: Double; 
                                  thk2: Double; endThk: Double; revThinDir: Integer; 
                                  capEnds: Integer; addBends: WordBool; bendRad: Double; 
                                  useFeatScope: WordBool; useAutoSelect: WordBool): IFeature; safecall;
    function FeatureCut(sd: WordBool; flip: WordBool; dir: WordBool; t1: Integer; t2: Integer; 
                        d1: Double; d2: Double; dchk1: WordBool; dchk2: WordBool; ddir1: WordBool; 
                        ddir2: WordBool; dang1: Double; dang2: Double; offsetReverse1: WordBool; 
                        offsetReverse2: WordBool; translateSurface1: WordBool; 
                        translateSurface2: WordBool; normalCut: WordBool; useFeatScope: WordBool; 
                        useAutoSelect: WordBool): IFeature; safecall;
    function FeatureCutThin(sd: WordBool; flip: WordBool; dir: WordBool; t1: Integer; t2: Integer; 
                            d1: Double; d2: Double; dchk1: WordBool; dchk2: WordBool; 
                            ddir1: WordBool; ddir2: WordBool; dang1: Double; dang2: Double; 
                            offsetReverse1: WordBool; offsetReverse2: WordBool; 
                            translateSurface1: WordBool; translateSurface2: WordBool; thk1: Double; 
                            thk2: Double; endThk: Double; revThinDir: Integer; capEnds: Integer; 
                            addBends: WordBool; bendRad: Double; useFeatScope: WordBool; 
                            useAutoSelect: WordBool): IFeature; safecall;
    function FeatureRevolve(angle: Double; reverseDir: WordBool; angle2: Double; revType: Integer; 
                            options: Integer; merge: WordBool; useFeatScope: WordBool; 
                            useAutoSel: WordBool): IFeature; safecall;
    function FeatureRevolveCut(angle: Double; reverseDir: WordBool; angle2: Double; 
                               revType: Integer; options: Integer; useFeatScope: WordBool; 
                               useAutoSelect: WordBool): IFeature; safecall;
    function FeatureRevolveThin(angle: Double; reverseDir: WordBool; angle2: Double; 
                                revType: Integer; thickness1: Double; thickness2: Double; 
                                reverseThinDir: Integer; merge: WordBool; useFeatScope: WordBool; 
                                useAutoSelect: WordBool): IFeature; safecall;
    function FeatureRevolveThinCut(angle: Double; reverseDir: WordBool; angle2: Double; 
                                   revType: Integer; thickness1: Double; thickness2: Double; 
                                   reverseThinDir: Integer; useFeatScope: WordBool; 
                                   useAutoSelect: WordBool): IFeature; safecall;
    function FeatureBossThicken(thickness: Double; direction: Integer; faceIndex: Integer; 
                                fillVolume: WordBool; merge: WordBool; useFeatScope: WordBool; 
                                useAutoSelect: WordBool): IFeature; safecall;
    function FeatureCutThicken(thickness: Double; direction: Integer; faceIndex: Integer; 
                               fillVolume: WordBool; useFeatScope: WordBool; useAutoSelect: WordBool): IFeature; safecall;
    function InsertProtrusionSwept(propagate: WordBool; alignment: WordBool; 
                                   twistCtrlOption: Smallint; keepTangency: WordBool; 
                                   forceNonRational: WordBool; startMatchingType: Smallint; 
                                   endMatchingType: Smallint; isThinBody: WordBool; 
                                   thickness1: Double; thickness2: Double; thinType: Smallint; 
                                   merge: WordBool; useFeatScope: WordBool; useAutoSelect: WordBool): IFeature; safecall;
    function InsertCutSwept(propagate: WordBool; alignment: WordBool; twistCtrlOption: Smallint; 
                            keepTangency: WordBool; forceNonRational: WordBool; 
                            startMatchingType: Smallint; endMatchingType: Smallint; 
                            isThinBody: WordBool; thickness1: Double; thickness2: Double; 
                            thinType: Smallint; useFeatScope: WordBool; useAutoSelect: WordBool): IFeature; safecall;
    function InsertProtrusionBlend(closed: WordBool; keepTangency: WordBool; 
                                   forceNonRational: WordBool; tessToleranceFactor: Double; 
                                   startMatchingType: Smallint; endMatchingType: Smallint; 
                                   startTangentLength: Double; endTangentLength: Double; 
                                   startTangentDir: WordBool; endTangentDir: WordBool; 
                                   isThinBody: WordBool; thickness1: Double; thickness2: Double; 
                                   thinType: Smallint; merge: WordBool; useFeatScope: WordBool; 
                                   useAutoSelect: WordBool): IFeature; safecall;
    function InsertCutBlend(closed: WordBool; keepTangency: WordBool; forceNonRational: WordBool; 
                            tessToleranceFactor: Double; startMatchingType: Smallint; 
                            endMatchingType: Smallint; isThinBody: WordBool; thickness1: Double; 
                            thickness2: Double; thinType: Smallint; useFeatScope: WordBool; 
                            useAutoSelect: WordBool): IFeature; safecall;
    function HoleWizard(genericHoleType: Integer; standardIndex: Integer; 
                        fastenerTypeIndex: Integer; const sSize: WideString; endType: Smallint; 
                        diameter: Double; depth: Double; value1: Double; value2: Double; 
                        value3: Double; value4: Double; value5: Double; value6: Double; 
                        value7: Double; value8: Double; value9: Double; value10: Double; 
                        value11: Double; value12: Double): IFeature; safecall;
    function InsertMacroFeature(const baseName: WideString; const progId: WideString; 
                                macroMethods: OleVariant; paramNames: OleVariant; 
                                paramTypes: OleVariant; paramValues: OleVariant; 
                                const editBody: IBody2; options: Integer): IFeature; safecall;
    function IInsertMacroFeature(const baseName: WideString; const progId: WideString; 
                                 var macroMethods: WideString; paramCount: Integer; 
                                 var paramNames: WideString; var paramTypes: Integer; 
                                 var paramValues: WideString; const editBody: IBody2; 
                                 options: Integer): IFeature; safecall;
    function Get_EnableFeatureTree: WordBool; safecall;
    procedure Set_EnableFeatureTree(pState: WordBool); safecall;
    procedure UpdateFeatureTree; safecall;
    function InsertFeatureTreeFolder: WordBool; safecall;
    function InsertSheetMetalCornerTrim(internalCornerFlag: Integer; breakType: Integer; 
                                        breakDist: Double; reliefType: Integer; param: Double): IFeature; safecall;
    function Get_ShowFeatureName: WordBool; safecall;
    procedure Set_ShowFeatureName(showName: WordBool); safecall;
    function Get_ShowFeatureDescription: WordBool; safecall;
    procedure Set_ShowFeatureDescription(showDescription: WordBool); safecall;
    function InsertFillSurface(resolution: Integer): IFeature; safecall;
    function EditRollback(Location: Integer; const feature: WideString): WordBool; safecall;
    function InsertSheetMetalLoftedBend(thickDirType: Integer; thickness: Double): IFeature; safecall;
    procedure MakeStyledCurves(tol: Double; mode: Integer); safecall;
    procedure HideBodies; safecall;
    procedure ShowBodies; safecall;
    function InsertMirrorFeature(bMirrorBody: WordBool; bGeometryPattern: WordBool; 
                                 bMerge: WordBool; bKnit: WordBool): IFeature; safecall;
    function InsertMoveCopyBody(transX: Double; transY: Double; transZ: Double; transDist: Double; 
                                rotPointX: Double; rotPointY: Double; rotPointZ: Double; 
                                rotAngleX: Double; rotAngleY: Double; rotAngleZ: Double; 
                                bCopy: WordBool; numCopies: Integer): IFeature; safecall;
    function Get_Document: IModelDoc2; safecall;
    function InsertCombineFeature(operationType: Integer; const mainBody: IBody2; 
                                  toolVar: OleVariant): IFeature; safecall;
    function IInsertCombineFeature(operationType: Integer; const mainBody: IBody2; 
                                   toolsCount: Integer; var toolsArr: IBody2): IFeature; safecall;
    function InsertDwgOrDxfFile(const fileName: WideString): IFeature; safecall;
    function FeatureLinearPattern(num1: Integer; spacing1: Double; num2: Integer; spacing2: Double; 
                                  flipDir1: WordBool; flipDir2: WordBool; const dName1: WideString; 
                                  const dName2: WideString): IFeature; safecall;
    function FeatureCircularPattern(num: Integer; spacing: Double; flipDir: WordBool; 
                                    const dName: WideString): IFeature; safecall;
    function InsertTableDrivenPattern(const fileName: WideString; pointVar: OleVariant; 
                                      useCentrod: WordBool; geomPatt: WordBool): IFeature; safecall;
    function IInsertTableDrivenPattern(const fileName: WideString; count: Integer; 
                                       var pointArr: Double; useCentrod: WordBool; 
                                       geomPatt: WordBool): IFeature; safecall;
    property EnableFeatureTree: WordBool read Get_EnableFeatureTree write Set_EnableFeatureTree;
    property ShowFeatureName: WordBool read Get_ShowFeatureName write Set_ShowFeatureName;
    property ShowFeatureDescription: WordBool read Get_ShowFeatureDescription write Set_ShowFeatureDescription;
    property Document: IModelDoc2 read Get_Document;
  end;

// *********************************************************************//
// DispIntf:  IFeatureManagerDisp
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {6B39655E-381B-4BD0-89F5-640D48593F15}
// *********************************************************************//
  IFeatureManagerDisp = dispinterface
    ['{6B39655E-381B-4BD0-89F5-640D48593F15}']
    function CreateCustomBendAllowance: ICustomBendAllowance; dispid 1;
    function InsertSheetMetalBaseFlange(thickness: Double; thickenDir: WordBool; radius: Double; 
                                        extrudeDist1: Double; extrudeDist2: Double; 
                                        flipExtruDir: WordBool; endCondition1: Integer; 
                                        endCondition2: Integer; dirToUse: Integer; 
                                        const pCBA: ICustomBendAllowance; 
                                        useDefaultRelief: WordBool; reliefType: Integer; 
                                        reliefWidth: Double; reliefDepth: Double; 
                                        releifRatio: Double; useReleifRatio: WordBool): IFeature; dispid 2;
    function InsertDeleteBody: IFeature; dispid 3;
    function FeatureExtrusion(sd: WordBool; flip: WordBool; dir: WordBool; t1: Integer; 
                              t2: Integer; d1: Double; d2: Double; dchk1: WordBool; 
                              dchk2: WordBool; ddir1: WordBool; ddir2: WordBool; dang1: Double; 
                              dang2: Double; offsetReverse1: WordBool; offsetReverse2: WordBool; 
                              translateSurface1: WordBool; translateSurface2: WordBool; 
                              merge: WordBool; useFeatScope: WordBool; useAutoSelect: WordBool): IFeature; dispid 4;
    function FeatureExtrusionThin(sd: WordBool; flip: WordBool; dir: WordBool; t1: Integer; 
                                  t2: Integer; d1: Double; d2: Double; dchk1: WordBool; 
                                  dchk2: WordBool; ddir1: WordBool; ddir2: WordBool; dang1: Double; 
                                  dang2: Double; offsetReverse1: WordBool; 
                                  offsetReverse2: WordBool; translateSurface1: WordBool; 
                                  translateSurface2: WordBool; merge: WordBool; thk1: Double; 
                                  thk2: Double; endThk: Double; revThinDir: Integer; 
                                  capEnds: Integer; addBends: WordBool; bendRad: Double; 
                                  useFeatScope: WordBool; useAutoSelect: WordBool): IFeature; dispid 5;
    function FeatureCut(sd: WordBool; flip: WordBool; dir: WordBool; t1: Integer; t2: Integer; 
                        d1: Double; d2: Double; dchk1: WordBool; dchk2: WordBool; ddir1: WordBool; 
                        ddir2: WordBool; dang1: Double; dang2: Double; offsetReverse1: WordBool; 
                        offsetReverse2: WordBool; translateSurface1: WordBool; 
                        translateSurface2: WordBool; normalCut: WordBool; useFeatScope: WordBool; 
                        useAutoSelect: WordBool): IFeature; dispid 6;
    function FeatureCutThin(sd: WordBool; flip: WordBool; dir: WordBool; t1: Integer; t2: Integer; 
                            d1: Double; d2: Double; dchk1: WordBool; dchk2: WordBool; 
                            ddir1: WordBool; ddir2: WordBool; dang1: Double; dang2: Double; 
                            offsetReverse1: WordBool; offsetReverse2: WordBool; 
                            translateSurface1: WordBool; translateSurface2: WordBool; thk1: Double; 
                            thk2: Double; endThk: Double; revThinDir: Integer; capEnds: Integer; 
                            addBends: WordBool; bendRad: Double; useFeatScope: WordBool; 
                            useAutoSelect: WordBool): IFeature; dispid 7;
    function FeatureRevolve(angle: Double; reverseDir: WordBool; angle2: Double; revType: Integer; 
                            options: Integer; merge: WordBool; useFeatScope: WordBool; 
                            useAutoSel: WordBool): IFeature; dispid 8;
    function FeatureRevolveCut(angle: Double; reverseDir: WordBool; angle2: Double; 
                               revType: Integer; options: Integer; useFeatScope: WordBool; 
                               useAutoSelect: WordBool): IFeature; dispid 9;
    function FeatureRevolveThin(angle: Double; reverseDir: WordBool; angle2: Double; 
                                revType: Integer; thickness1: Double; thickness2: Double; 
                                reverseThinDir: Integer; merge: WordBool; useFeatScope: WordBool; 
                                useAutoSelect: WordBool): IFeature; dispid 10;
    function FeatureRevolveThinCut(angle: Double; reverseDir: WordBool; angle2: Double; 
                                   revType: Integer; thickness1: Double; thickness2: Double; 
                                   reverseThinDir: Integer; useFeatScope: WordBool; 
                                   useAutoSelect: WordBool): IFeature; dispid 11;
    function FeatureBossThicken(thickness: Double; direction: Integer; faceIndex: Integer; 
                                fillVolume: WordBool; merge: WordBool; useFeatScope: WordBool; 
                                useAutoSelect: WordBool): IFeature; dispid 12;
    function FeatureCutThicken(thickness: Double; direction: Integer; faceIndex: Integer; 
                               fillVolume: WordBool; useFeatScope: WordBool; useAutoSelect: WordBool): IFeature; dispid 13;
    function InsertProtrusionSwept(propagate: WordBool; alignment: WordBool; 
                                   twistCtrlOption: Smallint; keepTangency: WordBool; 
                                   forceNonRational: WordBool; startMatchingType: Smallint; 
                                   endMatchingType: Smallint; isThinBody: WordBool; 
                                   thickness1: Double; thickness2: Double; thinType: Smallint; 
                                   merge: WordBool; useFeatScope: WordBool; useAutoSelect: WordBool): IFeature; dispid 14;
    function InsertCutSwept(propagate: WordBool; alignment: WordBool; twistCtrlOption: Smallint; 
                            keepTangency: WordBool; forceNonRational: WordBool; 
                            startMatchingType: Smallint; endMatchingType: Smallint; 
                            isThinBody: WordBool; thickness1: Double; thickness2: Double; 
                            thinType: Smallint; useFeatScope: WordBool; useAutoSelect: WordBool): IFeature; dispid 15;
    function InsertProtrusionBlend(closed: WordBool; keepTangency: WordBool; 
                                   forceNonRational: WordBool; tessToleranceFactor: Double; 
                                   startMatchingType: Smallint; endMatchingType: Smallint; 
                                   startTangentLength: Double; endTangentLength: Double; 
                                   startTangentDir: WordBool; endTangentDir: WordBool; 
                                   isThinBody: WordBool; thickness1: Double; thickness2: Double; 
                                   thinType: Smallint; merge: WordBool; useFeatScope: WordBool; 
                                   useAutoSelect: WordBool): IFeature; dispid 16;
    function InsertCutBlend(closed: WordBool; keepTangency: WordBool; forceNonRational: WordBool; 
                            tessToleranceFactor: Double; startMatchingType: Smallint; 
                            endMatchingType: Smallint; isThinBody: WordBool; thickness1: Double; 
                            thickness2: Double; thinType: Smallint; useFeatScope: WordBool; 
                            useAutoSelect: WordBool): IFeature; dispid 17;
    function HoleWizard(genericHoleType: Integer; standardIndex: Integer; 
                        fastenerTypeIndex: Integer; const sSize: WideString; endType: Smallint; 
                        diameter: Double; depth: Double; value1: Double; value2: Double; 
                        value3: Double; value4: Double; value5: Double; value6: Double; 
                        value7: Double; value8: Double; value9: Double; value10: Double; 
                        value11: Double; value12: Double): IFeature; dispid 18;
    function InsertMacroFeature(const baseName: WideString; const progId: WideString; 
                                macroMethods: OleVariant; paramNames: OleVariant; 
                                paramTypes: OleVariant; paramValues: OleVariant; 
                                const editBody: IBody2; options: Integer): IFeature; dispid 19;
    function IInsertMacroFeature(const baseName: WideString; const progId: WideString; 
                                 var macroMethods: WideString; paramCount: Integer; 
                                 var paramNames: WideString; var paramTypes: Integer; 
                                 var paramValues: WideString; const editBody: IBody2; 
                                 options: Integer): IFeature; dispid 20;
    property EnableFeatureTree: WordBool dispid 21;
    procedure UpdateFeatureTree; dispid 22;
    function InsertFeatureTreeFolder: WordBool; dispid 23;
    function InsertSheetMetalCornerTrim(internalCornerFlag: Integer; breakType: Integer; 
                                        breakDist: Double; reliefType: Integer; param: Double): IFeature; dispid 24;
    property ShowFeatureName: WordBool dispid 25;
    property ShowFeatureDescription: WordBool dispid 26;
    function InsertFillSurface(resolution: Integer): IFeature; dispid 27;
    function EditRollback(Location: Integer; const feature: WideString): WordBool; dispid 28;
    function InsertSheetMetalLoftedBend(thickDirType: Integer; thickness: Double): IFeature; dispid 29;
    procedure MakeStyledCurves(tol: Double; mode: Integer); dispid 30;
    procedure HideBodies; dispid 31;
    procedure ShowBodies; dispid 32;
    function InsertMirrorFeature(bMirrorBody: WordBool; bGeometryPattern: WordBool; 
                                 bMerge: WordBool; bKnit: WordBool): IFeature; dispid 33;
    function InsertMoveCopyBody(transX: Double; transY: Double; transZ: Double; transDist: Double; 
                                rotPointX: Double; rotPointY: Double; rotPointZ: Double; 
                                rotAngleX: Double; rotAngleY: Double; rotAngleZ: Double; 
                                bCopy: WordBool; numCopies: Integer): IFeature; dispid 34;
    property Document: IModelDoc2 readonly dispid 35;
    function InsertCombineFeature(operationType: Integer; const mainBody: IBody2; 
                                  toolVar: OleVariant): IFeature; dispid 36;
    function IInsertCombineFeature(operationType: Integer; const mainBody: IBody2; 
                                   toolsCount: Integer; var toolsArr: IBody2): IFeature; dispid 37;
    function InsertDwgOrDxfFile(const fileName: WideString): IFeature; dispid 38;
    function FeatureLinearPattern(num1: Integer; spacing1: Double; num2: Integer; spacing2: Double; 
                                  flipDir1: WordBool; flipDir2: WordBool; const dName1: WideString; 
                                  const dName2: WideString): IFeature; dispid 39;
    function FeatureCircularPattern(num: Integer; spacing: Double; flipDir: WordBool; 
                                    const dName: WideString): IFeature; dispid 40;
    function InsertTableDrivenPattern(const fileName: WideString; pointVar: OleVariant; 
                                      useCentrod: WordBool; geomPatt: WordBool): IFeature; dispid 41;
    function IInsertTableDrivenPattern(const fileName: WideString; count: Integer; 
                                       var pointArr: Double; useCentrod: WordBool; 
                                       geomPatt: WordBool): IFeature; dispid 42;
  end;

// *********************************************************************//
// Interface: ICustomBendAllowance
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {442B6462-0350-4F5C-A168-3F753F6CA792}
// *********************************************************************//
  ICustomBendAllowance = interface(IDispatch)
    ['{442B6462-0350-4F5C-A168-3F753F6CA792}']
    function Get_type_: Integer; safecall;
    procedure Set_type_(type_: Integer); safecall;
    function Get_BendTableFile: WideString; safecall;
    procedure Set_BendTableFile(const BendTableFile: WideString); safecall;
    function Get_KFactor: Double; safecall;
    procedure Set_KFactor(KFactor: Double); safecall;
    function Get_BendAllowance: Double; safecall;
    procedure Set_BendAllowance(BendAllowance: Double); safecall;
    function Get_BendDeduction: Double; safecall;
    procedure Set_BendDeduction(BendDeduction: Double); safecall;
    property type_: Integer read Get_type_ write Set_type_;
    property BendTableFile: WideString read Get_BendTableFile write Set_BendTableFile;
    property KFactor: Double read Get_KFactor write Set_KFactor;
    property BendAllowance: Double read Get_BendAllowance write Set_BendAllowance;
    property BendDeduction: Double read Get_BendDeduction write Set_BendDeduction;
  end;

// *********************************************************************//
// DispIntf:  ICustomBendAllowanceDisp
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {442B6462-0350-4F5C-A168-3F753F6CA792}
// *********************************************************************//
  ICustomBendAllowanceDisp = dispinterface
    ['{442B6462-0350-4F5C-A168-3F753F6CA792}']
    property type_: Integer dispid 1;
    property BendTableFile: WideString dispid 2;
    property KFactor: Double dispid 3;
    property BendAllowance: Double dispid 4;
    property BendDeduction: Double dispid 5;
  end;

// *********************************************************************//
// Interface: IModelViewManager
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {1AA249FF-B758-440A-8B88-26512F385BF3}
// *********************************************************************//
  IModelViewManager = interface(IDispatch)
    ['{1AA249FF-B758-440A-8B88-26512F385BF3}']
    function AddControl(const Name: WideString; const controlName: WideString; 
                        const bstrLicKey: WideString): IUnknown; safecall;
    function GetControl(const Name: WideString): IDispatch; safecall;
    function IGetControl(const Name: WideString): IUnknown; safecall;
    function DeleteControlTab(const Name: WideString): WordBool; safecall;
    function ActivateControlTab(const Name: WideString): WordBool; safecall;
    function ActivateModelTab: WordBool; safecall;
    function IsControlTabActive(const Name: WideString): WordBool; safecall;
    function IsModelTabActive: WordBool; safecall;
    function CreateFeatureMgrView(const pPicture: IDispatch; const toolTip: WideString; 
                                  whichPane: Integer): IFeatMgrView; safecall;
    function CreateFeatureMgrControl(const pPicture: IDispatch; const Class_: WideString; 
                                     const LicKey: WideString; const toolTip: WideString; 
                                     whichPane: Integer): IFeatMgrView; safecall;
    function Get_Document: IModelDoc2; safecall;
    property Document: IModelDoc2 read Get_Document;
  end;

// *********************************************************************//
// DispIntf:  IModelViewManagerDisp
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {1AA249FF-B758-440A-8B88-26512F385BF3}
// *********************************************************************//
  IModelViewManagerDisp = dispinterface
    ['{1AA249FF-B758-440A-8B88-26512F385BF3}']
    function AddControl(const Name: WideString; const controlName: WideString; 
                        const bstrLicKey: WideString): IUnknown; dispid 1;
    function GetControl(const Name: WideString): IDispatch; dispid 2;
    function IGetControl(const Name: WideString): IUnknown; dispid 3;
    function DeleteControlTab(const Name: WideString): WordBool; dispid 4;
    function ActivateControlTab(const Name: WideString): WordBool; dispid 5;
    function ActivateModelTab: WordBool; dispid 6;
    function IsControlTabActive(const Name: WideString): WordBool; dispid 7;
    function IsModelTabActive: WordBool; dispid 8;
    function CreateFeatureMgrView(const pPicture: IDispatch; const toolTip: WideString; 
                                  whichPane: Integer): IFeatMgrView; dispid 9;
    function CreateFeatureMgrControl(const pPicture: IDispatch; const Class_: WideString; 
                                     const LicKey: WideString; const toolTip: WideString; 
                                     whichPane: Integer): IFeatMgrView; dispid 10;
    property Document: IModelDoc2 readonly dispid 11;
  end;

// *********************************************************************//
// Interface: IModelDocExtension
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {99F4D4AF-F268-4EE1-8C55-041F7BECF879}
// *********************************************************************//
  IModelDocExtension = interface(IDispatch)
    ['{99F4D4AF-F268-4EE1-8C55-041F7BECF879}']
    function Get_Document: IModelDoc2; safecall;
    function GetMassProperties(Accuracy: Integer; var status: Integer): OleVariant; safecall;
    function IGetMassProperties(Accuracy: Integer; var status: Integer): Double; safecall;
    function InsertDwgOrDxfFile(const fileName: WideString): WordBool; safecall;
    procedure PrintOut(fromPage: Integer; toPage: Integer; Copies: Integer; collate: WordBool; 
                       const printer: WideString; const PrintFileName: WideString); safecall;
    function SelectByID(const Name: WideString; const type_: WideString; x: Double; y: Double; 
                        z: Double; Append: WordBool; mark: Integer; const Callout: ICallout): WordBool; safecall;
    function IGet3rdPartyStorageStore(const subStorageName: WideString; isStoring: WordBool): IUnknown; safecall;
    function IRelease3rdPartyStorageStore(const subStorageName: WideString): WordBool; safecall;
    function Get_UsePageSetup: Integer; safecall;
    procedure Set_UsePageSetup(whichOne: Integer); safecall;
    function Get_AppPageSetup: IPageSetup; safecall;
    function GetSectionProperties(sections: OleVariant): OleVariant; safecall;
    function IGetSectionProperties(count: Integer; var sections: IUnknown): Double; safecall;
    property Document: IModelDoc2 read Get_Document;
    property UsePageSetup: Integer read Get_UsePageSetup write Set_UsePageSetup;
    property AppPageSetup: IPageSetup read Get_AppPageSetup;
  end;

// *********************************************************************//
// DispIntf:  IModelDocExtensionDisp
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {99F4D4AF-F268-4EE1-8C55-041F7BECF879}
// *********************************************************************//
  IModelDocExtensionDisp = dispinterface
    ['{99F4D4AF-F268-4EE1-8C55-041F7BECF879}']
    property Document: IModelDoc2 readonly dispid 1;
    function GetMassProperties(Accuracy: Integer; var status: Integer): OleVariant; dispid 2;
    function IGetMassProperties(Accuracy: Integer; var status: Integer): Double; dispid 3;
    function InsertDwgOrDxfFile(const fileName: WideString): WordBool; dispid 4;
    procedure PrintOut(fromPage: Integer; toPage: Integer; Copies: Integer; collate: WordBool; 
                       const printer: WideString; const PrintFileName: WideString); dispid 5;
    function SelectByID(const Name: WideString; const type_: WideString; x: Double; y: Double; 
                        z: Double; Append: WordBool; mark: Integer; const Callout: ICallout): WordBool; dispid 6;
    function IGet3rdPartyStorageStore(const subStorageName: WideString; isStoring: WordBool): IUnknown; dispid 7;
    function IRelease3rdPartyStorageStore(const subStorageName: WideString): WordBool; dispid 8;
    property UsePageSetup: Integer dispid 9;
    property AppPageSetup: IPageSetup readonly dispid 10;
    function GetSectionProperties(sections: OleVariant): OleVariant; dispid 11;
    function IGetSectionProperties(count: Integer; var sections: IUnknown): Double; dispid 12;
  end;

// *********************************************************************//
// Interface: IConfigurationManager
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {8DB64337-F36E-47CC-BBBC-B4B979D31505}
// *********************************************************************//
  IConfigurationManager = interface(IDispatch)
    ['{8DB64337-F36E-47CC-BBBC-B4B979D31505}']
    function Get_Document: IModelDoc2; safecall;
    function GetConfigurationParams(const configName: WideString; out params: OleVariant; 
                                    out values: OleVariant): WordBool; safecall;
    function IGetConfigurationParams(const configName: WideString; paramCount: Integer; 
                                     out paramNames: WideString; out paramValues: WideString): WordBool; safecall;
    function GetConfigurationParamsCount(const configName: WideString): Integer; safecall;
    property Document: IModelDoc2 read Get_Document;
  end;

// *********************************************************************//
// DispIntf:  IConfigurationManagerDisp
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {8DB64337-F36E-47CC-BBBC-B4B979D31505}
// *********************************************************************//
  IConfigurationManagerDisp = dispinterface
    ['{8DB64337-F36E-47CC-BBBC-B4B979D31505}']
    property Document: IModelDoc2 readonly dispid 1;
    function GetConfigurationParams(const configName: WideString; out params: OleVariant; 
                                    out values: OleVariant): WordBool; dispid 2;
    function IGetConfigurationParams(const configName: WideString; paramCount: Integer; 
                                     out paramNames: WideString; out paramValues: WideString): WordBool; dispid 3;
    function GetConfigurationParamsCount(const configName: WideString): Integer; dispid 4;
  end;

// *********************************************************************//
// Interface: IEnumDisplayDimensions
// Flags:     (272) Hidden OleAutomation
// GUID:      {83A33DAB-27C5-11CE-BFD4-00400513BB57}
// *********************************************************************//
  IEnumDisplayDimensions = interface(IUnknown)
    ['{83A33DAB-27C5-11CE-BFD4-00400513BB57}']
    function Next(celt: Integer; out rgelt: IDisplayDimension; var pceltFetched: Integer): HResult; stdcall;
    function Skip(celt: Integer): HResult; stdcall;
    function Reset: HResult; stdcall;
    function Clone(out ppenum: IEnumDisplayDimensions): HResult; stdcall;
  end;

// *********************************************************************//
// Interface: IEnumLoops2
// Flags:     (272) Hidden OleAutomation
// GUID:      {9A6AD388-3FC9-48DE-BFA5-B8953433AB36}
// *********************************************************************//
  IEnumLoops2 = interface(IUnknown)
    ['{9A6AD388-3FC9-48DE-BFA5-B8953433AB36}']
    function Next(celt: Integer; out rgelt: ILoop2; var pceltFetched: Integer): HResult; stdcall;
    function Skip(celt: Integer): HResult; stdcall;
    function Reset: HResult; stdcall;
    function Clone(out ppenum: IEnumLoops2): HResult; stdcall;
  end;

// *********************************************************************//
// Interface: IEnumFaces2
// Flags:     (272) Hidden OleAutomation
// GUID:      {61ECFF18-AC2C-405E-B9B8-30D85FDB5087}
// *********************************************************************//
  IEnumFaces2 = interface(IUnknown)
    ['{61ECFF18-AC2C-405E-B9B8-30D85FDB5087}']
    function Next(celt: Integer; out rgelt: IFace2; var pceltFetched: Integer): HResult; stdcall;
    function Skip(celt: Integer): HResult; stdcall;
    function Reset: HResult; stdcall;
    function Clone(out ppenum: IEnumFaces2): HResult; stdcall;
  end;

// *********************************************************************//
// Interface: IPartDoc
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {83A33D32-27C5-11CE-BFD4-00400513BB57}
// *********************************************************************//
  IPartDoc = interface(IDispatch)
    ['{83A33D32-27C5-11CE-BFD4-00400513BB57}']
    function Get_MaterialUserName: WideString; safecall;
    procedure Set_MaterialUserName(const retval: WideString); safecall;
    function Get_MaterialIdName: WideString; safecall;
    procedure Set_MaterialIdName(const retval: WideString); safecall;
    function Get_MaterialPropertyValues: OleVariant; safecall;
    procedure Set_MaterialPropertyValues(retval: OleVariant); safecall;
    function FirstFeature: IDispatch; safecall;
    function IFirstFeature: IFeature; safecall;
    function FeatureByName(const Name: WideString): IDispatch; safecall;
    function IFeatureByName(const Name: WideString): IFeature; safecall;
    function FeatureById(id: Integer): IDispatch; safecall;
    function IFeatureById(id: Integer): IFeature; safecall;
    function Body: IDispatch; safecall;
    function IBodyObject: IBody; safecall;
    procedure Dummy18; safecall;
    procedure FeatureExtrusion(sd: WordBool; flip: WordBool; dir: WordBool; t1: Integer; 
                               t2: Integer; d1: Double; d2: Double; dchk1: WordBool; 
                               dchk2: WordBool; ddir1: WordBool; ddir2: WordBool; dang1: Double; 
                               dang2: Double; offsetReverse1: WordBool; offsetReverse2: WordBool); safecall;
    procedure FeatureRevolve(angle: Double; reverseDir: WordBool; angle2: Double; revType: Integer); safecall;
    procedure FeatureRevolveCut(angle: Double; reverseDir: WordBool; angle2: Double; 
                                revType: Integer); safecall;
    function GetTessTriangles(noConversion: WordBool): OleVariant; safecall;
    function GetTessNorms: OleVariant; safecall;
    function GetProcessedBody: IDispatch; safecall;
    function IGetProcessedBody: IBody; safecall;
    function GetPartBox(noConversion: WordBool): OleVariant; safecall;
    function CreateNewBody: IDispatch; safecall;
    function ICreateNewBody: IBody; safecall;
    procedure EditRebuild; safecall;
    procedure Dummy17; safecall;
    procedure Dummy19; safecall;
    procedure ForceRebuild; safecall;
    procedure EditUnsuppressDependent; safecall;
    procedure EditRollforward; safecall;
    procedure InsertStockTurned; safecall;
    procedure EditUnsuppress; safecall;
    procedure MakeSection; safecall;
    procedure Dumpfacets; safecall;
    procedure FeatureStock; safecall;
    procedure EditRollback; safecall;
    procedure EditSuppress; safecall;
    function AddPropertyExtension(PropertyExtension: OleVariant): Integer; safecall;
    function GetPropertyExtension(id: Integer): OleVariant; safecall;
    procedure MirrorFeature; safecall;
    procedure ResetPropertyExtension; safecall;
    procedure Dummy1; safecall;
    procedure Dummy2; safecall;
    procedure Dummy3; safecall;
    procedure Dummy4; safecall;
    procedure Dummy5; safecall;
    procedure Dummy6; safecall;
    procedure Dummy7; safecall;
    procedure Dummy8; safecall;
    procedure Dummy9; safecall;
    procedure Dummy10; safecall;
    procedure Dummy11; safecall;
    procedure Dummy12; safecall;
    procedure Dummy13; safecall;
    procedure Dummy14; safecall;
    procedure Dummy15; safecall;
    procedure Dummy16; safecall;
    function GetProcessedBodyWithSelFace: IDispatch; safecall;
    function IGetProcessedBodyWithSelFace: IBody; safecall;
    function GetTessTriStrips(noConversion: WordBool): OleVariant; safecall;
    function GetTessTriStripNorms: OleVariant; safecall;
    procedure MirrorPart; safecall;
    function IGetTessTriangles(noConversion: WordBool): Single; safecall;
    function IGetTessNorms: Single; safecall;
    function GetTessTriangleCount: Integer; safecall;
    function IGetPartBox(noConversion: WordBool): Double; safecall;
    function IGetTessTriStrips(noConversion: WordBool): Single; safecall;
    function IGetTessTriStripNorms: Single; safecall;
    function GetTessTriStripSize: Integer; safecall;
    function GetEntityByName(const Name: WideString; entityType: Integer): IDispatch; safecall;
    function IGetEntityByName(const Name: WideString; entityType: Integer): IEntity; safecall;
    function GetEntityName(const entity: IDispatch): WideString; safecall;
    function IGetEntityName(const entity: IEntity): WideString; safecall;
    function SetEntityName(const entity: IDispatch; const StringValue: WideString): WordBool; safecall;
    function ISetEntityName(const entity: IEntity; const StringValue: WideString): WordBool; safecall;
    function ReorderFeature(const featureToMove: WideString; const moveAfterFeature: WideString): WordBool; safecall;
    function EnumRelatedBodies: IEnumBodies; safecall;
    function GetSectionedBody(const viewIn: IDispatch): IDispatch; safecall;
    function IGetSectionedBody(const viewIn: IModelView): IBody; safecall;
    function EnumRelatedSectionedBodies(const viewIn: IModelView): IEnumBodies; safecall;
    function Get_IMaterialPropertyValues: Double; safecall;
    procedure Set_IMaterialPropertyValues(var retval: Double); safecall;
    procedure FeatureRevolveThin(angle: Double; reverseDir: WordBool; angle2: Double; 
                                 revType: Integer; thickness1: Double; thickness2: Double; 
                                 reverseThinDir: Integer); safecall;
    procedure FeatureRevolveThinCut(angle: Double; reverseDir: WordBool; angle2: Double; 
                                    revType: Integer; thickness1: Double; thickness2: Double; 
                                    reverseThinDir: Integer); safecall;
    procedure FeatureExtrusionThin(sd: WordBool; flip: WordBool; dir: WordBool; t1: Integer; 
                                   t2: Integer; d1: Double; d2: Double; dchk1: WordBool; 
                                   dchk2: WordBool; ddir1: WordBool; ddir2: WordBool; 
                                   dang1: Double; dang2: Double; offsetReverse1: WordBool; 
                                   offsetReverse2: WordBool; thk1: Double; thk2: Double; 
                                   endThk: Double; revThinDir: Integer; capEnds: Integer; 
                                   addBends: WordBool; bendRad: Double); safecall;
    function InsertBends(radius: Double; const useBendTable: WideString; useKfactor: Double; 
                         useBendAllowance: Double; useAutoRelief: WordBool; offsetRatio: Double): WordBool; safecall;
    function CreateFeatureFromBody(const Body: IDispatch): IDispatch; safecall;
    function ICreateFeatureFromBody(const Body: IBody): IFeature; safecall;
    function CreateFeatureFromBody2(const Body: IDispatch; makeRefSurface: WordBool): IDispatch; safecall;
    function ICreateFeatureFromBody2(const Body: IBody; makeRefSurface: WordBool): IFeature; safecall;
    function ImportDiagnosis(closeAllGaps: WordBool; removeFaces: WordBool; fixFaces: WordBool; 
                             options: Integer): Integer; safecall;
    function DeleteEntityName(const entity: IDispatch): WordBool; safecall;
    function IDeleteEntityName(const entity: IEntity): WordBool; safecall;
    function GetTessTriStripEdges: OleVariant; safecall;
    function IGetTessTriStripEdges: Integer; safecall;
    function IGetTessTriStripEdgeSize: Integer; safecall;
    function EnumBodies(bodyType: Integer): IEnumBodies; safecall;
    function GetBodies(bodyType: Integer): OleVariant; safecall;
    function GetRelatedBodies: OleVariant; safecall;
    function GetRelatedSectionedBodies(const viewIn: IDispatch): OleVariant; safecall;
    function InsertBends2(radius: Double; const useBendTable: WideString; useKfactor: Double; 
                          useBendAllowance: Double; useAutoRelief: WordBool; offsetRatio: Double; 
                          doFlatten: WordBool): WordBool; safecall;
    function CreateFeatureFromBody3(const Body: IDispatch; makeRefSurface: WordBool; 
                                    options: Integer): IDispatch; safecall;
    function ICreateFeatureFromBody3(const Body: IBody; makeRefSurface: WordBool; options: Integer): IFeature; safecall;
    function GetMateReferenceEntity: IDispatch; safecall;
    procedure FeatureExtrusion2(sd: WordBool; flip: WordBool; dir: WordBool; t1: Integer; 
                                t2: Integer; d1: Double; d2: Double; dchk1: WordBool; 
                                dchk2: WordBool; ddir1: WordBool; ddir2: WordBool; dang1: Double; 
                                dang2: Double; offsetReverse1: WordBool; offsetReverse2: WordBool; 
                                merge: WordBool); safecall;
    procedure FeatureExtrusionThin2(sd: WordBool; flip: WordBool; dir: WordBool; t1: Integer; 
                                    t2: Integer; d1: Double; d2: Double; dchk1: WordBool; 
                                    dchk2: WordBool; ddir1: WordBool; ddir2: WordBool; 
                                    dang1: Double; dang2: Double; offsetReverse1: WordBool; 
                                    offsetReverse2: WordBool; merge: WordBool; thk1: Double; 
                                    thk2: Double; endThk: Double; revThinDir: Integer; 
                                    capEnds: Integer; addBends: WordBool; bendRad: Double); safecall;
    function CreateSurfaceFeatureFromBody(const Body: IDispatch; options: Integer): OleVariant; safecall;
    function ICreateSurfaceFeatureFromBodyCount(const Body: IBody; options: Integer): Integer; safecall;
    function ICreateSurfaceFeatureFromBody: IFeature; safecall;
    function IBodyObject2: IBody2; safecall;
    function IGetProcessedBody2: IBody2; safecall;
    function ICreateNewBody2: IBody2; safecall;
    function IGetProcessedBodyWithSelFace2: IBody2; safecall;
    function IGetSectionedBody2(const viewIn: IModelView): IBody2; safecall;
    function ICreateFeatureFromBody4(const Body: IBody2; makeRefSurface: WordBool; options: Integer): IFeature; safecall;
    function ICreateSurfaceFeatureFromBodyCount2(const Body: IBody2; options: Integer): Integer; safecall;
    function EnumRelatedBodies2: IEnumBodies2; safecall;
    function EnumRelatedSectionedBodies2(const viewIn: IModelView): IEnumBodies2; safecall;
    function EnumBodies2(bodyType: Integer): IEnumBodies2; safecall;
    function GetNamedEntitiesCount: Integer; safecall;
    function GetNamedEntities: OleVariant; safecall;
    function IGetNamedEntities(count: Integer): IEntity; safecall;
    function GetCorrespondingEntity(const entity: IDispatch): IDispatch; safecall;
    function IGetCorrespondingEntity(const pEntity: IEntity): IEntity; safecall;
    function InsertBasePart(const fileName: WideString): WordBool; safecall;
    procedure FeatureExtrusion3(sd: WordBool; flip: WordBool; dir: WordBool; t1: Integer; 
                                t2: Integer; d1: Double; d2: Double; dchk1: WordBool; 
                                dchk2: WordBool; ddir1: WordBool; ddir2: WordBool; dang1: Double; 
                                dang2: Double; offsetReverse1: WordBool; offsetReverse2: WordBool; 
                                translateSurface1: WordBool; translateSurface2: WordBool; 
                                merge: WordBool); safecall;
    procedure FeatureExtrusionThin3(sd: WordBool; flip: WordBool; dir: WordBool; t1: Integer; 
                                    t2: Integer; d1: Double; d2: Double; dchk1: WordBool; 
                                    dchk2: WordBool; ddir1: WordBool; ddir2: WordBool; 
                                    dang1: Double; dang2: Double; offsetReverse1: WordBool; 
                                    offsetReverse2: WordBool; translateSurface1: WordBool; 
                                    translateSurface2: WordBool; merge: WordBool; thk1: Double; 
                                    thk2: Double; endThk: Double; revThinDir: Integer; 
                                    capEnds: Integer; addBends: WordBool; bendRad: Double); safecall;
    function InsertMirrorFeature(GeometryPattern: WordBool): WordBool; safecall;
    function InsertMirrorAll: WordBool; safecall;
    procedure FeatureRevolve2(angle: Double; reverseDir: WordBool; angle2: Double; 
                              revType: Integer; merge: WordBool); safecall;
    procedure FeatureRevolveThin2(angle: Double; reverseDir: WordBool; angle2: Double; 
                                  revType: Integer; thickness1: Double; thickness2: Double; 
                                  reverseThinDir: Integer; merge: WordBool); safecall;
    function InsertCombineFeature(operationType: Integer; const mainBody: IDispatch; 
                                  toolVar: OleVariant): WordBool; safecall;
    function IInsertCombineFeature(operationType: Integer; const mainBody: IBody2; 
                                   toolsCount: Integer; var toolsArr: IBody2): WordBool; safecall;
    function EnumBodies3(bodyType: Integer; bVisibleOnly: WordBool): IEnumBodies2; safecall;
    function GetBodies2(bodyType: Integer; bVisibleOnly: WordBool): OleVariant; safecall;
    procedure SetLineStyle(const styleName: WideString); safecall;
    procedure SetLineWidth(width: Integer); safecall;
    procedure SetLineColor(Color: Integer); safecall;
    function InsertPart(const fileName: WideString; ImportPlane: WordBool; ImportAxis: WordBool; 
                        ImportCThread: WordBool): IFeature; safecall;
    property MaterialUserName: WideString read Get_MaterialUserName write Set_MaterialUserName;
    property MaterialIdName: WideString read Get_MaterialIdName write Set_MaterialIdName;
    property MaterialPropertyValues: OleVariant read Get_MaterialPropertyValues write Set_MaterialPropertyValues;
  end;

// *********************************************************************//
// DispIntf:  IPartDocDisp
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {83A33D32-27C5-11CE-BFD4-00400513BB57}
// *********************************************************************//
  IPartDocDisp = dispinterface
    ['{83A33D32-27C5-11CE-BFD4-00400513BB57}']
    property MaterialUserName: WideString dispid 1;
    property MaterialIdName: WideString dispid 2;
    property MaterialPropertyValues: OleVariant dispid 3;
    function FirstFeature: IDispatch; dispid 4;
    function IFirstFeature: IFeature; dispid 53;
    function FeatureByName(const Name: WideString): IDispatch; dispid 5;
    function IFeatureByName(const Name: WideString): IFeature; dispid 54;
    function FeatureById(id: Integer): IDispatch; dispid 6;
    function IFeatureById(id: Integer): IFeature; dispid 55;
    function Body: IDispatch; dispid 7;
    function IBodyObject: IBody; dispid 56;
    procedure Dummy18; dispid 8;
    procedure FeatureExtrusion(sd: WordBool; flip: WordBool; dir: WordBool; t1: Integer; 
                               t2: Integer; d1: Double; d2: Double; dchk1: WordBool; 
                               dchk2: WordBool; ddir1: WordBool; ddir2: WordBool; dang1: Double; 
                               dang2: Double; offsetReverse1: WordBool; offsetReverse2: WordBool); dispid 9;
    procedure FeatureRevolve(angle: Double; reverseDir: WordBool; angle2: Double; revType: Integer); dispid 10;
    procedure FeatureRevolveCut(angle: Double; reverseDir: WordBool; angle2: Double; 
                                revType: Integer); dispid 11;
    function GetTessTriangles(noConversion: WordBool): OleVariant; dispid 12;
    function GetTessNorms: OleVariant; dispid 13;
    function GetProcessedBody: IDispatch; dispid 14;
    function IGetProcessedBody: IBody; dispid 57;
    function GetPartBox(noConversion: WordBool): OleVariant; dispid 15;
    function CreateNewBody: IDispatch; dispid 16;
    function ICreateNewBody: IBody; dispid 58;
    procedure EditRebuild; dispid 17;
    procedure Dummy17; dispid 18;
    procedure Dummy19; dispid 19;
    procedure ForceRebuild; dispid 20;
    procedure EditUnsuppressDependent; dispid 21;
    procedure EditRollforward; dispid 22;
    procedure InsertStockTurned; dispid 23;
    procedure EditUnsuppress; dispid 24;
    procedure MakeSection; dispid 25;
    procedure Dumpfacets; dispid 26;
    procedure FeatureStock; dispid 27;
    procedure EditRollback; dispid 28;
    procedure EditSuppress; dispid 29;
    function AddPropertyExtension(PropertyExtension: OleVariant): Integer; dispid 30;
    function GetPropertyExtension(id: Integer): OleVariant; dispid 31;
    procedure MirrorFeature; dispid 32;
    procedure ResetPropertyExtension; dispid 33;
    procedure Dummy1; dispid 34;
    procedure Dummy2; dispid 35;
    procedure Dummy3; dispid 36;
    procedure Dummy4; dispid 37;
    procedure Dummy5; dispid 38;
    procedure Dummy6; dispid 39;
    procedure Dummy7; dispid 40;
    procedure Dummy8; dispid 41;
    procedure Dummy9; dispid 42;
    procedure Dummy10; dispid 43;
    procedure Dummy11; dispid 44;
    procedure Dummy12; dispid 45;
    procedure Dummy13; dispid 46;
    procedure Dummy14; dispid 47;
    procedure Dummy15; dispid 48;
    procedure Dummy16; dispid 49;
    function GetProcessedBodyWithSelFace: IDispatch; dispid 50;
    function IGetProcessedBodyWithSelFace: IBody; dispid 59;
    function GetTessTriStrips(noConversion: WordBool): OleVariant; dispid 51;
    function GetTessTriStripNorms: OleVariant; dispid 52;
    procedure MirrorPart; dispid 60;
    function IGetTessTriangles(noConversion: WordBool): Single; dispid 61;
    function IGetTessNorms: Single; dispid 62;
    function GetTessTriangleCount: Integer; dispid 63;
    function IGetPartBox(noConversion: WordBool): Double; dispid 64;
    function IGetTessTriStrips(noConversion: WordBool): Single; dispid 65;
    function IGetTessTriStripNorms: Single; dispid 66;
    function GetTessTriStripSize: Integer; dispid 67;
    function GetEntityByName(const Name: WideString; entityType: Integer): IDispatch; dispid 68;
    function IGetEntityByName(const Name: WideString; entityType: Integer): IEntity; dispid 69;
    function GetEntityName(const entity: IDispatch): WideString; dispid 70;
    function IGetEntityName(const entity: IEntity): WideString; dispid 71;
    function SetEntityName(const entity: IDispatch; const StringValue: WideString): WordBool; dispid 72;
    function ISetEntityName(const entity: IEntity; const StringValue: WideString): WordBool; dispid 73;
    function ReorderFeature(const featureToMove: WideString; const moveAfterFeature: WideString): WordBool; dispid 74;
    function EnumRelatedBodies: IEnumBodies; dispid 75;
    function GetSectionedBody(const viewIn: IDispatch): IDispatch; dispid 76;
    function IGetSectionedBody(const viewIn: IModelView): IBody; dispid 77;
    function EnumRelatedSectionedBodies(const viewIn: IModelView): IEnumBodies; dispid 78;
    function IMaterialPropertyValues: Double; dispid 79;
    procedure FeatureRevolveThin(angle: Double; reverseDir: WordBool; angle2: Double; 
                                 revType: Integer; thickness1: Double; thickness2: Double; 
                                 reverseThinDir: Integer); dispid 80;
    procedure FeatureRevolveThinCut(angle: Double; reverseDir: WordBool; angle2: Double; 
                                    revType: Integer; thickness1: Double; thickness2: Double; 
                                    reverseThinDir: Integer); dispid 81;
    procedure FeatureExtrusionThin(sd: WordBool; flip: WordBool; dir: WordBool; t1: Integer; 
                                   t2: Integer; d1: Double; d2: Double; dchk1: WordBool; 
                                   dchk2: WordBool; ddir1: WordBool; ddir2: WordBool; 
                                   dang1: Double; dang2: Double; offsetReverse1: WordBool; 
                                   offsetReverse2: WordBool; thk1: Double; thk2: Double; 
                                   endThk: Double; revThinDir: Integer; capEnds: Integer; 
                                   addBends: WordBool; bendRad: Double); dispid 82;
    function InsertBends(radius: Double; const useBendTable: WideString; useKfactor: Double; 
                         useBendAllowance: Double; useAutoRelief: WordBool; offsetRatio: Double): WordBool; dispid 83;
    function CreateFeatureFromBody(const Body: IDispatch): IDispatch; dispid 84;
    function ICreateFeatureFromBody(const Body: IBody): IFeature; dispid 85;
    function CreateFeatureFromBody2(const Body: IDispatch; makeRefSurface: WordBool): IDispatch; dispid 86;
    function ICreateFeatureFromBody2(const Body: IBody; makeRefSurface: WordBool): IFeature; dispid 87;
    function ImportDiagnosis(closeAllGaps: WordBool; removeFaces: WordBool; fixFaces: WordBool; 
                             options: Integer): Integer; dispid 88;
    function DeleteEntityName(const entity: IDispatch): WordBool; dispid 89;
    function IDeleteEntityName(const entity: IEntity): WordBool; dispid 90;
    function GetTessTriStripEdges: OleVariant; dispid 91;
    function IGetTessTriStripEdges: Integer; dispid 92;
    function IGetTessTriStripEdgeSize: Integer; dispid 93;
    function EnumBodies(bodyType: Integer): IEnumBodies; dispid 94;
    function GetBodies(bodyType: Integer): OleVariant; dispid 95;
    function GetRelatedBodies: OleVariant; dispid 96;
    function GetRelatedSectionedBodies(const viewIn: IDispatch): OleVariant; dispid 97;
    function InsertBends2(radius: Double; const useBendTable: WideString; useKfactor: Double; 
                          useBendAllowance: Double; useAutoRelief: WordBool; offsetRatio: Double; 
                          doFlatten: WordBool): WordBool; dispid 98;
    function CreateFeatureFromBody3(const Body: IDispatch; makeRefSurface: WordBool; 
                                    options: Integer): IDispatch; dispid 99;
    function ICreateFeatureFromBody3(const Body: IBody; makeRefSurface: WordBool; options: Integer): IFeature; dispid 100;
    function GetMateReferenceEntity: IDispatch; dispid 101;
    procedure FeatureExtrusion2(sd: WordBool; flip: WordBool; dir: WordBool; t1: Integer; 
                                t2: Integer; d1: Double; d2: Double; dchk1: WordBool; 
                                dchk2: WordBool; ddir1: WordBool; ddir2: WordBool; dang1: Double; 
                                dang2: Double; offsetReverse1: WordBool; offsetReverse2: WordBool; 
                                merge: WordBool); dispid 102;
    procedure FeatureExtrusionThin2(sd: WordBool; flip: WordBool; dir: WordBool; t1: Integer; 
                                    t2: Integer; d1: Double; d2: Double; dchk1: WordBool; 
                                    dchk2: WordBool; ddir1: WordBool; ddir2: WordBool; 
                                    dang1: Double; dang2: Double; offsetReverse1: WordBool; 
                                    offsetReverse2: WordBool; merge: WordBool; thk1: Double; 
                                    thk2: Double; endThk: Double; revThinDir: Integer; 
                                    capEnds: Integer; addBends: WordBool; bendRad: Double); dispid 103;
    function CreateSurfaceFeatureFromBody(const Body: IDispatch; options: Integer): OleVariant; dispid 104;
    function ICreateSurfaceFeatureFromBodyCount(const Body: IBody; options: Integer): Integer; dispid 105;
    function ICreateSurfaceFeatureFromBody: IFeature; dispid 106;
    function IBodyObject2: IBody2; dispid 107;
    function IGetProcessedBody2: IBody2; dispid 108;
    function ICreateNewBody2: IBody2; dispid 109;
    function IGetProcessedBodyWithSelFace2: IBody2; dispid 110;
    function IGetSectionedBody2(const viewIn: IModelView): IBody2; dispid 111;
    function ICreateFeatureFromBody4(const Body: IBody2; makeRefSurface: WordBool; options: Integer): IFeature; dispid 112;
    function ICreateSurfaceFeatureFromBodyCount2(const Body: IBody2; options: Integer): Integer; dispid 113;
    function EnumRelatedBodies2: IEnumBodies2; dispid 114;
    function EnumRelatedSectionedBodies2(const viewIn: IModelView): IEnumBodies2; dispid 115;
    function EnumBodies2(bodyType: Integer): IEnumBodies2; dispid 116;
    function GetNamedEntitiesCount: Integer; dispid 117;
    function GetNamedEntities: OleVariant; dispid 118;
    function IGetNamedEntities(count: Integer): IEntity; dispid 119;
    function GetCorrespondingEntity(const entity: IDispatch): IDispatch; dispid 120;
    function IGetCorrespondingEntity(const pEntity: IEntity): IEntity; dispid 121;
    function InsertBasePart(const fileName: WideString): WordBool; dispid 122;
    procedure FeatureExtrusion3(sd: WordBool; flip: WordBool; dir: WordBool; t1: Integer; 
                                t2: Integer; d1: Double; d2: Double; dchk1: WordBool; 
                                dchk2: WordBool; ddir1: WordBool; ddir2: WordBool; dang1: Double; 
                                dang2: Double; offsetReverse1: WordBool; offsetReverse2: WordBool; 
                                translateSurface1: WordBool; translateSurface2: WordBool; 
                                merge: WordBool); dispid 123;
    procedure FeatureExtrusionThin3(sd: WordBool; flip: WordBool; dir: WordBool; t1: Integer; 
                                    t2: Integer; d1: Double; d2: Double; dchk1: WordBool; 
                                    dchk2: WordBool; ddir1: WordBool; ddir2: WordBool; 
                                    dang1: Double; dang2: Double; offsetReverse1: WordBool; 
                                    offsetReverse2: WordBool; translateSurface1: WordBool; 
                                    translateSurface2: WordBool; merge: WordBool; thk1: Double; 
                                    thk2: Double; endThk: Double; revThinDir: Integer; 
                                    capEnds: Integer; addBends: WordBool; bendRad: Double); dispid 124;
    function InsertMirrorFeature(GeometryPattern: WordBool): WordBool; dispid 125;
    function InsertMirrorAll: WordBool; dispid 126;
    procedure FeatureRevolve2(angle: Double; reverseDir: WordBool; angle2: Double; 
                              revType: Integer; merge: WordBool); dispid 127;
    procedure FeatureRevolveThin2(angle: Double; reverseDir: WordBool; angle2: Double; 
                                  revType: Integer; thickness1: Double; thickness2: Double; 
                                  reverseThinDir: Integer; merge: WordBool); dispid 128;
    function InsertCombineFeature(operationType: Integer; const mainBody: IDispatch; 
                                  toolVar: OleVariant): WordBool; dispid 129;
    function IInsertCombineFeature(operationType: Integer; const mainBody: IBody2; 
                                   toolsCount: Integer; var toolsArr: IBody2): WordBool; dispid 130;
    function EnumBodies3(bodyType: Integer; bVisibleOnly: WordBool): IEnumBodies2; dispid 131;
    function GetBodies2(bodyType: Integer; bVisibleOnly: WordBool): OleVariant; dispid 132;
    procedure SetLineStyle(const styleName: WideString); dispid 133;
    procedure SetLineWidth(width: Integer); dispid 134;
    procedure SetLineColor(Color: Integer); dispid 135;
    function InsertPart(const fileName: WideString; ImportPlane: WordBool; ImportAxis: WordBool; 
                        ImportCThread: WordBool): IFeature; dispid 136;
  end;

// *********************************************************************//
// Interface: IEnumBodies
// Flags:     (272) Hidden OleAutomation
// GUID:      {83A33D96-27C5-11CE-BFD4-00400513BB57}
// *********************************************************************//
  IEnumBodies = interface(IUnknown)
    ['{83A33D96-27C5-11CE-BFD4-00400513BB57}']
    function Next(celt: Integer; out rgelt: IBody; var pceltFetched: Integer): HResult; stdcall;
    function Skip(celt: Integer): HResult; stdcall;
    function Reset: HResult; stdcall;
    function Clone(out ppenum: IEnumBodies): HResult; stdcall;
  end;

// *********************************************************************//
// Interface: ITessellation
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {699C7492-DB56-4CC2-B7A2-9FFD56698434}
// *********************************************************************//
  ITessellation = interface(IDispatch)
    ['{699C7492-DB56-4CC2-B7A2-9FFD56698434}']
    function Get_MaxFacetWidth: Double; safecall;
    procedure Set_MaxFacetWidth(maxWidth: Double); safecall;
    function Get_CurveChordTolerance: Double; safecall;
    procedure Set_CurveChordTolerance(tolerance: Double); safecall;
    function Get_CurveChordAngleTolerance: Double; safecall;
    procedure Set_CurveChordAngleTolerance(tolerance: Double); safecall;
    function Get_SurfacePlaneTolerance: Double; safecall;
    procedure Set_SurfacePlaneTolerance(tolerance: Double); safecall;
    function Get_SurfacePlaneAngleTolerance: Double; safecall;
    procedure Set_SurfacePlaneAngleTolerance(tolerance: Double); safecall;
    function Get_NeedVertexNormal: WordBool; safecall;
    procedure Set_NeedVertexNormal(option: WordBool); safecall;
    function Get_NeedVertexParams: WordBool; safecall;
    procedure Set_NeedVertexParams(option: WordBool); safecall;
    function Get_NeedFaceFacetMap: WordBool; safecall;
    procedure Set_NeedFaceFacetMap(option: WordBool); safecall;
    function Get_NeedEdgeFinMap: WordBool; safecall;
    procedure Set_NeedEdgeFinMap(option: WordBool); safecall;
    function Get_NeedErrorList: WordBool; safecall;
    procedure Set_NeedErrorList(option: WordBool); safecall;
    function Tessellate: WordBool; safecall;
    function GetFacetCount: Integer; safecall;
    function GetFinCount: Integer; safecall;
    function GetVertexCount: Integer; safecall;
    function GetFacetFins(facetId: Integer): OleVariant; safecall;
    function IGetFacetFinsCount(facetId: Integer): Integer; safecall;
    function IGetFacetFins(facetId: Integer): Integer; safecall;
    function GetFinCoFin(finId: Integer): Integer; safecall;
    function GetFinVertices(finId: Integer): OleVariant; safecall;
    function IGetFinVertices(finId: Integer): Integer; safecall;
    function GetVertexPoint(vertexId: Integer): OleVariant; safecall;
    function IGetVertexPoint(vertexId: Integer): Double; safecall;
    function GetVertexNormal(vertexId: Integer): OleVariant; safecall;
    function IGetVertexNormal(vertexId: Integer): Double; safecall;
    function GetVertexParams(vertexId: Integer): OleVariant; safecall;
    function IGetVertexParams(vertexId: Integer): Double; safecall;
    function GetFaceFacets(const facedisp: IDispatch): OleVariant; safecall;
    function IGetFaceFacetsCount(const faceObj: IFace): Integer; safecall;
    function IGetFaceFacets(const faceObj: IFace): Integer; safecall;
    function GetFacetFace(facetId: Integer): IDispatch; safecall;
    function IGetFacetFace(facetId: Integer): IFace; safecall;
    function GetEdgeFins(const edgeDisp: IDispatch): OleVariant; safecall;
    function IGetEdgeFinsCount(const edgeObj: IEdge): Integer; safecall;
    function IGetEdgeFins(const edgeObj: IEdge): Integer; safecall;
    function GetFinEdge(finId: Integer): IDispatch; safecall;
    function IGetFinEdge(finId: Integer): IEdge; safecall;
    procedure GetErrorList(out faceErrArray: OleVariant; out facetErrArray: OleVariant; 
                           out vertexPointErrArray: OleVariant; 
                           out vertexNormalErrArray: OleVariant; 
                           out vertexParamsErrArray: OleVariant); safecall;
    procedure IGetErrorListCount(out faceErrArrayCount: Integer; out facetErrArrayCount: Integer; 
                                 out vertexPointErrArrayCount: Integer; 
                                 out vertexNormalErrArrayCount: Integer; 
                                 out vertexParamsErrArrayCount: Integer); safecall;
    procedure IGetErrorList(out faceErrArray: IFace; out facetErrArray: Integer; 
                            out vertexPointErrArray: Integer; out vertexNormalErrArray: Integer; 
                            out vertexParamsErrArray: Integer); safecall;
    function IGetFaceFacetsCount2(const faceObj: IFace2): Integer; safecall;
    function IGetFaceFacets2(const faceObj: IFace2): Integer; safecall;
    function IGetFacetFace2(facetId: Integer): IFace2; safecall;
    procedure IGetErrorList2(out faceErrArray: IFace2; out facetErrArray: Integer; 
                             out vertexPointErrArray: Integer; out vertexNormalErrArray: Integer; 
                             out vertexParamsErrArray: Integer); safecall;
    function Get_MinFacetWidth: Double; safecall;
    procedure Set_MinFacetWidth(minWidth: Double); safecall;
    property MaxFacetWidth: Double read Get_MaxFacetWidth write Set_MaxFacetWidth;
    property CurveChordTolerance: Double read Get_CurveChordTolerance write Set_CurveChordTolerance;
    property CurveChordAngleTolerance: Double read Get_CurveChordAngleTolerance write Set_CurveChordAngleTolerance;
    property SurfacePlaneTolerance: Double read Get_SurfacePlaneTolerance write Set_SurfacePlaneTolerance;
    property SurfacePlaneAngleTolerance: Double read Get_SurfacePlaneAngleTolerance write Set_SurfacePlaneAngleTolerance;
    property NeedVertexNormal: WordBool read Get_NeedVertexNormal write Set_NeedVertexNormal;
    property NeedVertexParams: WordBool read Get_NeedVertexParams write Set_NeedVertexParams;
    property NeedFaceFacetMap: WordBool read Get_NeedFaceFacetMap write Set_NeedFaceFacetMap;
    property NeedEdgeFinMap: WordBool read Get_NeedEdgeFinMap write Set_NeedEdgeFinMap;
    property NeedErrorList: WordBool read Get_NeedErrorList write Set_NeedErrorList;
    property MinFacetWidth: Double read Get_MinFacetWidth write Set_MinFacetWidth;
  end;

// *********************************************************************//
// DispIntf:  ITessellationDisp
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {699C7492-DB56-4CC2-B7A2-9FFD56698434}
// *********************************************************************//
  ITessellationDisp = dispinterface
    ['{699C7492-DB56-4CC2-B7A2-9FFD56698434}']
    property MaxFacetWidth: Double dispid 1;
    property CurveChordTolerance: Double dispid 2;
    property CurveChordAngleTolerance: Double dispid 3;
    property SurfacePlaneTolerance: Double dispid 4;
    property SurfacePlaneAngleTolerance: Double dispid 5;
    property NeedVertexNormal: WordBool dispid 6;
    property NeedVertexParams: WordBool dispid 7;
    property NeedFaceFacetMap: WordBool dispid 8;
    property NeedEdgeFinMap: WordBool dispid 9;
    property NeedErrorList: WordBool dispid 10;
    function Tessellate: WordBool; dispid 11;
    function GetFacetCount: Integer; dispid 12;
    function GetFinCount: Integer; dispid 13;
    function GetVertexCount: Integer; dispid 14;
    function GetFacetFins(facetId: Integer): OleVariant; dispid 15;
    function IGetFacetFinsCount(facetId: Integer): Integer; dispid 16;
    function IGetFacetFins(facetId: Integer): Integer; dispid 17;
    function GetFinCoFin(finId: Integer): Integer; dispid 18;
    function GetFinVertices(finId: Integer): OleVariant; dispid 19;
    function IGetFinVertices(finId: Integer): Integer; dispid 20;
    function GetVertexPoint(vertexId: Integer): OleVariant; dispid 21;
    function IGetVertexPoint(vertexId: Integer): Double; dispid 22;
    function GetVertexNormal(vertexId: Integer): OleVariant; dispid 23;
    function IGetVertexNormal(vertexId: Integer): Double; dispid 24;
    function GetVertexParams(vertexId: Integer): OleVariant; dispid 25;
    function IGetVertexParams(vertexId: Integer): Double; dispid 26;
    function GetFaceFacets(const facedisp: IDispatch): OleVariant; dispid 27;
    function IGetFaceFacetsCount(const faceObj: IFace): Integer; dispid 28;
    function IGetFaceFacets(const faceObj: IFace): Integer; dispid 29;
    function GetFacetFace(facetId: Integer): IDispatch; dispid 30;
    function IGetFacetFace(facetId: Integer): IFace; dispid 31;
    function GetEdgeFins(const edgeDisp: IDispatch): OleVariant; dispid 32;
    function IGetEdgeFinsCount(const edgeObj: IEdge): Integer; dispid 33;
    function IGetEdgeFins(const edgeObj: IEdge): Integer; dispid 34;
    function GetFinEdge(finId: Integer): IDispatch; dispid 35;
    function IGetFinEdge(finId: Integer): IEdge; dispid 36;
    procedure GetErrorList(out faceErrArray: OleVariant; out facetErrArray: OleVariant; 
                           out vertexPointErrArray: OleVariant; 
                           out vertexNormalErrArray: OleVariant; 
                           out vertexParamsErrArray: OleVariant); dispid 37;
    procedure IGetErrorListCount(out faceErrArrayCount: Integer; out facetErrArrayCount: Integer; 
                                 out vertexPointErrArrayCount: Integer; 
                                 out vertexNormalErrArrayCount: Integer; 
                                 out vertexParamsErrArrayCount: Integer); dispid 38;
    procedure IGetErrorList(out faceErrArray: IFace; out facetErrArray: Integer; 
                            out vertexPointErrArray: Integer; out vertexNormalErrArray: Integer; 
                            out vertexParamsErrArray: Integer); dispid 39;
    function IGetFaceFacetsCount2(const faceObj: IFace2): Integer; dispid 40;
    function IGetFaceFacets2(const faceObj: IFace2): Integer; dispid 41;
    function IGetFacetFace2(facetId: Integer): IFace2; dispid 42;
    procedure IGetErrorList2(out faceErrArray: IFace2; out facetErrArray: Integer; 
                             out vertexPointErrArray: Integer; out vertexNormalErrArray: Integer; 
                             out vertexParamsErrArray: Integer); dispid 43;
    property MinFacetWidth: Double dispid 44;
  end;

// *********************************************************************//
// Interface: IEnumLoops
// Flags:     (272) Hidden OleAutomation
// GUID:      {83A33D5D-27C5-11CE-BFD4-00400513BB57}
// *********************************************************************//
  IEnumLoops = interface(IUnknown)
    ['{83A33D5D-27C5-11CE-BFD4-00400513BB57}']
    function Next(celt: Integer; out rgelt: ILoop; var pceltFetched: Integer): HResult; stdcall;
    function Skip(celt: Integer): HResult; stdcall;
    function Reset: HResult; stdcall;
    function Clone(out ppenum: IEnumLoops): HResult; stdcall;
  end;

// *********************************************************************//
// Interface: IEnumFaces
// Flags:     (272) Hidden OleAutomation
// GUID:      {83A33D5B-27C5-11CE-BFD4-00400513BB57}
// *********************************************************************//
  IEnumFaces = interface(IUnknown)
    ['{83A33D5B-27C5-11CE-BFD4-00400513BB57}']
    function Next(celt: Integer; out rgelt: IFace; var pceltFetched: Integer): HResult; stdcall;
    function Skip(celt: Integer): HResult; stdcall;
    function Reset: HResult; stdcall;
    function Clone(out ppenum: IEnumFaces): HResult; stdcall;
  end;

// *********************************************************************//
// Interface: IView
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {83A33D50-27C5-11CE-BFD4-00400513BB57}
// *********************************************************************//
  IView = interface(IDispatch)
    ['{83A33D50-27C5-11CE-BFD4-00400513BB57}']
    function Get_suppressState: Integer; safecall;
    procedure Set_suppressState(retval: Integer); safecall;
    function GetNextView: IDispatch; safecall;
    function IGetNextView: IView; safecall;
    function GetLines: OleVariant; safecall;
    function GetOutline: OleVariant; safecall;
    function GetXform: OleVariant; safecall;
    function GetArcs: OleVariant; safecall;
    function GetUserPoints: OleVariant; safecall;
    function GetPolylines: OleVariant; safecall;
    function GetSplines: OleVariant; safecall;
    function GetDimensionInfo: OleVariant; safecall;
    function GetDimensionString: OleVariant; safecall;
    function GetFirstNote: IDispatch; safecall;
    function IGetFirstNote: INote; safecall;
    function GetFirstGTOL: IDispatch; safecall;
    function IGetFirstGTOL: IGtol; safecall;
    function IGetLines: Double; safecall;
    function IGetOutline: Double; safecall;
    function IGetXform: Double; safecall;
    function IGetArcs: Double; safecall;
    function IGetUserPoints: Double; safecall;
    function IGetPolylines: Double; safecall;
    function IGetSplines: Double; safecall;
    function IGetDimensionInfo: Double; safecall;
    function IGetDimensionString: WideString; safecall;
    function GetLineCount: Integer; safecall;
    function GetArcCount: Integer; safecall;
    function GetUserPointsCount: Integer; safecall;
    function GetPolyLineCount(out PointCount: Integer): Integer; safecall;
    function GetSplineCount(out PointCount: Integer): Integer; safecall;
    function GetDimensionCount: Integer; safecall;
    function GetEllipses: OleVariant; safecall;
    function IGetEllipses: Double; safecall;
    function GetEllipseCount: Integer; safecall;
    function GetDisplayMode: Integer; safecall;
    procedure SetDisplayMode(displayIn: Integer); safecall;
    function GetDisplayTangentEdges: WordBool; safecall;
    procedure SetDisplayTangentEdges(displayIn: WordBool); safecall;
    function GetCenterMarkCount: Integer; safecall;
    function GetCenterMarkInfo: OleVariant; safecall;
    function IGetCenterMarkInfo: Double; safecall;
    function GetSectionLineCount(out size: Integer): Integer; safecall;
    function GetSectionLineInfo: OleVariant; safecall;
    function GetSectionLineStrings: OleVariant; safecall;
    function IGetSectionLineInfo: Double; safecall;
    function IGetSectionLineStrings: WideString; safecall;
    procedure UpdateViewDisplayGeometry; safecall;
    function GetDetailCircleCount: Integer; safecall;
    function GetDetailCircleInfo: OleVariant; safecall;
    function IGetDetailCircleInfo: Double; safecall;
    function GetDetailCircleStrings: OleVariant; safecall;
    function IGetDetailCircleStrings: WideString; safecall;
    function GetDimensionIds: OleVariant; safecall;
    function IGetDimensionIds: WideString; safecall;
    function GetDimensionDisplayInfo: OleVariant; safecall;
    function IGetDimensionDisplayInfo: Double; safecall;
    function GetDimensionDisplayString: OleVariant; safecall;
    function IGetDimensionDisplayString: WideString; safecall;
    function GetArcs2: OleVariant; safecall;
    function IGetArcs2: Double; safecall;
    function GetEllipses2: OleVariant; safecall;
    function IGetEllipses2: Double; safecall;
    function GetViewXform: OleVariant; safecall;
    function IGetViewXform: Double; safecall;
    function GetFirstSFSymbol: IDispatch; safecall;
    function IGetFirstSFSymbol: ISFSymbol; safecall;
    function GetFirstDatumTag: IDispatch; safecall;
    function IGetFirstDatumTag: IDatumTag; safecall;
    function GetFirstDatumTargetSym: IDispatch; safecall;
    function IGetFirstDatumTargetSym: IDatumTargetSym; safecall;
    function GetFirstWeldSymbol: IDispatch; safecall;
    function IGetFirstWeldSymbol: IWeldSymbol; safecall;
    function GetDatumPointsCount: Integer; safecall;
    function GetDatumPoints: OleVariant; safecall;
    function IGetDatumPoints: Double; safecall;
    procedure UseDefaultAlignment; safecall;
    procedure RemoveAlignment; safecall;
    procedure AlignVerticalTo(const viewNameIn: WideString); safecall;
    procedure AlignHorizontalTo(const viewNameIn: WideString); safecall;
    function GetDisplayData: IDispatch; safecall;
    function IGetDisplayData: IDisplayData; safecall;
    function GetPolyLineCount2(out PointCount: Integer): Integer; safecall;
    function GetPolylines2: OleVariant; safecall;
    function IGetPolylines2: Double; safecall;
    function ShowExploded(showIt: WordBool): WordBool; safecall;
    function IsExploded: WordBool; safecall;
    procedure Set_ReferencedConfiguration(const retval: WideString); safecall;
    function Get_ReferencedConfiguration: WideString; safecall;
    function GetFirstCThread: IDispatch; safecall;
    function IGetFirstCThread: ICThread; safecall;
    function CreateViewArrow(const drawingViewNameIn: WideString; const arrowNameIn: WideString): WordBool; safecall;
    procedure ModifyViewArrow(const drawingViewNameIn: WideString; const arrowNameIn: WideString); safecall;
    procedure MoveViewArrow(const drawingViewNameIn: WideString; dx: Double; dy: Double; dz: Double); safecall;
    function GetPolylines3: OleVariant; safecall;
    function IGetPolylines3: Double; safecall;
    function GetPolyLineCount3(out PointCount: Integer): Integer; safecall;
    function GetFirstDisplayDimension: IDispatch; safecall;
    function IGetFirstDisplayDimension: IDisplayDimension; safecall;
    function GetSketch: IDispatch; safecall;
    function IGetSketch: ISketch; safecall;
    function GetLines2: OleVariant; safecall;
    function IGetLines2: Double; safecall;
    function GetSplines2: OleVariant; safecall;
    function IGetSplines2: Double; safecall;
    function GetArcs3: OleVariant; safecall;
    function IGetArcs3: Double; safecall;
    function GetEllipses3: OleVariant; safecall;
    function IGetEllipses3: Double; safecall;
    function GetBomTable: IDispatch; safecall;
    function IGetBomTable: IBomTable; safecall;
    function Get_UseSheetScale: Integer; safecall;
    procedure Set_UseSheetScale(retval: Integer); safecall;
    function Get_ScaleDecimal: Double; safecall;
    procedure Set_ScaleDecimal(retval: Double); safecall;
    function Get_ScaleRatio: OleVariant; safecall;
    procedure Set_ScaleRatio(retval: OleVariant); safecall;
    function Get_IScaleRatio: Double; safecall;
    procedure Set_IScaleRatio(var retval: Double); safecall;
    function Get_position: OleVariant; safecall;
    procedure Set_position(retval: OleVariant); safecall;
    function Get_IPosition: Double; safecall;
    procedure Set_IPosition(var retval: Double); safecall;
    function SetXform(Transform: OleVariant): WordBool; safecall;
    function ISetXform(var Transform: Double): WordBool; safecall;
    function GetAlignment: Integer; safecall;
    function GetReferencedModelName: WideString; safecall;
    function GetFirstAnnotation: IDispatch; safecall;
    function IGetFirstAnnotation: IAnnotation; safecall;
    function GetFirstCustomSymbol: IDispatch; safecall;
    function IGetFirstCustomSymbol: ICustomSymbol; safecall;
    function GetDimensionInfo2: OleVariant; safecall;
    function IGetDimensionInfo2: Double; safecall;
    function GetParabolas: OleVariant; safecall;
    function IGetParabolas: Double; safecall;
    function GetParabolaCount: Integer; safecall;
    function GetEllipses4: OleVariant; safecall;
    function IGetEllipses4: Double; safecall;
    function GetLines3: OleVariant; safecall;
    function IGetLines3: Double; safecall;
    function GetArcs4: OleVariant; safecall;
    function IGetArcs4: Double; safecall;
    function GetSplines3: OleVariant; safecall;
    function IGetSplines3: Double; safecall;
    function GetEllipses5: OleVariant; safecall;
    function IGetEllipses5: Double; safecall;
    function GetParabolas2: OleVariant; safecall;
    function IGetParabolas2: Double; safecall;
    function GetUserPoints2: OleVariant; safecall;
    function IGetUserPoints2: Double; safecall;
    function GetDimensionInfo3: OleVariant; safecall;
    function IGetDimensionInfo3: Double; safecall;
    function GetDatumPoints2: OleVariant; safecall;
    function IGetDatumPoints2: Double; safecall;
    function Get_Name: WideString; safecall;
    function Get_type_: Integer; safecall;
    function Get_ProjectedDimensions: WordBool; safecall;
    procedure Set_ProjectedDimensions(retval: WordBool); safecall;
    function HasDesignTable: WordBool; safecall;
    function GetDesignTableExtent: OleVariant; safecall;
    function IGetDesignTableExtent: Double; safecall;
    function GetDisplayData2: IDispatch; safecall;
    function IGetDisplayData2: IDisplayData; safecall;
    function GetFirstAnnotation2: IDispatch; safecall;
    function IGetFirstAnnotation2: IAnnotation; safecall;
    function GetDimensionCount2: Integer; safecall;
    function GetDimensionInfo4: OleVariant; safecall;
    function IGetDimensionInfo4: Double; safecall;
    function GetDimensionString2: OleVariant; safecall;
    function IGetDimensionString2: WideString; safecall;
    function GetDimensionIds2: OleVariant; safecall;
    function IGetDimensionIds2: WideString; safecall;
    function GetDimensionDisplayInfo2: OleVariant; safecall;
    function IGetDimensionDisplayInfo2: Double; safecall;
    function GetDimensionDisplayString2: OleVariant; safecall;
    function IGetDimensionDisplayString2: WideString; safecall;
    function GetFirstDisplayDimension2: IDispatch; safecall;
    function IGetFirstDisplayDimension2: IDisplayDimension; safecall;
    function GetPolylines4: OleVariant; safecall;
    function IGetPolylines4: Double; safecall;
    function GetPolyLineCount4(out PointCount: Integer): Integer; safecall;
    function IsModelLoaded: WordBool; safecall;
    function LoadModel: Integer; safecall;
    function GetDisplayTangentEdges2: Integer; safecall;
    procedure SetDisplayTangentEdges2(displayIn: Integer); safecall;
    function GetSectionLines: OleVariant; safecall;
    function IGetSectionLines: IDrSection; safecall;
    function GetSection: IDispatch; safecall;
    function IGetSection: IDrSection; safecall;
    function GetHiddenComponents: OleVariant; safecall;
    function EnumHiddenComponents: IEnumComponents; safecall;
    function EnumSectionLines: IEnumDrSections; safecall;
    function GetDisplayData3: IDispatch; safecall;
    function IGetDisplayData3: IDisplayData; safecall;
    function GetDimensionCount3: Integer; safecall;
    function GetDimensionInfo5: OleVariant; safecall;
    function IGetDimensionInfo5: Double; safecall;
    function GetDimensionString3: OleVariant; safecall;
    function IGetDimensionString3: WideString; safecall;
    function GetDimensionIds3: OleVariant; safecall;
    function IGetDimensionIds3: WideString; safecall;
    function GetDimensionDisplayInfo3: OleVariant; safecall;
    function IGetDimensionDisplayInfo3: Double; safecall;
    function GetDimensionDisplayString3: OleVariant; safecall;
    function IGetDimensionDisplayString3: WideString; safecall;
    function GetFirstDisplayDimension3: IDispatch; safecall;
    function IGetFirstDisplayDimension3: IDisplayDimension; safecall;
    function IsCropped: WordBool; safecall;
    function Get_angle: Double; safecall;
    procedure Set_angle(retval: Double); safecall;
    function GetDetailCircles: OleVariant; safecall;
    function IGetDetailCircles(NumDetailCircles: Integer): IDetailCircle; safecall;
    function GetProjectionArrow: IDispatch; safecall;
    function IGetProjectionArrow: IProjectionArrow; safecall;
    function GetDetail: IDispatch; safecall;
    function IGetDetail: IDetailCircle; safecall;
    function GetBaseView: IDispatch; safecall;
    function IGetBaseView: IView; safecall;
    function EnumHiddenComponents2: IEnumComponents2; safecall;
    function GetFirstMultiJogLeader: IDispatch; safecall;
    function IGetFirstMultiJogLeader: IMultiJogLeader; safecall;
    function GetVisible: WordBool; safecall;
    procedure SetVisible(Visible: WordBool; dependentsToo: WordBool); safecall;
    function GetFirstDowelSymbol: IDispatch; safecall;
    function IGetFirstDowelSymbol: IDowelSymbol; safecall;
    function InsertBomTable(const Template: WideString; Xloc: Double; Yloc: Double; 
                            var Errors: Integer): IDispatch; safecall;
    function IInsertBomTable(const Template: WideString; Xloc: Double; Yloc: Double; 
                             var Errors: Integer): IBomTable; safecall;
    function SelectEntity(const entity: IDispatch; appendFlag: WordBool): WordBool; safecall;
    function ISelectEntity(const entity: IEntity; appendFlag: WordBool): WordBool; safecall;
    function IsModelOutOfDate: WordBool; safecall;
    function Get_ModelToViewTransform: IMathTransform; safecall;
    procedure Set_ModelToViewTransform(const xform: IMathTransform); safecall;
    function GetDisplayMode2: Integer; safecall;
    function GetFacettedHlrDisplay: WordBool; safecall;
    function GetDisplayEdgesInShadedMode: WordBool; safecall;
    function SetDisplayMode2(mode: Integer; Facetted: WordBool; edges: WordBool): WordBool; safecall;
    function GetPolylines5(crossHatchOption: Smallint): OleVariant; safecall;
    function IGetPolylines5(crossHatchOption: Smallint; arraySize: Integer): Double; safecall;
    function GetPolyLineCount5(crossHatchOption: Smallint; out PointCount: Integer): Integer; safecall;
    function GetLineCount2(crossHatchOption: Smallint): Integer; safecall;
    function GetLines4(crossHatchOption: Smallint): OleVariant; safecall;
    function IGetLines4(crossHatchOption: Smallint; arraySize: Integer): Double; safecall;
    function GetFirstBlockInstance: IBlockInstance; safecall;
    function GetSectionLineCount2(out size: Integer): Integer; safecall;
    function GetSectionLineInfo2: OleVariant; safecall;
    function IGetSectionLineInfo2(arraySize: Integer): Double; safecall;
    function GetDetailCircleCount2(out size: Integer): Integer; safecall;
    function GetDetailCircleInfo2: OleVariant; safecall;
    function IGetDetailCircleInfo2(arraySize: Integer): Double; safecall;
    function IsBroken: WordBool; safecall;
    function GetBreakLineCount(out size: Integer): Integer; safecall;
    function GetBreakLines: OleVariant; safecall;
    function IGetBreakLines(count: Integer): IBreakLine; safecall;
    function InsertBreak(Orientation: Integer; Position1: Double; Position2: Double; Style: Integer): IBreakLine; safecall;
    function GetBreakLineInfo: OleVariant; safecall;
    function IGetBreakLineInfo(arraySize: Integer): Double; safecall;
    function GetFaceHatchCount: Integer; safecall;
    function GetFaceHatches: OleVariant; safecall;
    function IGetFaceHatches(numFacesHatches: Integer): IFaceHatch; safecall;
    function GetCenterMarkCount2(var size: Integer): Integer; safecall;
    function GetCenterMarks: OleVariant; safecall;
    function IGetCenterMarks(count: Integer): ICenterMark; safecall;
    function GetFirstCenterMark: ICenterMark; safecall;
    function GetCenterLineSketch: ISketch; safecall;
    function GetDimensionDisplayInfoSize: Integer; safecall;
    function GetDimensionDisplayInfo4: OleVariant; safecall;
    function IGetDimensionDisplayInfo4(arraySize: Integer): Double; safecall;
    property suppressState: Integer read Get_suppressState write Set_suppressState;
    property ReferencedConfiguration: WideString read Get_ReferencedConfiguration write Set_ReferencedConfiguration;
    property UseSheetScale: Integer read Get_UseSheetScale write Set_UseSheetScale;
    property ScaleDecimal: Double read Get_ScaleDecimal write Set_ScaleDecimal;
    property ScaleRatio: OleVariant read Get_ScaleRatio write Set_ScaleRatio;
    property position: OleVariant read Get_position write Set_position;
    property Name: WideString read Get_Name;
    property type_: Integer read Get_type_;
    property ProjectedDimensions: WordBool read Get_ProjectedDimensions write Set_ProjectedDimensions;
    property angle: Double read Get_angle write Set_angle;
    property ModelToViewTransform: IMathTransform read Get_ModelToViewTransform write Set_ModelToViewTransform;
  end;

// *********************************************************************//
// DispIntf:  IViewDisp
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {83A33D50-27C5-11CE-BFD4-00400513BB57}
// *********************************************************************//
  IViewDisp = dispinterface
    ['{83A33D50-27C5-11CE-BFD4-00400513BB57}']
    property suppressState: Integer dispid 16;
    function GetNextView: IDispatch; dispid 1;
    function IGetNextView: IView; dispid 13;
    function GetLines: OleVariant; dispid 2;
    function GetOutline: OleVariant; dispid 3;
    function GetXform: OleVariant; dispid 4;
    function GetArcs: OleVariant; dispid 5;
    function GetUserPoints: OleVariant; dispid 6;
    function GetPolylines: OleVariant; dispid 7;
    function GetSplines: OleVariant; dispid 8;
    function GetDimensionInfo: OleVariant; dispid 9;
    function GetDimensionString: OleVariant; dispid 10;
    function GetFirstNote: IDispatch; dispid 11;
    function IGetFirstNote: INote; dispid 14;
    function GetFirstGTOL: IDispatch; dispid 12;
    function IGetFirstGTOL: IGtol; dispid 15;
    function IGetLines: Double; dispid 17;
    function IGetOutline: Double; dispid 18;
    function IGetXform: Double; dispid 19;
    function IGetArcs: Double; dispid 20;
    function IGetUserPoints: Double; dispid 21;
    function IGetPolylines: Double; dispid 22;
    function IGetSplines: Double; dispid 23;
    function IGetDimensionInfo: Double; dispid 24;
    function IGetDimensionString: WideString; dispid 25;
    function GetLineCount: Integer; dispid 26;
    function GetArcCount: Integer; dispid 27;
    function GetUserPointsCount: Integer; dispid 28;
    function GetPolyLineCount(out PointCount: Integer): Integer; dispid 29;
    function GetSplineCount(out PointCount: Integer): Integer; dispid 30;
    function GetDimensionCount: Integer; dispid 31;
    function GetEllipses: OleVariant; dispid 32;
    function IGetEllipses: Double; dispid 33;
    function GetEllipseCount: Integer; dispid 34;
    function GetDisplayMode: Integer; dispid 35;
    procedure SetDisplayMode(displayIn: Integer); dispid 36;
    function GetDisplayTangentEdges: WordBool; dispid 37;
    procedure SetDisplayTangentEdges(displayIn: WordBool); dispid 38;
    function GetCenterMarkCount: Integer; dispid 39;
    function GetCenterMarkInfo: OleVariant; dispid 40;
    function IGetCenterMarkInfo: Double; dispid 41;
    function GetSectionLineCount(out size: Integer): Integer; dispid 42;
    function GetSectionLineInfo: OleVariant; dispid 43;
    function GetSectionLineStrings: OleVariant; dispid 44;
    function IGetSectionLineInfo: Double; dispid 45;
    function IGetSectionLineStrings: WideString; dispid 46;
    procedure UpdateViewDisplayGeometry; dispid 47;
    function GetDetailCircleCount: Integer; dispid 48;
    function GetDetailCircleInfo: OleVariant; dispid 49;
    function IGetDetailCircleInfo: Double; dispid 50;
    function GetDetailCircleStrings: OleVariant; dispid 51;
    function IGetDetailCircleStrings: WideString; dispid 52;
    function GetDimensionIds: OleVariant; dispid 53;
    function IGetDimensionIds: WideString; dispid 54;
    function GetDimensionDisplayInfo: OleVariant; dispid 55;
    function IGetDimensionDisplayInfo: Double; dispid 56;
    function GetDimensionDisplayString: OleVariant; dispid 57;
    function IGetDimensionDisplayString: WideString; dispid 58;
    function GetArcs2: OleVariant; dispid 59;
    function IGetArcs2: Double; dispid 60;
    function GetEllipses2: OleVariant; dispid 61;
    function IGetEllipses2: Double; dispid 62;
    function GetViewXform: OleVariant; dispid 63;
    function IGetViewXform: Double; dispid 64;
    function GetFirstSFSymbol: IDispatch; dispid 65;
    function IGetFirstSFSymbol: ISFSymbol; dispid 66;
    function GetFirstDatumTag: IDispatch; dispid 67;
    function IGetFirstDatumTag: IDatumTag; dispid 68;
    function GetFirstDatumTargetSym: IDispatch; dispid 69;
    function IGetFirstDatumTargetSym: IDatumTargetSym; dispid 70;
    function GetFirstWeldSymbol: IDispatch; dispid 71;
    function IGetFirstWeldSymbol: IWeldSymbol; dispid 72;
    function GetDatumPointsCount: Integer; dispid 73;
    function GetDatumPoints: OleVariant; dispid 74;
    function IGetDatumPoints: Double; dispid 75;
    procedure UseDefaultAlignment; dispid 76;
    procedure RemoveAlignment; dispid 77;
    procedure AlignVerticalTo(const viewNameIn: WideString); dispid 78;
    procedure AlignHorizontalTo(const viewNameIn: WideString); dispid 79;
    function GetDisplayData: IDispatch; dispid 80;
    function IGetDisplayData: IDisplayData; dispid 81;
    function GetPolyLineCount2(out PointCount: Integer): Integer; dispid 82;
    function GetPolylines2: OleVariant; dispid 83;
    function IGetPolylines2: Double; dispid 84;
    function ShowExploded(showIt: WordBool): WordBool; dispid 85;
    function IsExploded: WordBool; dispid 86;
    property ReferencedConfiguration: WideString dispid 87;
    function GetFirstCThread: IDispatch; dispid 88;
    function IGetFirstCThread: ICThread; dispid 89;
    function CreateViewArrow(const drawingViewNameIn: WideString; const arrowNameIn: WideString): WordBool; dispid 90;
    procedure ModifyViewArrow(const drawingViewNameIn: WideString; const arrowNameIn: WideString); dispid 91;
    procedure MoveViewArrow(const drawingViewNameIn: WideString; dx: Double; dy: Double; dz: Double); dispid 92;
    function GetPolylines3: OleVariant; dispid 93;
    function IGetPolylines3: Double; dispid 94;
    function GetPolyLineCount3(out PointCount: Integer): Integer; dispid 95;
    function GetFirstDisplayDimension: IDispatch; dispid 96;
    function IGetFirstDisplayDimension: IDisplayDimension; dispid 97;
    function GetSketch: IDispatch; dispid 98;
    function IGetSketch: ISketch; dispid 99;
    function GetLines2: OleVariant; dispid 100;
    function IGetLines2: Double; dispid 101;
    function GetSplines2: OleVariant; dispid 102;
    function IGetSplines2: Double; dispid 103;
    function GetArcs3: OleVariant; dispid 104;
    function IGetArcs3: Double; dispid 105;
    function GetEllipses3: OleVariant; dispid 106;
    function IGetEllipses3: Double; dispid 107;
    function GetBomTable: IDispatch; dispid 108;
    function IGetBomTable: IBomTable; dispid 109;
    property UseSheetScale: Integer dispid 110;
    property ScaleDecimal: Double dispid 111;
    property ScaleRatio: OleVariant dispid 112;
    function IScaleRatio: Double; dispid 113;
    property position: OleVariant dispid 114;
    function IPosition: Double; dispid 115;
    function SetXform(Transform: OleVariant): WordBool; dispid 116;
    function ISetXform(var Transform: Double): WordBool; dispid 117;
    function GetAlignment: Integer; dispid 118;
    function GetReferencedModelName: WideString; dispid 119;
    function GetFirstAnnotation: IDispatch; dispid 120;
    function IGetFirstAnnotation: IAnnotation; dispid 121;
    function GetFirstCustomSymbol: IDispatch; dispid 122;
    function IGetFirstCustomSymbol: ICustomSymbol; dispid 123;
    function GetDimensionInfo2: OleVariant; dispid 124;
    function IGetDimensionInfo2: Double; dispid 125;
    function GetParabolas: OleVariant; dispid 126;
    function IGetParabolas: Double; dispid 127;
    function GetParabolaCount: Integer; dispid 128;
    function GetEllipses4: OleVariant; dispid 129;
    function IGetEllipses4: Double; dispid 130;
    function GetLines3: OleVariant; dispid 131;
    function IGetLines3: Double; dispid 132;
    function GetArcs4: OleVariant; dispid 133;
    function IGetArcs4: Double; dispid 134;
    function GetSplines3: OleVariant; dispid 135;
    function IGetSplines3: Double; dispid 136;
    function GetEllipses5: OleVariant; dispid 137;
    function IGetEllipses5: Double; dispid 138;
    function GetParabolas2: OleVariant; dispid 139;
    function IGetParabolas2: Double; dispid 140;
    function GetUserPoints2: OleVariant; dispid 141;
    function IGetUserPoints2: Double; dispid 142;
    function GetDimensionInfo3: OleVariant; dispid 143;
    function IGetDimensionInfo3: Double; dispid 144;
    function GetDatumPoints2: OleVariant; dispid 145;
    function IGetDatumPoints2: Double; dispid 146;
    property Name: WideString readonly dispid 147;
    property type_: Integer readonly dispid 148;
    property ProjectedDimensions: WordBool dispid 149;
    function HasDesignTable: WordBool; dispid 150;
    function GetDesignTableExtent: OleVariant; dispid 151;
    function IGetDesignTableExtent: Double; dispid 152;
    function GetDisplayData2: IDispatch; dispid 153;
    function IGetDisplayData2: IDisplayData; dispid 154;
    function GetFirstAnnotation2: IDispatch; dispid 155;
    function IGetFirstAnnotation2: IAnnotation; dispid 156;
    function GetDimensionCount2: Integer; dispid 157;
    function GetDimensionInfo4: OleVariant; dispid 158;
    function IGetDimensionInfo4: Double; dispid 159;
    function GetDimensionString2: OleVariant; dispid 160;
    function IGetDimensionString2: WideString; dispid 161;
    function GetDimensionIds2: OleVariant; dispid 162;
    function IGetDimensionIds2: WideString; dispid 163;
    function GetDimensionDisplayInfo2: OleVariant; dispid 164;
    function IGetDimensionDisplayInfo2: Double; dispid 165;
    function GetDimensionDisplayString2: OleVariant; dispid 166;
    function IGetDimensionDisplayString2: WideString; dispid 167;
    function GetFirstDisplayDimension2: IDispatch; dispid 168;
    function IGetFirstDisplayDimension2: IDisplayDimension; dispid 169;
    function GetPolylines4: OleVariant; dispid 170;
    function IGetPolylines4: Double; dispid 171;
    function GetPolyLineCount4(out PointCount: Integer): Integer; dispid 172;
    function IsModelLoaded: WordBool; dispid 173;
    function LoadModel: Integer; dispid 174;
    function GetDisplayTangentEdges2: Integer; dispid 175;
    procedure SetDisplayTangentEdges2(displayIn: Integer); dispid 176;
    function GetSectionLines: OleVariant; dispid 177;
    function IGetSectionLines: IDrSection; dispid 178;
    function GetSection: IDispatch; dispid 179;
    function IGetSection: IDrSection; dispid 180;
    function GetHiddenComponents: OleVariant; dispid 181;
    function EnumHiddenComponents: IEnumComponents; dispid 182;
    function EnumSectionLines: IEnumDrSections; dispid 183;
    function GetDisplayData3: IDispatch; dispid 184;
    function IGetDisplayData3: IDisplayData; dispid 185;
    function GetDimensionCount3: Integer; dispid 186;
    function GetDimensionInfo5: OleVariant; dispid 187;
    function IGetDimensionInfo5: Double; dispid 188;
    function GetDimensionString3: OleVariant; dispid 189;
    function IGetDimensionString3: WideString; dispid 190;
    function GetDimensionIds3: OleVariant; dispid 191;
    function IGetDimensionIds3: WideString; dispid 192;
    function GetDimensionDisplayInfo3: OleVariant; dispid 193;
    function IGetDimensionDisplayInfo3: Double; dispid 194;
    function GetDimensionDisplayString3: OleVariant; dispid 195;
    function IGetDimensionDisplayString3: WideString; dispid 196;
    function GetFirstDisplayDimension3: IDispatch; dispid 197;
    function IGetFirstDisplayDimension3: IDisplayDimension; dispid 198;
    function IsCropped: WordBool; dispid 199;
    property angle: Double dispid 200;
    function GetDetailCircles: OleVariant; dispid 201;
    function IGetDetailCircles(NumDetailCircles: Integer): IDetailCircle; dispid 202;
    function GetProjectionArrow: IDispatch; dispid 203;
    function IGetProjectionArrow: IProjectionArrow; dispid 204;
    function GetDetail: IDispatch; dispid 205;
    function IGetDetail: IDetailCircle; dispid 206;
    function GetBaseView: IDispatch; dispid 207;
    function IGetBaseView: IView; dispid 208;
    function EnumHiddenComponents2: IEnumComponents2; dispid 209;
    function GetFirstMultiJogLeader: IDispatch; dispid 210;
    function IGetFirstMultiJogLeader: IMultiJogLeader; dispid 211;
    function GetVisible: WordBool; dispid 212;
    procedure SetVisible(Visible: WordBool; dependentsToo: WordBool); dispid 213;
    function GetFirstDowelSymbol: IDispatch; dispid 214;
    function IGetFirstDowelSymbol: IDowelSymbol; dispid 215;
    function InsertBomTable(const Template: WideString; Xloc: Double; Yloc: Double; 
                            var Errors: Integer): IDispatch; dispid 216;
    function IInsertBomTable(const Template: WideString; Xloc: Double; Yloc: Double; 
                             var Errors: Integer): IBomTable; dispid 217;
    function SelectEntity(const entity: IDispatch; appendFlag: WordBool): WordBool; dispid 218;
    function ISelectEntity(const entity: IEntity; appendFlag: WordBool): WordBool; dispid 219;
    function IsModelOutOfDate: WordBool; dispid 220;
    property ModelToViewTransform: IMathTransform dispid 221;
    function GetDisplayMode2: Integer; dispid 222;
    function GetFacettedHlrDisplay: WordBool; dispid 223;
    function GetDisplayEdgesInShadedMode: WordBool; dispid 224;
    function SetDisplayMode2(mode: Integer; Facetted: WordBool; edges: WordBool): WordBool; dispid 225;
    function GetPolylines5(crossHatchOption: Smallint): OleVariant; dispid 226;
    function IGetPolylines5(crossHatchOption: Smallint; arraySize: Integer): Double; dispid 227;
    function GetPolyLineCount5(crossHatchOption: Smallint; out PointCount: Integer): Integer; dispid 228;
    function GetLineCount2(crossHatchOption: Smallint): Integer; dispid 229;
    function GetLines4(crossHatchOption: Smallint): OleVariant; dispid 230;
    function IGetLines4(crossHatchOption: Smallint; arraySize: Integer): Double; dispid 231;
    function GetFirstBlockInstance: IBlockInstance; dispid 232;
    function GetSectionLineCount2(out size: Integer): Integer; dispid 233;
    function GetSectionLineInfo2: OleVariant; dispid 234;
    function IGetSectionLineInfo2(arraySize: Integer): Double; dispid 235;
    function GetDetailCircleCount2(out size: Integer): Integer; dispid 236;
    function GetDetailCircleInfo2: OleVariant; dispid 237;
    function IGetDetailCircleInfo2(arraySize: Integer): Double; dispid 238;
    function IsBroken: WordBool; dispid 239;
    function GetBreakLineCount(out size: Integer): Integer; dispid 240;
    function GetBreakLines: OleVariant; dispid 241;
    function IGetBreakLines(count: Integer): IBreakLine; dispid 242;
    function InsertBreak(Orientation: Integer; Position1: Double; Position2: Double; Style: Integer): IBreakLine; dispid 243;
    function GetBreakLineInfo: OleVariant; dispid 244;
    function IGetBreakLineInfo(arraySize: Integer): Double; dispid 245;
    function GetFaceHatchCount: Integer; dispid 246;
    function GetFaceHatches: OleVariant; dispid 247;
    function IGetFaceHatches(numFacesHatches: Integer): IFaceHatch; dispid 248;
    function GetCenterMarkCount2(var size: Integer): Integer; dispid 249;
    function GetCenterMarks: OleVariant; dispid 250;
    function IGetCenterMarks(count: Integer): ICenterMark; dispid 251;
    function GetFirstCenterMark: ICenterMark; dispid 252;
    function GetCenterLineSketch: ISketch; dispid 253;
    function GetDimensionDisplayInfoSize: Integer; dispid 254;
    function GetDimensionDisplayInfo4: OleVariant; dispid 255;
    function IGetDimensionDisplayInfo4(arraySize: Integer): Double; dispid 256;
  end;

// *********************************************************************//
// Interface: ISFSymbol
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {83A33D8E-27C5-11CE-BFD4-00400513BB57}
// *********************************************************************//
  ISFSymbol = interface(IDispatch)
    ['{83A33D8E-27C5-11CE-BFD4-00400513BB57}']
    function GetNext: IDispatch; safecall;
    function IGetNext: ISFSymbol; safecall;
    function GetTextCount: Integer; safecall;
    function GetTextAtIndex(index: Integer): WideString; safecall;
    function GetTextHeightAtIndex(index: Integer): Double; safecall;
    function GetTextPositionAtIndex(index: Integer): OleVariant; safecall;
    function IGetTextPositionAtIndex(index: Integer): Double; safecall;
    function GetTextAngleAtIndex(index: Integer): Double; safecall;
    function GetLineCount: Integer; safecall;
    function GetLineAtIndex(index: Integer): OleVariant; safecall;
    function IGetLineAtIndex(index: Integer): Double; safecall;
    function GetArcCount: Integer; safecall;
    function GetArcAtIndex(index: Integer): OleVariant; safecall;
    function IGetArcAtIndex(index: Integer): Double; safecall;
    function GetArrowHeadCount: Integer; safecall;
    function GetArrowHeadAtIndex(index: Integer): OleVariant; safecall;
    function IGetArrowHeadAtIndex(index: Integer): Double; safecall;
    function GetTextRefPositionAtIndex(index: Integer): Integer; safecall;
    function GetTextInvertAtIndex(index: Integer): Integer; safecall;
    function GetTextFontAtIndex(index: Integer): WideString; safecall;
    function GetTriangleCount: Integer; safecall;
    function GetTriangleAtIndex(index: Integer): OleVariant; safecall;
    function IGetTriangleAtIndex(index: Integer): Double; safecall;
    function IsAttached: WordBool; safecall;
    function HasExtraLeader: WordBool; safecall;
    function GetLeaderCount: Integer; safecall;
    function GetLeaderAtIndex(index: Integer): OleVariant; safecall;
    function IGetLeaderAtIndex(index: Integer; out PointCount: Integer): Double; safecall;
    function IGetArrowHeadInfo: Double; safecall;
    function GetArrowHeadInfo: OleVariant; safecall;
    function GetAnnotation: IDispatch; safecall;
    function IGetAnnotation: IAnnotation; safecall;
    function GetSymbolType: Integer; safecall;
    function SetSymbolType(symbolType: Integer): WordBool; safecall;
    function GetDirectionOfLay: Integer; safecall;
    function SetDirectionOfLay(direction: Integer): WordBool; safecall;
    function GetText(whichOne: Integer): WideString; safecall;
    function SetText(whichOne: Integer; const text: WideString): WordBool; safecall;
    function Get_Rotated: WordBool; safecall;
    procedure Set_Rotated(retval: WordBool); safecall;
    function Get_Grinding: WordBool; safecall;
    procedure Set_Grinding(retval: WordBool); safecall;
    function GetAngle: Double; safecall;
    property Rotated: WordBool read Get_Rotated write Set_Rotated;
    property Grinding: WordBool read Get_Grinding write Set_Grinding;
  end;

// *********************************************************************//
// DispIntf:  ISFSymbolDisp
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {83A33D8E-27C5-11CE-BFD4-00400513BB57}
// *********************************************************************//
  ISFSymbolDisp = dispinterface
    ['{83A33D8E-27C5-11CE-BFD4-00400513BB57}']
    function GetNext: IDispatch; dispid 1;
    function IGetNext: ISFSymbol; dispid 2;
    function GetTextCount: Integer; dispid 3;
    function GetTextAtIndex(index: Integer): WideString; dispid 4;
    function GetTextHeightAtIndex(index: Integer): Double; dispid 5;
    function GetTextPositionAtIndex(index: Integer): OleVariant; dispid 6;
    function IGetTextPositionAtIndex(index: Integer): Double; dispid 7;
    function GetTextAngleAtIndex(index: Integer): Double; dispid 8;
    function GetLineCount: Integer; dispid 9;
    function GetLineAtIndex(index: Integer): OleVariant; dispid 10;
    function IGetLineAtIndex(index: Integer): Double; dispid 11;
    function GetArcCount: Integer; dispid 12;
    function GetArcAtIndex(index: Integer): OleVariant; dispid 13;
    function IGetArcAtIndex(index: Integer): Double; dispid 14;
    function GetArrowHeadCount: Integer; dispid 15;
    function GetArrowHeadAtIndex(index: Integer): OleVariant; dispid 16;
    function IGetArrowHeadAtIndex(index: Integer): Double; dispid 17;
    function GetTextRefPositionAtIndex(index: Integer): Integer; dispid 18;
    function GetTextInvertAtIndex(index: Integer): Integer; dispid 19;
    function GetTextFontAtIndex(index: Integer): WideString; dispid 20;
    function GetTriangleCount: Integer; dispid 21;
    function GetTriangleAtIndex(index: Integer): OleVariant; dispid 22;
    function IGetTriangleAtIndex(index: Integer): Double; dispid 23;
    function IsAttached: WordBool; dispid 24;
    function HasExtraLeader: WordBool; dispid 25;
    function GetLeaderCount: Integer; dispid 26;
    function GetLeaderAtIndex(index: Integer): OleVariant; dispid 27;
    function IGetLeaderAtIndex(index: Integer; out PointCount: Integer): Double; dispid 28;
    function IGetArrowHeadInfo: Double; dispid 29;
    function GetArrowHeadInfo: OleVariant; dispid 30;
    function GetAnnotation: IDispatch; dispid 31;
    function IGetAnnotation: IAnnotation; dispid 32;
    function GetSymbolType: Integer; dispid 33;
    function SetSymbolType(symbolType: Integer): WordBool; dispid 34;
    function GetDirectionOfLay: Integer; dispid 35;
    function SetDirectionOfLay(direction: Integer): WordBool; dispid 36;
    function GetText(whichOne: Integer): WideString; dispid 37;
    function SetText(whichOne: Integer; const text: WideString): WordBool; dispid 38;
    property Rotated: WordBool dispid 39;
    property Grinding: WordBool dispid 40;
    function GetAngle: Double; dispid 41;
  end;

// *********************************************************************//
// Interface: IDatumTargetSym
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {83A33D92-27C5-11CE-BFD4-00400513BB57}
// *********************************************************************//
  IDatumTargetSym = interface(IDispatch)
    ['{83A33D92-27C5-11CE-BFD4-00400513BB57}']
    function GetNext: IDispatch; safecall;
    function IGetNext: IDatumTargetSym; safecall;
    function GetTextCount: Integer; safecall;
    function GetTextAtIndex(index: Integer): WideString; safecall;
    function GetTextHeightAtIndex(index: Integer): Double; safecall;
    function GetTextPositionAtIndex(index: Integer): OleVariant; safecall;
    function IGetTextPositionAtIndex(index: Integer): Double; safecall;
    function GetTextAngleAtIndex(index: Integer): Double; safecall;
    function GetTextRefPositionAtIndex(index: Integer): Integer; safecall;
    function GetTextInvertAtIndex(index: Integer): Integer; safecall;
    function GetLineCount: Integer; safecall;
    function GetLineAtIndex(index: Integer): OleVariant; safecall;
    function IGetLineAtIndex(index: Integer): Double; safecall;
    function GetArcCount: Integer; safecall;
    function GetArcAtIndex(index: Integer): OleVariant; safecall;
    function IGetArcAtIndex(index: Integer): Double; safecall;
    function GetArrowHeadCount: Integer; safecall;
    function GetArrowHeadAtIndex(index: Integer): OleVariant; safecall;
    function IGetArrowHeadAtIndex(index: Integer): Double; safecall;
    function GetTriangleCount: Integer; safecall;
    function GetTriangleAtIndex(index: Integer): OleVariant; safecall;
    function IGetTriangleAtIndex(index: Integer): Double; safecall;
    function GetAnnotation: IDispatch; safecall;
    function IGetAnnotation: IAnnotation; safecall;
    function GetTargetShape: Integer; safecall;
    function GetTargetAreaSize(whichOne: Integer): WideString; safecall;
    function SetTargetArea(shape: Integer; const size1: WideString; const size2: WideString): WordBool; safecall;
    function GetDisplaySymbol: WordBool; safecall;
    function GetDisplayTargetArea: WordBool; safecall;
    function GetDisplaySizeOutside: WordBool; safecall;
    function SetDisplay(symbol: WordBool; targetArea: WordBool; sizeOutside: WordBool): WordBool; safecall;
    function GetDatumReferenceLabel(whichOne: Integer): WideString; safecall;
    function SetDatumReferenceLabel(whichOne: Integer; const text: WideString): WordBool; safecall;
  end;

// *********************************************************************//
// DispIntf:  IDatumTargetSymDisp
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {83A33D92-27C5-11CE-BFD4-00400513BB57}
// *********************************************************************//
  IDatumTargetSymDisp = dispinterface
    ['{83A33D92-27C5-11CE-BFD4-00400513BB57}']
    function GetNext: IDispatch; dispid 1;
    function IGetNext: IDatumTargetSym; dispid 2;
    function GetTextCount: Integer; dispid 3;
    function GetTextAtIndex(index: Integer): WideString; dispid 4;
    function GetTextHeightAtIndex(index: Integer): Double; dispid 5;
    function GetTextPositionAtIndex(index: Integer): OleVariant; dispid 6;
    function IGetTextPositionAtIndex(index: Integer): Double; dispid 7;
    function GetTextAngleAtIndex(index: Integer): Double; dispid 8;
    function GetTextRefPositionAtIndex(index: Integer): Integer; dispid 9;
    function GetTextInvertAtIndex(index: Integer): Integer; dispid 10;
    function GetLineCount: Integer; dispid 11;
    function GetLineAtIndex(index: Integer): OleVariant; dispid 12;
    function IGetLineAtIndex(index: Integer): Double; dispid 13;
    function GetArcCount: Integer; dispid 14;
    function GetArcAtIndex(index: Integer): OleVariant; dispid 15;
    function IGetArcAtIndex(index: Integer): Double; dispid 16;
    function GetArrowHeadCount: Integer; dispid 17;
    function GetArrowHeadAtIndex(index: Integer): OleVariant; dispid 18;
    function IGetArrowHeadAtIndex(index: Integer): Double; dispid 19;
    function GetTriangleCount: Integer; dispid 20;
    function GetTriangleAtIndex(index: Integer): OleVariant; dispid 21;
    function IGetTriangleAtIndex(index: Integer): Double; dispid 22;
    function GetAnnotation: IDispatch; dispid 23;
    function IGetAnnotation: IAnnotation; dispid 24;
    function GetTargetShape: Integer; dispid 25;
    function GetTargetAreaSize(whichOne: Integer): WideString; dispid 26;
    function SetTargetArea(shape: Integer; const size1: WideString; const size2: WideString): WordBool; dispid 27;
    function GetDisplaySymbol: WordBool; dispid 28;
    function GetDisplayTargetArea: WordBool; dispid 29;
    function GetDisplaySizeOutside: WordBool; dispid 30;
    function SetDisplay(symbol: WordBool; targetArea: WordBool; sizeOutside: WordBool): WordBool; dispid 31;
    function GetDatumReferenceLabel(whichOne: Integer): WideString; dispid 32;
    function SetDatumReferenceLabel(whichOne: Integer; const text: WideString): WordBool; dispid 33;
  end;

// *********************************************************************//
// Interface: ICThread
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {83A33D9E-27C5-11CE-BFD4-00400513BB57}
// *********************************************************************//
  ICThread = interface(IDispatch)
    ['{83A33D9E-27C5-11CE-BFD4-00400513BB57}']
    function GetNext: IDispatch; safecall;
    function IGetNext: ICThread; safecall;
    function GetDisplayData: IDispatch; safecall;
    function IGetDisplayData: IDisplayData; safecall;
    function GetAnnotation: IDispatch; safecall;
    function IGetAnnotation: IAnnotation; safecall;
  end;

// *********************************************************************//
// DispIntf:  ICThreadDisp
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {83A33D9E-27C5-11CE-BFD4-00400513BB57}
// *********************************************************************//
  ICThreadDisp = dispinterface
    ['{83A33D9E-27C5-11CE-BFD4-00400513BB57}']
    function GetNext: IDispatch; dispid 1;
    function IGetNext: ICThread; dispid 2;
    function GetDisplayData: IDispatch; dispid 3;
    function IGetDisplayData: IDisplayData; dispid 4;
    function GetAnnotation: IDispatch; dispid 5;
    function IGetAnnotation: IAnnotation; dispid 6;
  end;

// *********************************************************************//
// Interface: IBomTable
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {83A33D82-27C5-11CE-BFD4-00400513BB57}
// *********************************************************************//
  IBomTable = interface(IDispatch)
    ['{83A33D82-27C5-11CE-BFD4-00400513BB57}']
    function GetExtent: OleVariant; safecall;
    function IGetExtent: Double; safecall;
    function GetRowCount: Integer; safecall;
    function GetColumnCount: Integer; safecall;
    function GetHeaderText(col: Integer): WideString; safecall;
    function GetEntryText(row: Integer; col: Integer): WideString; safecall;
    procedure Attach; safecall;
    procedure Detach; safecall;
    function GetColumnWidth(col: Integer): Double; safecall;
    function GetRowHeight(row: Integer): Double; safecall;
    function GetEntryValue(row: Integer; col: Integer): OleVariant; safecall;
    function Attach2: WordBool; safecall;
    function GetDisplayData: IDispatch; safecall;
    function IGetDisplayData: IDisplayData; safecall;
    function IsVisible: WordBool; safecall;
    function Attach3: WordBool; safecall;
    function GetTotalRowCount: Integer; safecall;
    function GetTotalColumnCount: Integer; safecall;
    function Select(Append: WordBool; mark: Integer): WordBool; safecall;
    function DeSelect: WordBool; safecall;
  end;

// *********************************************************************//
// DispIntf:  IBomTableDisp
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {83A33D82-27C5-11CE-BFD4-00400513BB57}
// *********************************************************************//
  IBomTableDisp = dispinterface
    ['{83A33D82-27C5-11CE-BFD4-00400513BB57}']
    function GetExtent: OleVariant; dispid 1;
    function IGetExtent: Double; dispid 2;
    function GetRowCount: Integer; dispid 3;
    function GetColumnCount: Integer; dispid 4;
    function GetHeaderText(col: Integer): WideString; dispid 5;
    function GetEntryText(row: Integer; col: Integer): WideString; dispid 6;
    procedure Attach; dispid 7;
    procedure Detach; dispid 8;
    function GetColumnWidth(col: Integer): Double; dispid 9;
    function GetRowHeight(row: Integer): Double; dispid 10;
    function GetEntryValue(row: Integer; col: Integer): OleVariant; dispid 11;
    function Attach2: WordBool; dispid 12;
    function GetDisplayData: IDispatch; dispid 13;
    function IGetDisplayData: IDisplayData; dispid 14;
    function IsVisible: WordBool; dispid 15;
    function Attach3: WordBool; dispid 16;
    function GetTotalRowCount: Integer; dispid 17;
    function GetTotalColumnCount: Integer; dispid 18;
    function Select(Append: WordBool; mark: Integer): WordBool; dispid 19;
    function DeSelect: WordBool; dispid 20;
  end;

// *********************************************************************//
// Interface: ICustomSymbol
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {83A33DB5-27C5-11CE-BFD4-00400513BB57}
// *********************************************************************//
  ICustomSymbol = interface(IDispatch)
    ['{83A33DB5-27C5-11CE-BFD4-00400513BB57}']
    function GetNext: IDispatch; safecall;
    function IGetNext: ICustomSymbol; safecall;
    function GetTextCount: Integer; safecall;
    function GetTextAtIndex(index: Integer): WideString; safecall;
    function GetTextHeightAtIndex(index: Integer): Double; safecall;
    function GetTextPositionAtIndex(index: Integer): OleVariant; safecall;
    function IGetTextPositionAtIndex(index: Integer): Double; safecall;
    function GetTextAngleAtIndex(index: Integer): Double; safecall;
    function GetTextRefPositionAtIndex(index: Integer): Integer; safecall;
    function GetTextInvertAtIndex(index: Integer): Integer; safecall;
    function GetLineCount: Integer; safecall;
    function GetLineAtIndex(index: Integer): OleVariant; safecall;
    function IGetLineAtIndex(index: Integer): Double; safecall;
    function GetArcCount: Integer; safecall;
    function GetArcAtIndex(index: Integer): OleVariant; safecall;
    function IGetArcAtIndex(index: Integer): Double; safecall;
    function GetArrowHeadCount: Integer; safecall;
    function GetArrowHeadAtIndex(index: Integer): OleVariant; safecall;
    function IGetArrowHeadAtIndex(index: Integer): Double; safecall;
    function GetTriangleCount: Integer; safecall;
    function GetTriangleAtIndex(index: Integer): OleVariant; safecall;
    function IGetTriangleAtIndex(index: Integer): Double; safecall;
    function GetSketch: IDispatch; safecall;
    function IGetSketch: ISketch; safecall;
    function GetSketchPosition: OleVariant; safecall;
    function IGetSketchPosition: Double; safecall;
    function IsAttached: WordBool; safecall;
    function HasExtraLeader: WordBool; safecall;
    function GetLeaderCount: Integer; safecall;
    function GetLeaderAtIndex(index: Integer): OleVariant; safecall;
    function IGetLeaderAtIndex(index: Integer; out PointCount: Integer): Double; safecall;
    function IGetArrowHeadInfo: Double; safecall;
    function GetArrowHeadInfo: OleVariant; safecall;
    function GetAnnotation: IDispatch; safecall;
    function IGetAnnotation: IAnnotation; safecall;
    function Get_angle: Double; safecall;
    procedure Set_angle(retval: Double); safecall;
    function Get_Scale2: Double; safecall;
    procedure Set_Scale2(retval: Double); safecall;
    function GetText(index: Integer): WideString; safecall;
    function SetText(index: Integer; const text: WideString): WordBool; safecall;
    function GetTextJustificationAtIndex(index: Integer): Integer; safecall;
    procedure SetTextJustificationAtIndex(index: Integer; justification: Integer); safecall;
    function GetTextLineSpacingAtIndex(index: Integer): Double; safecall;
    function Get_TextVisible: WordBool; safecall;
    procedure Set_TextVisible(retval: WordBool); safecall;
    function GetNoteCount: Integer; safecall;
    function GetNotes: OleVariant; safecall;
    function IGetNotes(count: Integer): INote; safecall;
    property angle: Double read Get_angle write Set_angle;
    property Scale2: Double read Get_Scale2 write Set_Scale2;
    property TextVisible: WordBool read Get_TextVisible write Set_TextVisible;
  end;

// *********************************************************************//
// DispIntf:  ICustomSymbolDisp
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {83A33DB5-27C5-11CE-BFD4-00400513BB57}
// *********************************************************************//
  ICustomSymbolDisp = dispinterface
    ['{83A33DB5-27C5-11CE-BFD4-00400513BB57}']
    function GetNext: IDispatch; dispid 1;
    function IGetNext: ICustomSymbol; dispid 2;
    function GetTextCount: Integer; dispid 3;
    function GetTextAtIndex(index: Integer): WideString; dispid 4;
    function GetTextHeightAtIndex(index: Integer): Double; dispid 5;
    function GetTextPositionAtIndex(index: Integer): OleVariant; dispid 6;
    function IGetTextPositionAtIndex(index: Integer): Double; dispid 7;
    function GetTextAngleAtIndex(index: Integer): Double; dispid 8;
    function GetTextRefPositionAtIndex(index: Integer): Integer; dispid 9;
    function GetTextInvertAtIndex(index: Integer): Integer; dispid 10;
    function GetLineCount: Integer; dispid 11;
    function GetLineAtIndex(index: Integer): OleVariant; dispid 12;
    function IGetLineAtIndex(index: Integer): Double; dispid 13;
    function GetArcCount: Integer; dispid 14;
    function GetArcAtIndex(index: Integer): OleVariant; dispid 15;
    function IGetArcAtIndex(index: Integer): Double; dispid 16;
    function GetArrowHeadCount: Integer; dispid 17;
    function GetArrowHeadAtIndex(index: Integer): OleVariant; dispid 18;
    function IGetArrowHeadAtIndex(index: Integer): Double; dispid 19;
    function GetTriangleCount: Integer; dispid 20;
    function GetTriangleAtIndex(index: Integer): OleVariant; dispid 21;
    function IGetTriangleAtIndex(index: Integer): Double; dispid 22;
    function GetSketch: IDispatch; dispid 23;
    function IGetSketch: ISketch; dispid 24;
    function GetSketchPosition: OleVariant; dispid 25;
    function IGetSketchPosition: Double; dispid 26;
    function IsAttached: WordBool; dispid 27;
    function HasExtraLeader: WordBool; dispid 28;
    function GetLeaderCount: Integer; dispid 29;
    function GetLeaderAtIndex(index: Integer): OleVariant; dispid 30;
    function IGetLeaderAtIndex(index: Integer; out PointCount: Integer): Double; dispid 31;
    function IGetArrowHeadInfo: Double; dispid 32;
    function GetArrowHeadInfo: OleVariant; dispid 33;
    function GetAnnotation: IDispatch; dispid 34;
    function IGetAnnotation: IAnnotation; dispid 35;
    property angle: Double dispid 36;
    property Scale2: Double dispid 37;
    function GetText(index: Integer): WideString; dispid 38;
    function SetText(index: Integer; const text: WideString): WordBool; dispid 39;
    function GetTextJustificationAtIndex(index: Integer): Integer; dispid 40;
    procedure SetTextJustificationAtIndex(index: Integer; justification: Integer); dispid 41;
    function GetTextLineSpacingAtIndex(index: Integer): Double; dispid 42;
    property TextVisible: WordBool dispid 43;
    function GetNoteCount: Integer; dispid 44;
    function GetNotes: OleVariant; dispid 45;
    function IGetNotes(count: Integer): INote; dispid 46;
  end;

// *********************************************************************//
// Interface: IDrSection
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {F183A33F-D4DB-11D3-AEB2-00C04F603FAF}
// *********************************************************************//
  IDrSection = interface(IDispatch)
    ['{F183A33F-D4DB-11D3-AEB2-00C04F603FAF}']
    function GetView: IDispatch; safecall;
    function IGetView: IView; safecall;
    function GetSectionView: IDispatch; safecall;
    function IGetSectionView: IView; safecall;
    function GetLabel: WideString; safecall;
    function SetLabel(const Label_: WideString): WordBool; safecall;
    function GetUseDocTextFormat: WordBool; safecall;
    function GetTextFormat: IDispatch; safecall;
    function IGetTextFormat: ITextFormat; safecall;
    function SetTextFormat(useDoc: WordBool; const textFormat: IDispatch): WordBool; safecall;
    function ISetTextFormat(useDoc: WordBool; const textFormat: ITextFormat): WordBool; safecall;
    function GetReversedCutDirection: WordBool; safecall;
    procedure SetReversedCutDirection(reversed: WordBool); safecall;
    function GetScaleWithModelChanges: WordBool; safecall;
    procedure SetScaleWithModelChanges(scaleWithChanges: WordBool); safecall;
    function GetPartialSection: WordBool; safecall;
    procedure SetPartialSection(partial: WordBool); safecall;
    function GetDisplayOnlySurfaceCut: WordBool; safecall;
    procedure SetDisplayOnlySurfaceCut(Display: WordBool); safecall;
    function IsAligned: WordBool; safecall;
    function GetName: WideString; safecall;
    function GetTextInfo: OleVariant; safecall;
    function IGetTextInfo: Double; safecall;
    function GetArrowInfo: OleVariant; safecall;
    function IGetArrowInfo: Double; safecall;
    function GetExcludedComponents: OleVariant; safecall;
    function EnumExcludedComponents: IEnumComponents; safecall;
    function GetAutoHatch: WordBool; safecall;
    procedure SetAutoHatch(autoHatch: WordBool); safecall;
    function IGetLineSegmentCount: Integer; safecall;
    function GetLineInfo: OleVariant; safecall;
    function IGetLineInfo: Double; safecall;
    function EnumExcludedComponents2: IEnumComponents2; safecall;
    function Get_Layer: WideString; safecall;
    procedure Set_Layer(const Name: WideString); safecall;
    property Layer: WideString read Get_Layer write Set_Layer;
  end;

// *********************************************************************//
// DispIntf:  IDrSectionDisp
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {F183A33F-D4DB-11D3-AEB2-00C04F603FAF}
// *********************************************************************//
  IDrSectionDisp = dispinterface
    ['{F183A33F-D4DB-11D3-AEB2-00C04F603FAF}']
    function GetView: IDispatch; dispid 1;
    function IGetView: IView; dispid 2;
    function GetSectionView: IDispatch; dispid 3;
    function IGetSectionView: IView; dispid 4;
    function GetLabel: WideString; dispid 5;
    function SetLabel(const Label_: WideString): WordBool; dispid 6;
    function GetUseDocTextFormat: WordBool; dispid 7;
    function GetTextFormat: IDispatch; dispid 8;
    function IGetTextFormat: ITextFormat; dispid 9;
    function SetTextFormat(useDoc: WordBool; const textFormat: IDispatch): WordBool; dispid 10;
    function ISetTextFormat(useDoc: WordBool; const textFormat: ITextFormat): WordBool; dispid 11;
    function GetReversedCutDirection: WordBool; dispid 12;
    procedure SetReversedCutDirection(reversed: WordBool); dispid 13;
    function GetScaleWithModelChanges: WordBool; dispid 14;
    procedure SetScaleWithModelChanges(scaleWithChanges: WordBool); dispid 15;
    function GetPartialSection: WordBool; dispid 16;
    procedure SetPartialSection(partial: WordBool); dispid 17;
    function GetDisplayOnlySurfaceCut: WordBool; dispid 18;
    procedure SetDisplayOnlySurfaceCut(Display: WordBool); dispid 19;
    function IsAligned: WordBool; dispid 20;
    function GetName: WideString; dispid 21;
    function GetTextInfo: OleVariant; dispid 22;
    function IGetTextInfo: Double; dispid 23;
    function GetArrowInfo: OleVariant; dispid 24;
    function IGetArrowInfo: Double; dispid 25;
    function GetExcludedComponents: OleVariant; dispid 26;
    function EnumExcludedComponents: IEnumComponents; dispid 27;
    function GetAutoHatch: WordBool; dispid 28;
    procedure SetAutoHatch(autoHatch: WordBool); dispid 29;
    function IGetLineSegmentCount: Integer; dispid 30;
    function GetLineInfo: OleVariant; dispid 31;
    function IGetLineInfo: Double; dispid 32;
    function EnumExcludedComponents2: IEnumComponents2; dispid 33;
    property Layer: WideString dispid 34;
  end;

// *********************************************************************//
// Interface: IEnumComponents
// Flags:     (272) Hidden OleAutomation
// GUID:      {51EFB944-D449-11D3-AEBE-00C04F683CBA}
// *********************************************************************//
  IEnumComponents = interface(IUnknown)
    ['{51EFB944-D449-11D3-AEBE-00C04F683CBA}']
    function Next(celt: Integer; out rgelt: IComponent; var pceltFetched: Integer): HResult; stdcall;
    function Skip(celt: Integer): HResult; stdcall;
    function Reset: HResult; stdcall;
    function Clone(out ppenum: IEnumComponents): HResult; stdcall;
  end;

// *********************************************************************//
// Interface: IEnumComponents2
// Flags:     (272) Hidden OleAutomation
// GUID:      {F6804D12-B73A-49AF-81C6-05BABB58B812}
// *********************************************************************//
  IEnumComponents2 = interface(IUnknown)
    ['{F6804D12-B73A-49AF-81C6-05BABB58B812}']
    function Next(celt: Integer; out rgelt: IComponent2; var pceltFetched: Integer): HResult; stdcall;
    function Skip(celt: Integer): HResult; stdcall;
    function Reset: HResult; stdcall;
    function Clone(out ppenum: IEnumComponents2): HResult; stdcall;
  end;

// *********************************************************************//
// Interface: IEnumDrSections
// Flags:     (272) Hidden OleAutomation
// GUID:      {585A6A15-E95B-11D3-AEBC-00C04F603FAF}
// *********************************************************************//
  IEnumDrSections = interface(IUnknown)
    ['{585A6A15-E95B-11D3-AEBC-00C04F603FAF}']
    function Next(celt: Integer; out rgelt: IDrSection; var pceltFetched: Integer): HResult; stdcall;
    function Skip(celt: Integer): HResult; stdcall;
    function Reset: HResult; stdcall;
    function Clone(out ppenum: IEnumDrSections): HResult; stdcall;
  end;

// *********************************************************************//
// Interface: IDetailCircle
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {4B65A34A-4C44-11D4-AEF6-00C04F683CBA}
// *********************************************************************//
  IDetailCircle = interface(IDispatch)
    ['{4B65A34A-4C44-11D4-AEF6-00C04F683CBA}']
    function GetView: IView; safecall;
    function GetDetailView: IView; safecall;
    function GetLabel: WideString; safecall;
    function GetTextFormat: ITextFormat; safecall;
    function GetName: WideString; safecall;
    function GetArrowInfo: OleVariant; safecall;
    function IGetArrowInfo: Double; safecall;
    function GetStyle: Integer; safecall;
    function GetDisplay: Integer; safecall;
    function GetConnectingLine: OleVariant; safecall;
    function IGetConnectingLine: Double; safecall;
    function HasFullOutline: WordBool; safecall;
    function GetLeaderInfo: OleVariant; safecall;
    function IGetLeaderInfo: Double; safecall;
    function GetUseDocTextFormat: WordBool; safecall;
    function SetTextFormat(useDoc: WordBool; const textFormat: ITextFormat): WordBool; safecall;
    function Get_Layer: WideString; safecall;
    procedure Set_Layer(const Name: WideString); safecall;
    property Layer: WideString read Get_Layer write Set_Layer;
  end;

// *********************************************************************//
// DispIntf:  IDetailCircleDisp
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {4B65A34A-4C44-11D4-AEF6-00C04F683CBA}
// *********************************************************************//
  IDetailCircleDisp = dispinterface
    ['{4B65A34A-4C44-11D4-AEF6-00C04F683CBA}']
    function GetView: IView; dispid 1;
    function GetDetailView: IView; dispid 2;
    function GetLabel: WideString; dispid 3;
    function GetTextFormat: ITextFormat; dispid 4;
    function GetName: WideString; dispid 5;
    function GetArrowInfo: OleVariant; dispid 6;
    function IGetArrowInfo: Double; dispid 7;
    function GetStyle: Integer; dispid 8;
    function GetDisplay: Integer; dispid 9;
    function GetConnectingLine: OleVariant; dispid 10;
    function IGetConnectingLine: Double; dispid 11;
    function HasFullOutline: WordBool; dispid 12;
    function GetLeaderInfo: OleVariant; dispid 13;
    function IGetLeaderInfo: Double; dispid 14;
    function GetUseDocTextFormat: WordBool; dispid 15;
    function SetTextFormat(useDoc: WordBool; const textFormat: ITextFormat): WordBool; dispid 16;
    property Layer: WideString dispid 17;
  end;

// *********************************************************************//
// Interface: IProjectionArrow
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {A2227E65-A3A7-11D4-AEFF-00C04F603FAF}
// *********************************************************************//
  IProjectionArrow = interface(IDispatch)
    ['{A2227E65-A3A7-11D4-AEFF-00C04F603FAF}']
    function GetView: IDispatch; safecall;
    function IGetView: IView; safecall;
    function GetProjectedView: IDispatch; safecall;
    function IGetProjectedView: IView; safecall;
    function GetLabel: WideString; safecall;
    function SetLabel(const Label_: WideString): WordBool; safecall;
    function GetUseDocTextFormat: WordBool; safecall;
    function GetTextFormat: IDispatch; safecall;
    function IGetTextFormat: ITextFormat; safecall;
    function GetCoordinates: OleVariant; safecall;
    function IGetCoordinates: Double; safecall;
  end;

// *********************************************************************//
// DispIntf:  IProjectionArrowDisp
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {A2227E65-A3A7-11D4-AEFF-00C04F603FAF}
// *********************************************************************//
  IProjectionArrowDisp = dispinterface
    ['{A2227E65-A3A7-11D4-AEFF-00C04F603FAF}']
    function GetView: IDispatch; dispid 1;
    function IGetView: IView; dispid 2;
    function GetProjectedView: IDispatch; dispid 3;
    function IGetProjectedView: IView; dispid 4;
    function GetLabel: WideString; dispid 5;
    function SetLabel(const Label_: WideString): WordBool; dispid 6;
    function GetUseDocTextFormat: WordBool; dispid 7;
    function GetTextFormat: IDispatch; dispid 8;
    function IGetTextFormat: ITextFormat; dispid 9;
    function GetCoordinates: OleVariant; dispid 10;
    function IGetCoordinates: Double; dispid 11;
  end;

// *********************************************************************//
// Interface: IMultiJogLeader
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {01EB5266-6CA9-4F59-B0B4-A040DD1CCFB6}
// *********************************************************************//
  IMultiJogLeader = interface(IDispatch)
    ['{01EB5266-6CA9-4F59-B0B4-A040DD1CCFB6}']
    function GetNext: IDispatch; safecall;
    function IGetNext: IMultiJogLeader; safecall;
    function GetLineCount: Integer; safecall;
    function GetLineAtIndex(index: Integer): OleVariant; safecall;
    function IGetLineAtIndex(index: Integer): Double; safecall;
    function GetArrowHeadCount: Integer; safecall;
    function GetArrowHeadAtIndex(index: Integer): OleVariant; safecall;
    function IGetArrowHeadAtIndex(index: Integer): Double; safecall;
    function GetAnnotation: IDispatch; safecall;
    function IGetAnnotation: IAnnotation; safecall;
    function GetDisplayData: IDispatch; safecall;
    function IGetDisplayData: IDisplayData; safecall;
  end;

// *********************************************************************//
// DispIntf:  IMultiJogLeaderDisp
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {01EB5266-6CA9-4F59-B0B4-A040DD1CCFB6}
// *********************************************************************//
  IMultiJogLeaderDisp = dispinterface
    ['{01EB5266-6CA9-4F59-B0B4-A040DD1CCFB6}']
    function GetNext: IDispatch; dispid 1;
    function IGetNext: IMultiJogLeader; dispid 2;
    function GetLineCount: Integer; dispid 3;
    function GetLineAtIndex(index: Integer): OleVariant; dispid 4;
    function IGetLineAtIndex(index: Integer): Double; dispid 5;
    function GetArrowHeadCount: Integer; dispid 6;
    function GetArrowHeadAtIndex(index: Integer): OleVariant; dispid 7;
    function IGetArrowHeadAtIndex(index: Integer): Double; dispid 8;
    function GetAnnotation: IDispatch; dispid 9;
    function IGetAnnotation: IAnnotation; dispid 10;
    function GetDisplayData: IDispatch; dispid 11;
    function IGetDisplayData: IDisplayData; dispid 12;
  end;

// *********************************************************************//
// Interface: IDowelSymbol
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {55AACD8B-97C5-11D5-AF4B-00C04F603FAF}
// *********************************************************************//
  IDowelSymbol = interface(IDispatch)
    ['{55AACD8B-97C5-11D5-AF4B-00C04F603FAF}']
    function GetNext: IDispatch; safecall;
    function IGetNext: IDowelSymbol; safecall;
    function GetAnnotation: IDispatch; safecall;
    function IGetAnnotation: IAnnotation; safecall;
    function Get_Flipped: WordBool; safecall;
    procedure Set_Flipped(Flipped: WordBool); safecall;
    function GetArcPoints: OleVariant; safecall;
    function IGetArcPoints: Double; safecall;
    property Flipped: WordBool read Get_Flipped write Set_Flipped;
  end;

// *********************************************************************//
// DispIntf:  IDowelSymbolDisp
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {55AACD8B-97C5-11D5-AF4B-00C04F603FAF}
// *********************************************************************//
  IDowelSymbolDisp = dispinterface
    ['{55AACD8B-97C5-11D5-AF4B-00C04F603FAF}']
    function GetNext: IDispatch; dispid 1;
    function IGetNext: IDowelSymbol; dispid 2;
    function GetAnnotation: IDispatch; dispid 3;
    function IGetAnnotation: IAnnotation; dispid 4;
    property Flipped: WordBool dispid 5;
    function GetArcPoints: OleVariant; dispid 6;
    function IGetArcPoints: Double; dispid 7;
  end;

// *********************************************************************//
// Interface: IBlockInstance
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {992A14B6-15CF-11D6-AF6E-00C04F603FAF}
// *********************************************************************//
  IBlockInstance = interface(IDispatch)
    ['{992A14B6-15CF-11D6-AF6E-00C04F603FAF}']
    function GetNext: IBlockInstance; safecall;
    function GetAnnotation: IAnnotation; safecall;
    function Get_Definition: IBlockDefinition; safecall;
    function Get_angle: Double; safecall;
    procedure Set_angle(angle: Double); safecall;
    function Get_Scale2: Double; safecall;
    procedure Set_Scale2(Scale: Double); safecall;
    function GetAttributeCount: Integer; safecall;
    function GetAttributes: OleVariant; safecall;
    function IGetAttributes(numAttribs: Integer): INote; safecall;
    function GetAttributeValue(const TagName: WideString): WideString; safecall;
    function SetAttributeValue(const TagName: WideString; const Value: WideString): WordBool; safecall;
    function Get_TextDisplay: Integer; safecall;
    procedure Set_TextDisplay(propval: Integer); safecall;
    property Definition: IBlockDefinition read Get_Definition;
    property angle: Double read Get_angle write Set_angle;
    property Scale2: Double read Get_Scale2 write Set_Scale2;
    property TextDisplay: Integer read Get_TextDisplay write Set_TextDisplay;
  end;

// *********************************************************************//
// DispIntf:  IBlockInstanceDisp
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {992A14B6-15CF-11D6-AF6E-00C04F603FAF}
// *********************************************************************//
  IBlockInstanceDisp = dispinterface
    ['{992A14B6-15CF-11D6-AF6E-00C04F603FAF}']
    function GetNext: IBlockInstance; dispid 1;
    function GetAnnotation: IAnnotation; dispid 2;
    property Definition: IBlockDefinition readonly dispid 3;
    property angle: Double dispid 4;
    property Scale2: Double dispid 5;
    function GetAttributeCount: Integer; dispid 6;
    function GetAttributes: OleVariant; dispid 7;
    function IGetAttributes(numAttribs: Integer): INote; dispid 8;
    function GetAttributeValue(const TagName: WideString): WideString; dispid 9;
    function SetAttributeValue(const TagName: WideString; const Value: WideString): WordBool; dispid 10;
    property TextDisplay: Integer dispid 11;
  end;

// *********************************************************************//
// Interface: IBlockDefinition
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {8CD8314A-1677-11D6-AF6E-00C04F603FAF}
// *********************************************************************//
  IBlockDefinition = interface(IDispatch)
    ['{8CD8314A-1677-11D6-AF6E-00C04F603FAF}']
    function Get_Name: WideString; safecall;
    procedure Set_Name(const Name: WideString); safecall;
    function GetBlockInstanceCount: Integer; safecall;
    function GetBlockInstances: OleVariant; safecall;
    function IGetBlockInstances(count: Integer): IBlockInstance; safecall;
    function GetUseExternalFile: WordBool; safecall;
    function SetUseExternalFile(UseFile: WordBool): Integer; safecall;
    function GetExternalFileName: WideString; safecall;
    function SetExternalFileName(const fileName: WideString): Integer; safecall;
    function InsertInstance(x: Double; y: Double; angle: Double; Scale: Double): IBlockInstance; safecall;
    function GetBasePoint: OleVariant; safecall;
    function IGetBasePoint: Double; safecall;
    function SetBasePoint(BasePoint: OleVariant): WordBool; safecall;
    function ISetBasePoint(var BasePoint: Double): WordBool; safecall;
    function GetSketch: ISketch; safecall;
    function GetNoteCount: Integer; safecall;
    function GetNotes: OleVariant; safecall;
    function IGetNotes(numNotes: Integer): INote; safecall;
    function GetDimensionCount: Integer; safecall;
    function GetDimensions: OleVariant; safecall;
    function IGetDimensions(numDimensions: Integer): IDisplayDimension; safecall;
    property Name: WideString read Get_Name write Set_Name;
  end;

// *********************************************************************//
// DispIntf:  IBlockDefinitionDisp
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {8CD8314A-1677-11D6-AF6E-00C04F603FAF}
// *********************************************************************//
  IBlockDefinitionDisp = dispinterface
    ['{8CD8314A-1677-11D6-AF6E-00C04F603FAF}']
    property Name: WideString dispid 1;
    function GetBlockInstanceCount: Integer; dispid 2;
    function GetBlockInstances: OleVariant; dispid 3;
    function IGetBlockInstances(count: Integer): IBlockInstance; dispid 4;
    function GetUseExternalFile: WordBool; dispid 5;
    function SetUseExternalFile(UseFile: WordBool): Integer; dispid 6;
    function GetExternalFileName: WideString; dispid 7;
    function SetExternalFileName(const fileName: WideString): Integer; dispid 8;
    function InsertInstance(x: Double; y: Double; angle: Double; Scale: Double): IBlockInstance; dispid 9;
    function GetBasePoint: OleVariant; dispid 10;
    function IGetBasePoint: Double; dispid 11;
    function SetBasePoint(BasePoint: OleVariant): WordBool; dispid 12;
    function ISetBasePoint(var BasePoint: Double): WordBool; dispid 13;
    function GetSketch: ISketch; dispid 14;
    function GetNoteCount: Integer; dispid 15;
    function GetNotes: OleVariant; dispid 16;
    function IGetNotes(numNotes: Integer): INote; dispid 17;
    function GetDimensionCount: Integer; dispid 18;
    function GetDimensions: OleVariant; dispid 19;
    function IGetDimensions(numDimensions: Integer): IDisplayDimension; dispid 20;
  end;

// *********************************************************************//
// Interface: IBreakLine
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {54E1FFBC-D989-437F-A701-62BDA39FD195}
// *********************************************************************//
  IBreakLine = interface(IDispatch)
    ['{54E1FFBC-D989-437F-A701-62BDA39FD195}']
    function GetView: IView; safecall;
    function Get_Style: Integer; safecall;
    procedure Set_Style(Style: Integer); safecall;
    function Get_Layer: WideString; safecall;
    procedure Set_Layer(const Name: WideString); safecall;
    function Get_Orientation: Integer; safecall;
    function GetPosition(index: Integer): Double; safecall;
    function SetPosition(Position1: Double; Position2: Double): WordBool; safecall;
    property Style: Integer read Get_Style write Set_Style;
    property Layer: WideString read Get_Layer write Set_Layer;
    property Orientation: Integer read Get_Orientation;
  end;

// *********************************************************************//
// DispIntf:  IBreakLineDisp
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {54E1FFBC-D989-437F-A701-62BDA39FD195}
// *********************************************************************//
  IBreakLineDisp = dispinterface
    ['{54E1FFBC-D989-437F-A701-62BDA39FD195}']
    function GetView: IView; dispid 1;
    property Style: Integer dispid 2;
    property Layer: WideString dispid 3;
    property Orientation: Integer readonly dispid 4;
    function GetPosition(index: Integer): Double; dispid 5;
    function SetPosition(Position1: Double; Position2: Double): WordBool; dispid 6;
  end;

// *********************************************************************//
// Interface: IFaceHatch
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {E0A98A37-8780-4E5F-A28A-C7C6AF25231C}
// *********************************************************************//
  IFaceHatch = interface(IDispatch)
    ['{E0A98A37-8780-4E5F-A28A-C7C6AF25231C}']
    function Get_Pattern: WideString; safecall;
    procedure Set_Pattern(const retval: WideString); safecall;
    function Get_Scale: Double; safecall;
    procedure Set_Scale(retval: Double); safecall;
    function Get_angle: Double; safecall;
    procedure Set_angle(retval: Double); safecall;
    function Get_face: IFace2; safecall;
    procedure Set_face(const retval: IFace2); safecall;
    function Get_Layer: WideString; safecall;
    procedure Set_Layer(const retval: WideString); safecall;
    function Get_Color: Integer; safecall;
    procedure Set_Color(retval: Integer); safecall;
    function Get_Definition: WideString; safecall;
    procedure Set_Definition(const retval: WideString); safecall;
    function Get_SolidFill: WordBool; safecall;
    procedure Set_SolidFill(retval: WordBool); safecall;
    property Pattern: WideString read Get_Pattern write Set_Pattern;
    property Scale: Double read Get_Scale write Set_Scale;
    property angle: Double read Get_angle write Set_angle;
    property face: IFace2 read Get_face write Set_face;
    property Layer: WideString read Get_Layer write Set_Layer;
    property Color: Integer read Get_Color write Set_Color;
    property Definition: WideString read Get_Definition write Set_Definition;
    property SolidFill: WordBool read Get_SolidFill write Set_SolidFill;
  end;

// *********************************************************************//
// DispIntf:  IFaceHatchDisp
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {E0A98A37-8780-4E5F-A28A-C7C6AF25231C}
// *********************************************************************//
  IFaceHatchDisp = dispinterface
    ['{E0A98A37-8780-4E5F-A28A-C7C6AF25231C}']
    property Pattern: WideString dispid 1;
    property Scale: Double dispid 2;
    property angle: Double dispid 3;
    property face: IFace2 dispid 4;
    property Layer: WideString dispid 5;
    property Color: Integer dispid 6;
    property Definition: WideString dispid 7;
    property SolidFill: WordBool dispid 8;
  end;

// *********************************************************************//
// Interface: ICenterMark
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {6BEB0423-EDA4-11D5-AF64-00C04F603FAF}
// *********************************************************************//
  ICenterMark = interface(IDispatch)
    ['{6BEB0423-EDA4-11D5-AF64-00C04F603FAF}']
    function Get_RotationAngle: Double; safecall;
    procedure Set_RotationAngle(angle: Double); safecall;
    function Get_UseDocDisplaySettings: WordBool; safecall;
    procedure Set_UseDocDisplaySettings(useDoc: WordBool); safecall;
    function Get_ShowLines: WordBool; safecall;
    procedure Set_ShowLines(Show: WordBool); safecall;
    function Get_size: Double; safecall;
    procedure Set_size(size: Double); safecall;
    function GetNext: ICenterMark; safecall;
    function GetAnnotation: IAnnotation; safecall;
    function Get_Style: Integer; safecall;
    function Get_ConnectionLines: Integer; safecall;
    procedure Set_ConnectionLines(Visible: Integer); safecall;
    function Get_CenterLineFont: WordBool; safecall;
    procedure Set_CenterLineFont(CenterLine: WordBool); safecall;
    property RotationAngle: Double read Get_RotationAngle write Set_RotationAngle;
    property UseDocDisplaySettings: WordBool read Get_UseDocDisplaySettings write Set_UseDocDisplaySettings;
    property ShowLines: WordBool read Get_ShowLines write Set_ShowLines;
    property size: Double read Get_size write Set_size;
    property Style: Integer read Get_Style;
    property ConnectionLines: Integer read Get_ConnectionLines write Set_ConnectionLines;
    property CenterLineFont: WordBool read Get_CenterLineFont write Set_CenterLineFont;
  end;

// *********************************************************************//
// DispIntf:  ICenterMarkDisp
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {6BEB0423-EDA4-11D5-AF64-00C04F603FAF}
// *********************************************************************//
  ICenterMarkDisp = dispinterface
    ['{6BEB0423-EDA4-11D5-AF64-00C04F603FAF}']
    property RotationAngle: Double dispid 1;
    property UseDocDisplaySettings: WordBool dispid 2;
    property ShowLines: WordBool dispid 3;
    property size: Double dispid 4;
    function GetNext: ICenterMark; dispid 5;
    function GetAnnotation: IAnnotation; dispid 6;
    property Style: Integer readonly dispid 7;
    property ConnectionLines: Integer dispid 8;
    property CenterLineFont: WordBool dispid 9;
  end;

// *********************************************************************//
// Interface: IMidSurface
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {83A33D88-27C5-11CE-BFD4-00400513BB57}
// *********************************************************************//
  IMidSurface = interface(IDispatch)
    ['{83A33D88-27C5-11CE-BFD4-00400513BB57}']
    function GetFacePairCount: Integer; safecall;
    function GetFirstFacePair(out thickness: Double; out partnerFaceDisp: IDispatch): IDispatch; safecall;
    function IGetFirstFacePair(out thickness: Double; out partnerFaceDisp: IFace): IFace; safecall;
    function GetNextFacePair(out thickness: Double; out partnerFaceDisp: IDispatch): IDispatch; safecall;
    function IGetNextFacePair(out thickness: Double; out partnerFaceDisp: IFace): IFace; safecall;
    function GetFirstNeutralSheet: IDispatch; safecall;
    function IGetFirstNeutralSheet: IBody; safecall;
    function GetNextNeutralSheet: IDispatch; safecall;
    function IGetNextNeutralSheet: IBody; safecall;
    function GetNeutralSheetCount: Integer; safecall;
    function GetFaceCount: Integer; safecall;
    function GetFirstFace(out fromFace1Disp: IDispatch; out fromFace2Disp: IDispatch; 
                          out thickness: Double): IDispatch; safecall;
    function IGetFirstFace(out fromFace1Disp: IFace; out fromFace2Disp: IFace; out thickness: Double): IFace; safecall;
    function GetNextFace(out fromFace1Disp: IDispatch; out fromFace2Disp: IDispatch; 
                         out thickness: Double): IDispatch; safecall;
    function IGetNextFace(out fromFace1Disp: IFace; out fromFace2Disp: IFace; out thickness: Double): IFace; safecall;
    function EdgeGetFace(const edgeInDisp: IDispatch): IDispatch; safecall;
    function IEdgeGetFace(const edgeInDisp: IEdge): IFace; safecall;
    function IGetFirstFaceArray(out fromFrontFaceListDisp: PPUserType5; 
                                out sizeOfFrontFaceList: Integer; 
                                out fromFaceBackListDisp: PPUserType5; 
                                out sizeOfBackFaceList: Integer; out thickness: Double): IFace; safecall;
    function IGetNextFaceArray(out fromFrontFaceListDisp: PPUserType5; 
                               out sizeOfFrontFaceList: Integer; 
                               out fromFaceBackListDisp: PPUserType5; 
                               out sizeOfBackFaceList: Integer; out thickness: Double): IFace; safecall;
    function GetFirstFaceArray(out thickness: Double): OleVariant; safecall;
    function GetNextFaceArray(out thickness: Double): OleVariant; safecall;
  end;

// *********************************************************************//
// DispIntf:  IMidSurfaceDisp
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {83A33D88-27C5-11CE-BFD4-00400513BB57}
// *********************************************************************//
  IMidSurfaceDisp = dispinterface
    ['{83A33D88-27C5-11CE-BFD4-00400513BB57}']
    function GetFacePairCount: Integer; dispid 1;
    function GetFirstFacePair(out thickness: Double; out partnerFaceDisp: IDispatch): IDispatch; dispid 2;
    function IGetFirstFacePair(out thickness: Double; out partnerFaceDisp: IFace): IFace; dispid 3;
    function GetNextFacePair(out thickness: Double; out partnerFaceDisp: IDispatch): IDispatch; dispid 4;
    function IGetNextFacePair(out thickness: Double; out partnerFaceDisp: IFace): IFace; dispid 5;
    function GetFirstNeutralSheet: IDispatch; dispid 6;
    function IGetFirstNeutralSheet: IBody; dispid 7;
    function GetNextNeutralSheet: IDispatch; dispid 8;
    function IGetNextNeutralSheet: IBody; dispid 9;
    function GetNeutralSheetCount: Integer; dispid 10;
    function GetFaceCount: Integer; dispid 11;
    function GetFirstFace(out fromFace1Disp: IDispatch; out fromFace2Disp: IDispatch; 
                          out thickness: Double): IDispatch; dispid 12;
    function IGetFirstFace(out fromFace1Disp: IFace; out fromFace2Disp: IFace; out thickness: Double): IFace; dispid 13;
    function GetNextFace(out fromFace1Disp: IDispatch; out fromFace2Disp: IDispatch; 
                         out thickness: Double): IDispatch; dispid 14;
    function IGetNextFace(out fromFace1Disp: IFace; out fromFace2Disp: IFace; out thickness: Double): IFace; dispid 15;
    function EdgeGetFace(const edgeInDisp: IDispatch): IDispatch; dispid 16;
    function IEdgeGetFace(const edgeInDisp: IEdge): IFace; dispid 17;
    function IGetFirstFaceArray(out fromFrontFaceListDisp: {??PPUserType5}OleVariant; 
                                out sizeOfFrontFaceList: Integer; 
                                out fromFaceBackListDisp: {??PPUserType5}OleVariant; 
                                out sizeOfBackFaceList: Integer; out thickness: Double): IFace; dispid 18;
    function IGetNextFaceArray(out fromFrontFaceListDisp: {??PPUserType5}OleVariant; 
                               out sizeOfFrontFaceList: Integer; 
                               out fromFaceBackListDisp: {??PPUserType5}OleVariant; 
                               out sizeOfBackFaceList: Integer; out thickness: Double): IFace; dispid 19;
    function GetFirstFaceArray(out thickness: Double): OleVariant; dispid 20;
    function GetNextFaceArray(out thickness: Double): OleVariant; dispid 21;
  end;

// *********************************************************************//
// Interface: IFrame
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {83A33D48-27C5-11CE-BFD4-00400513BB57}
// *********************************************************************//
  IFrame = interface(IDispatch)
    ['{83A33D48-27C5-11CE-BFD4-00400513BB57}']
    function AddMenuItem(const Menu: WideString; const Item: WideString; position: Integer; 
                         const CallbackFcnAndModule: WideString): WordBool; safecall;
    function AddMenu(const Menu: WideString; position: Integer): WordBool; safecall;
    procedure Dummy003; safecall;
    procedure Dummy004; safecall;
    function GetMenuState(const MenuItemString: WideString): Integer; safecall;
    procedure RenameMenu(const MenuItemString: WideString; const newName: WideString); safecall;
    procedure RemoveMenu(const MenuItemString: WideString); safecall;
    function AddMenuPopupItem(DocType: Integer; SelectType: Integer; const Item: WideString; 
                              const CallbackFcnAndModule: WideString; 
                              const CustomNames: WideString; Unused: Integer): WordBool; safecall;
    function GetStatusBarPane: IStatusBarPane; safecall;
    procedure SetStatusBarText(const messageString: WideString); safecall;
    function GetHWnd: Integer; safecall;
    function GetSubMenuCount(DocType: Integer; const fullMenuName: WideString): Integer; safecall;
    function GetSubMenus(DocType: Integer; const fullMenuName: WideString): OleVariant; safecall;
    function IGetSubMenus(DocType: Integer; const fullMenuName: WideString; numSubMenus: Integer): WideString; safecall;
  end;

// *********************************************************************//
// DispIntf:  IFrameDisp
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {83A33D48-27C5-11CE-BFD4-00400513BB57}
// *********************************************************************//
  IFrameDisp = dispinterface
    ['{83A33D48-27C5-11CE-BFD4-00400513BB57}']
    function AddMenuItem(const Menu: WideString; const Item: WideString; position: Integer; 
                         const CallbackFcnAndModule: WideString): WordBool; dispid 1;
    function AddMenu(const Menu: WideString; position: Integer): WordBool; dispid 2;
    procedure Dummy003; dispid 3;
    procedure Dummy004; dispid 4;
    function GetMenuState(const MenuItemString: WideString): Integer; dispid 5;
    procedure RenameMenu(const MenuItemString: WideString; const newName: WideString); dispid 6;
    procedure RemoveMenu(const MenuItemString: WideString); dispid 7;
    function AddMenuPopupItem(DocType: Integer; SelectType: Integer; const Item: WideString; 
                              const CallbackFcnAndModule: WideString; 
                              const CustomNames: WideString; Unused: Integer): WordBool; dispid 8;
    function GetStatusBarPane: IStatusBarPane; dispid 9;
    procedure SetStatusBarText(const messageString: WideString); dispid 10;
    function GetHWnd: Integer; dispid 11;
    function GetSubMenuCount(DocType: Integer; const fullMenuName: WideString): Integer; dispid 12;
    function GetSubMenus(DocType: Integer; const fullMenuName: WideString): OleVariant; dispid 13;
    function IGetSubMenus(DocType: Integer; const fullMenuName: WideString; numSubMenus: Integer): WideString; dispid 14;
  end;

// *********************************************************************//
// Interface: IStatusBarPane
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {931F2702-3257-4372-BBCC-CBD4A7FBBC41}
// *********************************************************************//
  IStatusBarPane = interface(IDispatch)
    ['{931F2702-3257-4372-BBCC-CBD4A7FBBC41}']
    function Get_Visible: WordBool; safecall;
    procedure Set_Visible(Visible: WordBool); safecall;
    function Get_text: WideString; safecall;
    procedure Set_text(const text: WideString); safecall;
    property Visible: WordBool read Get_Visible write Set_Visible;
    property text: WideString read Get_text write Set_text;
  end;

// *********************************************************************//
// DispIntf:  IStatusBarPaneDisp
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {931F2702-3257-4372-BBCC-CBD4A7FBBC41}
// *********************************************************************//
  IStatusBarPaneDisp = dispinterface
    ['{931F2702-3257-4372-BBCC-CBD4A7FBBC41}']
    property Visible: WordBool dispid 1;
    property text: WideString dispid 2;
  end;

// *********************************************************************//
// Interface: IAssemblyDoc
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {83A33D35-27C5-11CE-BFD4-00400513BB57}
// *********************************************************************//
  IAssemblyDoc = interface(IDispatch)
    ['{83A33D35-27C5-11CE-BFD4-00400513BB57}']
    function AddComponent(const compName: WideString; x: Double; y: Double; z: Double): WordBool; safecall;
    procedure Dummy2; safecall;
    procedure FeatureExtrusion; safecall;
    procedure EditRebuild; safecall;
    procedure Dummy3; safecall;
    procedure Dummy4; safecall;
    procedure ToolsCheckInterference; safecall;
    procedure Dummy5; safecall;
    procedure Dummy6; safecall;
    function GetFirstMember: IDispatch; safecall;
    function GetSelectedMember: IDispatch; safecall;
    function IGetFirstMember: IMember; safecall;
    function IGetSelectedMember: IMember; safecall;
    procedure Dummy7; safecall;
    procedure ViewCollapseAssembly; safecall;
    procedure ViewExplodeAssembly; safecall;
    procedure TranslateComponent; safecall;
    procedure InsertNewPart; safecall;
    procedure Dummy1; safecall;
    procedure RotateComponent; safecall;
    procedure FileDeriveComponentPart; safecall;
    procedure InsertCavity; safecall;
    procedure HideComponent; safecall;
    procedure ShowComponent; safecall;
    procedure FixComponent; safecall;
    procedure UnfixComponent; safecall;
    procedure EditAssembly; safecall;
    procedure EditPart; safecall;
    procedure OpenCompFile; safecall;
    procedure UpdateFeatureScope; safecall;
    procedure AddMate(mateType: Integer; align: Integer; flip: WordBool; dist: Double; angle: Double); safecall;
    procedure CompConfigProperties(m_suppressed: WordBool; m_show_component: WordBool; 
                                   m_fdetail: WordBool); safecall;
    function AddToFeatureScope(const compName: WideString): WordBool; safecall;
    function RemoveFromFeatureScope(const compName: WideString): WordBool; safecall;
    procedure EditExplodeParameters; safecall;
    procedure RotateComponentAxis; safecall;
    procedure ViewFeatureManagerByFeatures; safecall;
    procedure ComponentReload; safecall;
    procedure ViewFeatureManagerByDependencies; safecall;
    procedure AssemblyPartToggle; safecall;
    function FeatureByName(const Name: WideString): IDispatch; safecall;
    function IFeatureByName(const Name: WideString): IFeature; safecall;
    procedure InsertJoin; safecall;
    procedure UpdateBox; safecall;
    procedure InsertWeld(const type_: WideString; const shape: WideString; topDelta: Double; 
                         bottomDelta: Double; radius: Double; const part: WideString); safecall;
    procedure ForceRebuild; safecall;
    function GetEditTarget: IDispatch; safecall;
    function IGetEditTarget: IModelDoc; safecall;
    procedure InsertCavity2(scaleFactor: Double; scaleType: Integer); safecall;
    function AutoExplode: WordBool; safecall;
    function ShowExploded(showIt: WordBool): WordBool; safecall;
    function AddComponent2(const compName: WideString; x: Double; y: Double; z: Double): IDispatch; safecall;
    function IAddComponent2(const compName: WideString; x: Double; y: Double; z: Double): IComponent; safecall;
    procedure EditMate(mateType: Integer; align: Integer; flip: WordBool; dist: Double; 
                       angle: Double); safecall;
    function InsertDerivedPattern: WordBool; safecall;
    function ResolveAllLightWeightComponents(warnUser: WordBool): Integer; safecall;
    function GetLightWeightComponentCount: Integer; safecall;
    procedure InsertCavity3(scaleFactor: Double; scaleType: Integer; keepPieceIndex: Integer); safecall;
    function ComponentReload2(const component: IDispatch; ReadOnly: WordBool; options: Integer): Integer; safecall;
    function IComponentReload2(const component: IComponent; ReadOnly: WordBool; options: Integer): Integer; safecall;
    function CompConfigProperties2(Suppression: Integer; visibility: WordBool; 
                                   featureDetails: WordBool): WordBool; safecall;
    function AddPipePenetration: Integer; safecall;
    function AddPipingFitting(const pathname: WideString; const configName: WideString; 
                              alignmentIndex: Smallint): WordBool; safecall;
    function IsComponentTreeValid: WordBool; safecall;
    procedure ForceRebuild2(topOnly: WordBool); safecall;
    function SetDroppedFileConfigName(const configName: WideString): WordBool; safecall;
    function AddComponents(names: OleVariant; transforms: OleVariant): OleVariant; safecall;
    function IAddComponents(var count: Integer; var names: WideString; var transforms: Double): IComponent; safecall;
    function EditPart2(silent: WordBool; allowReadOnly: WordBool; var information: Integer): Integer; safecall;
    procedure InsertCavity4(scaleFactor_x: Double; scaleFactor_y: Double; scaleFactor_z: Double; 
                            isUniform: WordBool; scaleType: Integer; keepPieceIndex: Integer); safecall;
    procedure ToolsCheckInterference2(numComponents: Integer; lpComponents: OleVariant; 
                                      coincidentInterference: WordBool; out pComp: OleVariant; 
                                      out pFace: OleVariant); safecall;
    procedure IToolsCheckInterference2(numComponents: Integer; var lpComponents: IComponent; 
                                       coincidentInterference: WordBool; out pComp: OleVariant; 
                                       out pFace: OleVariant); safecall;
    function GetDroppedAtEntity: IDispatch; safecall;
    function CompConfigProperties3(Suppression: Integer; Solving: Integer; visibility: WordBool; 
                                   featureDetails: WordBool): WordBool; safecall;
    function IGetEditTarget2: IModelDoc2; safecall;
    function IAddComponent3(const compName: WideString; x: Double; y: Double; z: Double): IComponent2; safecall;
    function IComponentReload3(const component: IComponent2; ReadOnly: WordBool; options: Integer): Integer; safecall;
    function IAddComponents2(var count: Integer; var names: WideString; var transforms: Double): IComponent2; safecall;
    procedure IToolsCheckInterference3(numComponents: Integer; var lpComponents: IComponent2; 
                                       coincidentInterference: WordBool; out pComp: OleVariant; 
                                       out pFace: OleVariant); safecall;
    function SetDroppedFileName(const fileName: WideString): WordBool; safecall;
    function GetDragOperator: IDispatch; safecall;
    function IGetDragOperator: IDragOperator; safecall;
    procedure ViewFeatureManagerFeatureDetail(Detail: WordBool); safecall;
    function InsertJoin2(HideParts: WordBool; ForceContact: WordBool): WordBool; safecall;
    function DissolveSubAssembly: WordBool; safecall;
    function Get_EnablePresentation: WordBool; safecall;
    procedure Set_EnablePresentation(retval: WordBool); safecall;
    function SetComponentState(suppressionState: Integer; compArr: OleVariant; 
                               configOption: Integer; const whichConfig: WideString; 
                               saveClosedDocs: WordBool): WordBool; safecall;
    function ISetComponentState(suppressionState: Integer; numComps: Integer; 
                                var compArr: IComponent2; configOption: Integer; 
                                const whichConfig: WideString; saveClosedDocs: WordBool): WordBool; safecall;
    function ReplaceComponents(const fileName: WideString; const configName: WideString; 
                               replaceAllInstance: WordBool; reAttachMates: WordBool): WordBool; safecall;
    function GetVisibleComponentsInView: OleVariant; safecall;
    function GetVisibleComponentsInViewCount: Integer; safecall;
    function IGetVisibleComponentsInView(count: Integer): IComponent2; safecall;
    procedure MakeLightWeight; safecall;
    function GetBox(options: Integer): OleVariant; safecall;
    function IGetBox(options: Integer): Double; safecall;
    function GetFeatureScopeCount(const featureIn: IFeature): Integer; safecall;
    function GetFeatureScope(const featureIn: IFeature): OleVariant; safecall;
    function IGetFeatureScope(const featureIn: IFeature; numComponents: Integer): IComponent2; safecall;
    property EnablePresentation: WordBool read Get_EnablePresentation write Set_EnablePresentation;
  end;

// *********************************************************************//
// DispIntf:  IAssemblyDocDisp
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {83A33D35-27C5-11CE-BFD4-00400513BB57}
// *********************************************************************//
  IAssemblyDocDisp = dispinterface
    ['{83A33D35-27C5-11CE-BFD4-00400513BB57}']
    function AddComponent(const compName: WideString; x: Double; y: Double; z: Double): WordBool; dispid 1;
    procedure Dummy2; dispid 2;
    procedure FeatureExtrusion; dispid 3;
    procedure EditRebuild; dispid 4;
    procedure Dummy3; dispid 5;
    procedure Dummy4; dispid 6;
    procedure ToolsCheckInterference; dispid 7;
    procedure Dummy5; dispid 8;
    procedure Dummy6; dispid 9;
    function GetFirstMember: IDispatch; dispid 10;
    function GetSelectedMember: IDispatch; dispid 11;
    function IGetFirstMember: IMember; dispid 12;
    function IGetSelectedMember: IMember; dispid 13;
    procedure Dummy7; dispid 14;
    procedure ViewCollapseAssembly; dispid 15;
    procedure ViewExplodeAssembly; dispid 16;
    procedure TranslateComponent; dispid 17;
    procedure InsertNewPart; dispid 18;
    procedure Dummy1; dispid 19;
    procedure RotateComponent; dispid 20;
    procedure FileDeriveComponentPart; dispid 21;
    procedure InsertCavity; dispid 22;
    procedure HideComponent; dispid 23;
    procedure ShowComponent; dispid 24;
    procedure FixComponent; dispid 25;
    procedure UnfixComponent; dispid 26;
    procedure EditAssembly; dispid 27;
    procedure EditPart; dispid 28;
    procedure OpenCompFile; dispid 29;
    procedure UpdateFeatureScope; dispid 30;
    procedure AddMate(mateType: Integer; align: Integer; flip: WordBool; dist: Double; angle: Double); dispid 31;
    procedure CompConfigProperties(m_suppressed: WordBool; m_show_component: WordBool; 
                                   m_fdetail: WordBool); dispid 32;
    function AddToFeatureScope(const compName: WideString): WordBool; dispid 33;
    function RemoveFromFeatureScope(const compName: WideString): WordBool; dispid 34;
    procedure EditExplodeParameters; dispid 35;
    procedure RotateComponentAxis; dispid 36;
    procedure ViewFeatureManagerByFeatures; dispid 37;
    procedure ComponentReload; dispid 38;
    procedure ViewFeatureManagerByDependencies; dispid 39;
    procedure AssemblyPartToggle; dispid 40;
    function FeatureByName(const Name: WideString): IDispatch; dispid 41;
    function IFeatureByName(const Name: WideString): IFeature; dispid 42;
    procedure InsertJoin; dispid 43;
    procedure UpdateBox; dispid 44;
    procedure InsertWeld(const type_: WideString; const shape: WideString; topDelta: Double; 
                         bottomDelta: Double; radius: Double; const part: WideString); dispid 45;
    procedure ForceRebuild; dispid 46;
    function GetEditTarget: IDispatch; dispid 47;
    function IGetEditTarget: IModelDoc; dispid 48;
    procedure InsertCavity2(scaleFactor: Double; scaleType: Integer); dispid 49;
    function AutoExplode: WordBool; dispid 50;
    function ShowExploded(showIt: WordBool): WordBool; dispid 51;
    function AddComponent2(const compName: WideString; x: Double; y: Double; z: Double): IDispatch; dispid 52;
    function IAddComponent2(const compName: WideString; x: Double; y: Double; z: Double): IComponent; dispid 53;
    procedure EditMate(mateType: Integer; align: Integer; flip: WordBool; dist: Double; 
                       angle: Double); dispid 54;
    function InsertDerivedPattern: WordBool; dispid 55;
    function ResolveAllLightWeightComponents(warnUser: WordBool): Integer; dispid 56;
    function GetLightWeightComponentCount: Integer; dispid 57;
    procedure InsertCavity3(scaleFactor: Double; scaleType: Integer; keepPieceIndex: Integer); dispid 58;
    function ComponentReload2(const component: IDispatch; ReadOnly: WordBool; options: Integer): Integer; dispid 59;
    function IComponentReload2(const component: IComponent; ReadOnly: WordBool; options: Integer): Integer; dispid 60;
    function CompConfigProperties2(Suppression: Integer; visibility: WordBool; 
                                   featureDetails: WordBool): WordBool; dispid 61;
    function AddPipePenetration: Integer; dispid 62;
    function AddPipingFitting(const pathname: WideString; const configName: WideString; 
                              alignmentIndex: Smallint): WordBool; dispid 63;
    function IsComponentTreeValid: WordBool; dispid 64;
    procedure ForceRebuild2(topOnly: WordBool); dispid 65;
    function SetDroppedFileConfigName(const configName: WideString): WordBool; dispid 66;
    function AddComponents(names: OleVariant; transforms: OleVariant): OleVariant; dispid 67;
    function IAddComponents(var count: Integer; var names: WideString; var transforms: Double): IComponent; dispid 68;
    function EditPart2(silent: WordBool; allowReadOnly: WordBool; var information: Integer): Integer; dispid 69;
    procedure InsertCavity4(scaleFactor_x: Double; scaleFactor_y: Double; scaleFactor_z: Double; 
                            isUniform: WordBool; scaleType: Integer; keepPieceIndex: Integer); dispid 70;
    procedure ToolsCheckInterference2(numComponents: Integer; lpComponents: OleVariant; 
                                      coincidentInterference: WordBool; out pComp: OleVariant; 
                                      out pFace: OleVariant); dispid 71;
    procedure IToolsCheckInterference2(numComponents: Integer; var lpComponents: IComponent; 
                                       coincidentInterference: WordBool; out pComp: OleVariant; 
                                       out pFace: OleVariant); dispid 72;
    function GetDroppedAtEntity: IDispatch; dispid 73;
    function CompConfigProperties3(Suppression: Integer; Solving: Integer; visibility: WordBool; 
                                   featureDetails: WordBool): WordBool; dispid 74;
    function IGetEditTarget2: IModelDoc2; dispid 75;
    function IAddComponent3(const compName: WideString; x: Double; y: Double; z: Double): IComponent2; dispid 76;
    function IComponentReload3(const component: IComponent2; ReadOnly: WordBool; options: Integer): Integer; dispid 77;
    function IAddComponents2(var count: Integer; var names: WideString; var transforms: Double): IComponent2; dispid 78;
    procedure IToolsCheckInterference3(numComponents: Integer; var lpComponents: IComponent2; 
                                       coincidentInterference: WordBool; out pComp: OleVariant; 
                                       out pFace: OleVariant); dispid 79;
    function SetDroppedFileName(const fileName: WideString): WordBool; dispid 80;
    function GetDragOperator: IDispatch; dispid 81;
    function IGetDragOperator: IDragOperator; dispid 82;
    procedure ViewFeatureManagerFeatureDetail(Detail: WordBool); dispid 83;
    function InsertJoin2(HideParts: WordBool; ForceContact: WordBool): WordBool; dispid 84;
    function DissolveSubAssembly: WordBool; dispid 85;
    property EnablePresentation: WordBool dispid 86;
    function SetComponentState(suppressionState: Integer; compArr: OleVariant; 
                               configOption: Integer; const whichConfig: WideString; 
                               saveClosedDocs: WordBool): WordBool; dispid 87;
    function ISetComponentState(suppressionState: Integer; numComps: Integer; 
                                var compArr: IComponent2; configOption: Integer; 
                                const whichConfig: WideString; saveClosedDocs: WordBool): WordBool; dispid 88;
    function ReplaceComponents(const fileName: WideString; const configName: WideString; 
                               replaceAllInstance: WordBool; reAttachMates: WordBool): WordBool; dispid 89;
    function GetVisibleComponentsInView: OleVariant; dispid 90;
    function GetVisibleComponentsInViewCount: Integer; dispid 91;
    function IGetVisibleComponentsInView(count: Integer): IComponent2; dispid 92;
    procedure MakeLightWeight; dispid 93;
    function GetBox(options: Integer): OleVariant; dispid 94;
    function IGetBox(options: Integer): Double; dispid 95;
    function GetFeatureScopeCount(const featureIn: IFeature): Integer; dispid 96;
    function GetFeatureScope(const featureIn: IFeature): OleVariant; dispid 97;
    function IGetFeatureScope(const featureIn: IFeature; numComponents: Integer): IComponent2; dispid 98;
  end;

// *********************************************************************//
// Interface: IMember
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {83A33D4E-27C5-11CE-BFD4-00400513BB57}
// *********************************************************************//
  IMember = interface(IDispatch)
    ['{83A33D4E-27C5-11CE-BFD4-00400513BB57}']
    function Get_Dummy001: WideString; safecall;
    procedure Set_Dummy001(const retval: WideString); safecall;
    procedure Dummy002; safecall;
    procedure Dummy007; safecall;
    procedure Dummy003; safecall;
    procedure Dummy004; safecall;
    procedure Dummy008; safecall;
    procedure Dummy005; safecall;
    procedure Dummy006; safecall;
    procedure Dummy009; safecall;
    procedure Dummy010; safecall;
    procedure Dummy011; safecall;
    property Dummy001: WideString read Get_Dummy001 write Set_Dummy001;
  end;

// *********************************************************************//
// DispIntf:  IMemberDisp
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {83A33D4E-27C5-11CE-BFD4-00400513BB57}
// *********************************************************************//
  IMemberDisp = dispinterface
    ['{83A33D4E-27C5-11CE-BFD4-00400513BB57}']
    property Dummy001: WideString dispid 1;
    procedure Dummy002; dispid 2;
    procedure Dummy007; dispid 7;
    procedure Dummy003; dispid 3;
    procedure Dummy004; dispid 4;
    procedure Dummy008; dispid 8;
    procedure Dummy005; dispid 5;
    procedure Dummy006; dispid 6;
    procedure Dummy009; dispid 9;
    procedure Dummy010; dispid 10;
    procedure Dummy011; dispid 11;
  end;

// *********************************************************************//
// Interface: IDragOperator
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {E0AACE0F-3A47-437E-99B4-9330CD6186BA}
// *********************************************************************//
  IDragOperator = interface(IDispatch)
    ['{E0AACE0F-3A47-437E-99B4-9330CD6186BA}']
    function Get_IsRelaxationEval: WordBool; safecall;
    procedure Set_IsRelaxationEval(Method: WordBool); safecall;
    function Get_DragMode: Smallint; safecall;
    procedure Set_DragMode(mode: Smallint); safecall;
    function Get_IsDragSpecific: WordBool; safecall;
    procedure Set_IsDragSpecific(Value: WordBool); safecall;
    function Get_TransformType: Smallint; safecall;
    procedure Set_TransformType(type_: Smallint); safecall;
    function Get_IsDragByRay: WordBool; safecall;
    procedure Set_IsDragByRay(Value: WordBool); safecall;
    function Get_CollisionDetectionEnabled: WordBool; safecall;
    procedure Set_CollisionDetectionEnabled(result: WordBool); safecall;
    function Get_HighlightClashes: WordBool; safecall;
    procedure Set_HighlightClashes(result: WordBool); safecall;
    function Get_HearClashes: WordBool; safecall;
    procedure Set_HearClashes(result: WordBool); safecall;
    function Get_ApplyToThisConfiguration: WordBool; safecall;
    procedure Set_ApplyToThisConfiguration(result: WordBool); safecall;
    function Get_IgnoreComplexSurfaces: WordBool; safecall;
    procedure Set_IgnoreComplexSurfaces(result: WordBool); safecall;
    function Get_SmartMating: WordBool; safecall;
    procedure Set_SmartMating(result: WordBool); safecall;
    function Get_DynamicClearanceEnabled: WordBool; safecall;
    procedure Set_DynamicClearanceEnabled(result: WordBool); safecall;
    function AddComponent(const pDisp: IDispatch; appendFlag: WordBool): WordBool; safecall;
    function IAddComponent(const pComp: IComponent2; appendFlag: WordBool): WordBool; safecall;
    function BeginDrag: WordBool; safecall;
    function EndDrag: WordBool; safecall;
    function Drag(const pXform: IDispatch): WordBool; safecall;
    function IDrag(const pXform: IMathTransform): WordBool; safecall;
    function AddDynamicClearance(const comp1: IDispatch; const comp2: IDispatch; Value: Double; 
                                 appendFlag: WordBool; showDim: WordBool): Integer; safecall;
    function IAddDynamicClearance(const comp1: IComponent2; const comp2: IComponent2; 
                                  Value: Double; appendFlag: WordBool; showDim: WordBool): Integer; safecall;
    function Get_Clearance(nIndex: Integer): Double; safecall;
    function CollisionDetection(entityArray: OleVariant; partOnly: WordBool; stopAt: WordBool): WordBool; safecall;
    function ICollisionDetection(count: Integer; var componentArray: IComponent2; 
                                 partOnly: WordBool; stopAt: WordBool): WordBool; safecall;
    function GetDragPoint(out point: OleVariant): WordBool; safecall;
    function SetDragPoint(point: OleVariant): WordBool; safecall;
    function IGetDragPoint(out point: Double): WordBool; safecall;
    function ISetDragPoint(var point: Double): WordBool; safecall;
    property IsRelaxationEval: WordBool read Get_IsRelaxationEval write Set_IsRelaxationEval;
    property DragMode: Smallint read Get_DragMode write Set_DragMode;
    property IsDragSpecific: WordBool read Get_IsDragSpecific write Set_IsDragSpecific;
    property TransformType: Smallint read Get_TransformType write Set_TransformType;
    property IsDragByRay: WordBool read Get_IsDragByRay write Set_IsDragByRay;
    property CollisionDetectionEnabled: WordBool read Get_CollisionDetectionEnabled write Set_CollisionDetectionEnabled;
    property HighlightClashes: WordBool read Get_HighlightClashes write Set_HighlightClashes;
    property HearClashes: WordBool read Get_HearClashes write Set_HearClashes;
    property ApplyToThisConfiguration: WordBool read Get_ApplyToThisConfiguration write Set_ApplyToThisConfiguration;
    property IgnoreComplexSurfaces: WordBool read Get_IgnoreComplexSurfaces write Set_IgnoreComplexSurfaces;
    property SmartMating: WordBool read Get_SmartMating write Set_SmartMating;
    property DynamicClearanceEnabled: WordBool read Get_DynamicClearanceEnabled write Set_DynamicClearanceEnabled;
    property Clearance[nIndex: Integer]: Double read Get_Clearance;
  end;

// *********************************************************************//
// DispIntf:  IDragOperatorDisp
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {E0AACE0F-3A47-437E-99B4-9330CD6186BA}
// *********************************************************************//
  IDragOperatorDisp = dispinterface
    ['{E0AACE0F-3A47-437E-99B4-9330CD6186BA}']
    property IsRelaxationEval: WordBool dispid 1;
    property DragMode: Smallint dispid 2;
    property IsDragSpecific: WordBool dispid 3;
    property TransformType: Smallint dispid 4;
    property IsDragByRay: WordBool dispid 5;
    property CollisionDetectionEnabled: WordBool dispid 6;
    property HighlightClashes: WordBool dispid 7;
    property HearClashes: WordBool dispid 8;
    property ApplyToThisConfiguration: WordBool dispid 9;
    property IgnoreComplexSurfaces: WordBool dispid 10;
    property SmartMating: WordBool dispid 11;
    property DynamicClearanceEnabled: WordBool dispid 12;
    function AddComponent(const pDisp: IDispatch; appendFlag: WordBool): WordBool; dispid 13;
    function IAddComponent(const pComp: IComponent2; appendFlag: WordBool): WordBool; dispid 14;
    function BeginDrag: WordBool; dispid 15;
    function EndDrag: WordBool; dispid 16;
    function Drag(const pXform: IDispatch): WordBool; dispid 17;
    function IDrag(const pXform: IMathTransform): WordBool; dispid 18;
    function AddDynamicClearance(const comp1: IDispatch; const comp2: IDispatch; Value: Double; 
                                 appendFlag: WordBool; showDim: WordBool): Integer; dispid 19;
    function IAddDynamicClearance(const comp1: IComponent2; const comp2: IComponent2; 
                                  Value: Double; appendFlag: WordBool; showDim: WordBool): Integer; dispid 20;
    property Clearance[nIndex: Integer]: Double readonly dispid 21;
    function CollisionDetection(entityArray: OleVariant; partOnly: WordBool; stopAt: WordBool): WordBool; dispid 22;
    function ICollisionDetection(count: Integer; var componentArray: IComponent2; 
                                 partOnly: WordBool; stopAt: WordBool): WordBool; dispid 23;
    function GetDragPoint(out point: OleVariant): WordBool; dispid 24;
    function SetDragPoint(point: OleVariant): WordBool; dispid 25;
    function IGetDragPoint(out point: Double): WordBool; dispid 26;
    function ISetDragPoint(var point: Double): WordBool; dispid 27;
  end;

// *********************************************************************//
// Interface: IDrawingDoc
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {83A33D33-27C5-11CE-BFD4-00400513BB57}
// *********************************************************************//
  IDrawingDoc = interface(IDispatch)
    ['{83A33D33-27C5-11CE-BFD4-00400513BB57}']
    procedure NewNote(const text: WideString; height: Double); safecall;
    procedure NewSheet(const Name: WideString; paperSize: Smallint; templateIn: Smallint; 
                       scale1: Double; Scale2: Double); safecall;
    procedure SetupSheet(const Name: WideString; paperSize: Smallint; templateIn: Smallint; 
                         scale1: Double; Scale2: Double); safecall;
    function NewGtol: IDispatch; safecall;
    function INewGtol: IGtol; safecall;
    function EditSelectedGtol: IDispatch; safecall;
    function IEditSelectedGtol: IGtol; safecall;
    function CreateLinearDim(p0: OleVariant; P1: OleVariant; P2: OleVariant; P3: OleVariant; 
                             p4: OleVariant; angle: Double; arrowSize: Double; 
                             const text: WideString; textHeight: Double; witnessGap: Double; 
                             witnessOvershoot: Double): WordBool; safecall;
    function CreateAngDim(vP0: OleVariant; vP1: OleVariant; vP2: OleVariant; vP3: OleVariant; 
                          vP4: OleVariant; vP5: OleVariant; vP6: OleVariant; arrowSize: Double; 
                          const text: WideString; textHeight: Double; witnessGap: Double; 
                          witnessOvershoot: Double): WordBool; safecall;
    function CreateDiamDim(dimVal: Double; vP0: OleVariant; vP1: OleVariant; vP2: OleVariant; 
                           vP3: OleVariant; arrowSize: Double; const text: WideString; 
                           textHeight: Double; witnessGap: Double; witnessOvershoot: Double): WordBool; safecall;
    function CreateViewport(LowerLeftX: Double; LowerLeftY: Double; UpperRightX: Double; 
                            UpperRightY: Double; sketchSize: Smallint): WideString; safecall;
    function ActivateView(const viewname: WideString): WordBool; safecall;
    function Create1stAngleViews(const ModelName: WideString): WordBool; safecall;
    function Create3rdAngleViews(const ModelName: WideString): WordBool; safecall;
    function CreateDrawViewFromModelView(const ModelName: WideString; const viewname: WideString; 
                                         locX: Double; locY: Double; locZ: Double): WordBool; safecall;
    function CreateUnfoldedViewAt(x: Double; y: Double; z: Double): WordBool; safecall;
    function CreateText(const textString: WideString; textX: Double; textY: Double; textZ: Double; 
                        textHeight: Double; textAngle: Double): WordBool; safecall;
    procedure EditRebuild; safecall;
    procedure ViewFullPage; safecall;
    procedure Dummy018; safecall;
    procedure CreateSectionView; safecall;
    procedure SheetNext; safecall;
    procedure Dimensions; safecall;
    procedure InsertGroup; safecall;
    procedure SheetPrevious; safecall;
    procedure AlignVert; safecall;
    procedure AlignHorz; safecall;
    procedure InsertRefDim; safecall;
    procedure MakeSectionLine; safecall;
    procedure InsertBaseDim; safecall;
    procedure EditSketch; safecall;
    procedure CreateDetailView; safecall;
    procedure CreateAuxiliaryView; safecall;
    procedure StartDrawing; safecall;
    procedure EndDrawing; safecall;
    function GetFirstView: IDispatch; safecall;
    function IGetFirstView: IView; safecall;
    function GetInsertionPoint: OleVariant; safecall;
    procedure AttachDimensions; safecall;
    procedure InsertModelDimensions(option: Integer); safecall;
    procedure EditTemplate; safecall;
    procedure InsertOrdinate; safecall;
    procedure UnsuppressView; safecall;
    procedure HideShowDrawingViews; safecall;
    procedure SuppressView; safecall;
    procedure AlignOrdinate; safecall;
    procedure SketchDim; safecall;
    procedure CenterMark; safecall;
    procedure EditSheet; safecall;
    procedure InsertHorizontalOrdinate; safecall;
    procedure EditOrdinate; safecall;
    procedure InsertVerticalOrdinate; safecall;
    procedure ChangeOrdDir; safecall;
    function GetLineFontCount: Integer; safecall;
    function GetLineFontName(index: Integer): WideString; safecall;
    function GetLineFontInfo(index: Integer): OleVariant; safecall;
    procedure ICreateLinearDim(var p0: Double; var P1: Double; var P2: Double; var P3: Double; 
                               var p4: Double; angle: Double; arrowSize: Double; 
                               const text: WideString; textHeight: Double; witnessGap: Double; 
                               witnessOvershoot: Double); safecall;
    procedure ICreateAngDim(var p0: Double; var P1: Double; var P2: Double; var P3: Double; 
                            var p4: Double; var P5: Double; var P6: Double; arrowSize: Double; 
                            const text: WideString; textHeight: Double; witnessGap: Double; 
                            witnessOvershoot: Double); safecall;
    procedure ICreateDiamDim(DimValue: Double; var p0: Double; var P1: Double; var P2: Double; 
                             var P3: Double; arrowSize: Double; const text: WideString; 
                             textHeight: Double; witnessGap: Double; witnessOvershoot: Double); safecall;
    function IGetInsertionPoint: Double; safecall;
    function CreateCompoundNote(height: Double; x: Double; y: Double; z: Double): IDispatch; safecall;
    function ICreateCompoundNote(height: Double; x: Double; y: Double; z: Double): INote; safecall;
    function CreateOrdinateDim(p0: OleVariant; P1: OleVariant; P2: OleVariant; P3: OleVariant; 
                               p4: OleVariant; angle: Double; arrowSize: Double; 
                               const text: WideString; textHeight: Double; witnessGap: Double; 
                               witnessOvershoot: Double): WordBool; safecall;
    procedure ICreateOrdinateDim(var p0: Double; var P1: Double; var P2: Double; var P3: Double; 
                                 var p4: Double; angle: Double; arrowSize: Double; 
                                 const text: WideString; textHeight: Double; witnessGap: Double; 
                                 witnessOvershoot: Double); safecall;
    procedure InsertNewNote(const text: WideString; noLeader: WordBool; balloonNote: WordBool; 
                            bentLeader: WordBool; arrowStyle: Smallint; leaderSide: Smallint); safecall;
    function AddCenterMark(cmSize: Double; cmShowLines: WordBool): WordBool; safecall;
    procedure InsertWeldSymbol(const dim1: WideString; const symbol: WideString; 
                               const dim2: WideString; symmetric: WordBool; fieldWeld: WordBool; 
                               showOtherSide: WordBool; dashOnTop: WordBool; peripheral: WordBool; 
                               hasProcess: WordBool; const processValue: WideString); safecall;
    function InsertSurfaceFinishSymbol(symType: Integer; leaderType: Integer; locX: Double; 
                                       locY: Double; locZ: Double; laySymbol: Integer; 
                                       arrowType: Integer; const machAllowance: WideString; 
                                       const otherVals: WideString; const prodMethod: WideString; 
                                       const sampleLen: WideString; const maxRoughness: WideString; 
                                       const minRoughness: WideString; 
                                       const roughnessSpacing: WideString): WordBool; safecall;
    function ModifySurfaceFinishSymbol(symType: Integer; leaderType: Integer; locX: Double; 
                                       locY: Double; locZ: Double; laySymbol: Integer; 
                                       arrowType: Integer; const machAllowance: WideString; 
                                       const otherVals: WideString; const prodMethod: WideString; 
                                       const sampleLen: WideString; const maxRoughness: WideString; 
                                       const minRoughness: WideString; 
                                       const roughnessSpacing: WideString): WordBool; safecall;
    function GetCurrentSheet: IDispatch; safecall;
    function IGetCurrentSheet: ISheet; safecall;
    procedure CreateConstructionGeometry; safecall;
    procedure ViewDisplayHidden; safecall;
    procedure InsertBreakHorizontal; safecall;
    procedure ViewDisplayWireframe; safecall;
    procedure BreakLineZigZagCut; safecall;
    procedure BreakView; safecall;
    procedure ViewDisplayHiddengreyed; safecall;
    procedure ViewTangentEdges; safecall;
    procedure BreakLineSplineCut; safecall;
    procedure InsertBreakVertical; safecall;
    procedure UnBreakView; safecall;
    procedure BreakLineStraightCut; safecall;
    procedure InsertDatumTag; safecall;
    procedure ToggleGrid; safecall;
    procedure FlipSectionLine; safecall;
    function FeatureByName(const Name: WideString): IDispatch; safecall;
    function IFeatureByName(const Name: WideString): IFeature; safecall;
    function NewSheet2(const Name: WideString; paperSize: Integer; templateIn: Integer; 
                       scale1: Double; Scale2: Double; firstAngle: WordBool; 
                       const templateName: WideString; width: Double; height: Double): WordBool; safecall;
    function CreateLinearDim2(p0: OleVariant; P1: OleVariant; P2: OleVariant; P3: OleVariant; 
                              p4: OleVariant; val: Double; primPrec: Integer; 
                              const text: WideString; TextPoint: OleVariant; angle: Double; 
                              textHeight: Double; const prefix: WideString; 
                              const suffix: WideString; const callout1: WideString; 
                              const callout2: WideString; tolType: Integer; 
                              const tolMin: WideString; const tolMax: WideString; tolPrec: Integer; 
                              arrowSize: Double; arrowStyle: Integer; arrowDir: Integer; 
                              witnessGap: Double; witnessOvershoot: Double; dualDisplay: WordBool; 
                              dualPrec: Integer): WordBool; safecall;
    procedure ICreateLinearDim2(var p0: Double; var P1: Double; var P2: Double; var P3: Double; 
                                var p4: Double; val: Double; primPrec: Integer; 
                                const text: WideString; var TextPoint: Double; angle: Double; 
                                textHeight: Double; const prefix: WideString; 
                                const suffix: WideString; const callout1: WideString; 
                                const callout2: WideString; tolType: Integer; 
                                const tolMin: WideString; const tolMax: WideString; 
                                tolPrec: Integer; arrowSize: Double; arrowStyle: Integer; 
                                arrowDir: Integer; witnessGap: Double; witnessOvershoot: Double; 
                                dualDisplay: WordBool; dualPrecision: Integer); safecall;
    function CreateAngDim2(vP0: OleVariant; vP1: OleVariant; vP2: OleVariant; vP3: OleVariant; 
                           vP4: OleVariant; vP5: OleVariant; vP6: OleVariant; arrowSize: Double; 
                           const text: WideString; textHeight: Double; witnessGap: Double; 
                           witnessOvershoot: Double; vTextPoint: OleVariant): WordBool; safecall;
    procedure ICreateAngDim2(var p0: Double; var P1: Double; var P2: Double; var P3: Double; 
                             var p4: Double; var P5: Double; var P6: Double; arrowSize: Double; 
                             const text: WideString; textHeight: Double; witnessGap: Double; 
                             witnessOvershoot: Double; var TextPoint: Double); safecall;
    function CreateDiamDim2(dimVal: Double; vP0: OleVariant; vP1: OleVariant; vP2: OleVariant; 
                            vP3: OleVariant; arrowSize: Double; const text: WideString; 
                            textHeight: Double; witnessGap: Double; witnessOvershoot: Double; 
                            vTextPoint: OleVariant): WordBool; safecall;
    procedure ICreateDiamDim2(DimValue: Double; var p0: Double; var P1: Double; var P2: Double; 
                              var P3: Double; arrowSize: Double; const text: WideString; 
                              textHeight: Double; witnessGap: Double; witnessOvershoot: Double; 
                              var TextPoint: Double); safecall;
    function CreateOrdinateDim2(p0: OleVariant; P1: OleVariant; P2: OleVariant; P3: OleVariant; 
                                p4: OleVariant; angle: Double; arrowSize: Double; 
                                const text: WideString; textHeight: Double; witnessGap: Double; 
                                witnessOvershoot: Double; P5: OleVariant): WordBool; safecall;
    procedure ICreateOrdinateDim2(var p0: Double; var P1: Double; var P2: Double; var P3: Double; 
                                  var p4: Double; angle: Double; arrowSize: Double; 
                                  const text: WideString; textHeight: Double; witnessGap: Double; 
                                  witnessOvershoot: Double; var P5: Double); safecall;
    procedure InsertNewNote2(const upperText: WideString; const lowerText: WideString; 
                             noLeader: WordBool; bentLeader: WordBool; arrowStyle: Smallint; 
                             leaderSide: Smallint; angle: Double; balloonStyle: Smallint; 
                             balloonFit: Smallint; upperNoteContent: Smallint; 
                             lowerNoteContent: Smallint); safecall;
    procedure DragModelDimension(const viewname: WideString; dropEffect: Smallint; x: Double; 
                                 y: Double; z: Double); safecall;
    function CreateViewport2(LowerLeftX: Double; LowerLeftY: Double; UpperRightX: Double; 
                             UpperRightY: Double; sketchSize: Smallint; Scale: Double): WideString; safecall;
    procedure SetupSheet2(const Name: WideString; paperSize: Smallint; templateIn: Smallint; 
                          scale1: Double; Scale2: Double; skPointsFlag: Integer); safecall;
    procedure OnComponentProperties; safecall;
    function GetLineFontCount2: Integer; safecall;
    function GetLineFontName2(index: Integer): WideString; safecall;
    function GetLineFontInfo2(index: Integer): OleVariant; safecall;
    procedure SetLineStyle(const styleName: WideString); safecall;
    procedure SetLineWidth(width: Integer); safecall;
    procedure SetLineColor(Color: Integer); safecall;
    procedure ShowEdge; safecall;
    procedure HideEdge; safecall;
    procedure AddHoleCallout; safecall;
    function GetPenCount: Integer; safecall;
    function GetPenInfo: OleVariant; safecall;
    function IGetPenInfo: Integer; safecall;
    function GetLineFontId(index: Integer): Integer; safecall;
    function CreateAuxiliaryViewAt(x: Double; y: Double; z: Double; notAligned: WordBool): WordBool; safecall;
    function CreateDetailViewAt(x: Double; y: Double; z: Double): WordBool; safecall;
    function CreateSectionViewAt(x: Double; y: Double; z: Double; notAligned: WordBool; 
                                 isOffsetSection: WordBool): WordBool; safecall;
    function CreateUnfoldedViewAt2(x: Double; y: Double; z: Double; notAligned: WordBool): WordBool; safecall;
    function SetupSheet3(const Name: WideString; paperSize: Integer; templateIn: Integer; 
                         scale1: Double; Scale2: Double; firstAngle: WordBool; 
                         const templateName: WideString; width: Double; height: Double): WordBool; safecall;
    function InsertModelAnnotations(option: Integer; allTypes: WordBool; types: Integer; 
                                    allViews: WordBool): WordBool; safecall;
    procedure InsertCustomSymbol(const symbolPath: WideString); safecall;
    function GetSheetCount: Integer; safecall;
    function GetSheetNames: OleVariant; safecall;
    function IGetSheetNames(var count: Integer): WideString; safecall;
    function ActivateSheet(const Name: WideString): WordBool; safecall;
    function CreateText2(const textString: WideString; textX: Double; textY: Double; textZ: Double; 
                         textHeight: Double; textAngle: Double): IDispatch; safecall;
    function ICreateText2(const textString: WideString; textX: Double; textY: Double; 
                          textZ: Double; textHeight: Double; textAngle: Double): INote; safecall;
    function NewSheet3(const Name: WideString; paperSize: Integer; templateIn: Integer; 
                       scale1: Double; Scale2: Double; firstAngle: WordBool; 
                       const templateName: WideString; width: Double; height: Double; 
                       const propertyViewName: WideString): WordBool; safecall;
    function SetupSheet4(const Name: WideString; paperSize: Integer; templateIn: Integer; 
                         scale1: Double; Scale2: Double; firstAngle: WordBool; 
                         const templateName: WideString; width: Double; height: Double; 
                         const propertyViewName: WideString): WordBool; safecall;
    function CreateLinearDim3(p0: OleVariant; P1: OleVariant; P2: OleVariant; P3: OleVariant; 
                              p4: OleVariant; val: Double; primPrec: Integer; 
                              const text: WideString; TextPoint: OleVariant; angle: Double; 
                              textHeight: Double; const prefix: WideString; 
                              const suffix: WideString; const callout1: WideString; 
                              const callout2: WideString; tolType: Integer; 
                              const tolMin: WideString; const tolMax: WideString; tolPrec: Integer; 
                              arrowSize: Double; arrowStyle: Integer; arrowDir: Integer; 
                              witnessGap: Double; witnessOvershoot: Double; dualDisplay: WordBool; 
                              dualPrec: Integer): IDispatch; safecall;
    function ICreateLinearDim3(var p0: Double; var P1: Double; var P2: Double; var P3: Double; 
                               var p4: Double; val: Double; primPrec: Integer; 
                               const text: WideString; var TextPoint: Double; angle: Double; 
                               textHeight: Double; const prefix: WideString; 
                               const suffix: WideString; const callout1: WideString; 
                               const callout2: WideString; tolType: Integer; 
                               const tolMin: WideString; const tolMax: WideString; 
                               tolPrec: Integer; arrowSize: Double; arrowStyle: Integer; 
                               arrowDir: Integer; witnessGap: Double; witnessOvershoot: Double; 
                               dualDisplay: WordBool; dualPrecision: Integer): IDisplayDimension; safecall;
    function CreateAngDim3(vP0: OleVariant; vP1: OleVariant; vP2: OleVariant; vP3: OleVariant; 
                           vP4: OleVariant; vP5: OleVariant; vP6: OleVariant; arrowSize: Double; 
                           const text: WideString; textHeight: Double; witnessGap: Double; 
                           witnessOvershoot: Double; vTextPoint: OleVariant): IDispatch; safecall;
    function ICreateAngDim3(var p0: Double; var P1: Double; var P2: Double; var P3: Double; 
                            var p4: Double; var P5: Double; var P6: Double; arrowSize: Double; 
                            const text: WideString; textHeight: Double; witnessGap: Double; 
                            witnessOvershoot: Double; var TextPoint: Double): IDisplayDimension; safecall;
    function CreateDiamDim3(dimVal: Double; vP0: OleVariant; vP1: OleVariant; vP2: OleVariant; 
                            vP3: OleVariant; arrowSize: Double; const text: WideString; 
                            textHeight: Double; witnessGap: Double; witnessOvershoot: Double; 
                            vTextPoint: OleVariant): IDispatch; safecall;
    function ICreateDiamDim3(DimValue: Double; var p0: Double; var P1: Double; var P2: Double; 
                             var P3: Double; arrowSize: Double; const text: WideString; 
                             textHeight: Double; witnessGap: Double; witnessOvershoot: Double; 
                             var TextPoint: Double): IDisplayDimension; safecall;
    function CreateOrdinateDim3(p0: OleVariant; P1: OleVariant; P2: OleVariant; P3: OleVariant; 
                                p4: OleVariant; angle: Double; arrowSize: Double; 
                                const text: WideString; textHeight: Double; witnessGap: Double; 
                                witnessOvershoot: Double; P5: OleVariant): IDispatch; safecall;
    function ICreateOrdinateDim3(var p0: Double; var P1: Double; var P2: Double; var P3: Double; 
                                 var p4: Double; angle: Double; arrowSize: Double; 
                                 const text: WideString; textHeight: Double; witnessGap: Double; 
                                 witnessOvershoot: Double; var P5: Double): IDisplayDimension; safecall;
    procedure ForceRebuild; safecall;
    function AddOrdinateDimension(DimType: Integer; locX: Double; locY: Double; locZ: Double): WordBool; safecall;
    function CreateLayer(const layerName: WideString; const layerDesc: WideString; 
                         layerColor: Integer; layerStyle: Integer; layerWidth: Integer; 
                         bOn: WordBool): WordBool; safecall;
    function SetCurrentLayer(const layerName: WideString): WordBool; safecall;
    function DrawingViewRotate(newAngle: Double): WordBool; safecall;
    function CreateDetailViewAt2(x: Double; y: Double; z: Double): WordBool; safecall;
    procedure RestoreRotation; safecall;
    function GetEditSheet: WordBool; safecall;
    procedure TranslateDrawing(deltaX: Double; deltaY: Double); safecall;
    function Create1stAngleViews2(const ModelName: WideString): WordBool; safecall;
    function Create3rdAngleViews2(const ModelName: WideString): WordBool; safecall;
    procedure HideShowDimensions; safecall;
    function CreateLinearDim4(p0: OleVariant; P1: OleVariant; P2: OleVariant; P3: OleVariant; 
                              p4: OleVariant; TextPoint: OleVariant; val: Double; angle: Double; 
                              textHeight: Double): IDispatch; safecall;
    function ICreateLinearDim4(var p0: Double; var P1: Double; var P2: Double; var P3: Double; 
                               var p4: Double; var TextPoint: Double; val: Double; angle: Double; 
                               textHeight: Double): IDisplayDimension; safecall;
    function CreateDiamDim4(p0: OleVariant; P1: OleVariant; P2: OleVariant; P3: OleVariant; 
                            TextPoint: OleVariant; val: Double; textHeight: Double): IDispatch; safecall;
    function ICreateDiamDim4(var p0: Double; var P1: Double; var P2: Double; var P3: Double; 
                             var TextPoint: Double; val: Double; textHeight: Double): IDisplayDimension; safecall;
    function CreateOrdinateDim4(p0: OleVariant; P1: OleVariant; P2: OleVariant; P3: OleVariant; 
                                p4: OleVariant; P5: OleVariant; val: Double; angle: Double; 
                                textHeight: Double): IDispatch; safecall;
    function ICreateOrdinateDim4(var p0: Double; var P1: Double; var P2: Double; var P3: Double; 
                                 var p4: Double; var P5: Double; val: Double; angle: Double; 
                                 textHeight: Double): IDisplayDimension; safecall;
    function CreateAngDim4(p0: OleVariant; P1: OleVariant; P2: OleVariant; P3: OleVariant; 
                           p4: OleVariant; P5: OleVariant; P6: OleVariant; TextPoint: OleVariant; 
                           textHeight: Double): IDispatch; safecall;
    function ICreateAngDim4(var p0: Double; var P1: Double; var P2: Double; var P3: Double; 
                            var p4: Double; var P5: Double; var P6: Double; var TextPoint: Double; 
                            textHeight: Double): IDisplayDimension; safecall;
    function CreateDetailViewAt3(x: Double; y: Double; z: Double; Style: Integer; scale1: Double; 
                                 Scale2: Double; const labelIn: WideString; showtype: Integer; 
                                 fulloutline: WordBool): IDispatch; safecall;
    function ICreateDetailViewAt3(x: Double; y: Double; z: Double; Style: Integer; scale1: Double; 
                                  Scale2: Double; const labelIn: WideString; showtype: Integer; 
                                  fulloutline: WordBool): IView; safecall;
    function CreateSectionViewAt2(x: Double; y: Double; z: Double; notAligned: WordBool; 
                                  isOffsetSection: WordBool; const Label_: WideString; 
                                  chgdirection: WordBool; scwithmodel: WordBool; partial: WordBool; 
                                  dispsurfcut: WordBool): IDispatch; safecall;
    function ICreateSectionViewAt2(x: Double; y: Double; z: Double; notAligned: WordBool; 
                                   isOffsetSection: WordBool; const Label_: WideString; 
                                   chgdirection: WordBool; scwithmodel: WordBool; 
                                   partial: WordBool; dispsurfcut: WordBool): IView; safecall;
    function CreateAuxiliaryViewAt2(x: Double; y: Double; z: Double; notAligned: WordBool; 
                                    const Label_: WideString; showarrow: WordBool; flip: WordBool): IDispatch; safecall;
    function ICreateAuxiliaryViewAt2(x: Double; y: Double; z: Double; notAligned: WordBool; 
                                     const Label_: WideString; showarrow: WordBool; flip: WordBool): IView; safecall;
    procedure MakeCustomSymbol; safecall;
    procedure ExplodeCustomSymbol; safecall;
    procedure SaveCustomSymbol(const filenameIn: WideString); safecall;
    function CreateBreakOutSection(depth: Double): WordBool; safecall;
    procedure InsertThreadCallout; safecall;
    function CreateFlatPatternViewFromModelView(const ModelName: WideString; 
                                                const configName: WideString; locX: Double; 
                                                locY: Double; locZ: Double): WordBool; safecall;
    function ChangeRefConfigurationOfFlatPatternView(const ModelName: WideString; 
                                                     const configName: WideString): WordBool; safecall;
    function AddHoleCallout2(x: Double; y: Double; z: Double): IDispatch; safecall;
    function IAddHoleCallout2(x: Double; y: Double; z: Double): IDisplayDimension; safecall;
    procedure EditCenterMarkProperties(angle: Double; size: Double; lines: WordBool; 
                                       docSettings: WordBool); safecall;
    function InsertDowelSymbol: IDispatch; safecall;
    function IInsertDowelSymbol: IDowelSymbol; safecall;
    procedure InsertMultiJogLeader; safecall;
    function Get_HiddenViewsVisible: WordBool; safecall;
    procedure Set_HiddenViewsVisible(Visible: WordBool); safecall;
    function AddChamferDim(x: Double; y: Double; z: Double): IDispatch; safecall;
    function IAddChamferDim(x: Double; y: Double; z: Double): IDisplayDimension; safecall;
    function MakeCustomSymbol2: IDispatch; safecall;
    function IMakeCustomSymbol2: ICustomSymbol; safecall;
    function InsertCustomSymbol2(const fileName: WideString): IDispatch; safecall;
    function IInsertCustomSymbol2(const fileName: WideString): ICustomSymbol; safecall;
    function CreateCustomSymbol(segments: OleVariant; points: OleVariant; Notes: OleVariant): IDispatch; safecall;
    function ICreateCustomSymbol(SegmentCount: Integer; var segments: ISketchSegment; 
                                 PointCount: Integer; var points: ISketchPoint; NoteCount: Integer; 
                                 var Notes: INote): ICustomSymbol; safecall;
    procedure ViewDisplayShaded; safecall;
    procedure ChangeComponentLayer(const layerName: WideString; allViews: WordBool); safecall;
    function Get_AutomaticViewUpdate: WordBool; safecall;
    procedure Set_AutomaticViewUpdate(Update: WordBool); safecall;
    function Get_ActiveDrawingView: IDispatch; safecall;
    function Get_IActiveDrawingView: IView; safecall;
    function InsertCenterMark(useDoc: WordBool; size: Double; ShowLines: WordBool; angle: Double): ICenterMark; safecall;
    function CreateFlatPatternViewFromModelView2(const ModelName: WideString; 
                                                 const configName: WideString; locX: Double; 
                                                 locY: Double; locZ: Double; hideBendLines: WordBool): WordBool; safecall;
    procedure ViewHlrQuality; safecall;
    procedure ViewModelEdges; safecall;
    function GetBlockDefinitionCount: Integer; safecall;
    function GetBlockDefinitions: OleVariant; safecall;
    function IGetBlockDefinitions(count: Integer): IBlockDefinition; safecall;
    function GetBlockDefinition(const Name: WideString): IBlockDefinition; safecall;
    function MakeBlockDefinition(const Name: WideString; const XRefFileName: WideString; 
                                 Instance: WordBool): IBlockDefinition; safecall;
    function CreateBlockDefinition(const Name: WideString; const XRefFileName: WideString; 
                                   Instance: WordBool; segments: OleVariant; points: OleVariant; 
                                   Notes: OleVariant; Dimensions: OleVariant; Blocks: OleVariant): IDispatch; safecall;
    function ICreateBlockDefinition(const Name: WideString; const XRefFileName: WideString; 
                                    Instance: WordBool; SegmentCount: Integer; 
                                    var segments: ISketchSegment; PointCount: Integer; 
                                    var points: ISketchPoint; NoteCount: Integer; var Notes: INote; 
                                    DimensionCount: Integer; var Dimensions: IDisplayDimension; 
                                    BlockCount: Integer; var Blocks: IBlockInstance): IBlockDefinition; safecall;
    function InsertBlock(const fileName: WideString; x: Double; y: Double; angle: Double; 
                         Scale: Double): IBlockInstance; safecall;
    function SaveBlock(const fileName: WideString): WordBool; safecall;
    function ExplodeBlockInstance: WordBool; safecall;
    function InsertCenterMark2(Style: Integer; propagate: WordBool): ICenterMark; safecall;
    function InsertCenterLine: WordBool; safecall;
    property HiddenViewsVisible: WordBool read Get_HiddenViewsVisible write Set_HiddenViewsVisible;
    property AutomaticViewUpdate: WordBool read Get_AutomaticViewUpdate write Set_AutomaticViewUpdate;
    property ActiveDrawingView: IDispatch read Get_ActiveDrawingView;
    property IActiveDrawingView: IView read Get_IActiveDrawingView;
  end;

// *********************************************************************//
// DispIntf:  IDrawingDocDisp
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {83A33D33-27C5-11CE-BFD4-00400513BB57}
// *********************************************************************//
  IDrawingDocDisp = dispinterface
    ['{83A33D33-27C5-11CE-BFD4-00400513BB57}']
    procedure NewNote(const text: WideString; height: Double); dispid 1;
    procedure NewSheet(const Name: WideString; paperSize: Smallint; templateIn: Smallint; 
                       scale1: Double; Scale2: Double); dispid 2;
    procedure SetupSheet(const Name: WideString; paperSize: Smallint; templateIn: Smallint; 
                         scale1: Double; Scale2: Double); dispid 3;
    function NewGtol: IDispatch; dispid 4;
    function INewGtol: IGtol; dispid 38;
    function EditSelectedGtol: IDispatch; dispid 5;
    function IEditSelectedGtol: IGtol; dispid 39;
    function CreateLinearDim(p0: OleVariant; P1: OleVariant; P2: OleVariant; P3: OleVariant; 
                             p4: OleVariant; angle: Double; arrowSize: Double; 
                             const text: WideString; textHeight: Double; witnessGap: Double; 
                             witnessOvershoot: Double): WordBool; dispid 6;
    function CreateAngDim(vP0: OleVariant; vP1: OleVariant; vP2: OleVariant; vP3: OleVariant; 
                          vP4: OleVariant; vP5: OleVariant; vP6: OleVariant; arrowSize: Double; 
                          const text: WideString; textHeight: Double; witnessGap: Double; 
                          witnessOvershoot: Double): WordBool; dispid 7;
    function CreateDiamDim(dimVal: Double; vP0: OleVariant; vP1: OleVariant; vP2: OleVariant; 
                           vP3: OleVariant; arrowSize: Double; const text: WideString; 
                           textHeight: Double; witnessGap: Double; witnessOvershoot: Double): WordBool; dispid 8;
    function CreateViewport(LowerLeftX: Double; LowerLeftY: Double; UpperRightX: Double; 
                            UpperRightY: Double; sketchSize: Smallint): WideString; dispid 9;
    function ActivateView(const viewname: WideString): WordBool; dispid 10;
    function Create1stAngleViews(const ModelName: WideString): WordBool; dispid 11;
    function Create3rdAngleViews(const ModelName: WideString): WordBool; dispid 12;
    function CreateDrawViewFromModelView(const ModelName: WideString; const viewname: WideString; 
                                         locX: Double; locY: Double; locZ: Double): WordBool; dispid 13;
    function CreateUnfoldedViewAt(x: Double; y: Double; z: Double): WordBool; dispid 14;
    function CreateText(const textString: WideString; textX: Double; textY: Double; textZ: Double; 
                        textHeight: Double; textAngle: Double): WordBool; dispid 15;
    procedure EditRebuild; dispid 16;
    procedure ViewFullPage; dispid 17;
    procedure Dummy018; dispid 18;
    procedure CreateSectionView; dispid 19;
    procedure SheetNext; dispid 20;
    procedure Dimensions; dispid 21;
    procedure InsertGroup; dispid 22;
    procedure SheetPrevious; dispid 23;
    procedure AlignVert; dispid 24;
    procedure AlignHorz; dispid 25;
    procedure InsertRefDim; dispid 26;
    procedure MakeSectionLine; dispid 27;
    procedure InsertBaseDim; dispid 28;
    procedure EditSketch; dispid 29;
    procedure CreateDetailView; dispid 30;
    procedure CreateAuxiliaryView; dispid 31;
    procedure StartDrawing; dispid 32;
    procedure EndDrawing; dispid 33;
    function GetFirstView: IDispatch; dispid 34;
    function IGetFirstView: IView; dispid 40;
    function GetInsertionPoint: OleVariant; dispid 35;
    procedure AttachDimensions; dispid 36;
    procedure InsertModelDimensions(option: Integer); dispid 37;
    procedure EditTemplate; dispid 41;
    procedure InsertOrdinate; dispid 42;
    procedure UnsuppressView; dispid 43;
    procedure HideShowDrawingViews; dispid 44;
    procedure SuppressView; dispid 45;
    procedure AlignOrdinate; dispid 46;
    procedure SketchDim; dispid 47;
    procedure CenterMark; dispid 48;
    procedure EditSheet; dispid 49;
    procedure InsertHorizontalOrdinate; dispid 50;
    procedure EditOrdinate; dispid 51;
    procedure InsertVerticalOrdinate; dispid 52;
    procedure ChangeOrdDir; dispid 53;
    function GetLineFontCount: Integer; dispid 54;
    function GetLineFontName(index: Integer): WideString; dispid 55;
    function GetLineFontInfo(index: Integer): OleVariant; dispid 56;
    procedure ICreateLinearDim(var p0: Double; var P1: Double; var P2: Double; var P3: Double; 
                               var p4: Double; angle: Double; arrowSize: Double; 
                               const text: WideString; textHeight: Double; witnessGap: Double; 
                               witnessOvershoot: Double); dispid 57;
    procedure ICreateAngDim(var p0: Double; var P1: Double; var P2: Double; var P3: Double; 
                            var p4: Double; var P5: Double; var P6: Double; arrowSize: Double; 
                            const text: WideString; textHeight: Double; witnessGap: Double; 
                            witnessOvershoot: Double); dispid 58;
    procedure ICreateDiamDim(DimValue: Double; var p0: Double; var P1: Double; var P2: Double; 
                             var P3: Double; arrowSize: Double; const text: WideString; 
                             textHeight: Double; witnessGap: Double; witnessOvershoot: Double); dispid 59;
    function IGetInsertionPoint: Double; dispid 60;
    function CreateCompoundNote(height: Double; x: Double; y: Double; z: Double): IDispatch; dispid 61;
    function ICreateCompoundNote(height: Double; x: Double; y: Double; z: Double): INote; dispid 62;
    function CreateOrdinateDim(p0: OleVariant; P1: OleVariant; P2: OleVariant; P3: OleVariant; 
                               p4: OleVariant; angle: Double; arrowSize: Double; 
                               const text: WideString; textHeight: Double; witnessGap: Double; 
                               witnessOvershoot: Double): WordBool; dispid 63;
    procedure ICreateOrdinateDim(var p0: Double; var P1: Double; var P2: Double; var P3: Double; 
                                 var p4: Double; angle: Double; arrowSize: Double; 
                                 const text: WideString; textHeight: Double; witnessGap: Double; 
                                 witnessOvershoot: Double); dispid 64;
    procedure InsertNewNote(const text: WideString; noLeader: WordBool; balloonNote: WordBool; 
                            bentLeader: WordBool; arrowStyle: Smallint; leaderSide: Smallint); dispid 65;
    function AddCenterMark(cmSize: Double; cmShowLines: WordBool): WordBool; dispid 66;
    procedure InsertWeldSymbol(const dim1: WideString; const symbol: WideString; 
                               const dim2: WideString; symmetric: WordBool; fieldWeld: WordBool; 
                               showOtherSide: WordBool; dashOnTop: WordBool; peripheral: WordBool; 
                               hasProcess: WordBool; const processValue: WideString); dispid 67;
    function InsertSurfaceFinishSymbol(symType: Integer; leaderType: Integer; locX: Double; 
                                       locY: Double; locZ: Double; laySymbol: Integer; 
                                       arrowType: Integer; const machAllowance: WideString; 
                                       const otherVals: WideString; const prodMethod: WideString; 
                                       const sampleLen: WideString; const maxRoughness: WideString; 
                                       const minRoughness: WideString; 
                                       const roughnessSpacing: WideString): WordBool; dispid 68;
    function ModifySurfaceFinishSymbol(symType: Integer; leaderType: Integer; locX: Double; 
                                       locY: Double; locZ: Double; laySymbol: Integer; 
                                       arrowType: Integer; const machAllowance: WideString; 
                                       const otherVals: WideString; const prodMethod: WideString; 
                                       const sampleLen: WideString; const maxRoughness: WideString; 
                                       const minRoughness: WideString; 
                                       const roughnessSpacing: WideString): WordBool; dispid 69;
    function GetCurrentSheet: IDispatch; dispid 70;
    function IGetCurrentSheet: ISheet; dispid 71;
    procedure CreateConstructionGeometry; dispid 72;
    procedure ViewDisplayHidden; dispid 73;
    procedure InsertBreakHorizontal; dispid 74;
    procedure ViewDisplayWireframe; dispid 75;
    procedure BreakLineZigZagCut; dispid 76;
    procedure BreakView; dispid 77;
    procedure ViewDisplayHiddengreyed; dispid 78;
    procedure ViewTangentEdges; dispid 79;
    procedure BreakLineSplineCut; dispid 80;
    procedure InsertBreakVertical; dispid 81;
    procedure UnBreakView; dispid 82;
    procedure BreakLineStraightCut; dispid 83;
    procedure InsertDatumTag; dispid 84;
    procedure ToggleGrid; dispid 85;
    procedure FlipSectionLine; dispid 86;
    function FeatureByName(const Name: WideString): IDispatch; dispid 87;
    function IFeatureByName(const Name: WideString): IFeature; dispid 88;
    function NewSheet2(const Name: WideString; paperSize: Integer; templateIn: Integer; 
                       scale1: Double; Scale2: Double; firstAngle: WordBool; 
                       const templateName: WideString; width: Double; height: Double): WordBool; dispid 89;
    function CreateLinearDim2(p0: OleVariant; P1: OleVariant; P2: OleVariant; P3: OleVariant; 
                              p4: OleVariant; val: Double; primPrec: Integer; 
                              const text: WideString; TextPoint: OleVariant; angle: Double; 
                              textHeight: Double; const prefix: WideString; 
                              const suffix: WideString; const callout1: WideString; 
                              const callout2: WideString; tolType: Integer; 
                              const tolMin: WideString; const tolMax: WideString; tolPrec: Integer; 
                              arrowSize: Double; arrowStyle: Integer; arrowDir: Integer; 
                              witnessGap: Double; witnessOvershoot: Double; dualDisplay: WordBool; 
                              dualPrec: Integer): WordBool; dispid 90;
    procedure ICreateLinearDim2(var p0: Double; var P1: Double; var P2: Double; var P3: Double; 
                                var p4: Double; val: Double; primPrec: Integer; 
                                const text: WideString; var TextPoint: Double; angle: Double; 
                                textHeight: Double; const prefix: WideString; 
                                const suffix: WideString; const callout1: WideString; 
                                const callout2: WideString; tolType: Integer; 
                                const tolMin: WideString; const tolMax: WideString; 
                                tolPrec: Integer; arrowSize: Double; arrowStyle: Integer; 
                                arrowDir: Integer; witnessGap: Double; witnessOvershoot: Double; 
                                dualDisplay: WordBool; dualPrecision: Integer); dispid 91;
    function CreateAngDim2(vP0: OleVariant; vP1: OleVariant; vP2: OleVariant; vP3: OleVariant; 
                           vP4: OleVariant; vP5: OleVariant; vP6: OleVariant; arrowSize: Double; 
                           const text: WideString; textHeight: Double; witnessGap: Double; 
                           witnessOvershoot: Double; vTextPoint: OleVariant): WordBool; dispid 92;
    procedure ICreateAngDim2(var p0: Double; var P1: Double; var P2: Double; var P3: Double; 
                             var p4: Double; var P5: Double; var P6: Double; arrowSize: Double; 
                             const text: WideString; textHeight: Double; witnessGap: Double; 
                             witnessOvershoot: Double; var TextPoint: Double); dispid 93;
    function CreateDiamDim2(dimVal: Double; vP0: OleVariant; vP1: OleVariant; vP2: OleVariant; 
                            vP3: OleVariant; arrowSize: Double; const text: WideString; 
                            textHeight: Double; witnessGap: Double; witnessOvershoot: Double; 
                            vTextPoint: OleVariant): WordBool; dispid 94;
    procedure ICreateDiamDim2(DimValue: Double; var p0: Double; var P1: Double; var P2: Double; 
                              var P3: Double; arrowSize: Double; const text: WideString; 
                              textHeight: Double; witnessGap: Double; witnessOvershoot: Double; 
                              var TextPoint: Double); dispid 95;
    function CreateOrdinateDim2(p0: OleVariant; P1: OleVariant; P2: OleVariant; P3: OleVariant; 
                                p4: OleVariant; angle: Double; arrowSize: Double; 
                                const text: WideString; textHeight: Double; witnessGap: Double; 
                                witnessOvershoot: Double; P5: OleVariant): WordBool; dispid 96;
    procedure ICreateOrdinateDim2(var p0: Double; var P1: Double; var P2: Double; var P3: Double; 
                                  var p4: Double; angle: Double; arrowSize: Double; 
                                  const text: WideString; textHeight: Double; witnessGap: Double; 
                                  witnessOvershoot: Double; var P5: Double); dispid 97;
    procedure InsertNewNote2(const upperText: WideString; const lowerText: WideString; 
                             noLeader: WordBool; bentLeader: WordBool; arrowStyle: Smallint; 
                             leaderSide: Smallint; angle: Double; balloonStyle: Smallint; 
                             balloonFit: Smallint; upperNoteContent: Smallint; 
                             lowerNoteContent: Smallint); dispid 98;
    procedure DragModelDimension(const viewname: WideString; dropEffect: Smallint; x: Double; 
                                 y: Double; z: Double); dispid 99;
    function CreateViewport2(LowerLeftX: Double; LowerLeftY: Double; UpperRightX: Double; 
                             UpperRightY: Double; sketchSize: Smallint; Scale: Double): WideString; dispid 100;
    procedure SetupSheet2(const Name: WideString; paperSize: Smallint; templateIn: Smallint; 
                          scale1: Double; Scale2: Double; skPointsFlag: Integer); dispid 101;
    procedure OnComponentProperties; dispid 102;
    function GetLineFontCount2: Integer; dispid 103;
    function GetLineFontName2(index: Integer): WideString; dispid 104;
    function GetLineFontInfo2(index: Integer): OleVariant; dispid 105;
    procedure SetLineStyle(const styleName: WideString); dispid 106;
    procedure SetLineWidth(width: Integer); dispid 107;
    procedure SetLineColor(Color: Integer); dispid 108;
    procedure ShowEdge; dispid 109;
    procedure HideEdge; dispid 110;
    procedure AddHoleCallout; dispid 111;
    function GetPenCount: Integer; dispid 112;
    function GetPenInfo: OleVariant; dispid 113;
    function IGetPenInfo: Integer; dispid 114;
    function GetLineFontId(index: Integer): Integer; dispid 115;
    function CreateAuxiliaryViewAt(x: Double; y: Double; z: Double; notAligned: WordBool): WordBool; dispid 116;
    function CreateDetailViewAt(x: Double; y: Double; z: Double): WordBool; dispid 117;
    function CreateSectionViewAt(x: Double; y: Double; z: Double; notAligned: WordBool; 
                                 isOffsetSection: WordBool): WordBool; dispid 118;
    function CreateUnfoldedViewAt2(x: Double; y: Double; z: Double; notAligned: WordBool): WordBool; dispid 119;
    function SetupSheet3(const Name: WideString; paperSize: Integer; templateIn: Integer; 
                         scale1: Double; Scale2: Double; firstAngle: WordBool; 
                         const templateName: WideString; width: Double; height: Double): WordBool; dispid 120;
    function InsertModelAnnotations(option: Integer; allTypes: WordBool; types: Integer; 
                                    allViews: WordBool): WordBool; dispid 121;
    procedure InsertCustomSymbol(const symbolPath: WideString); dispid 122;
    function GetSheetCount: Integer; dispid 123;
    function GetSheetNames: OleVariant; dispid 124;
    function IGetSheetNames(var count: Integer): WideString; dispid 125;
    function ActivateSheet(const Name: WideString): WordBool; dispid 126;
    function CreateText2(const textString: WideString; textX: Double; textY: Double; textZ: Double; 
                         textHeight: Double; textAngle: Double): IDispatch; dispid 127;
    function ICreateText2(const textString: WideString; textX: Double; textY: Double; 
                          textZ: Double; textHeight: Double; textAngle: Double): INote; dispid 128;
    function NewSheet3(const Name: WideString; paperSize: Integer; templateIn: Integer; 
                       scale1: Double; Scale2: Double; firstAngle: WordBool; 
                       const templateName: WideString; width: Double; height: Double; 
                       const propertyViewName: WideString): WordBool; dispid 129;
    function SetupSheet4(const Name: WideString; paperSize: Integer; templateIn: Integer; 
                         scale1: Double; Scale2: Double; firstAngle: WordBool; 
                         const templateName: WideString; width: Double; height: Double; 
                         const propertyViewName: WideString): WordBool; dispid 130;
    function CreateLinearDim3(p0: OleVariant; P1: OleVariant; P2: OleVariant; P3: OleVariant; 
                              p4: OleVariant; val: Double; primPrec: Integer; 
                              const text: WideString; TextPoint: OleVariant; angle: Double; 
                              textHeight: Double; const prefix: WideString; 
                              const suffix: WideString; const callout1: WideString; 
                              const callout2: WideString; tolType: Integer; 
                              const tolMin: WideString; const tolMax: WideString; tolPrec: Integer; 
                              arrowSize: Double; arrowStyle: Integer; arrowDir: Integer; 
                              witnessGap: Double; witnessOvershoot: Double; dualDisplay: WordBool; 
                              dualPrec: Integer): IDispatch; dispid 131;
    function ICreateLinearDim3(var p0: Double; var P1: Double; var P2: Double; var P3: Double; 
                               var p4: Double; val: Double; primPrec: Integer; 
                               const text: WideString; var TextPoint: Double; angle: Double; 
                               textHeight: Double; const prefix: WideString; 
                               const suffix: WideString; const callout1: WideString; 
                               const callout2: WideString; tolType: Integer; 
                               const tolMin: WideString; const tolMax: WideString; 
                               tolPrec: Integer; arrowSize: Double; arrowStyle: Integer; 
                               arrowDir: Integer; witnessGap: Double; witnessOvershoot: Double; 
                               dualDisplay: WordBool; dualPrecision: Integer): IDisplayDimension; dispid 132;
    function CreateAngDim3(vP0: OleVariant; vP1: OleVariant; vP2: OleVariant; vP3: OleVariant; 
                           vP4: OleVariant; vP5: OleVariant; vP6: OleVariant; arrowSize: Double; 
                           const text: WideString; textHeight: Double; witnessGap: Double; 
                           witnessOvershoot: Double; vTextPoint: OleVariant): IDispatch; dispid 133;
    function ICreateAngDim3(var p0: Double; var P1: Double; var P2: Double; var P3: Double; 
                            var p4: Double; var P5: Double; var P6: Double; arrowSize: Double; 
                            const text: WideString; textHeight: Double; witnessGap: Double; 
                            witnessOvershoot: Double; var TextPoint: Double): IDisplayDimension; dispid 134;
    function CreateDiamDim3(dimVal: Double; vP0: OleVariant; vP1: OleVariant; vP2: OleVariant; 
                            vP3: OleVariant; arrowSize: Double; const text: WideString; 
                            textHeight: Double; witnessGap: Double; witnessOvershoot: Double; 
                            vTextPoint: OleVariant): IDispatch; dispid 135;
    function ICreateDiamDim3(DimValue: Double; var p0: Double; var P1: Double; var P2: Double; 
                             var P3: Double; arrowSize: Double; const text: WideString; 
                             textHeight: Double; witnessGap: Double; witnessOvershoot: Double; 
                             var TextPoint: Double): IDisplayDimension; dispid 136;
    function CreateOrdinateDim3(p0: OleVariant; P1: OleVariant; P2: OleVariant; P3: OleVariant; 
                                p4: OleVariant; angle: Double; arrowSize: Double; 
                                const text: WideString; textHeight: Double; witnessGap: Double; 
                                witnessOvershoot: Double; P5: OleVariant): IDispatch; dispid 137;
    function ICreateOrdinateDim3(var p0: Double; var P1: Double; var P2: Double; var P3: Double; 
                                 var p4: Double; angle: Double; arrowSize: Double; 
                                 const text: WideString; textHeight: Double; witnessGap: Double; 
                                 witnessOvershoot: Double; var P5: Double): IDisplayDimension; dispid 138;
    procedure ForceRebuild; dispid 139;
    function AddOrdinateDimension(DimType: Integer; locX: Double; locY: Double; locZ: Double): WordBool; dispid 140;
    function CreateLayer(const layerName: WideString; const layerDesc: WideString; 
                         layerColor: Integer; layerStyle: Integer; layerWidth: Integer; 
                         bOn: WordBool): WordBool; dispid 141;
    function SetCurrentLayer(const layerName: WideString): WordBool; dispid 142;
    function DrawingViewRotate(newAngle: Double): WordBool; dispid 143;
    function CreateDetailViewAt2(x: Double; y: Double; z: Double): WordBool; dispid 144;
    procedure RestoreRotation; dispid 145;
    function GetEditSheet: WordBool; dispid 146;
    procedure TranslateDrawing(deltaX: Double; deltaY: Double); dispid 147;
    function Create1stAngleViews2(const ModelName: WideString): WordBool; dispid 148;
    function Create3rdAngleViews2(const ModelName: WideString): WordBool; dispid 149;
    procedure HideShowDimensions; dispid 150;
    function CreateLinearDim4(p0: OleVariant; P1: OleVariant; P2: OleVariant; P3: OleVariant; 
                              p4: OleVariant; TextPoint: OleVariant; val: Double; angle: Double; 
                              textHeight: Double): IDispatch; dispid 151;
    function ICreateLinearDim4(var p0: Double; var P1: Double; var P2: Double; var P3: Double; 
                               var p4: Double; var TextPoint: Double; val: Double; angle: Double; 
                               textHeight: Double): IDisplayDimension; dispid 152;
    function CreateDiamDim4(p0: OleVariant; P1: OleVariant; P2: OleVariant; P3: OleVariant; 
                            TextPoint: OleVariant; val: Double; textHeight: Double): IDispatch; dispid 153;
    function ICreateDiamDim4(var p0: Double; var P1: Double; var P2: Double; var P3: Double; 
                             var TextPoint: Double; val: Double; textHeight: Double): IDisplayDimension; dispid 154;
    function CreateOrdinateDim4(p0: OleVariant; P1: OleVariant; P2: OleVariant; P3: OleVariant; 
                                p4: OleVariant; P5: OleVariant; val: Double; angle: Double; 
                                textHeight: Double): IDispatch; dispid 155;
    function ICreateOrdinateDim4(var p0: Double; var P1: Double; var P2: Double; var P3: Double; 
                                 var p4: Double; var P5: Double; val: Double; angle: Double; 
                                 textHeight: Double): IDisplayDimension; dispid 156;
    function CreateAngDim4(p0: OleVariant; P1: OleVariant; P2: OleVariant; P3: OleVariant; 
                           p4: OleVariant; P5: OleVariant; P6: OleVariant; TextPoint: OleVariant; 
                           textHeight: Double): IDispatch; dispid 157;
    function ICreateAngDim4(var p0: Double; var P1: Double; var P2: Double; var P3: Double; 
                            var p4: Double; var P5: Double; var P6: Double; var TextPoint: Double; 
                            textHeight: Double): IDisplayDimension; dispid 158;
    function CreateDetailViewAt3(x: Double; y: Double; z: Double; Style: Integer; scale1: Double; 
                                 Scale2: Double; const labelIn: WideString; showtype: Integer; 
                                 fulloutline: WordBool): IDispatch; dispid 159;
    function ICreateDetailViewAt3(x: Double; y: Double; z: Double; Style: Integer; scale1: Double; 
                                  Scale2: Double; const labelIn: WideString; showtype: Integer; 
                                  fulloutline: WordBool): IView; dispid 160;
    function CreateSectionViewAt2(x: Double; y: Double; z: Double; notAligned: WordBool; 
                                  isOffsetSection: WordBool; const Label_: WideString; 
                                  chgdirection: WordBool; scwithmodel: WordBool; partial: WordBool; 
                                  dispsurfcut: WordBool): IDispatch; dispid 161;
    function ICreateSectionViewAt2(x: Double; y: Double; z: Double; notAligned: WordBool; 
                                   isOffsetSection: WordBool; const Label_: WideString; 
                                   chgdirection: WordBool; scwithmodel: WordBool; 
                                   partial: WordBool; dispsurfcut: WordBool): IView; dispid 162;
    function CreateAuxiliaryViewAt2(x: Double; y: Double; z: Double; notAligned: WordBool; 
                                    const Label_: WideString; showarrow: WordBool; flip: WordBool): IDispatch; dispid 163;
    function ICreateAuxiliaryViewAt2(x: Double; y: Double; z: Double; notAligned: WordBool; 
                                     const Label_: WideString; showarrow: WordBool; flip: WordBool): IView; dispid 164;
    procedure MakeCustomSymbol; dispid 165;
    procedure ExplodeCustomSymbol; dispid 166;
    procedure SaveCustomSymbol(const filenameIn: WideString); dispid 167;
    function CreateBreakOutSection(depth: Double): WordBool; dispid 168;
    procedure InsertThreadCallout; dispid 169;
    function CreateFlatPatternViewFromModelView(const ModelName: WideString; 
                                                const configName: WideString; locX: Double; 
                                                locY: Double; locZ: Double): WordBool; dispid 170;
    function ChangeRefConfigurationOfFlatPatternView(const ModelName: WideString; 
                                                     const configName: WideString): WordBool; dispid 171;
    function AddHoleCallout2(x: Double; y: Double; z: Double): IDispatch; dispid 172;
    function IAddHoleCallout2(x: Double; y: Double; z: Double): IDisplayDimension; dispid 173;
    procedure EditCenterMarkProperties(angle: Double; size: Double; lines: WordBool; 
                                       docSettings: WordBool); dispid 174;
    function InsertDowelSymbol: IDispatch; dispid 175;
    function IInsertDowelSymbol: IDowelSymbol; dispid 176;
    procedure InsertMultiJogLeader; dispid 177;
    property HiddenViewsVisible: WordBool dispid 178;
    function AddChamferDim(x: Double; y: Double; z: Double): IDispatch; dispid 179;
    function IAddChamferDim(x: Double; y: Double; z: Double): IDisplayDimension; dispid 180;
    function MakeCustomSymbol2: IDispatch; dispid 181;
    function IMakeCustomSymbol2: ICustomSymbol; dispid 182;
    function InsertCustomSymbol2(const fileName: WideString): IDispatch; dispid 183;
    function IInsertCustomSymbol2(const fileName: WideString): ICustomSymbol; dispid 184;
    function CreateCustomSymbol(segments: OleVariant; points: OleVariant; Notes: OleVariant): IDispatch; dispid 185;
    function ICreateCustomSymbol(SegmentCount: Integer; var segments: ISketchSegment; 
                                 PointCount: Integer; var points: ISketchPoint; NoteCount: Integer; 
                                 var Notes: INote): ICustomSymbol; dispid 186;
    procedure ViewDisplayShaded; dispid 187;
    procedure ChangeComponentLayer(const layerName: WideString; allViews: WordBool); dispid 188;
    property AutomaticViewUpdate: WordBool dispid 189;
    property ActiveDrawingView: IDispatch readonly dispid 190;
    property IActiveDrawingView: IView readonly dispid 191;
    function InsertCenterMark(useDoc: WordBool; size: Double; ShowLines: WordBool; angle: Double): ICenterMark; dispid 192;
    function CreateFlatPatternViewFromModelView2(const ModelName: WideString; 
                                                 const configName: WideString; locX: Double; 
                                                 locY: Double; locZ: Double; hideBendLines: WordBool): WordBool; dispid 193;
    procedure ViewHlrQuality; dispid 194;
    procedure ViewModelEdges; dispid 195;
    function GetBlockDefinitionCount: Integer; dispid 196;
    function GetBlockDefinitions: OleVariant; dispid 197;
    function IGetBlockDefinitions(count: Integer): IBlockDefinition; dispid 198;
    function GetBlockDefinition(const Name: WideString): IBlockDefinition; dispid 199;
    function MakeBlockDefinition(const Name: WideString; const XRefFileName: WideString; 
                                 Instance: WordBool): IBlockDefinition; dispid 200;
    function CreateBlockDefinition(const Name: WideString; const XRefFileName: WideString; 
                                   Instance: WordBool; segments: OleVariant; points: OleVariant; 
                                   Notes: OleVariant; Dimensions: OleVariant; Blocks: OleVariant): IDispatch; dispid 201;
    function ICreateBlockDefinition(const Name: WideString; const XRefFileName: WideString; 
                                    Instance: WordBool; SegmentCount: Integer; 
                                    var segments: ISketchSegment; PointCount: Integer; 
                                    var points: ISketchPoint; NoteCount: Integer; var Notes: INote; 
                                    DimensionCount: Integer; var Dimensions: IDisplayDimension; 
                                    BlockCount: Integer; var Blocks: IBlockInstance): IBlockDefinition; dispid 202;
    function InsertBlock(const fileName: WideString; x: Double; y: Double; angle: Double; 
                         Scale: Double): IBlockInstance; dispid 203;
    function SaveBlock(const fileName: WideString): WordBool; dispid 204;
    function ExplodeBlockInstance: WordBool; dispid 205;
    function InsertCenterMark2(Style: Integer; propagate: WordBool): ICenterMark; dispid 206;
    function InsertCenterLine: WordBool; dispid 207;
  end;

// *********************************************************************//
// Interface: ISheet
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {83A33D80-27C5-11CE-BFD4-00400513BB57}
// *********************************************************************//
  ISheet = interface(IDispatch)
    ['{83A33D80-27C5-11CE-BFD4-00400513BB57}']
    function GetBomTable: IDispatch; safecall;
    function IGetBomTable: IBomTable; safecall;
    function GetName: WideString; safecall;
    procedure SetName(const nameIn: WideString); safecall;
    function GetTemplateName: WideString; safecall;
    procedure SetTemplateName(const nameIn: WideString); safecall;
    function GetProperties: OleVariant; safecall;
    function IGetProperties: Double; safecall;
    procedure SetProperties(paperSz: Integer; templ: Integer; scale1: Double; Scale2: Double; 
                            firstAngle: WordBool; width: Double; height: Double); safecall;
    function GetCustomColorsCount: Integer; safecall;
    function IGetCustomColors: Integer; safecall;
    function GetOLEObjectCount: Integer; safecall;
    function GetOLEObjectSettings(index: Integer; var byteCount: Integer; var aspect: Integer): OleVariant; safecall;
    function IGetOLEObjectSettings(index: Integer; var byteCount: Integer; var aspect: Integer; 
                                   var position: Double): WordBool; safecall;
    function GetOLEObjectData(index: Integer): OleVariant; safecall;
    function IGetOLEObjectData(index: Integer; var buffer: Byte): WordBool; safecall;
    function CreateOLEObject(aspect: Integer; position: OleVariant; buffer: OleVariant): WordBool; safecall;
    function ICreateOLEObject(aspect: Integer; var position: Double; byteCount: Integer; 
                              var buffer: Byte): WordBool; safecall;
    function Get_PageSetup: IDispatch; safecall;
    function Get_IPageSetup: IPageSetup; safecall;
    function SetScale(Numerator: Double; Denominator: Double; ScaleAnnoPosition: WordBool; 
                      ScaleAnnoTextHeight: WordBool): WordBool; safecall;
    function Get_CustomPropertyView: WideString; safecall;
    procedure Set_CustomPropertyView(const viewname: WideString); safecall;
    property PageSetup: IDispatch read Get_PageSetup;
    property IPageSetup: IPageSetup read Get_IPageSetup;
    property CustomPropertyView: WideString read Get_CustomPropertyView write Set_CustomPropertyView;
  end;

// *********************************************************************//
// DispIntf:  ISheetDisp
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {83A33D80-27C5-11CE-BFD4-00400513BB57}
// *********************************************************************//
  ISheetDisp = dispinterface
    ['{83A33D80-27C5-11CE-BFD4-00400513BB57}']
    function GetBomTable: IDispatch; dispid 1;
    function IGetBomTable: IBomTable; dispid 2;
    function GetName: WideString; dispid 3;
    procedure SetName(const nameIn: WideString); dispid 4;
    function GetTemplateName: WideString; dispid 5;
    procedure SetTemplateName(const nameIn: WideString); dispid 6;
    function GetProperties: OleVariant; dispid 7;
    function IGetProperties: Double; dispid 8;
    procedure SetProperties(paperSz: Integer; templ: Integer; scale1: Double; Scale2: Double; 
                            firstAngle: WordBool; width: Double; height: Double); dispid 9;
    function GetCustomColorsCount: Integer; dispid 10;
    function IGetCustomColors: Integer; dispid 11;
    function GetOLEObjectCount: Integer; dispid 12;
    function GetOLEObjectSettings(index: Integer; var byteCount: Integer; var aspect: Integer): OleVariant; dispid 13;
    function IGetOLEObjectSettings(index: Integer; var byteCount: Integer; var aspect: Integer; 
                                   var position: Double): WordBool; dispid 14;
    function GetOLEObjectData(index: Integer): OleVariant; dispid 15;
    function IGetOLEObjectData(index: Integer; var buffer: Byte): WordBool; dispid 16;
    function CreateOLEObject(aspect: Integer; position: OleVariant; buffer: OleVariant): WordBool; dispid 17;
    function ICreateOLEObject(aspect: Integer; var position: Double; byteCount: Integer; 
                              var buffer: Byte): WordBool; dispid 18;
    property PageSetup: IDispatch readonly dispid 19;
    property IPageSetup: IPageSetup readonly dispid 20;
    function SetScale(Numerator: Double; Denominator: Double; ScaleAnnoPosition: WordBool; 
                      ScaleAnnoTextHeight: WordBool): WordBool; dispid 21;
    property CustomPropertyView: WideString dispid 22;
  end;

// *********************************************************************//
// Interface: IModeler
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {83A33D73-27C5-11CE-BFD4-00400513BB57}
// *********************************************************************//
  IModeler = interface(IDispatch)
    ['{83A33D73-27C5-11CE-BFD4-00400513BB57}']
    function CreateBodyFromBox(boxDimArray: OleVariant): IDispatch; safecall;
    function ICreateBodyFromBox(var boxDimArray: Double): IBody; safecall;
    function SetTolerances(var ToleranceIDArray: Integer; var ToleranceValueArray: Double; 
                           NumTol: Integer): WordBool; safecall;
    function UnsetTolerances(var ToleranceIDArray: Integer; NumTol: Integer): WordBool; safecall;
    function Restore(const streamIn: IUnknown): IDispatch; safecall;
    function IRestore(const streamIn: IUnknown): IBody; safecall;
    function SetInitKnitGapWidth(InitGapWidth: Double): WordBool; safecall;
    function GetInitKnitGapWidth: Double; safecall;
    function CreateBodyFromCyl(cylDimArray: OleVariant): IDispatch; safecall;
    function ICreateBodyFromCyl(var cylDimArray: Double): IBody; safecall;
    function CreateBodyFromCone(coneDimArray: OleVariant): IDispatch; safecall;
    function ICreateBodyFromCone(var coneDimArray: Double): IBody; safecall;
    function CreateBrepBody(type_: SYSINT; nTopologies: SYSINT; topologies: OleVariant; 
                            edgeToleranceArray: OleVariant; vertexToleranceArray: OleVariant; 
                            pointArray: OleVariant; curveArray: OleVariant; 
                            surfaceArray: OleVariant; nRelations: SYSINT; parents: OleVariant; 
                            children: OleVariant; senses: OleVariant): IDispatch; safecall;
    function ICreateBrepBody(type_: SYSINT; nTopologies: SYSINT; var topologies: SYSINT; 
                             var edgeTolArray: Double; var vertexTolArray: Double; 
                             var pointArray: Double; var curveArray: ICurve; 
                             var surfaceArray: ISurface; nRelations: SYSINT; var parents: SYSINT; 
                             var children: SYSINT; var senses: SYSINT): IBody; safecall;
    function CreatePlanarSurface(vRootPoint: OleVariant; vNormal: OleVariant): IDispatch; safecall;
    function ICreatePlanarSurface(var rootPoint: Double; var Normal: Double): ISurface; safecall;
    function CreateExtrusionSurface(const profileCurve: IDispatch; axisDirection: OleVariant): IDispatch; safecall;
    function ICreateExtrusionSurface(const profileCurve: ICurve; var axisDirection: Double): ISurface; safecall;
    function CreateRevolutionSurface(const profileCurve: IDispatch; axisPoint: OleVariant; 
                                     axisDirection: OleVariant; profileEndPtParams: OleVariant): IDispatch; safecall;
    function ICreateRevolutionSurface(const profileCurve: ICurve; var axisPoint: Double; 
                                      var axisDirection: Double; var profileEndPtParams: Double): ISurface; safecall;
    function CreateBsplineSurface(props: OleVariant; uKnots: OleVariant; vKnots: OleVariant; 
                                  ctrlPtCoords: OleVariant): IDispatch; safecall;
    function ICreateBsplineSurface(var Properties: Integer; var UKnotArray: Double; 
                                   var VKnotArray: Double; var ControlPointCoordArray: Double): ISurface; safecall;
    function CreateOffsetSurface(const surfaceIn: IDispatch; distance: Double): IDispatch; safecall;
    function ICreateOffsetSurface(const surfaceIn: ISurface; distance: Double): ISurface; safecall;
    function CreateLine(rootPoint: OleVariant; direction: OleVariant): IDispatch; safecall;
    function ICreateLine(var rootPoint: Double; var direction: Double): ICurve; safecall;
    function CreateArc(center: OleVariant; axis: OleVariant; radius: Double; 
                       startPoint: OleVariant; endPoint: OleVariant): IDispatch; safecall;
    function ICreateArc(var center: Double; var axis: Double; radius: Double; 
                        var startPoint: Double; var endPoint: Double): ICurve; safecall;
    function CreateBsplineCurve(props: OleVariant; knots: OleVariant; ctrlPtCoords: OleVariant): IDispatch; safecall;
    function ICreateBsplineCurve(var Properties: Integer; var KnotArray: Double; 
                                 var ControlPointCoordArray: Double): ICurve; safecall;
    function CreatePCurve(const surface: IDispatch; props: OleVariant; knots: OleVariant; 
                          ctrlPtCoords: OleVariant): IDispatch; safecall;
    function ICreatePCurve(const surface: ISurface; var props: Integer; var knots: Double; 
                           var ctrlPtCoords: Double): ICurve; safecall;
    function CreateBodiesFromSheets(sheets: OleVariant; options: Integer; var error: Integer): OleVariant; safecall;
    function ICreateBodiesFromSheets(nSheets: Integer; var sheets: IUnknown; options: Integer; 
                                     var nResults: Integer; var results: IUnknown): Integer; safecall;
    function ICreateBodyFromFaces(NumOfFaces: Integer; var faces: IFace; doLocalCheck: WordBool; 
                                  var localCheckResult: WordBool): IBody; safecall;
    function FindTwoEdgeMaxDeviation(const lpEdge1: IDispatch; const lpEdge2: IDispatch): Double; safecall;
    function IFindTwoEdgeMaxDeviation(const pEdge1: IEdge; const pEdge2: IEdge): Double; safecall;
    function CreateConicalSurface(center: OleVariant; direction: OleVariant; radius: Double; 
                                  semiAngle: Double): IDispatch; safecall;
    function ICreateConicalSurface(var center: Double; var direction: Double; radius: Double; 
                                   semiAngle: Double): ISurface; safecall;
    function CreateCylindricalSurface(center: OleVariant; direction: OleVariant; radius: Double): IDispatch; safecall;
    function ICreateCylindricalSurface(var center: Double; var direction: Double; radius: Double): ISurface; safecall;
    function CreateSphericalSurface(center: OleVariant; radius: Double): IDispatch; safecall;
    function ICreateSphericalSurface(var center: Double; radius: Double): ISurface; safecall;
    function CreateToroidalSurface(center: OleVariant; axis: OleVariant; refDirection: OleVariant; 
                                   majorRadius: Double; minorRadius: Double): IDispatch; safecall;
    function ICreateToroidalSurface(var center: Double; var axis: Double; var refDirection: Double; 
                                    majorRadius: Double; minorRadius: Double): ISurface; safecall;
    function CreateBodyFromFaces2(NumOfFaces: Integer; faces: OleVariant; actionType: Integer; 
                                  doLocalCheck: WordBool; out localCheckResult: WordBool): IDispatch; safecall;
    function ICreateBodyFromFaces2(NumOfFaces: Integer; var faces: IFace; actionType: Integer; 
                                   doLocalCheck: WordBool; out localCheckResult: WordBool): IBody; safecall;
    function SetToleranceValue(ToleranceID: Integer; NewToleranceValue: Double): Double; safecall;
    function GetToleranceValue(ToleranceID: Integer): Double; safecall;
    function CreateSheetFromSurface(const surfaceIn: IDispatch; uvRange: OleVariant): IDispatch; safecall;
    function ICreateSheetFromSurface(const surfaceIn: ISurface; var uvRange: Double): IBody; safecall;
    function ImprintingFaces(targetFaceArray: OleVariant; toolFaceArray: OleVariant; 
                             options: Integer; out targetEdges: OleVariant; 
                             out toolEdges: OleVariant; out targetVertices: OleVariant; 
                             out toolVertices: OleVariant): WordBool; safecall;
    procedure IImprintingFaces(out targetEdges: IEdge; out toolEdges: IEdge; 
                               out targetVertices: IVertex; out toolVertices: IVertex); safecall;
    function IImprintingFacesCount(nTargetFaces: Integer; var targetFaceArray: IFace; 
                                   nToolFaces: Integer; var toolFaceArray: IFace; options: Integer; 
                                   out nTargetEdges: Integer; out ntoolEdges: Integer; 
                                   out ntargetVertices: Integer; out toolVertices: Integer): WordBool; safecall;
    function CreateSweptSurface(const curveIn: IDispatch; dir: OleVariant): IDispatch; safecall;
    function ICreateSweptSurface(const curveIn: ICurve; var dir: Double): ISurface; safecall;
    function ReplaceSurfaces(nFaces: Integer; faceArray: OleVariant; newSurfArray: OleVariant; 
                             senseArray: OleVariant; tolerance: Double): WordBool; safecall;
    function IReplaceSurfaces(nFaces: Integer; var faceArray: IFace; var newSurfArray: ISurface; 
                              var senseArray: SYSINT; tolerance: Double): WordBool; safecall;
    function SplitFaceOnParam(const facedisp: IDispatch; UVFlag: Integer; Parameter: Double; 
                              out status: WordBool): OleVariant; safecall;
    function ISplitFaceOnParamCount(const facedisp: IFace; UVFlag: Integer; Parameter: Double; 
                                    out status: WordBool): Integer; safecall;
    function ISplitFaceOnParam: IFace; safecall;
    function CheckInterference(const body1: IDispatch; const body2: IDispatch; 
                               coincidentInterference: WordBool; 
                               out body1InterferedFaceArray: OleVariant; 
                               out body2InterferedFaceArray: OleVariant; 
                               out intersectedBodyArray: OleVariant): WordBool; safecall;
    function ICheckInterferenceCount(const body1: IBody; const body2: IBody; 
                                     coincidentInterference: WordBool; 
                                     out body1InterferedFaceCount: Integer; 
                                     out body2InterferedFaceCount: Integer; 
                                     out intersectedBodyCount: Integer): WordBool; safecall;
    procedure ICheckInterference(out body1InterferedFaceArray: IFace; 
                                 out body2InterferedFaceArray: IFace; 
                                 out intersectedBodyArray: IBody); safecall;
    function CreateRuledSurface(const curve1In: IDispatch; const curve2In: IDispatch; 
                                apex: OleVariant): IDispatch; safecall;
    function ICreateRuledSurface(const curve1In: ICurve; const curve2In: ICurve; var apex: Double): ISurface; safecall;
    function CreateCylindricalSurface2(center: OleVariant; direction: OleVariant; 
                                       refDirection: OleVariant; radius: Double): IDispatch; safecall;
    function ICreateCylindricalSurface2(var center: Double; var direction: Double; 
                                        var refDirection: Double; radius: Double): ISurface; safecall;
    function CreateSphericalSurface2(center: OleVariant; axis: OleVariant; refDir: OleVariant; 
                                     radius: Double): IDispatch; safecall;
    function ICreateSphericalSurface2(var center: Double; var axis: Double; var refDir: Double; 
                                      radius: Double): ISurface; safecall;
    function ICreateBodyFromBox2(var boxDimArray: Double): IBody2; safecall;
    function IRestore2(const streamIn: IUnknown): IBody2; safecall;
    function ICreateBodyFromCyl2(var cylDimArray: Double): IBody2; safecall;
    function ICreateBodyFromCone2(var coneDimArray: Double): IBody2; safecall;
    function ICreateBrepBody2(type_: SYSINT; nTopologies: SYSINT; var topologies: SYSINT; 
                              var edgeTolArray: Double; var vertexTolArray: Double; 
                              var pointArray: Double; var curveArray: ICurve; 
                              var surfaceArray: ISurface; nRelations: SYSINT; var parents: SYSINT; 
                              var children: SYSINT; var senses: SYSINT): IBody2; safecall;
    function ICreateSheetFromSurface2(const surfaceIn: ISurface; var uvRange: Double): IBody2; safecall;
    function ICheckInterferenceCount2(const body1: IBody2; const body2: IBody2; 
                                      coincidentInterference: WordBool; 
                                      out body1InterferedFaceCount: Integer; 
                                      out body2InterferedFaceCount: Integer; 
                                      out intersectedBodyCount: Integer): WordBool; safecall;
    function ICreateBodyFromFaces3(NumOfFaces: Integer; var faces: IFace2; actionType: Integer; 
                                   doLocalCheck: WordBool; out localCheckResult: WordBool): IBody2; safecall;
    function IImprintingFacesCount2(nTargetFaces: Integer; var targetFaceArray: IFace2; 
                                    nToolFaces: Integer; var toolFaceArray: IFace2; 
                                    options: Integer; out nTargetEdges: Integer; 
                                    out ntoolEdges: Integer; out ntargetVertices: Integer; 
                                    out toolVertices: Integer): WordBool; safecall;
    function IReplaceSurfaces2(nFaces: Integer; var faceArray: IFace2; var newSurfArray: ISurface; 
                               var senseArray: SYSINT; tolerance: Double): WordBool; safecall;
    function ISplitFaceOnParamCount2(const facedisp: IFace2; UVFlag: Integer; Parameter: Double; 
                                     out status: WordBool): Integer; safecall;
    function ISplitFaceOnParam2: IFace2; safecall;
    procedure ICheckInterference2(out body1InterferedFaceArray: IFace2; 
                                  out body2InterferedFaceArray: IFace2; 
                                  out intersectedBodyArray: IBody2); safecall;
    function CreatePlanarSurface2(vRootPoint: OleVariant; vNormal: OleVariant; vRef: OleVariant): IDispatch; safecall;
    function ICreatePlanarSurface2(var rootPoint: Double; var Normal: Double; var Ref: Double): ISurface; safecall;
    function CreateConicalSurface2(center: OleVariant; direction: OleVariant; 
                                   refDirection: OleVariant; radius: Double; semiAngle: Double): IDispatch; safecall;
    function ICreateConicalSurface2(var center: Double; var direction: Double; 
                                    var refDirection: Double; radius: Double; semiAngle: Double): ISurface; safecall;
    function CopyWizardHole(const sourceHole: IDispatch; const destinationHole: IDispatch; 
                            rebuildOwner: WordBool): Integer; safecall;
    function ICopyWizardHole(const sourceHole: IFeature; const destinationHole: IFeature; 
                             rebuildOwner: WordBool): Integer; safecall;
    function DeleteFacesFromSheetBody(faceVar: OleVariant): WordBool; safecall;
    function IDeleteFacesFromSheetBody(count: Integer; var faceVar: IFace2): WordBool; safecall;
    function CreateWireBody(entVar: OleVariant; option: Integer): IBody2; safecall;
    function ICreateWireBody(count: Integer; var entArr: IDispatch; option: Integer): IBody2; safecall;
  end;

// *********************************************************************//
// DispIntf:  IModelerDisp
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {83A33D73-27C5-11CE-BFD4-00400513BB57}
// *********************************************************************//
  IModelerDisp = dispinterface
    ['{83A33D73-27C5-11CE-BFD4-00400513BB57}']
    function CreateBodyFromBox(boxDimArray: OleVariant): IDispatch; dispid 1;
    function ICreateBodyFromBox(var boxDimArray: Double): IBody; dispid 2;
    function SetTolerances(var ToleranceIDArray: Integer; var ToleranceValueArray: Double; 
                           NumTol: Integer): WordBool; dispid 3;
    function UnsetTolerances(var ToleranceIDArray: Integer; NumTol: Integer): WordBool; dispid 4;
    function Restore(const streamIn: IUnknown): IDispatch; dispid 5;
    function IRestore(const streamIn: IUnknown): IBody; dispid 6;
    function SetInitKnitGapWidth(InitGapWidth: Double): WordBool; dispid 7;
    function GetInitKnitGapWidth: Double; dispid 8;
    function CreateBodyFromCyl(cylDimArray: OleVariant): IDispatch; dispid 9;
    function ICreateBodyFromCyl(var cylDimArray: Double): IBody; dispid 10;
    function CreateBodyFromCone(coneDimArray: OleVariant): IDispatch; dispid 11;
    function ICreateBodyFromCone(var coneDimArray: Double): IBody; dispid 12;
    function CreateBrepBody(type_: SYSINT; nTopologies: SYSINT; topologies: OleVariant; 
                            edgeToleranceArray: OleVariant; vertexToleranceArray: OleVariant; 
                            pointArray: OleVariant; curveArray: OleVariant; 
                            surfaceArray: OleVariant; nRelations: SYSINT; parents: OleVariant; 
                            children: OleVariant; senses: OleVariant): IDispatch; dispid 13;
    function ICreateBrepBody(type_: SYSINT; nTopologies: SYSINT; var topologies: SYSINT; 
                             var edgeTolArray: Double; var vertexTolArray: Double; 
                             var pointArray: Double; var curveArray: ICurve; 
                             var surfaceArray: ISurface; nRelations: SYSINT; var parents: SYSINT; 
                             var children: SYSINT; var senses: SYSINT): IBody; dispid 14;
    function CreatePlanarSurface(vRootPoint: OleVariant; vNormal: OleVariant): IDispatch; dispid 15;
    function ICreatePlanarSurface(var rootPoint: Double; var Normal: Double): ISurface; dispid 16;
    function CreateExtrusionSurface(const profileCurve: IDispatch; axisDirection: OleVariant): IDispatch; dispid 17;
    function ICreateExtrusionSurface(const profileCurve: ICurve; var axisDirection: Double): ISurface; dispid 18;
    function CreateRevolutionSurface(const profileCurve: IDispatch; axisPoint: OleVariant; 
                                     axisDirection: OleVariant; profileEndPtParams: OleVariant): IDispatch; dispid 19;
    function ICreateRevolutionSurface(const profileCurve: ICurve; var axisPoint: Double; 
                                      var axisDirection: Double; var profileEndPtParams: Double): ISurface; dispid 20;
    function CreateBsplineSurface(props: OleVariant; uKnots: OleVariant; vKnots: OleVariant; 
                                  ctrlPtCoords: OleVariant): IDispatch; dispid 21;
    function ICreateBsplineSurface(var Properties: Integer; var UKnotArray: Double; 
                                   var VKnotArray: Double; var ControlPointCoordArray: Double): ISurface; dispid 22;
    function CreateOffsetSurface(const surfaceIn: IDispatch; distance: Double): IDispatch; dispid 23;
    function ICreateOffsetSurface(const surfaceIn: ISurface; distance: Double): ISurface; dispid 24;
    function CreateLine(rootPoint: OleVariant; direction: OleVariant): IDispatch; dispid 25;
    function ICreateLine(var rootPoint: Double; var direction: Double): ICurve; dispid 26;
    function CreateArc(center: OleVariant; axis: OleVariant; radius: Double; 
                       startPoint: OleVariant; endPoint: OleVariant): IDispatch; dispid 27;
    function ICreateArc(var center: Double; var axis: Double; radius: Double; 
                        var startPoint: Double; var endPoint: Double): ICurve; dispid 28;
    function CreateBsplineCurve(props: OleVariant; knots: OleVariant; ctrlPtCoords: OleVariant): IDispatch; dispid 29;
    function ICreateBsplineCurve(var Properties: Integer; var KnotArray: Double; 
                                 var ControlPointCoordArray: Double): ICurve; dispid 30;
    function CreatePCurve(const surface: IDispatch; props: OleVariant; knots: OleVariant; 
                          ctrlPtCoords: OleVariant): IDispatch; dispid 31;
    function ICreatePCurve(const surface: ISurface; var props: Integer; var knots: Double; 
                           var ctrlPtCoords: Double): ICurve; dispid 32;
    function CreateBodiesFromSheets(sheets: OleVariant; options: Integer; var error: Integer): OleVariant; dispid 33;
    function ICreateBodiesFromSheets(nSheets: Integer; var sheets: IUnknown; options: Integer; 
                                     var nResults: Integer; var results: IUnknown): Integer; dispid 34;
    function ICreateBodyFromFaces(NumOfFaces: Integer; var faces: IFace; doLocalCheck: WordBool; 
                                  var localCheckResult: WordBool): IBody; dispid 35;
    function FindTwoEdgeMaxDeviation(const lpEdge1: IDispatch; const lpEdge2: IDispatch): Double; dispid 36;
    function IFindTwoEdgeMaxDeviation(const pEdge1: IEdge; const pEdge2: IEdge): Double; dispid 37;
    function CreateConicalSurface(center: OleVariant; direction: OleVariant; radius: Double; 
                                  semiAngle: Double): IDispatch; dispid 38;
    function ICreateConicalSurface(var center: Double; var direction: Double; radius: Double; 
                                   semiAngle: Double): ISurface; dispid 39;
    function CreateCylindricalSurface(center: OleVariant; direction: OleVariant; radius: Double): IDispatch; dispid 40;
    function ICreateCylindricalSurface(var center: Double; var direction: Double; radius: Double): ISurface; dispid 41;
    function CreateSphericalSurface(center: OleVariant; radius: Double): IDispatch; dispid 42;
    function ICreateSphericalSurface(var center: Double; radius: Double): ISurface; dispid 43;
    function CreateToroidalSurface(center: OleVariant; axis: OleVariant; refDirection: OleVariant; 
                                   majorRadius: Double; minorRadius: Double): IDispatch; dispid 44;
    function ICreateToroidalSurface(var center: Double; var axis: Double; var refDirection: Double; 
                                    majorRadius: Double; minorRadius: Double): ISurface; dispid 45;
    function CreateBodyFromFaces2(NumOfFaces: Integer; faces: OleVariant; actionType: Integer; 
                                  doLocalCheck: WordBool; out localCheckResult: WordBool): IDispatch; dispid 46;
    function ICreateBodyFromFaces2(NumOfFaces: Integer; var faces: IFace; actionType: Integer; 
                                   doLocalCheck: WordBool; out localCheckResult: WordBool): IBody; dispid 47;
    function SetToleranceValue(ToleranceID: Integer; NewToleranceValue: Double): Double; dispid 48;
    function GetToleranceValue(ToleranceID: Integer): Double; dispid 49;
    function CreateSheetFromSurface(const surfaceIn: IDispatch; uvRange: OleVariant): IDispatch; dispid 50;
    function ICreateSheetFromSurface(const surfaceIn: ISurface; var uvRange: Double): IBody; dispid 51;
    function ImprintingFaces(targetFaceArray: OleVariant; toolFaceArray: OleVariant; 
                             options: Integer; out targetEdges: OleVariant; 
                             out toolEdges: OleVariant; out targetVertices: OleVariant; 
                             out toolVertices: OleVariant): WordBool; dispid 52;
    procedure IImprintingFaces(out targetEdges: IEdge; out toolEdges: IEdge; 
                               out targetVertices: IVertex; out toolVertices: IVertex); dispid 53;
    function IImprintingFacesCount(nTargetFaces: Integer; var targetFaceArray: IFace; 
                                   nToolFaces: Integer; var toolFaceArray: IFace; options: Integer; 
                                   out nTargetEdges: Integer; out ntoolEdges: Integer; 
                                   out ntargetVertices: Integer; out toolVertices: Integer): WordBool; dispid 54;
    function CreateSweptSurface(const curveIn: IDispatch; dir: OleVariant): IDispatch; dispid 55;
    function ICreateSweptSurface(const curveIn: ICurve; var dir: Double): ISurface; dispid 56;
    function ReplaceSurfaces(nFaces: Integer; faceArray: OleVariant; newSurfArray: OleVariant; 
                             senseArray: OleVariant; tolerance: Double): WordBool; dispid 57;
    function IReplaceSurfaces(nFaces: Integer; var faceArray: IFace; var newSurfArray: ISurface; 
                              var senseArray: SYSINT; tolerance: Double): WordBool; dispid 58;
    function SplitFaceOnParam(const facedisp: IDispatch; UVFlag: Integer; Parameter: Double; 
                              out status: WordBool): OleVariant; dispid 59;
    function ISplitFaceOnParamCount(const facedisp: IFace; UVFlag: Integer; Parameter: Double; 
                                    out status: WordBool): Integer; dispid 60;
    function ISplitFaceOnParam: IFace; dispid 61;
    function CheckInterference(const body1: IDispatch; const body2: IDispatch; 
                               coincidentInterference: WordBool; 
                               out body1InterferedFaceArray: OleVariant; 
                               out body2InterferedFaceArray: OleVariant; 
                               out intersectedBodyArray: OleVariant): WordBool; dispid 62;
    function ICheckInterferenceCount(const body1: IBody; const body2: IBody; 
                                     coincidentInterference: WordBool; 
                                     out body1InterferedFaceCount: Integer; 
                                     out body2InterferedFaceCount: Integer; 
                                     out intersectedBodyCount: Integer): WordBool; dispid 63;
    procedure ICheckInterference(out body1InterferedFaceArray: IFace; 
                                 out body2InterferedFaceArray: IFace; 
                                 out intersectedBodyArray: IBody); dispid 64;
    function CreateRuledSurface(const curve1In: IDispatch; const curve2In: IDispatch; 
                                apex: OleVariant): IDispatch; dispid 65;
    function ICreateRuledSurface(const curve1In: ICurve; const curve2In: ICurve; var apex: Double): ISurface; dispid 66;
    function CreateCylindricalSurface2(center: OleVariant; direction: OleVariant; 
                                       refDirection: OleVariant; radius: Double): IDispatch; dispid 67;
    function ICreateCylindricalSurface2(var center: Double; var direction: Double; 
                                        var refDirection: Double; radius: Double): ISurface; dispid 68;
    function CreateSphericalSurface2(center: OleVariant; axis: OleVariant; refDir: OleVariant; 
                                     radius: Double): IDispatch; dispid 69;
    function ICreateSphericalSurface2(var center: Double; var axis: Double; var refDir: Double; 
                                      radius: Double): ISurface; dispid 70;
    function ICreateBodyFromBox2(var boxDimArray: Double): IBody2; dispid 71;
    function IRestore2(const streamIn: IUnknown): IBody2; dispid 72;
    function ICreateBodyFromCyl2(var cylDimArray: Double): IBody2; dispid 73;
    function ICreateBodyFromCone2(var coneDimArray: Double): IBody2; dispid 74;
    function ICreateBrepBody2(type_: SYSINT; nTopologies: SYSINT; var topologies: SYSINT; 
                              var edgeTolArray: Double; var vertexTolArray: Double; 
                              var pointArray: Double; var curveArray: ICurve; 
                              var surfaceArray: ISurface; nRelations: SYSINT; var parents: SYSINT; 
                              var children: SYSINT; var senses: SYSINT): IBody2; dispid 75;
    function ICreateSheetFromSurface2(const surfaceIn: ISurface; var uvRange: Double): IBody2; dispid 76;
    function ICheckInterferenceCount2(const body1: IBody2; const body2: IBody2; 
                                      coincidentInterference: WordBool; 
                                      out body1InterferedFaceCount: Integer; 
                                      out body2InterferedFaceCount: Integer; 
                                      out intersectedBodyCount: Integer): WordBool; dispid 77;
    function ICreateBodyFromFaces3(NumOfFaces: Integer; var faces: IFace2; actionType: Integer; 
                                   doLocalCheck: WordBool; out localCheckResult: WordBool): IBody2; dispid 78;
    function IImprintingFacesCount2(nTargetFaces: Integer; var targetFaceArray: IFace2; 
                                    nToolFaces: Integer; var toolFaceArray: IFace2; 
                                    options: Integer; out nTargetEdges: Integer; 
                                    out ntoolEdges: Integer; out ntargetVertices: Integer; 
                                    out toolVertices: Integer): WordBool; dispid 79;
    function IReplaceSurfaces2(nFaces: Integer; var faceArray: IFace2; var newSurfArray: ISurface; 
                               var senseArray: SYSINT; tolerance: Double): WordBool; dispid 80;
    function ISplitFaceOnParamCount2(const facedisp: IFace2; UVFlag: Integer; Parameter: Double; 
                                     out status: WordBool): Integer; dispid 81;
    function ISplitFaceOnParam2: IFace2; dispid 82;
    procedure ICheckInterference2(out body1InterferedFaceArray: IFace2; 
                                  out body2InterferedFaceArray: IFace2; 
                                  out intersectedBodyArray: IBody2); dispid 83;
    function CreatePlanarSurface2(vRootPoint: OleVariant; vNormal: OleVariant; vRef: OleVariant): IDispatch; dispid 84;
    function ICreatePlanarSurface2(var rootPoint: Double; var Normal: Double; var Ref: Double): ISurface; dispid 85;
    function CreateConicalSurface2(center: OleVariant; direction: OleVariant; 
                                   refDirection: OleVariant; radius: Double; semiAngle: Double): IDispatch; dispid 86;
    function ICreateConicalSurface2(var center: Double; var direction: Double; 
                                    var refDirection: Double; radius: Double; semiAngle: Double): ISurface; dispid 87;
    function CopyWizardHole(const sourceHole: IDispatch; const destinationHole: IDispatch; 
                            rebuildOwner: WordBool): Integer; dispid 88;
    function ICopyWizardHole(const sourceHole: IFeature; const destinationHole: IFeature; 
                             rebuildOwner: WordBool): Integer; dispid 89;
    function DeleteFacesFromSheetBody(faceVar: OleVariant): WordBool; dispid 90;
    function IDeleteFacesFromSheetBody(count: Integer; var faceVar: IFace2): WordBool; dispid 91;
    function CreateWireBody(entVar: OleVariant; option: Integer): IBody2; dispid 92;
    function ICreateWireBody(count: Integer; var entArr: IDispatch; option: Integer): IBody2; dispid 93;
  end;

// *********************************************************************//
// Interface: IEnvironment
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {83A33D78-27C5-11CE-BFD4-00400513BB57}
// *********************************************************************//
  IEnvironment = interface(IDispatch)
    ['{83A33D78-27C5-11CE-BFD4-00400513BB57}']
    function GetSymEdgeCounts(const symId: WideString): OleVariant; safecall;
    function IGetSymEdgeCounts(const symId: WideString): Smallint; safecall;
    function GetSymLines(const symId: WideString): OleVariant; safecall;
    function IGetSymLines(const symId: WideString): Double; safecall;
    function GetSymArcs(const symId: WideString): OleVariant; safecall;
    function IGetSymArcs(const symId: WideString): Double; safecall;
    function GetSymCircles(const symId: WideString): OleVariant; safecall;
    function IGetSymCircles(const symId: WideString): Double; safecall;
    function GetSymTextPoints(const symId: WideString): OleVariant; safecall;
    function IGetSymTextPoints(const symId: WideString): Double; safecall;
    function GetSymText(const symId: WideString): OleVariant; safecall;
    function GetSymTriangles(const symId: WideString): OleVariant; safecall;
    function IGetSymTriangles(const symId: WideString): Double; safecall;
  end;

// *********************************************************************//
// DispIntf:  IEnvironmentDisp
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {83A33D78-27C5-11CE-BFD4-00400513BB57}
// *********************************************************************//
  IEnvironmentDisp = dispinterface
    ['{83A33D78-27C5-11CE-BFD4-00400513BB57}']
    function GetSymEdgeCounts(const symId: WideString): OleVariant; dispid 1;
    function IGetSymEdgeCounts(const symId: WideString): Smallint; dispid 2;
    function GetSymLines(const symId: WideString): OleVariant; dispid 3;
    function IGetSymLines(const symId: WideString): Double; dispid 4;
    function GetSymArcs(const symId: WideString): OleVariant; dispid 5;
    function IGetSymArcs(const symId: WideString): Double; dispid 6;
    function GetSymCircles(const symId: WideString): OleVariant; dispid 7;
    function IGetSymCircles(const symId: WideString): Double; dispid 8;
    function GetSymTextPoints(const symId: WideString): OleVariant; dispid 9;
    function IGetSymTextPoints(const symId: WideString): Double; dispid 10;
    function GetSymText(const symId: WideString): OleVariant; dispid 11;
    function GetSymTriangles(const symId: WideString): OleVariant; dispid 12;
    function IGetSymTriangles(const symId: WideString): Double; dispid 13;
  end;

// *********************************************************************//
// Interface: IEnumDocuments
// Flags:     (272) Hidden OleAutomation
// GUID:      {83A33DB3-27C5-11CE-BFD4-00400513BB57}
// *********************************************************************//
  IEnumDocuments = interface(IUnknown)
    ['{83A33DB3-27C5-11CE-BFD4-00400513BB57}']
    function Next(celt: Integer; out rgelt: IModelDoc; var pceltFetched: Integer): HResult; stdcall;
    function Skip(celt: Integer): HResult; stdcall;
    function Reset: HResult; stdcall;
    function Clone(out ppenum: IEnumDocuments): HResult; stdcall;
  end;

// *********************************************************************//
// Interface: IMathUtility
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {F7D97F80-162E-11D4-AEAB-00C04FA0AC51}
// *********************************************************************//
  IMathUtility = interface(IDispatch)
    ['{F7D97F80-162E-11D4-AEAB-00C04FA0AC51}']
    function CreateTransform(ArrayDataIn: OleVariant): IDispatch; safecall;
    function ICreateTransform(var ArrayDataIn: Double): IMathTransform; safecall;
    function CreateTransformRotateAxis(const pointObjIn: IDispatch; const vectorObjIn: IDispatch; 
                                       angle: Double): IDispatch; safecall;
    function ICreateTransformRotateAxis(const pointObjIn: IMathPoint; 
                                        const vectorObjIn: IMathVector; angle: Double): IMathTransform; safecall;
    function CreatePoint(ArrayDataIn: OleVariant): IDispatch; safecall;
    function ICreatePoint(var ArrayDataIn: Double): IMathPoint; safecall;
    function CreateVector(ArrayDataIn: OleVariant): IDispatch; safecall;
    function ICreateVector(var ArrayDataIn: Double): IMathVector; safecall;
    function ComposeTransform(const xVec: IMathVector; const yVec: IMathVector; 
                              const zVec: IMathVector; const transVec: IMathVector; Scale: Double): IMathTransform; safecall;
  end;

// *********************************************************************//
// DispIntf:  IMathUtilityDisp
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {F7D97F80-162E-11D4-AEAB-00C04FA0AC51}
// *********************************************************************//
  IMathUtilityDisp = dispinterface
    ['{F7D97F80-162E-11D4-AEAB-00C04FA0AC51}']
    function CreateTransform(ArrayDataIn: OleVariant): IDispatch; dispid 1;
    function ICreateTransform(var ArrayDataIn: Double): IMathTransform; dispid 2;
    function CreateTransformRotateAxis(const pointObjIn: IDispatch; const vectorObjIn: IDispatch; 
                                       angle: Double): IDispatch; dispid 3;
    function ICreateTransformRotateAxis(const pointObjIn: IMathPoint; 
                                        const vectorObjIn: IMathVector; angle: Double): IMathTransform; dispid 4;
    function CreatePoint(ArrayDataIn: OleVariant): IDispatch; dispid 5;
    function ICreatePoint(var ArrayDataIn: Double): IMathPoint; dispid 6;
    function CreateVector(ArrayDataIn: OleVariant): IDispatch; dispid 7;
    function ICreateVector(var ArrayDataIn: Double): IMathVector; dispid 8;
    function ComposeTransform(const xVec: IMathVector; const yVec: IMathVector; 
                              const zVec: IMathVector; const transVec: IMathVector; Scale: Double): IMathTransform; dispid 9;
  end;

// *********************************************************************//
// Interface: IEnumDocuments2
// Flags:     (272) Hidden OleAutomation
// GUID:      {76D82D71-339A-4D1C-91A1-F6AC0CF9B625}
// *********************************************************************//
  IEnumDocuments2 = interface(IUnknown)
    ['{76D82D71-339A-4D1C-91A1-F6AC0CF9B625}']
    function Next(celt: Integer; out rgelt: IModelDoc2; var pceltFetched: Integer): HResult; stdcall;
    function Skip(celt: Integer): HResult; stdcall;
    function Reset: HResult; stdcall;
    function Clone(out ppenum: IEnumDocuments2): HResult; stdcall;
  end;

// *********************************************************************//
// Interface: IPropertyManagerPage2
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {B92E624A-0DC3-11D5-AF1E-00C04F603FAF}
// *********************************************************************//
  IPropertyManagerPage2 = interface(IDispatch)
    ['{B92E624A-0DC3-11D5-AF1E-00C04F603FAF}']
    function SetTitleBitmap(ModuleHandle: Integer; Identifier: Integer): WordBool; safecall;
    function AddGroupBox(id: Integer; const Caption: WideString; options: Integer): IDispatch; safecall;
    function IAddGroupBox(id: Integer; const Caption: WideString; options: Integer): IPropertyManagerPageGroup; safecall;
    function AddControl(id: Integer; ControlType: Smallint; const Caption: WideString; 
                        LeftAlign: Smallint; options: Integer; const Tip: WideString): IDispatch; safecall;
    function IAddControl(id: Integer; ControlType: Smallint; const Caption: WideString; 
                         LeftAlign: Smallint; options: Integer; const Tip: WideString): IPropertyManagerPageControl; safecall;
    function SetMessage(const Message: WideString; visibility: Integer): WordBool; safecall;
    function Show: Integer; safecall;
    procedure Close(Okay: WordBool); safecall;
    function EnableButton(whichOne: Integer; Enable: WordBool): WordBool; safecall;
  end;

// *********************************************************************//
// DispIntf:  IPropertyManagerPage2Disp
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {B92E624A-0DC3-11D5-AF1E-00C04F603FAF}
// *********************************************************************//
  IPropertyManagerPage2Disp = dispinterface
    ['{B92E624A-0DC3-11D5-AF1E-00C04F603FAF}']
    function SetTitleBitmap(ModuleHandle: Integer; Identifier: Integer): WordBool; dispid 131073;
    function AddGroupBox(id: Integer; const Caption: WideString; options: Integer): IDispatch; dispid 131074;
    function IAddGroupBox(id: Integer; const Caption: WideString; options: Integer): IPropertyManagerPageGroup; dispid 131075;
    function AddControl(id: Integer; ControlType: Smallint; const Caption: WideString; 
                        LeftAlign: Smallint; options: Integer; const Tip: WideString): IDispatch; dispid 131076;
    function IAddControl(id: Integer; ControlType: Smallint; const Caption: WideString; 
                         LeftAlign: Smallint; options: Integer; const Tip: WideString): IPropertyManagerPageControl; dispid 131077;
    function SetMessage(const Message: WideString; visibility: Integer): WordBool; dispid 131078;
    function Show: Integer; dispid 131079;
    procedure Close(Okay: WordBool); dispid 131080;
    function EnableButton(whichOne: Integer; Enable: WordBool): WordBool; dispid 131081;
  end;

// *********************************************************************//
// Interface: IPropertyManagerPageGroup
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {2E23D2EE-0F57-11D5-AF1F-00C04F603FAF}
// *********************************************************************//
  IPropertyManagerPageGroup = interface(IDispatch)
    ['{2E23D2EE-0F57-11D5-AF1F-00C04F603FAF}']
    function Get_Visible: WordBool; safecall;
    procedure Set_Visible(Visible: WordBool); safecall;
    function Get_Expanded: WordBool; safecall;
    procedure Set_Expanded(Expanded: WordBool); safecall;
    function AddControl(id: Integer; ControlType: Smallint; const Caption: WideString; 
                        LeftAlign: Smallint; options: Integer; const Tip: WideString): IDispatch; safecall;
    function IAddControl(id: Integer; ControlType: Smallint; const Caption: WideString; 
                         LeftAlign: Smallint; options: Integer; const Tip: WideString): IPropertyManagerPageControl; safecall;
    property Visible: WordBool read Get_Visible write Set_Visible;
    property Expanded: WordBool read Get_Expanded write Set_Expanded;
  end;

// *********************************************************************//
// DispIntf:  IPropertyManagerPageGroupDisp
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {2E23D2EE-0F57-11D5-AF1F-00C04F603FAF}
// *********************************************************************//
  IPropertyManagerPageGroupDisp = dispinterface
    ['{2E23D2EE-0F57-11D5-AF1F-00C04F603FAF}']
    property Visible: WordBool dispid 131073;
    property Expanded: WordBool dispid 131074;
    function AddControl(id: Integer; ControlType: Smallint; const Caption: WideString; 
                        LeftAlign: Smallint; options: Integer; const Tip: WideString): IDispatch; dispid 131075;
    function IAddControl(id: Integer; ControlType: Smallint; const Caption: WideString; 
                         LeftAlign: Smallint; options: Integer; const Tip: WideString): IPropertyManagerPageControl; dispid 131076;
  end;

// *********************************************************************//
// Interface: IPropertyManagerPageControl
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {CED9CAF4-16FA-11D5-AF24-00C04F603FAF}
// *********************************************************************//
  IPropertyManagerPageControl = interface(IDispatch)
    ['{CED9CAF4-16FA-11D5-AF24-00C04F603FAF}']
    function Get_Visible: WordBool; safecall;
    procedure Set_Visible(Visible: WordBool); safecall;
    function Get_enabled: WordBool; safecall;
    procedure Set_enabled(enabled: WordBool); safecall;
    function SetStandardPictureLabel(bitmap: Integer): WordBool; safecall;
    function SetPictureLabelByName(const ColorBitmap: WideString; const MaskBitmap: WideString): WordBool; safecall;
    function Get_Tip: WideString; safecall;
    procedure Set_Tip(const Tip: WideString); safecall;
    function Get_left: Smallint; safecall;
    procedure Set_left(x: Smallint); safecall;
    function Get_width: Smallint; safecall;
    procedure Set_width(width: Smallint); safecall;
    function Get_top: Smallint; safecall;
    procedure Set_top(y: Smallint); safecall;
    property Visible: WordBool read Get_Visible write Set_Visible;
    property enabled: WordBool read Get_enabled write Set_enabled;
    property Tip: WideString read Get_Tip write Set_Tip;
    property left: Smallint read Get_left write Set_left;
    property width: Smallint read Get_width write Set_width;
    property top: Smallint read Get_top write Set_top;
  end;

// *********************************************************************//
// DispIntf:  IPropertyManagerPageControlDisp
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {CED9CAF4-16FA-11D5-AF24-00C04F603FAF}
// *********************************************************************//
  IPropertyManagerPageControlDisp = dispinterface
    ['{CED9CAF4-16FA-11D5-AF24-00C04F603FAF}']
    property Visible: WordBool dispid 131073;
    property enabled: WordBool dispid 131074;
    function SetStandardPictureLabel(bitmap: Integer): WordBool; dispid 131075;
    function SetPictureLabelByName(const ColorBitmap: WideString; const MaskBitmap: WideString): WordBool; dispid 131076;
    property Tip: WideString dispid 131077;
    property left: Smallint dispid 131078;
    property width: Smallint dispid 131079;
    property top: Smallint dispid 131080;
  end;

// *********************************************************************//
// Interface: IRefAxis
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {83A33D86-27C5-11CE-BFD4-00400513BB57}
// *********************************************************************//
  IRefAxis = interface(IDispatch)
    ['{83A33D86-27C5-11CE-BFD4-00400513BB57}']
    function GetRefAxisParams: OleVariant; safecall;
    function IGetRefAxisParams: Double; safecall;
  end;

// *********************************************************************//
// DispIntf:  IRefAxisDisp
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {83A33D86-27C5-11CE-BFD4-00400513BB57}
// *********************************************************************//
  IRefAxisDisp = dispinterface
    ['{83A33D86-27C5-11CE-BFD4-00400513BB57}']
    function GetRefAxisParams: OleVariant; dispid 1;
    function IGetRefAxisParams: Double; dispid 2;
  end;

// *********************************************************************//
// Interface: IMate
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {83A33D8A-27C5-11CE-BFD4-00400513BB57}
// *********************************************************************//
  IMate = interface(IDispatch)
    ['{83A33D8A-27C5-11CE-BFD4-00400513BB57}']
    function GetMateParams: OleVariant; safecall;
    procedure IGetMateParams(out mateType: Integer; out alignFlag: Integer; 
                             out canBeFlipped: Integer); safecall;
    function GetMateDimensionValue: OleVariant; safecall;
    function IGetMateDimensionValue: Double; safecall;
    function GetMateEntities: OleVariant; safecall;
    procedure IGetMateEntities(out entity1: IMateEntity; out entity2: IMateEntity); safecall;
    function GetEntity(whichOne: SYSINT): IDispatch; safecall;
    function IGetEntity(whichOne: SYSINT): IEntity; safecall;
  end;

// *********************************************************************//
// DispIntf:  IMateDisp
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {83A33D8A-27C5-11CE-BFD4-00400513BB57}
// *********************************************************************//
  IMateDisp = dispinterface
    ['{83A33D8A-27C5-11CE-BFD4-00400513BB57}']
    function GetMateParams: OleVariant; dispid 1;
    procedure IGetMateParams(out mateType: Integer; out alignFlag: Integer; 
                             out canBeFlipped: Integer); dispid 2;
    function GetMateDimensionValue: OleVariant; dispid 3;
    function IGetMateDimensionValue: Double; dispid 4;
    function GetMateEntities: OleVariant; dispid 5;
    procedure IGetMateEntities(out entity1: IMateEntity; out entity2: IMateEntity); dispid 6;
    function GetEntity(whichOne: SYSINT): IDispatch; dispid 7;
    function IGetEntity(whichOne: SYSINT): IEntity; dispid 8;
  end;

// *********************************************************************//
// Interface: IMateEntity
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {83A33D8C-27C5-11CE-BFD4-00400513BB57}
// *********************************************************************//
  IMateEntity = interface(IDispatch)
    ['{83A33D8C-27C5-11CE-BFD4-00400513BB57}']
    function GetMember: IDispatch; safecall;
    function IGetMember: IMember; safecall;
    function GetEntityType: Integer; safecall;
    function GetEntityParams: OleVariant; safecall;
    function IGetEntityParams: Double; safecall;
    function GetComponent: IDispatch; safecall;
    function IGetComponent: IComponent; safecall;
    function GetComponentName: WideString; safecall;
    function IGetComponent2: IComponent2; safecall;
  end;

// *********************************************************************//
// DispIntf:  IMateEntityDisp
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {83A33D8C-27C5-11CE-BFD4-00400513BB57}
// *********************************************************************//
  IMateEntityDisp = dispinterface
    ['{83A33D8C-27C5-11CE-BFD4-00400513BB57}']
    function GetMember: IDispatch; dispid 1;
    function IGetMember: IMember; dispid 2;
    function GetEntityType: Integer; dispid 3;
    function GetEntityParams: OleVariant; dispid 4;
    function IGetEntityParams: Double; dispid 5;
    function GetComponent: IDispatch; dispid 6;
    function IGetComponent: IComponent; dispid 7;
    function GetComponentName: WideString; dispid 8;
    function IGetComponent2: IComponent2; dispid 9;
  end;

// *********************************************************************//
// Interface: ISWPropertySheet
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {83A33DA7-27C5-11CE-BFD4-00400513BB57}
// *********************************************************************//
  ISWPropertySheet = interface(IDispatch)
    ['{83A33DA7-27C5-11CE-BFD4-00400513BB57}']
    function AddPage(page: Integer): Integer; safecall;
    function RemovePage(page: Integer): Integer; safecall;
  end;

// *********************************************************************//
// DispIntf:  ISWPropertySheetDisp
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {83A33DA7-27C5-11CE-BFD4-00400513BB57}
// *********************************************************************//
  ISWPropertySheetDisp = dispinterface
    ['{83A33DA7-27C5-11CE-BFD4-00400513BB57}']
    function AddPage(page: Integer): Integer; dispid 1;
    function RemovePage(page: Integer): Integer; dispid 2;
  end;

// *********************************************************************//
// Interface: IRibFeatureData
// Flags:     (336) Hidden Dual OleAutomation
// GUID:      {83A33DAD-27C5-11CE-BFD4-00400513BB57}
// *********************************************************************//
  IRibFeatureData = interface(IUnknown)
    ['{83A33DAD-27C5-11CE-BFD4-00400513BB57}']
    function Get_IsTwoSided: WordBool; safecall;
    procedure Set_IsTwoSided(twoSided: WordBool); safecall;
    function Get_reverseThicknessDir: WordBool; safecall;
    procedure Set_reverseThicknessDir(reverse: WordBool); safecall;
    function Get_thickness: Double; safecall;
    procedure Set_thickness(thickness: Double); safecall;
    function Get_RefSketchIndex: SYSINT; safecall;
    procedure Set_RefSketchIndex(index: SYSINT); safecall;
    function NextReference: SYSINT; safecall;
    function Get_FlipSide: WordBool; safecall;
    procedure Set_FlipSide(FlipSide: WordBool); safecall;
    function Get_EnableDraft: WordBool; safecall;
    procedure Set_EnableDraft(EnableDraft: WordBool); safecall;
    function Get_draftOutward: WordBool; safecall;
    procedure Set_draftOutward(draftOutward: WordBool); safecall;
    function Get_draftAngle: Double; safecall;
    procedure Set_draftAngle(angle: Double); safecall;
    property IsTwoSided: WordBool read Get_IsTwoSided write Set_IsTwoSided;
    property reverseThicknessDir: WordBool read Get_reverseThicknessDir write Set_reverseThicknessDir;
    property thickness: Double read Get_thickness write Set_thickness;
    property RefSketchIndex: SYSINT read Get_RefSketchIndex write Set_RefSketchIndex;
    property FlipSide: WordBool read Get_FlipSide write Set_FlipSide;
    property EnableDraft: WordBool read Get_EnableDraft write Set_EnableDraft;
    property draftOutward: WordBool read Get_draftOutward write Set_draftOutward;
    property draftAngle: Double read Get_draftAngle write Set_draftAngle;
  end;

// *********************************************************************//
// DispIntf:  IRibFeatureDataDisp
// Flags:     (336) Hidden Dual OleAutomation
// GUID:      {83A33DAD-27C5-11CE-BFD4-00400513BB57}
// *********************************************************************//
  IRibFeatureDataDisp = dispinterface
    ['{83A33DAD-27C5-11CE-BFD4-00400513BB57}']
    property IsTwoSided: WordBool dispid 1;
    property reverseThicknessDir: WordBool dispid 2;
    property thickness: Double dispid 3;
    property RefSketchIndex: SYSINT dispid 4;
    function NextReference: SYSINT; dispid 5;
    property FlipSide: WordBool dispid 6;
    property EnableDraft: WordBool dispid 7;
    property draftOutward: WordBool dispid 8;
    property draftAngle: Double dispid 9;
  end;

// *********************************************************************//
// Interface: IDomeFeatureData
// Flags:     (336) Hidden Dual OleAutomation
// GUID:      {83A33DAF-27C5-11CE-BFD4-00400513BB57}
// *********************************************************************//
  IDomeFeatureData = interface(IUnknown)
    ['{83A33DAF-27C5-11CE-BFD4-00400513BB57}']
    function Get_height: Double; safecall;
    procedure Set_height(height: Double); safecall;
    function Get_reverseDir: WordBool; safecall;
    procedure Set_reverseDir(reverse: WordBool); safecall;
    function Get_Elliptical: WordBool; safecall;
    procedure Set_Elliptical(Elliptical: WordBool); safecall;
    function AccessSelections(const topDoc: IDispatch; const component: IDispatch): WordBool; safecall;
    function IAccessSelections(const topDoc: IModelDoc; const component: IComponent): WordBool; safecall;
    procedure ReleaseSelectionAccess; safecall;
    function Get_face: IDispatch; safecall;
    procedure Set_face(const face: IDispatch); safecall;
    function Get_IFace: IFace; safecall;
    procedure Set_IFace(const face: IFace); safecall;
    property height: Double read Get_height write Set_height;
    property reverseDir: WordBool read Get_reverseDir write Set_reverseDir;
    property Elliptical: WordBool read Get_Elliptical write Set_Elliptical;
    property face: IDispatch read Get_face write Set_face;
    property IFace: IFace read Get_IFace write Set_IFace;
  end;

// *********************************************************************//
// DispIntf:  IDomeFeatureDataDisp
// Flags:     (336) Hidden Dual OleAutomation
// GUID:      {83A33DAF-27C5-11CE-BFD4-00400513BB57}
// *********************************************************************//
  IDomeFeatureDataDisp = dispinterface
    ['{83A33DAF-27C5-11CE-BFD4-00400513BB57}']
    property height: Double dispid 1;
    property reverseDir: WordBool dispid 2;
    property Elliptical: WordBool dispid 3;
    function AccessSelections(const topDoc: IDispatch; const component: IDispatch): WordBool; dispid 4;
    function IAccessSelections(const topDoc: IModelDoc; const component: IComponent): WordBool; dispid 5;
    procedure ReleaseSelectionAccess; dispid 6;
    property face: IDispatch dispid 7;
    property IFace: IFace dispid 8;
  end;

// *********************************************************************//
// Interface: ISketchLine
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {83A33DC1-27C5-11CE-BFD4-00400513BB57}
// *********************************************************************//
  ISketchLine = interface(IDispatch)
    ['{83A33DC1-27C5-11CE-BFD4-00400513BB57}']
    function GetStartPoint: OleVariant; safecall;
    function IGetStartPoint: Double; safecall;
    function GetEndPoint: OleVariant; safecall;
    function IGetEndPoint: Double; safecall;
    function GetStartPoint2: IDispatch; safecall;
    function IGetStartPoint2: ISketchPoint; safecall;
    function GetEndPoint2: IDispatch; safecall;
    function IGetEndPoint2: ISketchPoint; safecall;
  end;

// *********************************************************************//
// DispIntf:  ISketchLineDisp
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {83A33DC1-27C5-11CE-BFD4-00400513BB57}
// *********************************************************************//
  ISketchLineDisp = dispinterface
    ['{83A33DC1-27C5-11CE-BFD4-00400513BB57}']
    function GetStartPoint: OleVariant; dispid 1;
    function IGetStartPoint: Double; dispid 2;
    function GetEndPoint: OleVariant; dispid 3;
    function IGetEndPoint: Double; dispid 4;
    function GetStartPoint2: IDispatch; dispid 5;
    function IGetStartPoint2: ISketchPoint; dispid 6;
    function GetEndPoint2: IDispatch; dispid 7;
    function IGetEndPoint2: ISketchPoint; dispid 8;
  end;

// *********************************************************************//
// Interface: ISketchArc
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {83A33DC3-27C5-11CE-BFD4-00400513BB57}
// *********************************************************************//
  ISketchArc = interface(IDispatch)
    ['{83A33DC3-27C5-11CE-BFD4-00400513BB57}']
    function GetStartPoint: OleVariant; safecall;
    function IGetStartPoint: Double; safecall;
    function GetEndPoint: OleVariant; safecall;
    function IGetEndPoint: Double; safecall;
    function GetCenterPoint: OleVariant; safecall;
    function IGetCenterPoint: Double; safecall;
    function IsCircle: SYSINT; safecall;
    function GetRotationDir: SYSINT; safecall;
    function GetStartPoint2: IDispatch; safecall;
    function IGetStartPoint2: ISketchPoint; safecall;
    function GetEndPoint2: IDispatch; safecall;
    function IGetEndPoint2: ISketchPoint; safecall;
    function GetCenterPoint2: IDispatch; safecall;
    function IGetCenterPoint2: ISketchPoint; safecall;
    function GetRadius: Double; safecall;
    function SetRadius(radius: Double): WordBool; safecall;
    function GetNormalVector: OleVariant; safecall;
    function IGetNormalVector: Double; safecall;
  end;

// *********************************************************************//
// DispIntf:  ISketchArcDisp
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {83A33DC3-27C5-11CE-BFD4-00400513BB57}
// *********************************************************************//
  ISketchArcDisp = dispinterface
    ['{83A33DC3-27C5-11CE-BFD4-00400513BB57}']
    function GetStartPoint: OleVariant; dispid 1;
    function IGetStartPoint: Double; dispid 2;
    function GetEndPoint: OleVariant; dispid 3;
    function IGetEndPoint: Double; dispid 4;
    function GetCenterPoint: OleVariant; dispid 5;
    function IGetCenterPoint: Double; dispid 6;
    function IsCircle: SYSINT; dispid 7;
    function GetRotationDir: SYSINT; dispid 8;
    function GetStartPoint2: IDispatch; dispid 9;
    function IGetStartPoint2: ISketchPoint; dispid 10;
    function GetEndPoint2: IDispatch; dispid 11;
    function IGetEndPoint2: ISketchPoint; dispid 12;
    function GetCenterPoint2: IDispatch; dispid 13;
    function IGetCenterPoint2: ISketchPoint; dispid 14;
    function GetRadius: Double; dispid 15;
    function SetRadius(radius: Double): WordBool; dispid 16;
    function GetNormalVector: OleVariant; dispid 17;
    function IGetNormalVector: Double; dispid 18;
  end;

// *********************************************************************//
// Interface: ISketchEllipse
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {83A33DC7-27C5-11CE-BFD4-00400513BB57}
// *********************************************************************//
  ISketchEllipse = interface(IDispatch)
    ['{83A33DC7-27C5-11CE-BFD4-00400513BB57}']
    function GetStartPoint: OleVariant; safecall;
    function IGetStartPoint: Double; safecall;
    function GetEndPoint: OleVariant; safecall;
    function IGetEndPoint: Double; safecall;
    function GetCenterPoint: OleVariant; safecall;
    function IGetCenterPoint: Double; safecall;
    function GetMajorPoint: OleVariant; safecall;
    function IGetMajorPoint: Double; safecall;
    function GetMinorPoint: OleVariant; safecall;
    function IGetMinorPoint: Double; safecall;
    function GetStartPoint2: IDispatch; safecall;
    function IGetStartPoint2: ISketchPoint; safecall;
    function GetEndPoint2: IDispatch; safecall;
    function IGetEndPoint2: ISketchPoint; safecall;
    function GetCenterPoint2: IDispatch; safecall;
    function IGetCenterPoint2: ISketchPoint; safecall;
    function GetMajorPoint2: IDispatch; safecall;
    function IGetMajorPoint2: ISketchPoint; safecall;
    function GetMinorPoint2: IDispatch; safecall;
    function IGetMinorPoint2: ISketchPoint; safecall;
  end;

// *********************************************************************//
// DispIntf:  ISketchEllipseDisp
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {83A33DC7-27C5-11CE-BFD4-00400513BB57}
// *********************************************************************//
  ISketchEllipseDisp = dispinterface
    ['{83A33DC7-27C5-11CE-BFD4-00400513BB57}']
    function GetStartPoint: OleVariant; dispid 1;
    function IGetStartPoint: Double; dispid 2;
    function GetEndPoint: OleVariant; dispid 3;
    function IGetEndPoint: Double; dispid 4;
    function GetCenterPoint: OleVariant; dispid 5;
    function IGetCenterPoint: Double; dispid 6;
    function GetMajorPoint: OleVariant; dispid 7;
    function IGetMajorPoint: Double; dispid 8;
    function GetMinorPoint: OleVariant; dispid 9;
    function IGetMinorPoint: Double; dispid 10;
    function GetStartPoint2: IDispatch; dispid 11;
    function IGetStartPoint2: ISketchPoint; dispid 12;
    function GetEndPoint2: IDispatch; dispid 13;
    function IGetEndPoint2: ISketchPoint; dispid 14;
    function GetCenterPoint2: IDispatch; dispid 15;
    function IGetCenterPoint2: ISketchPoint; dispid 16;
    function GetMajorPoint2: IDispatch; dispid 17;
    function IGetMajorPoint2: ISketchPoint; dispid 18;
    function GetMinorPoint2: IDispatch; dispid 19;
    function IGetMinorPoint2: ISketchPoint; dispid 20;
  end;

// *********************************************************************//
// Interface: ISketchParabola
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {83A33DC9-27C5-11CE-BFD4-00400513BB57}
// *********************************************************************//
  ISketchParabola = interface(IDispatch)
    ['{83A33DC9-27C5-11CE-BFD4-00400513BB57}']
    function GetStartPoint: OleVariant; safecall;
    function IGetStartPoint: Double; safecall;
    function GetEndPoint: OleVariant; safecall;
    function IGetEndPoint: Double; safecall;
    function GetFocalPoint: OleVariant; safecall;
    function IGetFocalPoint: Double; safecall;
    function GetApexPoint: OleVariant; safecall;
    function IGetApexPoint: Double; safecall;
    function GetStartPoint2: IDispatch; safecall;
    function IGetStartPoint2: ISketchPoint; safecall;
    function GetEndPoint2: IDispatch; safecall;
    function IGetEndPoint2: ISketchPoint; safecall;
    function GetFocalPoint2: IDispatch; safecall;
    function IGetFocalPoint2: ISketchPoint; safecall;
    function GetApexPoint2: IDispatch; safecall;
    function IGetApexPoint2: ISketchPoint; safecall;
  end;

// *********************************************************************//
// DispIntf:  ISketchParabolaDisp
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {83A33DC9-27C5-11CE-BFD4-00400513BB57}
// *********************************************************************//
  ISketchParabolaDisp = dispinterface
    ['{83A33DC9-27C5-11CE-BFD4-00400513BB57}']
    function GetStartPoint: OleVariant; dispid 1;
    function IGetStartPoint: Double; dispid 2;
    function GetEndPoint: OleVariant; dispid 3;
    function IGetEndPoint: Double; dispid 4;
    function GetFocalPoint: OleVariant; dispid 5;
    function IGetFocalPoint: Double; dispid 6;
    function GetApexPoint: OleVariant; dispid 7;
    function IGetApexPoint: Double; dispid 8;
    function GetStartPoint2: IDispatch; dispid 9;
    function IGetStartPoint2: ISketchPoint; dispid 10;
    function GetEndPoint2: IDispatch; dispid 11;
    function IGetEndPoint2: ISketchPoint; dispid 12;
    function GetFocalPoint2: IDispatch; dispid 13;
    function IGetFocalPoint2: ISketchPoint; dispid 14;
    function GetApexPoint2: IDispatch; dispid 15;
    function IGetApexPoint2: ISketchPoint; dispid 16;
  end;

// *********************************************************************//
// Interface: ISketchSpline
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {83A33DCB-27C5-11CE-BFD4-00400513BB57}
// *********************************************************************//
  ISketchSpline = interface(IDispatch)
    ['{83A33DCB-27C5-11CE-BFD4-00400513BB57}']
    function GetPointCount: Integer; safecall;
    function GetPoints: OleVariant; safecall;
    function IGetPoints: Double; safecall;
    function GetPoints2: OleVariant; safecall;
    function IEnumPoints: IEnumSketchPoints; safecall;
  end;

// *********************************************************************//
// DispIntf:  ISketchSplineDisp
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {83A33DCB-27C5-11CE-BFD4-00400513BB57}
// *********************************************************************//
  ISketchSplineDisp = dispinterface
    ['{83A33DCB-27C5-11CE-BFD4-00400513BB57}']
    function GetPointCount: Integer; dispid 1;
    function GetPoints: OleVariant; dispid 2;
    function IGetPoints: Double; dispid 3;
    function GetPoints2: OleVariant; dispid 4;
    function IEnumPoints: IEnumSketchPoints; dispid 5;
  end;

// *********************************************************************//
// Interface: ILightDialog
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {83A33DF1-27C5-11CE-BFD4-00400513BB57}
// *********************************************************************//
  ILightDialog = interface(IDispatch)
    ['{83A33DF1-27C5-11CE-BFD4-00400513BB57}']
    function AddSubDialog(page: Integer): WordBool; safecall;
    function GetLightId: Integer; safecall;
  end;

// *********************************************************************//
// DispIntf:  ILightDialogDisp
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {83A33DF1-27C5-11CE-BFD4-00400513BB57}
// *********************************************************************//
  ILightDialogDisp = dispinterface
    ['{83A33DF1-27C5-11CE-BFD4-00400513BB57}']
    function AddSubDialog(page: Integer): WordBool; dispid 1;
    function GetLightId: Integer; dispid 2;
  end;

// *********************************************************************//
// Interface: IEnumCurves
// Flags:     (272) Hidden OleAutomation
// GUID:      {5B57E3BC-7139-11D3-AEA2-00C04F683CBA}
// *********************************************************************//
  IEnumCurves = interface(IUnknown)
    ['{5B57E3BC-7139-11D3-AEA2-00C04F683CBA}']
    function Next(celt: Integer; out rgelt: ICurve; var pceltFetched: Integer): HResult; stdcall;
    function Skip(celt: Integer): HResult; stdcall;
    function Reset: HResult; stdcall;
    function Clone(out ppenum: IEnumCurves): HResult; stdcall;
  end;

// *********************************************************************//
// Interface: ISimpleHoleFeatureData
// Flags:     (336) Hidden Dual OleAutomation
// GUID:      {1D06FD54-96DD-11D3-AEAA-00C04F683CBA}
// *********************************************************************//
  ISimpleHoleFeatureData = interface(IUnknown)
    ['{1D06FD54-96DD-11D3-AEAA-00C04F683CBA}']
    function AccessSelections(const topDoc: IDispatch; const component: IDispatch): WordBool; safecall;
    function IAccessSelections(const topDoc: IModelDoc; const component: IComponent): WordBool; safecall;
    procedure ReleaseSelectionAccess; safecall;
    function Get_ReverseDirection: WordBool; safecall;
    procedure Set_ReverseDirection(ReverseDirection: WordBool); safecall;
    function Get_DraftWhileExtruding: WordBool; safecall;
    procedure Set_DraftWhileExtruding(draftWhileExtrude: WordBool); safecall;
    function Get_draftOutward: WordBool; safecall;
    procedure Set_draftOutward(draftOutward: WordBool); safecall;
    function Get_ReverseOffset: WordBool; safecall;
    procedure Set_ReverseOffset(draftOutward: WordBool); safecall;
    function Get_type_: SYSINT; safecall;
    procedure Set_type_(type_: SYSINT); safecall;
    function Get_diameter: Double; safecall;
    procedure Set_diameter(diameter: Double); safecall;
    function Get_depth: Double; safecall;
    procedure Set_depth(depth: Double); safecall;
    function Get_draftAngle: Double; safecall;
    procedure Set_draftAngle(draftAngle: Double); safecall;
    function Get_SurfaceOffset: Double; safecall;
    procedure Set_SurfaceOffset(SurfaceOffset: Double); safecall;
    function Get_face: IDispatch; safecall;
    procedure Set_face(const face: IDispatch); safecall;
    function Get_IFace: IFace; safecall;
    procedure Set_IFace(const face: IFace); safecall;
    function Get_Vertex: IDispatch; safecall;
    procedure Set_Vertex(const Vertex: IDispatch); safecall;
    function Get_IVertex: IVertex; safecall;
    procedure Set_IVertex(const Vertex: IVertex); safecall;
    property ReverseDirection: WordBool read Get_ReverseDirection write Set_ReverseDirection;
    property DraftWhileExtruding: WordBool read Get_DraftWhileExtruding write Set_DraftWhileExtruding;
    property draftOutward: WordBool read Get_draftOutward write Set_draftOutward;
    property ReverseOffset: WordBool read Get_ReverseOffset write Set_ReverseOffset;
    property type_: SYSINT read Get_type_ write Set_type_;
    property diameter: Double read Get_diameter write Set_diameter;
    property depth: Double read Get_depth write Set_depth;
    property draftAngle: Double read Get_draftAngle write Set_draftAngle;
    property SurfaceOffset: Double read Get_SurfaceOffset write Set_SurfaceOffset;
    property face: IDispatch read Get_face write Set_face;
    property IFace: IFace read Get_IFace write Set_IFace;
    property Vertex: IDispatch read Get_Vertex write Set_Vertex;
    property IVertex: IVertex read Get_IVertex write Set_IVertex;
  end;

// *********************************************************************//
// DispIntf:  ISimpleHoleFeatureDataDisp
// Flags:     (336) Hidden Dual OleAutomation
// GUID:      {1D06FD54-96DD-11D3-AEAA-00C04F683CBA}
// *********************************************************************//
  ISimpleHoleFeatureDataDisp = dispinterface
    ['{1D06FD54-96DD-11D3-AEAA-00C04F683CBA}']
    function AccessSelections(const topDoc: IDispatch; const component: IDispatch): WordBool; dispid 1;
    function IAccessSelections(const topDoc: IModelDoc; const component: IComponent): WordBool; dispid 2;
    procedure ReleaseSelectionAccess; dispid 3;
    property ReverseDirection: WordBool dispid 4;
    property DraftWhileExtruding: WordBool dispid 5;
    property draftOutward: WordBool dispid 6;
    property ReverseOffset: WordBool dispid 7;
    property type_: SYSINT dispid 8;
    property diameter: Double dispid 9;
    property depth: Double dispid 10;
    property draftAngle: Double dispid 11;
    property SurfaceOffset: Double dispid 12;
    property face: IDispatch dispid 13;
    property IFace: IFace dispid 14;
    property Vertex: IDispatch dispid 15;
    property IVertex: IVertex dispid 16;
  end;

// *********************************************************************//
// Interface: IWizardHoleFeatureData
// Flags:     (336) Hidden Dual OleAutomation
// GUID:      {887AB457-A739-11D3-B97F-001083029A97}
// *********************************************************************//
  IWizardHoleFeatureData = interface(IUnknown)
    ['{887AB457-A739-11D3-B97F-001083029A97}']
    function AccessSelections(const topDoc: IDispatch; const component: IDispatch): WordBool; safecall;
    function IAccessSelections(const topDoc: IModelDoc; const component: IComponent): WordBool; safecall;
    procedure ReleaseSelectionAccess; safecall;
    function Get_type_: SYSINT; safecall;
    procedure Set_type_(hole_type: SYSINT); safecall;
    function Get_diameter: Double; safecall;
    procedure Set_diameter(diameter: Double); safecall;
    function Get_CounterBoreDiameter: Double; safecall;
    procedure Set_CounterBoreDiameter(cbore_dia: Double); safecall;
    function Get_CounterDrillDiameter: Double; safecall;
    procedure Set_CounterDrillDiameter(cdrill_dia: Double); safecall;
    function Get_CounterSinkDiameter: Double; safecall;
    procedure Set_CounterSinkDiameter(csunk_dia: Double); safecall;
    function Get_MinorDiameter: Double; safecall;
    procedure Set_MinorDiameter(minor_dia: Double); safecall;
    function Get_MajorDiameter: Double; safecall;
    procedure Set_MajorDiameter(major_dia: Double); safecall;
    function Get_HoleDiameter: Double; safecall;
    procedure Set_HoleDiameter(diameter: Double); safecall;
    function Get_ThruHoleDiameter: Double; safecall;
    procedure Set_ThruHoleDiameter(diameter: Double); safecall;
    function Get_TapDrillDiameter: Double; safecall;
    procedure Set_TapDrillDiameter(diameter: Double); safecall;
    function Get_ThruTapDrillDiameter: Double; safecall;
    procedure Set_ThruTapDrillDiameter(diameter: Double); safecall;
    function Get_NearCounterSinkDiameter: Double; safecall;
    procedure Set_NearCounterSinkDiameter(diameter: Double); safecall;
    function Get_MidCounterSinkDiameter: Double; safecall;
    procedure Set_MidCounterSinkDiameter(diameter: Double); safecall;
    function Get_FarCounterSinkDiameter: Double; safecall;
    procedure Set_FarCounterSinkDiameter(diameter: Double); safecall;
    function Get_ThreadDiameter: Double; safecall;
    procedure Set_ThreadDiameter(diameter: Double); safecall;
    function Get_depth: Double; safecall;
    procedure Set_depth(depth: Double); safecall;
    function Get_CounterBoreDepth: Double; safecall;
    procedure Set_CounterBoreDepth(cbore_depth: Double); safecall;
    function Get_CounterDrillDepth: Double; safecall;
    procedure Set_CounterDrillDepth(cdrill_depth: Double); safecall;
    function Get_HoleDepth: Double; safecall;
    procedure Set_HoleDepth(depth: Double); safecall;
    function Get_ThruHoleDepth: Double; safecall;
    procedure Set_ThruHoleDepth(depth: Double); safecall;
    function Get_TapDrillDepth: Double; safecall;
    procedure Set_TapDrillDepth(depth: Double); safecall;
    function Get_ThruTapDrillDepth: Double; safecall;
    procedure Set_ThruTapDrillDepth(depth: Double); safecall;
    function Get_ThreadDepth: Double; safecall;
    procedure Set_ThreadDepth(depth: Double); safecall;
    function Get_CounterDrillAngle: Double; safecall;
    procedure Set_CounterDrillAngle(cdrill_angle: Double); safecall;
    function Get_CounterSinkAngle: Double; safecall;
    procedure Set_CounterSinkAngle(csunk_angle: Double); safecall;
    function Get_DrillAngle: Double; safecall;
    procedure Set_DrillAngle(drill_angle: Double); safecall;
    function Get_NearCounterSinkAngle: Double; safecall;
    procedure Set_NearCounterSinkAngle(angle: Double); safecall;
    function Get_MidCounterSinkAngle: Double; safecall;
    procedure Set_MidCounterSinkAngle(angle: Double); safecall;
    function Get_FarCounterSinkAngle: Double; safecall;
    procedure Set_FarCounterSinkAngle(angle: Double); safecall;
    function Get_ThreadAngle: Double; safecall;
    procedure Set_ThreadAngle(angle: Double); safecall;
    function Get_HeadClearance: Double; safecall;
    procedure Set_HeadClearance(HeadClearance: Double); safecall;
    function Get_face: IDispatch; safecall;
    procedure Set_face(const face: IDispatch); safecall;
    function Get_IFace: IFace; safecall;
    procedure Set_IFace(const face: IFace); safecall;
    function Get_Vertex: IDispatch; safecall;
    procedure Set_Vertex(const Vertex: IDispatch); safecall;
    function Get_IVertex: IVertex; safecall;
    procedure Set_IVertex(const Vertex: IVertex); safecall;
    function Get_endCondition: SYSINT; safecall;
    procedure Set_endCondition(endCondition: SYSINT); safecall;
    function Get_Standard: WideString; safecall;
    procedure Set_Standard(const Standard: WideString); safecall;
    function Get_FastenerType: WideString; safecall;
    procedure Set_FastenerType(const FastenerType: WideString); safecall;
    function Get_FastenerSize: WideString; safecall;
    procedure Set_FastenerSize(const FastenerSize: WideString); safecall;
    property type_: SYSINT read Get_type_ write Set_type_;
    property diameter: Double read Get_diameter write Set_diameter;
    property CounterBoreDiameter: Double read Get_CounterBoreDiameter write Set_CounterBoreDiameter;
    property CounterDrillDiameter: Double read Get_CounterDrillDiameter write Set_CounterDrillDiameter;
    property CounterSinkDiameter: Double read Get_CounterSinkDiameter write Set_CounterSinkDiameter;
    property MinorDiameter: Double read Get_MinorDiameter write Set_MinorDiameter;
    property MajorDiameter: Double read Get_MajorDiameter write Set_MajorDiameter;
    property HoleDiameter: Double read Get_HoleDiameter write Set_HoleDiameter;
    property ThruHoleDiameter: Double read Get_ThruHoleDiameter write Set_ThruHoleDiameter;
    property TapDrillDiameter: Double read Get_TapDrillDiameter write Set_TapDrillDiameter;
    property ThruTapDrillDiameter: Double read Get_ThruTapDrillDiameter write Set_ThruTapDrillDiameter;
    property NearCounterSinkDiameter: Double read Get_NearCounterSinkDiameter write Set_NearCounterSinkDiameter;
    property MidCounterSinkDiameter: Double read Get_MidCounterSinkDiameter write Set_MidCounterSinkDiameter;
    property FarCounterSinkDiameter: Double read Get_FarCounterSinkDiameter write Set_FarCounterSinkDiameter;
    property ThreadDiameter: Double read Get_ThreadDiameter write Set_ThreadDiameter;
    property depth: Double read Get_depth write Set_depth;
    property CounterBoreDepth: Double read Get_CounterBoreDepth write Set_CounterBoreDepth;
    property CounterDrillDepth: Double read Get_CounterDrillDepth write Set_CounterDrillDepth;
    property HoleDepth: Double read Get_HoleDepth write Set_HoleDepth;
    property ThruHoleDepth: Double read Get_ThruHoleDepth write Set_ThruHoleDepth;
    property TapDrillDepth: Double read Get_TapDrillDepth write Set_TapDrillDepth;
    property ThruTapDrillDepth: Double read Get_ThruTapDrillDepth write Set_ThruTapDrillDepth;
    property ThreadDepth: Double read Get_ThreadDepth write Set_ThreadDepth;
    property CounterDrillAngle: Double read Get_CounterDrillAngle write Set_CounterDrillAngle;
    property CounterSinkAngle: Double read Get_CounterSinkAngle write Set_CounterSinkAngle;
    property DrillAngle: Double read Get_DrillAngle write Set_DrillAngle;
    property NearCounterSinkAngle: Double read Get_NearCounterSinkAngle write Set_NearCounterSinkAngle;
    property MidCounterSinkAngle: Double read Get_MidCounterSinkAngle write Set_MidCounterSinkAngle;
    property FarCounterSinkAngle: Double read Get_FarCounterSinkAngle write Set_FarCounterSinkAngle;
    property ThreadAngle: Double read Get_ThreadAngle write Set_ThreadAngle;
    property HeadClearance: Double read Get_HeadClearance write Set_HeadClearance;
    property face: IDispatch read Get_face write Set_face;
    property IFace: IFace read Get_IFace write Set_IFace;
    property Vertex: IDispatch read Get_Vertex write Set_Vertex;
    property IVertex: IVertex read Get_IVertex write Set_IVertex;
    property endCondition: SYSINT read Get_endCondition write Set_endCondition;
    property Standard: WideString read Get_Standard write Set_Standard;
    property FastenerType: WideString read Get_FastenerType write Set_FastenerType;
    property FastenerSize: WideString read Get_FastenerSize write Set_FastenerSize;
  end;

// *********************************************************************//
// DispIntf:  IWizardHoleFeatureDataDisp
// Flags:     (336) Hidden Dual OleAutomation
// GUID:      {887AB457-A739-11D3-B97F-001083029A97}
// *********************************************************************//
  IWizardHoleFeatureDataDisp = dispinterface
    ['{887AB457-A739-11D3-B97F-001083029A97}']
    function AccessSelections(const topDoc: IDispatch; const component: IDispatch): WordBool; dispid 1;
    function IAccessSelections(const topDoc: IModelDoc; const component: IComponent): WordBool; dispid 2;
    procedure ReleaseSelectionAccess; dispid 3;
    property type_: SYSINT dispid 4;
    property diameter: Double dispid 5;
    property CounterBoreDiameter: Double dispid 6;
    property CounterDrillDiameter: Double dispid 7;
    property CounterSinkDiameter: Double dispid 8;
    property MinorDiameter: Double dispid 9;
    property MajorDiameter: Double dispid 10;
    property HoleDiameter: Double dispid 11;
    property ThruHoleDiameter: Double dispid 12;
    property TapDrillDiameter: Double dispid 13;
    property ThruTapDrillDiameter: Double dispid 14;
    property NearCounterSinkDiameter: Double dispid 15;
    property MidCounterSinkDiameter: Double dispid 16;
    property FarCounterSinkDiameter: Double dispid 17;
    property ThreadDiameter: Double dispid 18;
    property depth: Double dispid 19;
    property CounterBoreDepth: Double dispid 20;
    property CounterDrillDepth: Double dispid 21;
    property HoleDepth: Double dispid 22;
    property ThruHoleDepth: Double dispid 23;
    property TapDrillDepth: Double dispid 24;
    property ThruTapDrillDepth: Double dispid 25;
    property ThreadDepth: Double dispid 26;
    property CounterDrillAngle: Double dispid 27;
    property CounterSinkAngle: Double dispid 28;
    property DrillAngle: Double dispid 29;
    property NearCounterSinkAngle: Double dispid 30;
    property MidCounterSinkAngle: Double dispid 31;
    property FarCounterSinkAngle: Double dispid 32;
    property ThreadAngle: Double dispid 33;
    property HeadClearance: Double dispid 34;
    property face: IDispatch dispid 35;
    property IFace: IFace dispid 36;
    property Vertex: IDispatch dispid 37;
    property IVertex: IVertex dispid 38;
    property endCondition: SYSINT dispid 39;
    property Standard: WideString dispid 40;
    property FastenerType: WideString dispid 41;
    property FastenerSize: WideString dispid 42;
  end;

// *********************************************************************//
// Interface: IChamferFeatureData
// Flags:     (336) Hidden Dual OleAutomation
// GUID:      {7271D7C7-ACC9-11D3-B97F-001083029A97}
// *********************************************************************//
  IChamferFeatureData = interface(IUnknown)
    ['{7271D7C7-ACC9-11D3-B97F-001083029A97}']
    function GetEdgeChamferDistance(side: SYSINT): Double; safecall;
    procedure SetEdgeChamferDistance(side: SYSINT; distance: Double); safecall;
    function GetVertexChamferDistance(side: SYSINT): Double; safecall;
    procedure SetVertexChamferDistance(side: SYSINT; distance: Double); safecall;
    function Get_type_: SYSINT; safecall;
    procedure Set_type_(chamfer_type: SYSINT); safecall;
    function Get_EdgeChamferAngle: Double; safecall;
    procedure Set_EdgeChamferAngle(angle: Double); safecall;
    property type_: SYSINT read Get_type_ write Set_type_;
    property EdgeChamferAngle: Double read Get_EdgeChamferAngle write Set_EdgeChamferAngle;
  end;

// *********************************************************************//
// DispIntf:  IChamferFeatureDataDisp
// Flags:     (336) Hidden Dual OleAutomation
// GUID:      {7271D7C7-ACC9-11D3-B97F-001083029A97}
// *********************************************************************//
  IChamferFeatureDataDisp = dispinterface
    ['{7271D7C7-ACC9-11D3-B97F-001083029A97}']
    function GetEdgeChamferDistance(side: SYSINT): Double; dispid 1;
    procedure SetEdgeChamferDistance(side: SYSINT; distance: Double); dispid 2;
    function GetVertexChamferDistance(side: SYSINT): Double; dispid 3;
    procedure SetVertexChamferDistance(side: SYSINT; distance: Double); dispid 4;
    property type_: SYSINT dispid 5;
    property EdgeChamferAngle: Double dispid 6;
  end;

// *********************************************************************//
// Interface: IDraftFeatureData
// Flags:     (336) Hidden Dual OleAutomation
// GUID:      {BC633CE1-B367-11D3-B981-001083029A97}
// *********************************************************************//
  IDraftFeatureData = interface(IUnknown)
    ['{BC633CE1-B367-11D3-B981-001083029A97}']
    function Get_type_: SYSINT; safecall;
    procedure Set_type_(type_: SYSINT); safecall;
    function Get_angle: Double; safecall;
    procedure Set_angle(angle: Double); safecall;
    function Get_ReverseDirection: WordBool; safecall;
    procedure Set_ReverseDirection(ReverseDirection: WordBool); safecall;
    property type_: SYSINT read Get_type_ write Set_type_;
    property angle: Double read Get_angle write Set_angle;
    property ReverseDirection: WordBool read Get_ReverseDirection write Set_ReverseDirection;
  end;

// *********************************************************************//
// DispIntf:  IDraftFeatureDataDisp
// Flags:     (336) Hidden Dual OleAutomation
// GUID:      {BC633CE1-B367-11D3-B981-001083029A97}
// *********************************************************************//
  IDraftFeatureDataDisp = dispinterface
    ['{BC633CE1-B367-11D3-B981-001083029A97}']
    property type_: SYSINT dispid 1;
    property angle: Double dispid 2;
    property ReverseDirection: WordBool dispid 3;
  end;

// *********************************************************************//
// Interface: ISimpleFilletFeatureData
// Flags:     (336) Hidden Dual OleAutomation
// GUID:      {CC929F0B-B404-11D3-B981-001083029A97}
// *********************************************************************//
  ISimpleFilletFeatureData = interface(IUnknown)
    ['{CC929F0B-B404-11D3-B981-001083029A97}']
    function Get_type_: SYSINT; safecall;
    function Get_DefaultRadius: Double; safecall;
    procedure Set_DefaultRadius(radius: Double); safecall;
    function Get_overFlowType: SYSINT; safecall;
    procedure Set_overFlowType(overflow_type: SYSINT); safecall;
    function Get_IsMultipleRadius: WordBool; safecall;
    procedure Set_IsMultipleRadius(IsMultipleRadius: WordBool); safecall;
    function Get_RoundCorners: WordBool; safecall;
    procedure Set_RoundCorners(RoundCorners: WordBool); safecall;
    function Get_PropagateToTangentFaces: WordBool; safecall;
    procedure Set_PropagateToTangentFaces(propTgtFaces: WordBool); safecall;
    function Get_FilletItemsCount: SYSINT; safecall;
    function GetFilletItemAtIndex(index: SYSINT): IDispatch; safecall;
    function IGetFilletItemAtIndex(index: SYSINT): IUnknown; safecall;
    function GetRadius(const pFilletItem: IDispatch): Double; safecall;
    function IGetRadius(const pFilletItem: IUnknown): Double; safecall;
    procedure SetRadius(const pFilletItem: IDispatch; radius: Double); safecall;
    procedure ISetRadius(const pFilletItem: IUnknown; radius: Double); safecall;
    function AccessSelections(const topDoc: IDispatch; const component: IDispatch): WordBool; safecall;
    function IAccessSelections(const topDoc: IModelDoc; const component: IComponent): WordBool; safecall;
    procedure ReleaseSelectionAccess; safecall;
    property type_: SYSINT read Get_type_;
    property DefaultRadius: Double read Get_DefaultRadius write Set_DefaultRadius;
    property overFlowType: SYSINT read Get_overFlowType write Set_overFlowType;
    property IsMultipleRadius: WordBool read Get_IsMultipleRadius write Set_IsMultipleRadius;
    property RoundCorners: WordBool read Get_RoundCorners write Set_RoundCorners;
    property PropagateToTangentFaces: WordBool read Get_PropagateToTangentFaces write Set_PropagateToTangentFaces;
    property FilletItemsCount: SYSINT read Get_FilletItemsCount;
  end;

// *********************************************************************//
// DispIntf:  ISimpleFilletFeatureDataDisp
// Flags:     (336) Hidden Dual OleAutomation
// GUID:      {CC929F0B-B404-11D3-B981-001083029A97}
// *********************************************************************//
  ISimpleFilletFeatureDataDisp = dispinterface
    ['{CC929F0B-B404-11D3-B981-001083029A97}']
    property type_: SYSINT readonly dispid 1;
    property DefaultRadius: Double dispid 2;
    property overFlowType: SYSINT dispid 3;
    property IsMultipleRadius: WordBool dispid 4;
    property RoundCorners: WordBool dispid 5;
    property PropagateToTangentFaces: WordBool dispid 6;
    property FilletItemsCount: SYSINT readonly dispid 7;
    function GetFilletItemAtIndex(index: SYSINT): IDispatch; dispid 8;
    function IGetFilletItemAtIndex(index: SYSINT): IUnknown; dispid 9;
    function GetRadius(const pFilletItem: IDispatch): Double; dispid 10;
    function IGetRadius(const pFilletItem: IUnknown): Double; dispid 11;
    procedure SetRadius(const pFilletItem: IDispatch; radius: Double); dispid 12;
    procedure ISetRadius(const pFilletItem: IUnknown; radius: Double); dispid 13;
    function AccessSelections(const topDoc: IDispatch; const component: IDispatch): WordBool; dispid 14;
    function IAccessSelections(const topDoc: IModelDoc; const component: IComponent): WordBool; dispid 15;
    procedure ReleaseSelectionAccess; dispid 16;
  end;

// *********************************************************************//
// Interface: IVariableFilletFeatureData
// Flags:     (336) Hidden Dual OleAutomation
// GUID:      {CC929F0D-B404-11D3-B981-001083029A97}
// *********************************************************************//
  IVariableFilletFeatureData = interface(IUnknown)
    ['{CC929F0D-B404-11D3-B981-001083029A97}']
    function Get_DefaultRadius: Double; safecall;
    procedure Set_DefaultRadius(radius: Double); safecall;
    function Get_overFlowType: SYSINT; safecall;
    procedure Set_overFlowType(overflow_type: SYSINT); safecall;
    function Get_TransitionType: SYSINT; safecall;
    procedure Set_TransitionType(transition_type: SYSINT); safecall;
    function Get_PropagateToTangentFaces: WordBool; safecall;
    procedure Set_PropagateToTangentFaces(propTgtFaces: WordBool); safecall;
    function Get_FilletEdgeCount: SYSINT; safecall;
    function GetFilletEdgeAtIndex(index: SYSINT): IDispatch; safecall;
    function IGetFilletEdgeAtIndex(index: SYSINT): IEdge; safecall;
    function GetRadius(const pFilletItem: IDispatch): Double; safecall;
    function IGetRadius(const pFilletItem: IVertex): Double; safecall;
    procedure SetRadius(const pFilletItem: IDispatch; radius: Double); safecall;
    procedure ISetRadius(const pFilletItem: IVertex; radius: Double); safecall;
    function AccessSelections(const topDoc: IDispatch; const component: IDispatch): WordBool; safecall;
    function IAccessSelections(const topDoc: IModelDoc; const component: IComponent): WordBool; safecall;
    procedure ReleaseSelectionAccess; safecall;
    property DefaultRadius: Double read Get_DefaultRadius write Set_DefaultRadius;
    property overFlowType: SYSINT read Get_overFlowType write Set_overFlowType;
    property TransitionType: SYSINT read Get_TransitionType write Set_TransitionType;
    property PropagateToTangentFaces: WordBool read Get_PropagateToTangentFaces write Set_PropagateToTangentFaces;
    property FilletEdgeCount: SYSINT read Get_FilletEdgeCount;
  end;

// *********************************************************************//
// DispIntf:  IVariableFilletFeatureDataDisp
// Flags:     (336) Hidden Dual OleAutomation
// GUID:      {CC929F0D-B404-11D3-B981-001083029A97}
// *********************************************************************//
  IVariableFilletFeatureDataDisp = dispinterface
    ['{CC929F0D-B404-11D3-B981-001083029A97}']
    property DefaultRadius: Double dispid 1;
    property overFlowType: SYSINT dispid 2;
    property TransitionType: SYSINT dispid 3;
    property PropagateToTangentFaces: WordBool dispid 4;
    property FilletEdgeCount: SYSINT readonly dispid 5;
    function GetFilletEdgeAtIndex(index: SYSINT): IDispatch; dispid 6;
    function IGetFilletEdgeAtIndex(index: SYSINT): IEdge; dispid 7;
    function GetRadius(const pFilletItem: IDispatch): Double; dispid 8;
    function IGetRadius(const pFilletItem: IVertex): Double; dispid 9;
    procedure SetRadius(const pFilletItem: IDispatch; radius: Double); dispid 10;
    procedure ISetRadius(const pFilletItem: IVertex; radius: Double); dispid 11;
    function AccessSelections(const topDoc: IDispatch; const component: IDispatch): WordBool; dispid 12;
    function IAccessSelections(const topDoc: IModelDoc; const component: IComponent): WordBool; dispid 13;
    procedure ReleaseSelectionAccess; dispid 14;
  end;

// *********************************************************************//
// Interface: IExtrudeFeatureData
// Flags:     (336) Hidden Dual OleAutomation
// GUID:      {908A7175-B72C-11D3-B981-001083029A97}
// *********************************************************************//
  IExtrudeFeatureData = interface(IUnknown)
    ['{908A7175-B72C-11D3-B981-001083029A97}']
    function GetEndCondition(forward: WordBool): SYSINT; safecall;
    procedure SetEndCondition(forward: WordBool; endCondition: SYSINT); safecall;
    function GetDepth(forward: WordBool): Double; safecall;
    procedure SetDepth(forward: WordBool; depth: Double); safecall;
    function GetWallThickness(forward: WordBool): Double; safecall;
    procedure SetWallThickness(forward: WordBool; wallThickness: Double); safecall;
    function GetDraftWhileExtruding(forward: WordBool): WordBool; safecall;
    procedure SetDraftWhileExtruding(forward: WordBool; draftWhileExtrude: WordBool); safecall;
    function GetDraftOutward(forward: WordBool): WordBool; safecall;
    procedure SetDraftOutward(forward: WordBool; draftOutward: WordBool); safecall;
    function GetDraftAngle(forward: WordBool): Double; safecall;
    procedure SetDraftAngle(forward: WordBool; draftAngle: Double); safecall;
    function AccessSelections(const topDoc: IDispatch; const component: IDispatch): WordBool; safecall;
    function IAccessSelections(const topDoc: IModelDoc; const component: IComponent): WordBool; safecall;
    procedure ReleaseSelectionAccess; safecall;
    function GetFace(forward: WordBool): IDispatch; safecall;
    procedure SetFace(forward: WordBool; const face: IDispatch); safecall;
    function IGetFace(forward: WordBool): IFace; safecall;
    procedure ISetFace(forward: WordBool; const face: IFace); safecall;
    function GetVertex(forward: WordBool): IDispatch; safecall;
    procedure SetVertex(forward: WordBool; const face: IDispatch); safecall;
    function IGetVertex(forward: WordBool): IVertex; safecall;
    procedure ISetVertex(forward: WordBool; const face: IVertex); safecall;
    function Get_ReverseDirection: WordBool; safecall;
    procedure Set_ReverseDirection(ReverseDirection: WordBool); safecall;
    function Get_bothDirections: WordBool; safecall;
    procedure Set_bothDirections(bothDirections: WordBool); safecall;
    function Get_FlipSideToCut: WordBool; safecall;
    procedure Set_FlipSideToCut(flip: WordBool); safecall;
    function IsBossFeature: WordBool; safecall;
    function IsThinFeature: WordBool; safecall;
    function IsBaseExtrude: WordBool; safecall;
    function Get_ThinWallType: SYSINT; safecall;
    procedure Set_ThinWallType(ThinWallType: SYSINT); safecall;
    function Get_capEnds: WordBool; safecall;
    procedure Set_capEnds(capEnds: WordBool); safecall;
    function Get_CapThickness: Double; safecall;
    procedure Set_CapThickness(CapThickness: Double); safecall;
    property ReverseDirection: WordBool read Get_ReverseDirection write Set_ReverseDirection;
    property bothDirections: WordBool read Get_bothDirections write Set_bothDirections;
    property FlipSideToCut: WordBool read Get_FlipSideToCut write Set_FlipSideToCut;
    property ThinWallType: SYSINT read Get_ThinWallType write Set_ThinWallType;
    property capEnds: WordBool read Get_capEnds write Set_capEnds;
    property CapThickness: Double read Get_CapThickness write Set_CapThickness;
  end;

// *********************************************************************//
// DispIntf:  IExtrudeFeatureDataDisp
// Flags:     (336) Hidden Dual OleAutomation
// GUID:      {908A7175-B72C-11D3-B981-001083029A97}
// *********************************************************************//
  IExtrudeFeatureDataDisp = dispinterface
    ['{908A7175-B72C-11D3-B981-001083029A97}']
    function GetEndCondition(forward: WordBool): SYSINT; dispid 1;
    procedure SetEndCondition(forward: WordBool; endCondition: SYSINT); dispid 2;
    function GetDepth(forward: WordBool): Double; dispid 3;
    procedure SetDepth(forward: WordBool; depth: Double); dispid 4;
    function GetWallThickness(forward: WordBool): Double; dispid 5;
    procedure SetWallThickness(forward: WordBool; wallThickness: Double); dispid 6;
    function GetDraftWhileExtruding(forward: WordBool): WordBool; dispid 7;
    procedure SetDraftWhileExtruding(forward: WordBool; draftWhileExtrude: WordBool); dispid 8;
    function GetDraftOutward(forward: WordBool): WordBool; dispid 9;
    procedure SetDraftOutward(forward: WordBool; draftOutward: WordBool); dispid 10;
    function GetDraftAngle(forward: WordBool): Double; dispid 11;
    procedure SetDraftAngle(forward: WordBool; draftAngle: Double); dispid 12;
    function AccessSelections(const topDoc: IDispatch; const component: IDispatch): WordBool; dispid 13;
    function IAccessSelections(const topDoc: IModelDoc; const component: IComponent): WordBool; dispid 14;
    procedure ReleaseSelectionAccess; dispid 15;
    function GetFace(forward: WordBool): IDispatch; dispid 16;
    procedure SetFace(forward: WordBool; const face: IDispatch); dispid 17;
    function IGetFace(forward: WordBool): IFace; dispid 18;
    procedure ISetFace(forward: WordBool; const face: IFace); dispid 19;
    function GetVertex(forward: WordBool): IDispatch; dispid 20;
    procedure SetVertex(forward: WordBool; const face: IDispatch); dispid 21;
    function IGetVertex(forward: WordBool): IVertex; dispid 22;
    procedure ISetVertex(forward: WordBool; const face: IVertex); dispid 23;
    property ReverseDirection: WordBool dispid 24;
    property bothDirections: WordBool dispid 25;
    property FlipSideToCut: WordBool dispid 26;
    function IsBossFeature: WordBool; dispid 27;
    function IsThinFeature: WordBool; dispid 28;
    function IsBaseExtrude: WordBool; dispid 29;
    property ThinWallType: SYSINT dispid 30;
    property capEnds: WordBool dispid 31;
    property CapThickness: Double dispid 32;
  end;

// *********************************************************************//
// Interface: IRevolveFeatureData
// Flags:     (336) Hidden Dual OleAutomation
// GUID:      {B7FFF613-B735-11D3-B981-001083029A97}
// *********************************************************************//
  IRevolveFeatureData = interface(IUnknown)
    ['{B7FFF613-B735-11D3-B981-001083029A97}']
    function GetRevolutionAngle(forward: WordBool): Double; safecall;
    procedure SetRevolutionAngle(forward: WordBool; angle: Double); safecall;
    function GetWallThickness(forward: WordBool): Double; safecall;
    procedure SetWallThickness(forward: WordBool; wallThickness: Double); safecall;
    function Get_type_: SYSINT; safecall;
    procedure Set_type_(revolveCut_type: SYSINT); safecall;
    function Get_ReverseDirection: WordBool; safecall;
    procedure Set_ReverseDirection(ReverseDirection: WordBool); safecall;
    function IsBossFeature: WordBool; safecall;
    function IsThinFeature: WordBool; safecall;
    property type_: SYSINT read Get_type_ write Set_type_;
    property ReverseDirection: WordBool read Get_ReverseDirection write Set_ReverseDirection;
  end;

// *********************************************************************//
// DispIntf:  IRevolveFeatureDataDisp
// Flags:     (336) Hidden Dual OleAutomation
// GUID:      {B7FFF613-B735-11D3-B981-001083029A97}
// *********************************************************************//
  IRevolveFeatureDataDisp = dispinterface
    ['{B7FFF613-B735-11D3-B981-001083029A97}']
    function GetRevolutionAngle(forward: WordBool): Double; dispid 1;
    procedure SetRevolutionAngle(forward: WordBool; angle: Double); dispid 2;
    function GetWallThickness(forward: WordBool): Double; dispid 3;
    procedure SetWallThickness(forward: WordBool; wallThickness: Double); dispid 4;
    property type_: SYSINT dispid 5;
    property ReverseDirection: WordBool dispid 6;
    function IsBossFeature: WordBool; dispid 7;
    function IsThinFeature: WordBool; dispid 8;
  end;

// *********************************************************************//
// Interface: IMirrorPatternFeatureData
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {414F4F1E-30EC-11D4-AEEB-00C04F683CBA}
// *********************************************************************//
  IMirrorPatternFeatureData = interface(IDispatch)
    ['{414F4F1E-30EC-11D4-AEEB-00C04F683CBA}']
    function AccessSelections(const topDoc: IDispatch; const component: IDispatch): WordBool; safecall;
    function IAccessSelections(const topDoc: IModelDoc; const component: IComponent): WordBool; safecall;
    procedure ReleaseSelectionAccess; safecall;
    function Get_Plane: IDispatch; safecall;
    procedure Set_Plane(const refPlane: IDispatch); safecall;
    function GetMirrorPlaneType: Integer; safecall;
    function Get_PatternFeatureArray: OleVariant; safecall;
    procedure Set_PatternFeatureArray(ArrayOut: OleVariant); safecall;
    function GetPatternFeatureCount: Integer; safecall;
    function IGetPatternFeatureArray: IDispatch; safecall;
    procedure ISetPatternFeatureArray(featCount: Integer; var ArrayDataIn: IDispatch); safecall;
    function Get_GeometryPattern: WordBool; safecall;
    procedure Set_GeometryPattern(geometry: WordBool); safecall;
    function IAccessSelections2(const topDoc: IModelDoc2; const component: IComponent2): WordBool; safecall;
    function Get_MirrorFaceArray: OleVariant; safecall;
    procedure Set_MirrorFaceArray(ArrayOut: OleVariant); safecall;
    function GetMirrorFaceCount: Integer; safecall;
    function IGetMirrorFaceArray: IDispatch; safecall;
    procedure ISetMirrorFaceArray(faceCount: Integer; var ArrayDataIn: IDispatch); safecall;
    property Plane: IDispatch read Get_Plane write Set_Plane;
    property PatternFeatureArray: OleVariant read Get_PatternFeatureArray write Set_PatternFeatureArray;
    property GeometryPattern: WordBool read Get_GeometryPattern write Set_GeometryPattern;
    property MirrorFaceArray: OleVariant read Get_MirrorFaceArray write Set_MirrorFaceArray;
  end;

// *********************************************************************//
// DispIntf:  IMirrorPatternFeatureDataDisp
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {414F4F1E-30EC-11D4-AEEB-00C04F683CBA}
// *********************************************************************//
  IMirrorPatternFeatureDataDisp = dispinterface
    ['{414F4F1E-30EC-11D4-AEEB-00C04F683CBA}']
    function AccessSelections(const topDoc: IDispatch; const component: IDispatch): WordBool; dispid 1;
    function IAccessSelections(const topDoc: IModelDoc; const component: IComponent): WordBool; dispid 2;
    procedure ReleaseSelectionAccess; dispid 3;
    property Plane: IDispatch dispid 4;
    function GetMirrorPlaneType: Integer; dispid 5;
    property PatternFeatureArray: OleVariant dispid 6;
    function GetPatternFeatureCount: Integer; dispid 7;
    function IGetPatternFeatureArray: IDispatch; dispid 8;
    procedure ISetPatternFeatureArray(featCount: Integer; var ArrayDataIn: IDispatch); dispid 9;
    property GeometryPattern: WordBool dispid 10;
    function IAccessSelections2(const topDoc: IModelDoc2; const component: IComponent2): WordBool; dispid 11;
    property MirrorFaceArray: OleVariant dispid 12;
    function GetMirrorFaceCount: Integer; dispid 13;
    function IGetMirrorFaceArray: IDispatch; dispid 14;
    procedure ISetMirrorFaceArray(faceCount: Integer; var ArrayDataIn: IDispatch); dispid 15;
  end;

// *********************************************************************//
// Interface: ICircularPatternFeatureData
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {DBBF39DE-7AB5-11D4-AEB6-00C04FA0AC51}
// *********************************************************************//
  ICircularPatternFeatureData = interface(IDispatch)
    ['{DBBF39DE-7AB5-11D4-AEB6-00C04FA0AC51}']
    function AccessSelections(const topDoc: IDispatch; const component: IDispatch): WordBool; safecall;
    function IAccessSelections(const topDoc: IModelDoc; const component: IComponent): WordBool; safecall;
    procedure ReleaseSelectionAccess; safecall;
    function Get_axis: IDispatch; safecall;
    procedure Set_axis(const refAxis: IDispatch); safecall;
    function GetAxisType: Integer; safecall;
    function Get_ReverseDirection: WordBool; safecall;
    procedure Set_ReverseDirection(ReverseDirection: WordBool); safecall;
    function Get_spacing: Double; safecall;
    procedure Set_spacing(distance: Double); safecall;
    function Get_TotalInstances: Integer; safecall;
    procedure Set_TotalInstances(count: Integer); safecall;
    function Get_EqualSpacing: WordBool; safecall;
    procedure Set_EqualSpacing(EqualSpacing: WordBool); safecall;
    function Get_VarySketch: WordBool; safecall;
    procedure Set_VarySketch(VarySketch: WordBool); safecall;
    function Get_GeometryPattern: WordBool; safecall;
    procedure Set_GeometryPattern(geometry: WordBool); safecall;
    function Get_PatternFeatureArray: OleVariant; safecall;
    procedure Set_PatternFeatureArray(ArrayOut: OleVariant); safecall;
    function GetPatternFeatureCount: Integer; safecall;
    function IGetPatternFeatureArray: IDispatch; safecall;
    procedure ISetPatternFeatureArray(featCount: Integer; var ArrayDataIn: IDispatch); safecall;
    function Get_SkippedItemArray: OleVariant; safecall;
    procedure Set_SkippedItemArray(ArrayOut: OleVariant); safecall;
    function GetSkippedItemCount: Integer; safecall;
    function IGetSkippedItemArray: Integer; safecall;
    procedure ISetSkippedItemArray(featCount: Integer; var ArrayDataIn: Integer); safecall;
    function IAccessSelections2(const topDoc: IModelDoc2; const component: IComponent2): WordBool; safecall;
    function Get_PatternFaceArray: OleVariant; safecall;
    procedure Set_PatternFaceArray(ArrayOut: OleVariant); safecall;
    function GetPatternFaceCount: Integer; safecall;
    function IGetPatternFaceArray: IDispatch; safecall;
    procedure ISetPatternFaceArray(faceCount: Integer; var ArrayDataIn: IDispatch); safecall;
    function Get_PatternBodyArray: OleVariant; safecall;
    procedure Set_PatternBodyArray(ArrayOut: OleVariant); safecall;
    function GetPatternBodyCount: Integer; safecall;
    function IGetPatternBodyArray: IBody2; safecall;
    procedure ISetPatternBodyArray(bodyCount: Integer; var ArrayDataIn: IBody2); safecall;
    property axis: IDispatch read Get_axis write Set_axis;
    property ReverseDirection: WordBool read Get_ReverseDirection write Set_ReverseDirection;
    property spacing: Double read Get_spacing write Set_spacing;
    property TotalInstances: Integer read Get_TotalInstances write Set_TotalInstances;
    property EqualSpacing: WordBool read Get_EqualSpacing write Set_EqualSpacing;
    property VarySketch: WordBool read Get_VarySketch write Set_VarySketch;
    property GeometryPattern: WordBool read Get_GeometryPattern write Set_GeometryPattern;
    property PatternFeatureArray: OleVariant read Get_PatternFeatureArray write Set_PatternFeatureArray;
    property SkippedItemArray: OleVariant read Get_SkippedItemArray write Set_SkippedItemArray;
    property PatternFaceArray: OleVariant read Get_PatternFaceArray write Set_PatternFaceArray;
    property PatternBodyArray: OleVariant read Get_PatternBodyArray write Set_PatternBodyArray;
  end;

// *********************************************************************//
// DispIntf:  ICircularPatternFeatureDataDisp
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {DBBF39DE-7AB5-11D4-AEB6-00C04FA0AC51}
// *********************************************************************//
  ICircularPatternFeatureDataDisp = dispinterface
    ['{DBBF39DE-7AB5-11D4-AEB6-00C04FA0AC51}']
    function AccessSelections(const topDoc: IDispatch; const component: IDispatch): WordBool; dispid 1;
    function IAccessSelections(const topDoc: IModelDoc; const component: IComponent): WordBool; dispid 2;
    procedure ReleaseSelectionAccess; dispid 3;
    property axis: IDispatch dispid 4;
    function GetAxisType: Integer; dispid 5;
    property ReverseDirection: WordBool dispid 6;
    property spacing: Double dispid 7;
    property TotalInstances: Integer dispid 8;
    property EqualSpacing: WordBool dispid 9;
    property VarySketch: WordBool dispid 10;
    property GeometryPattern: WordBool dispid 11;
    property PatternFeatureArray: OleVariant dispid 12;
    function GetPatternFeatureCount: Integer; dispid 13;
    function IGetPatternFeatureArray: IDispatch; dispid 14;
    procedure ISetPatternFeatureArray(featCount: Integer; var ArrayDataIn: IDispatch); dispid 15;
    property SkippedItemArray: OleVariant dispid 16;
    function GetSkippedItemCount: Integer; dispid 17;
    function IGetSkippedItemArray: Integer; dispid 18;
    procedure ISetSkippedItemArray(featCount: Integer; var ArrayDataIn: Integer); dispid 19;
    function IAccessSelections2(const topDoc: IModelDoc2; const component: IComponent2): WordBool; dispid 20;
    property PatternFaceArray: OleVariant dispid 21;
    function GetPatternFaceCount: Integer; dispid 22;
    function IGetPatternFaceArray: IDispatch; dispid 23;
    procedure ISetPatternFaceArray(faceCount: Integer; var ArrayDataIn: IDispatch); dispid 24;
    property PatternBodyArray: OleVariant dispid 25;
    function GetPatternBodyCount: Integer; dispid 26;
    function IGetPatternBodyArray: IBody2; dispid 27;
    procedure ISetPatternBodyArray(bodyCount: Integer; var ArrayDataIn: IBody2); dispid 28;
  end;

// *********************************************************************//
// Interface: ILinearPatternFeatureData
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {F86D1E94-7DE8-11D4-AEB7-00C04FA0AC51}
// *********************************************************************//
  ILinearPatternFeatureData = interface(IDispatch)
    ['{F86D1E94-7DE8-11D4-AEB7-00C04FA0AC51}']
    function AccessSelections(const topDoc: IDispatch; const component: IDispatch): WordBool; safecall;
    function IAccessSelections(const topDoc: IModelDoc; const component: IComponent): WordBool; safecall;
    procedure ReleaseSelectionAccess; safecall;
    function Get_D1Axis: IDispatch; safecall;
    procedure Set_D1Axis(const refAxis: IDispatch); safecall;
    function Get_D2Axis: IDispatch; safecall;
    procedure Set_D2Axis(const refAxis: IDispatch); safecall;
    function GetD1AxisType: Integer; safecall;
    function GetD2AxisType: Integer; safecall;
    function Get_D1ReverseDirection: WordBool; safecall;
    procedure Set_D1ReverseDirection(ReverseDirection: WordBool); safecall;
    function Get_D2ReverseDirection: WordBool; safecall;
    procedure Set_D2ReverseDirection(ReverseDirection: WordBool); safecall;
    function Get_D1Spacing: Double; safecall;
    procedure Set_D1Spacing(distance: Double); safecall;
    function Get_D2Spacing: Double; safecall;
    procedure Set_D2Spacing(distance: Double); safecall;
    function Get_D1TotalInstances: Integer; safecall;
    procedure Set_D1TotalInstances(count: Integer); safecall;
    function Get_D2TotalInstances: Integer; safecall;
    procedure Set_D2TotalInstances(count: Integer); safecall;
    function Get_VarySketch: WordBool; safecall;
    procedure Set_VarySketch(VarySketch: WordBool); safecall;
    function Get_GeometryPattern: WordBool; safecall;
    procedure Set_GeometryPattern(geometry: WordBool); safecall;
    function Get_PatternFeatureArray: OleVariant; safecall;
    procedure Set_PatternFeatureArray(ArrayOut: OleVariant); safecall;
    function GetPatternFeatureCount: Integer; safecall;
    function IGetPatternFeatureArray: IDispatch; safecall;
    procedure ISetPatternFeatureArray(featCount: Integer; var ArrayDataIn: IDispatch); safecall;
    function Get_SkippedItemArray: OleVariant; safecall;
    procedure Set_SkippedItemArray(ArrayOut: OleVariant); safecall;
    function GetSkippedItemCount: Integer; safecall;
    function IGetSkippedItemArray: Integer; safecall;
    procedure ISetSkippedItemArray(featCount: Integer; var ArrayDataIn: Integer); safecall;
    function IAccessSelections2(const topDoc: IModelDoc2; const component: IComponent2): WordBool; safecall;
    function Get_PatternFaceArray: OleVariant; safecall;
    procedure Set_PatternFaceArray(ArrayOut: OleVariant); safecall;
    function GetPatternFaceCount: Integer; safecall;
    function IGetPatternFaceArray: IDispatch; safecall;
    procedure ISetPatternFaceArray(faceCount: Integer; var ArrayDataIn: IDispatch); safecall;
    function Get_D2PatternSeedOnly: WordBool; safecall;
    procedure Set_D2PatternSeedOnly(seedOnly: WordBool); safecall;
    function IsDirection2Specified: WordBool; safecall;
    function Get_PatternBodyArray: OleVariant; safecall;
    procedure Set_PatternBodyArray(ArrayOut: OleVariant); safecall;
    function GetPatternBodyCount: Integer; safecall;
    function IGetPatternBodyArray: IBody2; safecall;
    procedure ISetPatternBodyArray(bodyCount: Integer; var ArrayDataIn: IBody2); safecall;
    property D1Axis: IDispatch read Get_D1Axis write Set_D1Axis;
    property D2Axis: IDispatch read Get_D2Axis write Set_D2Axis;
    property D1ReverseDirection: WordBool read Get_D1ReverseDirection write Set_D1ReverseDirection;
    property D2ReverseDirection: WordBool read Get_D2ReverseDirection write Set_D2ReverseDirection;
    property D1Spacing: Double read Get_D1Spacing write Set_D1Spacing;
    property D2Spacing: Double read Get_D2Spacing write Set_D2Spacing;
    property D1TotalInstances: Integer read Get_D1TotalInstances write Set_D1TotalInstances;
    property D2TotalInstances: Integer read Get_D2TotalInstances write Set_D2TotalInstances;
    property VarySketch: WordBool read Get_VarySketch write Set_VarySketch;
    property GeometryPattern: WordBool read Get_GeometryPattern write Set_GeometryPattern;
    property PatternFeatureArray: OleVariant read Get_PatternFeatureArray write Set_PatternFeatureArray;
    property SkippedItemArray: OleVariant read Get_SkippedItemArray write Set_SkippedItemArray;
    property PatternFaceArray: OleVariant read Get_PatternFaceArray write Set_PatternFaceArray;
    property D2PatternSeedOnly: WordBool read Get_D2PatternSeedOnly write Set_D2PatternSeedOnly;
    property PatternBodyArray: OleVariant read Get_PatternBodyArray write Set_PatternBodyArray;
  end;

// *********************************************************************//
// DispIntf:  ILinearPatternFeatureDataDisp
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {F86D1E94-7DE8-11D4-AEB7-00C04FA0AC51}
// *********************************************************************//
  ILinearPatternFeatureDataDisp = dispinterface
    ['{F86D1E94-7DE8-11D4-AEB7-00C04FA0AC51}']
    function AccessSelections(const topDoc: IDispatch; const component: IDispatch): WordBool; dispid 1;
    function IAccessSelections(const topDoc: IModelDoc; const component: IComponent): WordBool; dispid 2;
    procedure ReleaseSelectionAccess; dispid 3;
    property D1Axis: IDispatch dispid 4;
    property D2Axis: IDispatch dispid 5;
    function GetD1AxisType: Integer; dispid 6;
    function GetD2AxisType: Integer; dispid 7;
    property D1ReverseDirection: WordBool dispid 8;
    property D2ReverseDirection: WordBool dispid 9;
    property D1Spacing: Double dispid 10;
    property D2Spacing: Double dispid 11;
    property D1TotalInstances: Integer dispid 12;
    property D2TotalInstances: Integer dispid 13;
    property VarySketch: WordBool dispid 14;
    property GeometryPattern: WordBool dispid 15;
    property PatternFeatureArray: OleVariant dispid 16;
    function GetPatternFeatureCount: Integer; dispid 17;
    function IGetPatternFeatureArray: IDispatch; dispid 18;
    procedure ISetPatternFeatureArray(featCount: Integer; var ArrayDataIn: IDispatch); dispid 19;
    property SkippedItemArray: OleVariant dispid 20;
    function GetSkippedItemCount: Integer; dispid 21;
    function IGetSkippedItemArray: Integer; dispid 22;
    procedure ISetSkippedItemArray(featCount: Integer; var ArrayDataIn: Integer); dispid 23;
    function IAccessSelections2(const topDoc: IModelDoc2; const component: IComponent2): WordBool; dispid 24;
    property PatternFaceArray: OleVariant dispid 25;
    function GetPatternFaceCount: Integer; dispid 26;
    function IGetPatternFaceArray: IDispatch; dispid 27;
    procedure ISetPatternFaceArray(faceCount: Integer; var ArrayDataIn: IDispatch); dispid 28;
    property D2PatternSeedOnly: WordBool dispid 29;
    function IsDirection2Specified: WordBool; dispid 30;
    property PatternBodyArray: OleVariant dispid 31;
    function GetPatternBodyCount: Integer; dispid 32;
    function IGetPatternBodyArray: IBody2; dispid 33;
    procedure ISetPatternBodyArray(bodyCount: Integer; var ArrayDataIn: IBody2); dispid 34;
  end;

// *********************************************************************//
// Interface: ITablePatternFeatureData
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {E5D1AF7C-7F5D-11D4-AEB7-00C04FA0AC51}
// *********************************************************************//
  ITablePatternFeatureData = interface(IDispatch)
    ['{E5D1AF7C-7F5D-11D4-AEB7-00C04FA0AC51}']
    function AccessSelections(const topDoc: IDispatch; const component: IDispatch): WordBool; safecall;
    function IAccessSelections(const topDoc: IModelDoc; const component: IComponent): WordBool; safecall;
    procedure ReleaseSelectionAccess; safecall;
    function Get_CoordinateSystem: IDispatch; safecall;
    procedure Set_CoordinateSystem(const refCoord: IDispatch); safecall;
    function Get_ReferencePoint: IDispatch; safecall;
    procedure Set_ReferencePoint(const refPoint: IDispatch); safecall;
    function GetReferencePointType: Integer; safecall;
    function Get_useCentroid: WordBool; safecall;
    procedure Set_useCentroid(useCentroid: WordBool); safecall;
    function SavePointsToFile(const fileName: WideString): WordBool; safecall;
    function LoadPointsFromFile(const fileName: WideString): WordBool; safecall;
    function GetBasePoint: OleVariant; safecall;
    function IGetBasePoint: Double; safecall;
    function Get_GeometryPattern: WordBool; safecall;
    procedure Set_GeometryPattern(geometry: WordBool); safecall;
    function Get_PatternFeatureArray: OleVariant; safecall;
    procedure Set_PatternFeatureArray(ArrayOut: OleVariant); safecall;
    function GetPatternFeatureCount: Integer; safecall;
    function IGetPatternFeatureArray: IDispatch; safecall;
    procedure ISetPatternFeatureArray(featCount: Integer; var ArrayDataIn: IDispatch); safecall;
    function Get_pointArray: OleVariant; safecall;
    procedure Set_pointArray(ArrayOut: OleVariant); safecall;
    function GetPointCount: Integer; safecall;
    function IGetPointArray: Double; safecall;
    procedure ISetPointArray(featCount: Integer; var ArrayDataIn: Double); safecall;
    function IAccessSelections2(const topDoc: IModelDoc2; const component: IComponent2): WordBool; safecall;
    function Get_PatternFaceArray: OleVariant; safecall;
    procedure Set_PatternFaceArray(ArrayOut: OleVariant); safecall;
    function GetPatternFaceCount: Integer; safecall;
    function IGetPatternFaceArray: IDispatch; safecall;
    procedure ISetPatternFaceArray(faceCount: Integer; var ArrayDataIn: IDispatch); safecall;
    function Get_PatternBodyArray: OleVariant; safecall;
    procedure Set_PatternBodyArray(ArrayOut: OleVariant); safecall;
    function GetPatternBodyCount: Integer; safecall;
    function IGetPatternBodyArray: IBody2; safecall;
    procedure ISetPatternBodyArray(bodyCount: Integer; var ArrayDataIn: IBody2); safecall;
    property CoordinateSystem: IDispatch read Get_CoordinateSystem write Set_CoordinateSystem;
    property ReferencePoint: IDispatch read Get_ReferencePoint write Set_ReferencePoint;
    property useCentroid: WordBool read Get_useCentroid write Set_useCentroid;
    property GeometryPattern: WordBool read Get_GeometryPattern write Set_GeometryPattern;
    property PatternFeatureArray: OleVariant read Get_PatternFeatureArray write Set_PatternFeatureArray;
    property pointArray: OleVariant read Get_pointArray write Set_pointArray;
    property PatternFaceArray: OleVariant read Get_PatternFaceArray write Set_PatternFaceArray;
    property PatternBodyArray: OleVariant read Get_PatternBodyArray write Set_PatternBodyArray;
  end;

// *********************************************************************//
// DispIntf:  ITablePatternFeatureDataDisp
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {E5D1AF7C-7F5D-11D4-AEB7-00C04FA0AC51}
// *********************************************************************//
  ITablePatternFeatureDataDisp = dispinterface
    ['{E5D1AF7C-7F5D-11D4-AEB7-00C04FA0AC51}']
    function AccessSelections(const topDoc: IDispatch; const component: IDispatch): WordBool; dispid 1;
    function IAccessSelections(const topDoc: IModelDoc; const component: IComponent): WordBool; dispid 2;
    procedure ReleaseSelectionAccess; dispid 3;
    property CoordinateSystem: IDispatch dispid 4;
    property ReferencePoint: IDispatch dispid 5;
    function GetReferencePointType: Integer; dispid 6;
    property useCentroid: WordBool dispid 7;
    function SavePointsToFile(const fileName: WideString): WordBool; dispid 8;
    function LoadPointsFromFile(const fileName: WideString): WordBool; dispid 9;
    function GetBasePoint: OleVariant; dispid 10;
    function IGetBasePoint: Double; dispid 11;
    property GeometryPattern: WordBool dispid 12;
    property PatternFeatureArray: OleVariant dispid 13;
    function GetPatternFeatureCount: Integer; dispid 14;
    function IGetPatternFeatureArray: IDispatch; dispid 15;
    procedure ISetPatternFeatureArray(featCount: Integer; var ArrayDataIn: IDispatch); dispid 16;
    property pointArray: OleVariant dispid 17;
    function GetPointCount: Integer; dispid 18;
    function IGetPointArray: Double; dispid 19;
    procedure ISetPointArray(featCount: Integer; var ArrayDataIn: Double); dispid 20;
    function IAccessSelections2(const topDoc: IModelDoc2; const component: IComponent2): WordBool; dispid 21;
    property PatternFaceArray: OleVariant dispid 22;
    function GetPatternFaceCount: Integer; dispid 23;
    function IGetPatternFaceArray: IDispatch; dispid 24;
    procedure ISetPatternFaceArray(faceCount: Integer; var ArrayDataIn: IDispatch); dispid 25;
    property PatternBodyArray: OleVariant dispid 26;
    function GetPatternBodyCount: Integer; dispid 27;
    function IGetPatternBodyArray: IBody2; dispid 28;
    procedure ISetPatternBodyArray(bodyCount: Integer; var ArrayDataIn: IBody2); dispid 29;
  end;

// *********************************************************************//
// Interface: ISketchPatternFeatureData
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {AE998464-8050-11D4-AEB7-00C04FA0AC51}
// *********************************************************************//
  ISketchPatternFeatureData = interface(IDispatch)
    ['{AE998464-8050-11D4-AEB7-00C04FA0AC51}']
    function AccessSelections(const topDoc: IDispatch; const component: IDispatch): WordBool; safecall;
    function IAccessSelections(const topDoc: IModelDoc; const component: IComponent): WordBool; safecall;
    procedure ReleaseSelectionAccess; safecall;
    function Get_sketch: IDispatch; safecall;
    procedure Set_sketch(const sketch: IDispatch); safecall;
    function Get_ReferencePoint: IDispatch; safecall;
    procedure Set_ReferencePoint(const refPoint: IDispatch); safecall;
    function GetReferencePointType: Integer; safecall;
    function Get_useCentroid: WordBool; safecall;
    procedure Set_useCentroid(useCentroid: WordBool); safecall;
    function GetBasePoint: OleVariant; safecall;
    function IGetBasePoint: Double; safecall;
    function Get_GeometryPattern: WordBool; safecall;
    procedure Set_GeometryPattern(geometry: WordBool); safecall;
    function Get_PatternFeatureArray: OleVariant; safecall;
    procedure Set_PatternFeatureArray(ArrayOut: OleVariant); safecall;
    function GetPatternFeatureCount: Integer; safecall;
    function IGetPatternFeatureArray: IDispatch; safecall;
    procedure ISetPatternFeatureArray(featCount: Integer; var ArrayDataIn: IDispatch); safecall;
    function IAccessSelections2(const topDoc: IModelDoc2; const component: IComponent2): WordBool; safecall;
    function Get_PatternFaceArray: OleVariant; safecall;
    procedure Set_PatternFaceArray(ArrayOut: OleVariant); safecall;
    function GetPatternFaceCount: Integer; safecall;
    function IGetPatternFaceArray: IDispatch; safecall;
    procedure ISetPatternFaceArray(faceCount: Integer; var ArrayDataIn: IDispatch); safecall;
    function Get_PatternBodyArray: OleVariant; safecall;
    procedure Set_PatternBodyArray(ArrayOut: OleVariant); safecall;
    function GetPatternBodyCount: Integer; safecall;
    function IGetPatternBodyArray: IBody2; safecall;
    procedure ISetPatternBodyArray(bodyCount: Integer; var ArrayDataIn: IBody2); safecall;
    property sketch: IDispatch read Get_sketch write Set_sketch;
    property ReferencePoint: IDispatch read Get_ReferencePoint write Set_ReferencePoint;
    property useCentroid: WordBool read Get_useCentroid write Set_useCentroid;
    property GeometryPattern: WordBool read Get_GeometryPattern write Set_GeometryPattern;
    property PatternFeatureArray: OleVariant read Get_PatternFeatureArray write Set_PatternFeatureArray;
    property PatternFaceArray: OleVariant read Get_PatternFaceArray write Set_PatternFaceArray;
    property PatternBodyArray: OleVariant read Get_PatternBodyArray write Set_PatternBodyArray;
  end;

// *********************************************************************//
// DispIntf:  ISketchPatternFeatureDataDisp
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {AE998464-8050-11D4-AEB7-00C04FA0AC51}
// *********************************************************************//
  ISketchPatternFeatureDataDisp = dispinterface
    ['{AE998464-8050-11D4-AEB7-00C04FA0AC51}']
    function AccessSelections(const topDoc: IDispatch; const component: IDispatch): WordBool; dispid 1;
    function IAccessSelections(const topDoc: IModelDoc; const component: IComponent): WordBool; dispid 2;
    procedure ReleaseSelectionAccess; dispid 3;
    property sketch: IDispatch dispid 4;
    property ReferencePoint: IDispatch dispid 5;
    function GetReferencePointType: Integer; dispid 6;
    property useCentroid: WordBool dispid 7;
    function GetBasePoint: OleVariant; dispid 8;
    function IGetBasePoint: Double; dispid 9;
    property GeometryPattern: WordBool dispid 10;
    property PatternFeatureArray: OleVariant dispid 11;
    function GetPatternFeatureCount: Integer; dispid 12;
    function IGetPatternFeatureArray: IDispatch; dispid 13;
    procedure ISetPatternFeatureArray(featCount: Integer; var ArrayDataIn: IDispatch); dispid 14;
    function IAccessSelections2(const topDoc: IModelDoc2; const component: IComponent2): WordBool; dispid 15;
    property PatternFaceArray: OleVariant dispid 16;
    function GetPatternFaceCount: Integer; dispid 17;
    function IGetPatternFaceArray: IDispatch; dispid 18;
    procedure ISetPatternFaceArray(faceCount: Integer; var ArrayDataIn: IDispatch); dispid 19;
    property PatternBodyArray: OleVariant dispid 20;
    function GetPatternBodyCount: Integer; dispid 21;
    function IGetPatternBodyArray: IBody2; dispid 22;
    procedure ISetPatternBodyArray(bodyCount: Integer; var ArrayDataIn: IBody2); dispid 23;
  end;

// *********************************************************************//
// Interface: IMirrorSolidFeatureData
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {E9172718-836B-11D4-AEB7-00C04FA0AC51}
// *********************************************************************//
  IMirrorSolidFeatureData = interface(IDispatch)
    ['{E9172718-836B-11D4-AEB7-00C04FA0AC51}']
    function AccessSelections(const topDoc: IDispatch; const component: IDispatch): WordBool; safecall;
    function IAccessSelections(const topDoc: IModelDoc; const component: IComponent): WordBool; safecall;
    procedure ReleaseSelectionAccess; safecall;
    function Get_face: IDispatch; safecall;
    procedure Set_face(const refFace: IDispatch); safecall;
    function IAccessSelections2(const topDoc: IModelDoc2; const component: IComponent2): WordBool; safecall;
    function Get_PatternBodyArray: OleVariant; safecall;
    procedure Set_PatternBodyArray(ArrayOut: OleVariant); safecall;
    function GetPatternBodyCount: Integer; safecall;
    function IGetPatternBodyArray: IBody2; safecall;
    procedure ISetPatternBodyArray(bodyCount: Integer; var ArrayDataIn: IBody2); safecall;
    function Get_merge: WordBool; safecall;
    procedure Set_merge(bMerge: WordBool); safecall;
    function Get_KnitSurface: WordBool; safecall;
    procedure Set_KnitSurface(bKnit: WordBool); safecall;
    property face: IDispatch read Get_face write Set_face;
    property PatternBodyArray: OleVariant read Get_PatternBodyArray write Set_PatternBodyArray;
    property merge: WordBool read Get_merge write Set_merge;
    property KnitSurface: WordBool read Get_KnitSurface write Set_KnitSurface;
  end;

// *********************************************************************//
// DispIntf:  IMirrorSolidFeatureDataDisp
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {E9172718-836B-11D4-AEB7-00C04FA0AC51}
// *********************************************************************//
  IMirrorSolidFeatureDataDisp = dispinterface
    ['{E9172718-836B-11D4-AEB7-00C04FA0AC51}']
    function AccessSelections(const topDoc: IDispatch; const component: IDispatch): WordBool; dispid 1;
    function IAccessSelections(const topDoc: IModelDoc; const component: IComponent): WordBool; dispid 2;
    procedure ReleaseSelectionAccess; dispid 3;
    property face: IDispatch dispid 4;
    function IAccessSelections2(const topDoc: IModelDoc2; const component: IComponent2): WordBool; dispid 5;
    property PatternBodyArray: OleVariant dispid 6;
    function GetPatternBodyCount: Integer; dispid 7;
    function IGetPatternBodyArray: IBody2; dispid 8;
    procedure ISetPatternBodyArray(bodyCount: Integer; var ArrayDataIn: IBody2); dispid 9;
    property merge: WordBool dispid 10;
    property KnitSurface: WordBool dispid 11;
  end;

// *********************************************************************//
// Interface: ISheetMetalFeatureData
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {2F6C1E88-F2D6-11D4-AED5-00C04FA0AC51}
// *********************************************************************//
  ISheetMetalFeatureData = interface(IDispatch)
    ['{2F6C1E88-F2D6-11D4-AED5-00C04FA0AC51}']
    function AccessSelections(const topDoc: IDispatch; const component: IDispatch): WordBool; safecall;
    function IAccessSelections(const topDoc: IModelDoc; const component: IComponent): WordBool; safecall;
    procedure ReleaseSelectionAccess; safecall;
    function Get_BendRadius: Double; safecall;
    procedure Set_BendRadius(radius: Double); safecall;
    function Get_thickness: Double; safecall;
    procedure Set_thickness(thickness: Double); safecall;
    function Get_FixedReference: IDispatch; safecall;
    procedure Set_FixedReference(const FixedReference: IDispatch); safecall;
    function Get_BendAllowanceType: Integer; safecall;
    procedure Set_BendAllowanceType(BendAllowanceType: Integer); safecall;
    function Get_BendTableFile: WideString; safecall;
    procedure Set_BendTableFile(const BendTableFile: WideString); safecall;
    function Get_KFactor: Double; safecall;
    procedure Set_KFactor(KFactor: Double); safecall;
    function Get_BendAllowance: Double; safecall;
    procedure Set_BendAllowance(BendAllowance: Double); safecall;
    function Get_useAutoRelief: WordBool; safecall;
    procedure Set_useAutoRelief(autoRelief: WordBool); safecall;
    function Get_AutoReliefType: Integer; safecall;
    procedure Set_AutoReliefType(AutoReliefType: Integer); safecall;
    function Get_ReliefRatio: Double; safecall;
    procedure Set_ReliefRatio(ReliefRatio: Double); safecall;
    function IAccessSelections2(const topDoc: IModelDoc2; const component: IComponent2): WordBool; safecall;
    function GetCustomBendAllowance: ICustomBendAllowance; safecall;
    procedure SetCustomBendAllowance(const pBendData: ICustomBendAllowance); safecall;
    property BendRadius: Double read Get_BendRadius write Set_BendRadius;
    property thickness: Double read Get_thickness write Set_thickness;
    property FixedReference: IDispatch read Get_FixedReference write Set_FixedReference;
    property BendAllowanceType: Integer read Get_BendAllowanceType write Set_BendAllowanceType;
    property BendTableFile: WideString read Get_BendTableFile write Set_BendTableFile;
    property KFactor: Double read Get_KFactor write Set_KFactor;
    property BendAllowance: Double read Get_BendAllowance write Set_BendAllowance;
    property useAutoRelief: WordBool read Get_useAutoRelief write Set_useAutoRelief;
    property AutoReliefType: Integer read Get_AutoReliefType write Set_AutoReliefType;
    property ReliefRatio: Double read Get_ReliefRatio write Set_ReliefRatio;
  end;

// *********************************************************************//
// DispIntf:  ISheetMetalFeatureDataDisp
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {2F6C1E88-F2D6-11D4-AED5-00C04FA0AC51}
// *********************************************************************//
  ISheetMetalFeatureDataDisp = dispinterface
    ['{2F6C1E88-F2D6-11D4-AED5-00C04FA0AC51}']
    function AccessSelections(const topDoc: IDispatch; const component: IDispatch): WordBool; dispid 1;
    function IAccessSelections(const topDoc: IModelDoc; const component: IComponent): WordBool; dispid 2;
    procedure ReleaseSelectionAccess; dispid 3;
    property BendRadius: Double dispid 4;
    property thickness: Double dispid 5;
    property FixedReference: IDispatch dispid 6;
    property BendAllowanceType: Integer dispid 7;
    property BendTableFile: WideString dispid 8;
    property KFactor: Double dispid 9;
    property BendAllowance: Double dispid 10;
    property useAutoRelief: WordBool dispid 11;
    property AutoReliefType: Integer dispid 12;
    property ReliefRatio: Double dispid 13;
    function IAccessSelections2(const topDoc: IModelDoc2; const component: IComponent2): WordBool; dispid 14;
    function GetCustomBendAllowance: ICustomBendAllowance; dispid 15;
    procedure SetCustomBendAllowance(const pBendData: ICustomBendAllowance); dispid 16;
  end;

// *********************************************************************//
// Interface: IOneBendFeatureData
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {0C02AD40-F6E6-11D4-AED6-00C04FA0AC51}
// *********************************************************************//
  IOneBendFeatureData = interface(IDispatch)
    ['{0C02AD40-F6E6-11D4-AED6-00C04FA0AC51}']
    function AccessSelections(const topDoc: IDispatch; const component: IDispatch): WordBool; safecall;
    function IAccessSelections(const topDoc: IModelDoc; const component: IComponent): WordBool; safecall;
    procedure ReleaseSelectionAccess; safecall;
    function Get_BendRadius: Double; safecall;
    procedure Set_BendRadius(radius: Double); safecall;
    function Get_BendAllowanceType: Integer; safecall;
    procedure Set_BendAllowanceType(BendAllowanceType: Integer); safecall;
    function Get_BendTableFile: WideString; safecall;
    procedure Set_BendTableFile(const BendTableFile: WideString); safecall;
    function Get_KFactor: Double; safecall;
    procedure Set_KFactor(KFactor: Double); safecall;
    function Get_BendAllowance: Double; safecall;
    procedure Set_BendAllowance(BendAllowance: Double); safecall;
    function Get_useAutoRelief: WordBool; safecall;
    procedure Set_useAutoRelief(autoRelief: WordBool); safecall;
    function Get_AutoReliefType: Integer; safecall;
    procedure Set_AutoReliefType(AutoReliefType: Integer); safecall;
    function Get_UseDefaultBendRadius: WordBool; safecall;
    procedure Set_UseDefaultBendRadius(UseDefaultBendRadius: WordBool); safecall;
    function Get_UseDefaultBendAllowance: WordBool; safecall;
    procedure Set_UseDefaultBendAllowance(UseDefaultBendAllowance: WordBool); safecall;
    function Get_UseDefaultBendRelief: WordBool; safecall;
    procedure Set_UseDefaultBendRelief(UseDefaultBendRelief: WordBool); safecall;
    function Get_BendDown: WordBool; safecall;
    procedure Set_BendDown(BendDown: WordBool); safecall;
    function Get_BendAngle: Double; safecall;
    procedure Set_BendAngle(BendAngle: Double); safecall;
    function Get_BendOrder: Integer; safecall;
    procedure Set_BendOrder(BendOrder: Integer); safecall;
    function Get_reliefWidth: Double; safecall;
    procedure Set_reliefWidth(reliefWidth: Double); safecall;
    function Get_reliefDepth: Double; safecall;
    procedure Set_reliefDepth(reliefDepth: Double); safecall;
    function IAccessSelections2(const topDoc: IModelDoc2; const component: IComponent2): WordBool; safecall;
    function GetType: Integer; safecall;
    function GetCustomBendAllowance: ICustomBendAllowance; safecall;
    procedure SetCustomBendAllowance(const pBendData: ICustomBendAllowance); safecall;
    function Get_SimplifyGeometry: WordBool; safecall;
    procedure Set_SimplifyGeometry(retval: WordBool); safecall;
    function Get_useReliefRatio: WordBool; safecall;
    procedure Set_useReliefRatio(retval: WordBool); safecall;
    function Get_ReliefRatio: Double; safecall;
    procedure Set_ReliefRatio(retval: Double); safecall;
    function Get_FlatPatternSketchSegment: ISketchSegment; safecall;
    property BendRadius: Double read Get_BendRadius write Set_BendRadius;
    property BendAllowanceType: Integer read Get_BendAllowanceType write Set_BendAllowanceType;
    property BendTableFile: WideString read Get_BendTableFile write Set_BendTableFile;
    property KFactor: Double read Get_KFactor write Set_KFactor;
    property BendAllowance: Double read Get_BendAllowance write Set_BendAllowance;
    property useAutoRelief: WordBool read Get_useAutoRelief write Set_useAutoRelief;
    property AutoReliefType: Integer read Get_AutoReliefType write Set_AutoReliefType;
    property UseDefaultBendRadius: WordBool read Get_UseDefaultBendRadius write Set_UseDefaultBendRadius;
    property UseDefaultBendAllowance: WordBool read Get_UseDefaultBendAllowance write Set_UseDefaultBendAllowance;
    property UseDefaultBendRelief: WordBool read Get_UseDefaultBendRelief write Set_UseDefaultBendRelief;
    property BendDown: WordBool read Get_BendDown write Set_BendDown;
    property BendAngle: Double read Get_BendAngle write Set_BendAngle;
    property BendOrder: Integer read Get_BendOrder write Set_BendOrder;
    property reliefWidth: Double read Get_reliefWidth write Set_reliefWidth;
    property reliefDepth: Double read Get_reliefDepth write Set_reliefDepth;
    property SimplifyGeometry: WordBool read Get_SimplifyGeometry write Set_SimplifyGeometry;
    property useReliefRatio: WordBool read Get_useReliefRatio write Set_useReliefRatio;
    property ReliefRatio: Double read Get_ReliefRatio write Set_ReliefRatio;
    property FlatPatternSketchSegment: ISketchSegment read Get_FlatPatternSketchSegment;
  end;

// *********************************************************************//
// DispIntf:  IOneBendFeatureDataDisp
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {0C02AD40-F6E6-11D4-AED6-00C04FA0AC51}
// *********************************************************************//
  IOneBendFeatureDataDisp = dispinterface
    ['{0C02AD40-F6E6-11D4-AED6-00C04FA0AC51}']
    function AccessSelections(const topDoc: IDispatch; const component: IDispatch): WordBool; dispid 1;
    function IAccessSelections(const topDoc: IModelDoc; const component: IComponent): WordBool; dispid 2;
    procedure ReleaseSelectionAccess; dispid 3;
    property BendRadius: Double dispid 4;
    property BendAllowanceType: Integer dispid 5;
    property BendTableFile: WideString dispid 6;
    property KFactor: Double dispid 7;
    property BendAllowance: Double dispid 8;
    property useAutoRelief: WordBool dispid 9;
    property AutoReliefType: Integer dispid 10;
    property UseDefaultBendRadius: WordBool dispid 11;
    property UseDefaultBendAllowance: WordBool dispid 12;
    property UseDefaultBendRelief: WordBool dispid 13;
    property BendDown: WordBool dispid 14;
    property BendAngle: Double dispid 15;
    property BendOrder: Integer dispid 16;
    property reliefWidth: Double dispid 17;
    property reliefDepth: Double dispid 18;
    function IAccessSelections2(const topDoc: IModelDoc2; const component: IComponent2): WordBool; dispid 19;
    function GetType: Integer; dispid 20;
    function GetCustomBendAllowance: ICustomBendAllowance; dispid 21;
    procedure SetCustomBendAllowance(const pBendData: ICustomBendAllowance); dispid 22;
    property SimplifyGeometry: WordBool dispid 23;
    property useReliefRatio: WordBool dispid 24;
    property ReliefRatio: Double dispid 25;
    property FlatPatternSketchSegment: ISketchSegment readonly dispid 26;
  end;

// *********************************************************************//
// Interface: IBendsFeatureData
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {F3BDB64E-F7C6-11D4-AED6-00C04FA0AC51}
// *********************************************************************//
  IBendsFeatureData = interface(IDispatch)
    ['{F3BDB64E-F7C6-11D4-AED6-00C04FA0AC51}']
    function AccessSelections(const topDoc: IDispatch; const component: IDispatch): WordBool; safecall;
    function IAccessSelections(const topDoc: IModelDoc; const component: IComponent): WordBool; safecall;
    procedure ReleaseSelectionAccess; safecall;
    function Get_BendRadius: Double; safecall;
    procedure Set_BendRadius(radius: Double); safecall;
    function Get_BendAllowanceType: Integer; safecall;
    procedure Set_BendAllowanceType(BendAllowanceType: Integer); safecall;
    function Get_BendTableFile: WideString; safecall;
    procedure Set_BendTableFile(const BendTableFile: WideString); safecall;
    function Get_KFactor: Double; safecall;
    procedure Set_KFactor(KFactor: Double); safecall;
    function Get_BendAllowance: Double; safecall;
    procedure Set_BendAllowance(BendAllowance: Double); safecall;
    function Get_UseDefaultBendRadius: WordBool; safecall;
    procedure Set_UseDefaultBendRadius(UseDefaultBendRadius: WordBool); safecall;
    function Get_UseDefaultBendAllowance: WordBool; safecall;
    procedure Set_UseDefaultBendAllowance(UseDefaultBendAllowance: WordBool); safecall;
    function IAccessSelections2(const topDoc: IModelDoc2; const component: IComponent2): WordBool; safecall;
    function GetCustomBendAllowance: ICustomBendAllowance; safecall;
    procedure SetCustomBendAllowance(const pBendData: ICustomBendAllowance); safecall;
    property BendRadius: Double read Get_BendRadius write Set_BendRadius;
    property BendAllowanceType: Integer read Get_BendAllowanceType write Set_BendAllowanceType;
    property BendTableFile: WideString read Get_BendTableFile write Set_BendTableFile;
    property KFactor: Double read Get_KFactor write Set_KFactor;
    property BendAllowance: Double read Get_BendAllowance write Set_BendAllowance;
    property UseDefaultBendRadius: WordBool read Get_UseDefaultBendRadius write Set_UseDefaultBendRadius;
    property UseDefaultBendAllowance: WordBool read Get_UseDefaultBendAllowance write Set_UseDefaultBendAllowance;
  end;

// *********************************************************************//
// DispIntf:  IBendsFeatureDataDisp
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {F3BDB64E-F7C6-11D4-AED6-00C04FA0AC51}
// *********************************************************************//
  IBendsFeatureDataDisp = dispinterface
    ['{F3BDB64E-F7C6-11D4-AED6-00C04FA0AC51}']
    function AccessSelections(const topDoc: IDispatch; const component: IDispatch): WordBool; dispid 1;
    function IAccessSelections(const topDoc: IModelDoc; const component: IComponent): WordBool; dispid 2;
    procedure ReleaseSelectionAccess; dispid 3;
    property BendRadius: Double dispid 4;
    property BendAllowanceType: Integer dispid 5;
    property BendTableFile: WideString dispid 6;
    property KFactor: Double dispid 7;
    property BendAllowance: Double dispid 8;
    property UseDefaultBendRadius: WordBool dispid 9;
    property UseDefaultBendAllowance: WordBool dispid 10;
    function IAccessSelections2(const topDoc: IModelDoc2; const component: IComponent2): WordBool; dispid 11;
    function GetCustomBendAllowance: ICustomBendAllowance; dispid 12;
    procedure SetCustomBendAllowance(const pBendData: ICustomBendAllowance); dispid 13;
  end;

// *********************************************************************//
// Interface: IBaseFlangeFeatureData
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {C61E9DD6-0813-11D5-AEDD-00C04FA0AC51}
// *********************************************************************//
  IBaseFlangeFeatureData = interface(IDispatch)
    ['{C61E9DD6-0813-11D5-AEDD-00C04FA0AC51}']
    function AccessSelections(const topDoc: IDispatch; const component: IDispatch): WordBool; safecall;
    function IAccessSelections(const topDoc: IModelDoc; const component: IComponent): WordBool; safecall;
    procedure ReleaseSelectionAccess; safecall;
    function Get_OffsetDirections: Integer; safecall;
    procedure Set_OffsetDirections(count: Integer); safecall;
    function Get_D1OffsetType: Integer; safecall;
    procedure Set_D1OffsetType(offsetType: Integer); safecall;
    function Get_D2OffsetType: Integer; safecall;
    procedure Set_D2OffsetType(offsetType: Integer); safecall;
    function GetD1OffsetReferenceType: Integer; safecall;
    function GetD2OffsetReferenceType: Integer; safecall;
    function Get_D1OffsetReference: IDispatch; safecall;
    procedure Set_D1OffsetReference(const offsetReference: IDispatch); safecall;
    function Get_D2OffsetReference: IDispatch; safecall;
    procedure Set_D2OffsetReference(const offsetReference: IDispatch); safecall;
    function Get_D1OffsetDistance: Double; safecall;
    procedure Set_D1OffsetDistance(offsetDistance: Double); safecall;
    function Get_D2OffsetDistance: Double; safecall;
    procedure Set_D2OffsetDistance(offsetDistance: Double); safecall;
    function Get_thickness: Double; safecall;
    procedure Set_thickness(thickness: Double); safecall;
    function Get_ReverseThickness: WordBool; safecall;
    procedure Set_ReverseThickness(ReverseThickness: WordBool); safecall;
    function Get_BendRadius: Double; safecall;
    procedure Set_BendRadius(radius: Double); safecall;
    function Get_ReverseDirection: WordBool; safecall;
    procedure Set_ReverseDirection(ReverseDirection: WordBool); safecall;
    function IAccessSelections2(const topDoc: IModelDoc2; const component: IComponent2): WordBool; safecall;
    function Get_D1ReverseOffset: WordBool; safecall;
    procedure Set_D1ReverseOffset(revOffset: WordBool); safecall;
    function Get_D2ReverseOffset: WordBool; safecall;
    procedure Set_D2ReverseOffset(revOffset: WordBool); safecall;
    property OffsetDirections: Integer read Get_OffsetDirections write Set_OffsetDirections;
    property D1OffsetType: Integer read Get_D1OffsetType write Set_D1OffsetType;
    property D2OffsetType: Integer read Get_D2OffsetType write Set_D2OffsetType;
    property D1OffsetReference: IDispatch read Get_D1OffsetReference write Set_D1OffsetReference;
    property D2OffsetReference: IDispatch read Get_D2OffsetReference write Set_D2OffsetReference;
    property D1OffsetDistance: Double read Get_D1OffsetDistance write Set_D1OffsetDistance;
    property D2OffsetDistance: Double read Get_D2OffsetDistance write Set_D2OffsetDistance;
    property thickness: Double read Get_thickness write Set_thickness;
    property ReverseThickness: WordBool read Get_ReverseThickness write Set_ReverseThickness;
    property BendRadius: Double read Get_BendRadius write Set_BendRadius;
    property ReverseDirection: WordBool read Get_ReverseDirection write Set_ReverseDirection;
    property D1ReverseOffset: WordBool read Get_D1ReverseOffset write Set_D1ReverseOffset;
    property D2ReverseOffset: WordBool read Get_D2ReverseOffset write Set_D2ReverseOffset;
  end;

// *********************************************************************//
// DispIntf:  IBaseFlangeFeatureDataDisp
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {C61E9DD6-0813-11D5-AEDD-00C04FA0AC51}
// *********************************************************************//
  IBaseFlangeFeatureDataDisp = dispinterface
    ['{C61E9DD6-0813-11D5-AEDD-00C04FA0AC51}']
    function AccessSelections(const topDoc: IDispatch; const component: IDispatch): WordBool; dispid 1;
    function IAccessSelections(const topDoc: IModelDoc; const component: IComponent): WordBool; dispid 2;
    procedure ReleaseSelectionAccess; dispid 3;
    property OffsetDirections: Integer dispid 4;
    property D1OffsetType: Integer dispid 5;
    property D2OffsetType: Integer dispid 6;
    function GetD1OffsetReferenceType: Integer; dispid 7;
    function GetD2OffsetReferenceType: Integer; dispid 8;
    property D1OffsetReference: IDispatch dispid 9;
    property D2OffsetReference: IDispatch dispid 10;
    property D1OffsetDistance: Double dispid 11;
    property D2OffsetDistance: Double dispid 12;
    property thickness: Double dispid 13;
    property ReverseThickness: WordBool dispid 14;
    property BendRadius: Double dispid 15;
    property ReverseDirection: WordBool dispid 16;
    function IAccessSelections2(const topDoc: IModelDoc2; const component: IComponent2): WordBool; dispid 17;
    property D1ReverseOffset: WordBool dispid 18;
    property D2ReverseOffset: WordBool dispid 19;
  end;

// *********************************************************************//
// Interface: IEdgeFlangeFeatureData
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {B58E432A-09C8-11D5-AEDD-00C04FA0AC51}
// *********************************************************************//
  IEdgeFlangeFeatureData = interface(IDispatch)
    ['{B58E432A-09C8-11D5-AEDD-00C04FA0AC51}']
    function AccessSelections(const topDoc: IDispatch; const component: IDispatch): WordBool; safecall;
    function IAccessSelections(const topDoc: IModelDoc; const component: IComponent): WordBool; safecall;
    procedure ReleaseSelectionAccess; safecall;
    function Get_Edge: IDispatch; safecall;
    procedure Set_Edge(const Edge: IDispatch); safecall;
    function Get_UseDefaultBendRadius: WordBool; safecall;
    procedure Set_UseDefaultBendRadius(UseDefaultBendRadius: WordBool); safecall;
    function Get_BendRadius: Double; safecall;
    procedure Set_BendRadius(radius: Double); safecall;
    function Get_BendAngle: Double; safecall;
    procedure Set_BendAngle(BendAngle: Double); safecall;
    function Get_offsetType: Integer; safecall;
    procedure Set_offsetType(offsetType: Integer); safecall;
    function Get_offsetReference: IDispatch; safecall;
    procedure Set_offsetReference(const offsetReference: IDispatch); safecall;
    function Get_ReverseOffset: WordBool; safecall;
    procedure Set_ReverseOffset(reverse: WordBool); safecall;
    function Get_offsetDistance: Double; safecall;
    procedure Set_offsetDistance(offsetDistance: Double); safecall;
    function Get_OffsetDimType: Integer; safecall;
    procedure Set_OffsetDimType(OffsetDimType: Integer); safecall;
    function Get_PositionType: Integer; safecall;
    procedure Set_PositionType(PositionType: Integer); safecall;
    function Get_UsePositionTrimSideBends: WordBool; safecall;
    procedure Set_UsePositionTrimSideBends(trimSideBends: WordBool); safecall;
    function Get_UsePositionOffset: WordBool; safecall;
    procedure Set_UsePositionOffset(positionOffset: WordBool); safecall;
    function Get_PositionOffsetType: Integer; safecall;
    procedure Set_PositionOffsetType(offsetType: Integer); safecall;
    function GetPositionReferenceType: Integer; safecall;
    function Get_PositionOffsetReference: IDispatch; safecall;
    procedure Set_PositionOffsetReference(const offsetReference: IDispatch); safecall;
    function Get_PositionOffsetDistance: Double; safecall;
    procedure Set_PositionOffsetDistance(offsetDistance: Double); safecall;
    function Get_ReversePositionOffset: WordBool; safecall;
    procedure Set_ReversePositionOffset(reverse: WordBool); safecall;
    function Get_AutoReliefType: Integer; safecall;
    procedure Set_AutoReliefType(AutoReliefType: Integer); safecall;
    function Get_useReliefRatio: WordBool; safecall;
    procedure Set_useReliefRatio(useReliefRatio: WordBool); safecall;
    function Get_ReliefRatio: Double; safecall;
    procedure Set_ReliefRatio(ReliefRatio: Double); safecall;
    function Get_reliefWidth: Double; safecall;
    procedure Set_reliefWidth(reliefWidth: Double); safecall;
    function Get_reliefDepth: Double; safecall;
    procedure Set_reliefDepth(reliefDepth: Double); safecall;
    function Get_ReliefTearType: Integer; safecall;
    procedure Set_ReliefTearType(ReliefTearType: Integer); safecall;
    function IAccessSelections2(const topDoc: IModelDoc2; const component: IComponent2): WordBool; safecall;
    function GetCustomBendAllowance: ICustomBendAllowance; safecall;
    procedure SetCustomBendAllowance(const pBendData: ICustomBendAllowance); safecall;
    function Get_UseDefaultBendAllowance: WordBool; safecall;
    procedure Set_UseDefaultBendAllowance(UseDefaultBendAllowance: WordBool); safecall;
    function Get_UseDefaultBendRelief: WordBool; safecall;
    procedure Set_UseDefaultBendRelief(UseDefaultBendRelief: WordBool); safecall;
    property Edge: IDispatch read Get_Edge write Set_Edge;
    property UseDefaultBendRadius: WordBool read Get_UseDefaultBendRadius write Set_UseDefaultBendRadius;
    property BendRadius: Double read Get_BendRadius write Set_BendRadius;
    property BendAngle: Double read Get_BendAngle write Set_BendAngle;
    property offsetType: Integer read Get_offsetType write Set_offsetType;
    property offsetReference: IDispatch read Get_offsetReference write Set_offsetReference;
    property ReverseOffset: WordBool read Get_ReverseOffset write Set_ReverseOffset;
    property offsetDistance: Double read Get_offsetDistance write Set_offsetDistance;
    property OffsetDimType: Integer read Get_OffsetDimType write Set_OffsetDimType;
    property PositionType: Integer read Get_PositionType write Set_PositionType;
    property UsePositionTrimSideBends: WordBool read Get_UsePositionTrimSideBends write Set_UsePositionTrimSideBends;
    property UsePositionOffset: WordBool read Get_UsePositionOffset write Set_UsePositionOffset;
    property PositionOffsetType: Integer read Get_PositionOffsetType write Set_PositionOffsetType;
    property PositionOffsetReference: IDispatch read Get_PositionOffsetReference write Set_PositionOffsetReference;
    property PositionOffsetDistance: Double read Get_PositionOffsetDistance write Set_PositionOffsetDistance;
    property ReversePositionOffset: WordBool read Get_ReversePositionOffset write Set_ReversePositionOffset;
    property AutoReliefType: Integer read Get_AutoReliefType write Set_AutoReliefType;
    property useReliefRatio: WordBool read Get_useReliefRatio write Set_useReliefRatio;
    property ReliefRatio: Double read Get_ReliefRatio write Set_ReliefRatio;
    property reliefWidth: Double read Get_reliefWidth write Set_reliefWidth;
    property reliefDepth: Double read Get_reliefDepth write Set_reliefDepth;
    property ReliefTearType: Integer read Get_ReliefTearType write Set_ReliefTearType;
    property UseDefaultBendAllowance: WordBool read Get_UseDefaultBendAllowance write Set_UseDefaultBendAllowance;
    property UseDefaultBendRelief: WordBool read Get_UseDefaultBendRelief write Set_UseDefaultBendRelief;
  end;

// *********************************************************************//
// DispIntf:  IEdgeFlangeFeatureDataDisp
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {B58E432A-09C8-11D5-AEDD-00C04FA0AC51}
// *********************************************************************//
  IEdgeFlangeFeatureDataDisp = dispinterface
    ['{B58E432A-09C8-11D5-AEDD-00C04FA0AC51}']
    function AccessSelections(const topDoc: IDispatch; const component: IDispatch): WordBool; dispid 1;
    function IAccessSelections(const topDoc: IModelDoc; const component: IComponent): WordBool; dispid 2;
    procedure ReleaseSelectionAccess; dispid 3;
    property Edge: IDispatch dispid 4;
    property UseDefaultBendRadius: WordBool dispid 5;
    property BendRadius: Double dispid 6;
    property BendAngle: Double dispid 7;
    property offsetType: Integer dispid 8;
    property offsetReference: IDispatch dispid 9;
    property ReverseOffset: WordBool dispid 10;
    property offsetDistance: Double dispid 11;
    property OffsetDimType: Integer dispid 12;
    property PositionType: Integer dispid 13;
    property UsePositionTrimSideBends: WordBool dispid 14;
    property UsePositionOffset: WordBool dispid 15;
    property PositionOffsetType: Integer dispid 16;
    function GetPositionReferenceType: Integer; dispid 17;
    property PositionOffsetReference: IDispatch dispid 18;
    property PositionOffsetDistance: Double dispid 19;
    property ReversePositionOffset: WordBool dispid 20;
    property AutoReliefType: Integer dispid 21;
    property useReliefRatio: WordBool dispid 22;
    property ReliefRatio: Double dispid 23;
    property reliefWidth: Double dispid 24;
    property reliefDepth: Double dispid 25;
    property ReliefTearType: Integer dispid 26;
    function IAccessSelections2(const topDoc: IModelDoc2; const component: IComponent2): WordBool; dispid 27;
    function GetCustomBendAllowance: ICustomBendAllowance; dispid 28;
    procedure SetCustomBendAllowance(const pBendData: ICustomBendAllowance); dispid 29;
    property UseDefaultBendAllowance: WordBool dispid 30;
    property UseDefaultBendRelief: WordBool dispid 31;
  end;

// *********************************************************************//
// Interface: IMiterFlangeFeatureData
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {E6194F72-0CEC-11D5-AEDD-00C04FA0AC51}
// *********************************************************************//
  IMiterFlangeFeatureData = interface(IDispatch)
    ['{E6194F72-0CEC-11D5-AEDD-00C04FA0AC51}']
    function AccessSelections(const topDoc: IDispatch; const component: IDispatch): WordBool; safecall;
    function IAccessSelections(const topDoc: IModelDoc; const component: IComponent): WordBool; safecall;
    procedure ReleaseSelectionAccess; safecall;
    function Get_edges: OleVariant; safecall;
    procedure Set_edges(edgeArray: OleVariant); safecall;
    function IGetEdgesCount: Integer; safecall;
    function IGetEdges: IDispatch; safecall;
    procedure ISetEdges(edgeCount: Integer; var edgeArray: IDispatch); safecall;
    function Get_UseDefaultBendRadius: WordBool; safecall;
    procedure Set_UseDefaultBendRadius(UseDefaultBendRadius: WordBool); safecall;
    function Get_BendRadius: Double; safecall;
    procedure Set_BendRadius(radius: Double); safecall;
    function Get_PositionType: Integer; safecall;
    procedure Set_PositionType(PositionType: Integer); safecall;
    function Get_UsePositionTrimSideBends: WordBool; safecall;
    procedure Set_UsePositionTrimSideBends(trimSideBends: WordBool); safecall;
    function Get_GapDistance: Double; safecall;
    procedure Set_GapDistance(GapDistance: Double); safecall;
    function IAccessSelections2(const topDoc: IModelDoc2; const component: IComponent2): WordBool; safecall;
    function Get_StartOffset: Double; safecall;
    procedure Set_StartOffset(offset: Double); safecall;
    function Get_EndOffset: Double; safecall;
    procedure Set_EndOffset(offset: Double); safecall;
    function Get_reliefType: Integer; safecall;
    procedure Set_reliefType(reliefType: Integer); safecall;
    function Get_useReliefRatio: WordBool; safecall;
    procedure Set_useReliefRatio(useReliefRatio: WordBool); safecall;
    function Get_ReliefRatio: Double; safecall;
    procedure Set_ReliefRatio(ratio: Double); safecall;
    function Get_reliefWidth: Double; safecall;
    procedure Set_reliefWidth(width: Double); safecall;
    function Get_reliefDepth: Double; safecall;
    procedure Set_reliefDepth(depth: Double); safecall;
    function GetCustomBendAllowance: ICustomBendAllowance; safecall;
    procedure SetCustomBendAllowance(const pBendData: ICustomBendAllowance); safecall;
    function Get_UseDefaultBendAllowance: WordBool; safecall;
    procedure Set_UseDefaultBendAllowance(UseDefaultBendAllowance: WordBool); safecall;
    function Get_UseDefaultBendRelief: WordBool; safecall;
    procedure Set_UseDefaultBendRelief(UseDefaultBendRelief: WordBool); safecall;
    property edges: OleVariant read Get_edges write Set_edges;
    property UseDefaultBendRadius: WordBool read Get_UseDefaultBendRadius write Set_UseDefaultBendRadius;
    property BendRadius: Double read Get_BendRadius write Set_BendRadius;
    property PositionType: Integer read Get_PositionType write Set_PositionType;
    property UsePositionTrimSideBends: WordBool read Get_UsePositionTrimSideBends write Set_UsePositionTrimSideBends;
    property GapDistance: Double read Get_GapDistance write Set_GapDistance;
    property StartOffset: Double read Get_StartOffset write Set_StartOffset;
    property EndOffset: Double read Get_EndOffset write Set_EndOffset;
    property reliefType: Integer read Get_reliefType write Set_reliefType;
    property useReliefRatio: WordBool read Get_useReliefRatio write Set_useReliefRatio;
    property ReliefRatio: Double read Get_ReliefRatio write Set_ReliefRatio;
    property reliefWidth: Double read Get_reliefWidth write Set_reliefWidth;
    property reliefDepth: Double read Get_reliefDepth write Set_reliefDepth;
    property UseDefaultBendAllowance: WordBool read Get_UseDefaultBendAllowance write Set_UseDefaultBendAllowance;
    property UseDefaultBendRelief: WordBool read Get_UseDefaultBendRelief write Set_UseDefaultBendRelief;
  end;

// *********************************************************************//
// DispIntf:  IMiterFlangeFeatureDataDisp
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {E6194F72-0CEC-11D5-AEDD-00C04FA0AC51}
// *********************************************************************//
  IMiterFlangeFeatureDataDisp = dispinterface
    ['{E6194F72-0CEC-11D5-AEDD-00C04FA0AC51}']
    function AccessSelections(const topDoc: IDispatch; const component: IDispatch): WordBool; dispid 1;
    function IAccessSelections(const topDoc: IModelDoc; const component: IComponent): WordBool; dispid 2;
    procedure ReleaseSelectionAccess; dispid 3;
    property edges: OleVariant dispid 4;
    function IGetEdgesCount: Integer; dispid 5;
    function IGetEdges: IDispatch; dispid 6;
    procedure ISetEdges(edgeCount: Integer; var edgeArray: IDispatch); dispid 7;
    property UseDefaultBendRadius: WordBool dispid 8;
    property BendRadius: Double dispid 9;
    property PositionType: Integer dispid 10;
    property UsePositionTrimSideBends: WordBool dispid 11;
    property GapDistance: Double dispid 12;
    function IAccessSelections2(const topDoc: IModelDoc2; const component: IComponent2): WordBool; dispid 13;
    property StartOffset: Double dispid 14;
    property EndOffset: Double dispid 15;
    property reliefType: Integer dispid 16;
    property useReliefRatio: WordBool dispid 17;
    property ReliefRatio: Double dispid 18;
    property reliefWidth: Double dispid 19;
    property reliefDepth: Double dispid 20;
    function GetCustomBendAllowance: ICustomBendAllowance; dispid 21;
    procedure SetCustomBendAllowance(const pBendData: ICustomBendAllowance); dispid 22;
    property UseDefaultBendAllowance: WordBool dispid 23;
    property UseDefaultBendRelief: WordBool dispid 24;
  end;

// *********************************************************************//
// Interface: ISketchedBendFeatureData
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {A4D90A70-0DA5-11D5-AEDD-00C04FA0AC51}
// *********************************************************************//
  ISketchedBendFeatureData = interface(IDispatch)
    ['{A4D90A70-0DA5-11D5-AEDD-00C04FA0AC51}']
    function AccessSelections(const topDoc: IDispatch; const component: IDispatch): WordBool; safecall;
    function IAccessSelections(const topDoc: IModelDoc; const component: IComponent): WordBool; safecall;
    procedure ReleaseSelectionAccess; safecall;
    function GetFixedFace(out x: Double; out y: Double; out z: Double): IDispatch; safecall;
    procedure SetFixedFace(x: Double; y: Double; z: Double; const edgeArray: IDispatch); safecall;
    function Get_PositionType: Integer; safecall;
    procedure Set_PositionType(PositionType: Integer); safecall;
    function Get_ReverseDirection: WordBool; safecall;
    procedure Set_ReverseDirection(ReverseDirection: WordBool); safecall;
    function Get_BendAngle: Double; safecall;
    procedure Set_BendAngle(BendAngle: Double); safecall;
    function Get_UseDefaultBendRadius: WordBool; safecall;
    procedure Set_UseDefaultBendRadius(UseDefaultBendRadius: WordBool); safecall;
    function Get_BendRadius: Double; safecall;
    procedure Set_BendRadius(radius: Double); safecall;
    function IAccessSelections2(const topDoc: IModelDoc2; const component: IComponent2): WordBool; safecall;
    function GetCustomBendAllowance: ICustomBendAllowance; safecall;
    procedure SetCustomBendAllowance(const pBendData: ICustomBendAllowance); safecall;
    function Get_UseDefaultBendAllowance: WordBool; safecall;
    procedure Set_UseDefaultBendAllowance(UseDefaultBendAllowance: WordBool); safecall;
    property PositionType: Integer read Get_PositionType write Set_PositionType;
    property ReverseDirection: WordBool read Get_ReverseDirection write Set_ReverseDirection;
    property BendAngle: Double read Get_BendAngle write Set_BendAngle;
    property UseDefaultBendRadius: WordBool read Get_UseDefaultBendRadius write Set_UseDefaultBendRadius;
    property BendRadius: Double read Get_BendRadius write Set_BendRadius;
    property UseDefaultBendAllowance: WordBool read Get_UseDefaultBendAllowance write Set_UseDefaultBendAllowance;
  end;

// *********************************************************************//
// DispIntf:  ISketchedBendFeatureDataDisp
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {A4D90A70-0DA5-11D5-AEDD-00C04FA0AC51}
// *********************************************************************//
  ISketchedBendFeatureDataDisp = dispinterface
    ['{A4D90A70-0DA5-11D5-AEDD-00C04FA0AC51}']
    function AccessSelections(const topDoc: IDispatch; const component: IDispatch): WordBool; dispid 1;
    function IAccessSelections(const topDoc: IModelDoc; const component: IComponent): WordBool; dispid 2;
    procedure ReleaseSelectionAccess; dispid 3;
    function GetFixedFace(out x: Double; out y: Double; out z: Double): IDispatch; dispid 4;
    procedure SetFixedFace(x: Double; y: Double; z: Double; const edgeArray: IDispatch); dispid 5;
    property PositionType: Integer dispid 6;
    property ReverseDirection: WordBool dispid 7;
    property BendAngle: Double dispid 8;
    property UseDefaultBendRadius: WordBool dispid 9;
    property BendRadius: Double dispid 10;
    function IAccessSelections2(const topDoc: IModelDoc2; const component: IComponent2): WordBool; dispid 11;
    function GetCustomBendAllowance: ICustomBendAllowance; dispid 12;
    procedure SetCustomBendAllowance(const pBendData: ICustomBendAllowance); dispid 13;
    property UseDefaultBendAllowance: WordBool dispid 14;
  end;

// *********************************************************************//
// Interface: IClosedCornerFeatureData
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {2134CBFC-0DDA-11D5-AEDD-00C04FA0AC51}
// *********************************************************************//
  IClosedCornerFeatureData = interface(IDispatch)
    ['{2134CBFC-0DDA-11D5-AEDD-00C04FA0AC51}']
    function AccessSelections(const topDoc: IDispatch; const component: IDispatch): WordBool; safecall;
    function IAccessSelections(const topDoc: IModelDoc; const component: IComponent): WordBool; safecall;
    procedure ReleaseSelectionAccess; safecall;
    function Get_faces: OleVariant; safecall;
    procedure Set_faces(faceArray: OleVariant); safecall;
    function IGetFacesCount: Integer; safecall;
    function IGetFaces: IDispatch; safecall;
    procedure ISetFaces(faceCount: Integer; var faceArray: IDispatch); safecall;
    function Get_cornerType: Integer; safecall;
    procedure Set_cornerType(cornerType: Integer); safecall;
    function IAccessSelections2(const topDoc: IModelDoc2; const component: IComponent2): WordBool; safecall;
    property faces: OleVariant read Get_faces write Set_faces;
    property cornerType: Integer read Get_cornerType write Set_cornerType;
  end;

// *********************************************************************//
// DispIntf:  IClosedCornerFeatureDataDisp
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {2134CBFC-0DDA-11D5-AEDD-00C04FA0AC51}
// *********************************************************************//
  IClosedCornerFeatureDataDisp = dispinterface
    ['{2134CBFC-0DDA-11D5-AEDD-00C04FA0AC51}']
    function AccessSelections(const topDoc: IDispatch; const component: IDispatch): WordBool; dispid 1;
    function IAccessSelections(const topDoc: IModelDoc; const component: IComponent): WordBool; dispid 2;
    procedure ReleaseSelectionAccess; dispid 3;
    property faces: OleVariant dispid 4;
    function IGetFacesCount: Integer; dispid 5;
    function IGetFaces: IDispatch; dispid 6;
    procedure ISetFaces(faceCount: Integer; var faceArray: IDispatch); dispid 7;
    property cornerType: Integer dispid 8;
    function IAccessSelections2(const topDoc: IModelDoc2; const component: IComponent2): WordBool; dispid 9;
  end;

// *********************************************************************//
// Interface: IFoldsFeatureData
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {32700A62-0E5C-11D5-AEDD-00C04FA0AC51}
// *********************************************************************//
  IFoldsFeatureData = interface(IDispatch)
    ['{32700A62-0E5C-11D5-AEDD-00C04FA0AC51}']
    function AccessSelections(const topDoc: IDispatch; const component: IDispatch): WordBool; safecall;
    function IAccessSelections(const topDoc: IModelDoc; const component: IComponent): WordBool; safecall;
    procedure ReleaseSelectionAccess; safecall;
    function Get_FixedFace: IDispatch; safecall;
    procedure Set_FixedFace(const offsetReference: IDispatch); safecall;
    function Get_Bends: OleVariant; safecall;
    procedure Set_Bends(faceArray: OleVariant); safecall;
    function IGetBendsCount: Integer; safecall;
    function IGetBends: IDispatch; safecall;
    procedure ISetBends(faceCount: Integer; var faceArray: IDispatch); safecall;
    function IAccessSelections2(const topDoc: IModelDoc2; const component: IComponent2): WordBool; safecall;
    property FixedFace: IDispatch read Get_FixedFace write Set_FixedFace;
    property Bends: OleVariant read Get_Bends write Set_Bends;
  end;

// *********************************************************************//
// DispIntf:  IFoldsFeatureDataDisp
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {32700A62-0E5C-11D5-AEDD-00C04FA0AC51}
// *********************************************************************//
  IFoldsFeatureDataDisp = dispinterface
    ['{32700A62-0E5C-11D5-AEDD-00C04FA0AC51}']
    function AccessSelections(const topDoc: IDispatch; const component: IDispatch): WordBool; dispid 1;
    function IAccessSelections(const topDoc: IModelDoc; const component: IComponent): WordBool; dispid 2;
    procedure ReleaseSelectionAccess; dispid 3;
    property FixedFace: IDispatch dispid 4;
    property Bends: OleVariant dispid 5;
    function IGetBendsCount: Integer; dispid 6;
    function IGetBends: IDispatch; dispid 7;
    procedure ISetBends(faceCount: Integer; var faceArray: IDispatch); dispid 8;
    function IAccessSelections2(const topDoc: IModelDoc2; const component: IComponent2): WordBool; dispid 9;
  end;

// *********************************************************************//
// Interface: IFlatPatternFeatureData
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {00644208-0E6C-11D5-AEDD-00C04FA0AC51}
// *********************************************************************//
  IFlatPatternFeatureData = interface(IDispatch)
    ['{00644208-0E6C-11D5-AEDD-00C04FA0AC51}']
    function AccessSelections(const topDoc: IDispatch; const component: IDispatch): WordBool; safecall;
    function IAccessSelections(const topDoc: IModelDoc; const component: IComponent): WordBool; safecall;
    procedure ReleaseSelectionAccess; safecall;
    function Get_FixedFace: IDispatch; safecall;
    procedure Set_FixedFace(const offsetReference: IDispatch); safecall;
    function Get_MergeFace: WordBool; safecall;
    procedure Set_MergeFace(MergeFace: WordBool); safecall;
    function IAccessSelections2(const topDoc: IModelDoc2; const component: IComponent2): WordBool; safecall;
    function Get_CornerTreatment: WordBool; safecall;
    procedure Set_CornerTreatment(bCT: WordBool); safecall;
    function Get_CornerTrimReliefType: Integer; safecall;
    procedure Set_CornerTrimReliefType(reliefType: Integer); safecall;
    function Get_CornerTrimReliefDistance: Double; safecall;
    procedure Set_CornerTrimReliefDistance(reliefDistance: Double); safecall;
    function Get_BreakCornerType: Integer; safecall;
    procedure Set_BreakCornerType(type_: Integer); safecall;
    function Get_BreakCornerRadius: Double; safecall;
    procedure Set_BreakCornerRadius(rad: Double); safecall;
    function GetAddCornerTrim(out pFeat: IFeature): WordBool; safecall;
    procedure SetAddCornerTrim(bCT: WordBool); safecall;
    function GetBreakCorners(out pFeat: IFeature): WordBool; safecall;
    procedure SetBreakCorners(bBreakCorner: WordBool); safecall;
    function Get_CornerTrimRatioToThickness: Double; safecall;
    procedure Set_CornerTrimRatioToThickness(ratio: Double); safecall;
    function Get_UseRatioToThickness: WordBool; safecall;
    procedure Set_UseRatioToThickness(ratio: WordBool); safecall;
    function Get_SimplifyBends: WordBool; safecall;
    procedure Set_SimplifyBends(bSimplify: WordBool); safecall;
    property FixedFace: IDispatch read Get_FixedFace write Set_FixedFace;
    property MergeFace: WordBool read Get_MergeFace write Set_MergeFace;
    property CornerTreatment: WordBool read Get_CornerTreatment write Set_CornerTreatment;
    property CornerTrimReliefType: Integer read Get_CornerTrimReliefType write Set_CornerTrimReliefType;
    property CornerTrimReliefDistance: Double read Get_CornerTrimReliefDistance write Set_CornerTrimReliefDistance;
    property BreakCornerType: Integer read Get_BreakCornerType write Set_BreakCornerType;
    property BreakCornerRadius: Double read Get_BreakCornerRadius write Set_BreakCornerRadius;
    property CornerTrimRatioToThickness: Double read Get_CornerTrimRatioToThickness write Set_CornerTrimRatioToThickness;
    property UseRatioToThickness: WordBool read Get_UseRatioToThickness write Set_UseRatioToThickness;
    property SimplifyBends: WordBool read Get_SimplifyBends write Set_SimplifyBends;
  end;

// *********************************************************************//
// DispIntf:  IFlatPatternFeatureDataDisp
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {00644208-0E6C-11D5-AEDD-00C04FA0AC51}
// *********************************************************************//
  IFlatPatternFeatureDataDisp = dispinterface
    ['{00644208-0E6C-11D5-AEDD-00C04FA0AC51}']
    function AccessSelections(const topDoc: IDispatch; const component: IDispatch): WordBool; dispid 1;
    function IAccessSelections(const topDoc: IModelDoc; const component: IComponent): WordBool; dispid 2;
    procedure ReleaseSelectionAccess; dispid 3;
    property FixedFace: IDispatch dispid 4;
    property MergeFace: WordBool dispid 5;
    function IAccessSelections2(const topDoc: IModelDoc2; const component: IComponent2): WordBool; dispid 6;
    property CornerTreatment: WordBool dispid 7;
    property CornerTrimReliefType: Integer dispid 8;
    property CornerTrimReliefDistance: Double dispid 9;
    property BreakCornerType: Integer dispid 10;
    property BreakCornerRadius: Double dispid 11;
    function GetAddCornerTrim(out pFeat: IFeature): WordBool; dispid 12;
    procedure SetAddCornerTrim(bCT: WordBool); dispid 13;
    function GetBreakCorners(out pFeat: IFeature): WordBool; dispid 14;
    procedure SetBreakCorners(bBreakCorner: WordBool); dispid 15;
    property CornerTrimRatioToThickness: Double dispid 16;
    property UseRatioToThickness: WordBool dispid 17;
    property SimplifyBends: WordBool dispid 18;
  end;

// *********************************************************************//
// Interface: ILocalLinearPatternFeatureData
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {9890C04C-1196-11D5-AEDE-00C04FA0AC51}
// *********************************************************************//
  ILocalLinearPatternFeatureData = interface(IDispatch)
    ['{9890C04C-1196-11D5-AEDE-00C04FA0AC51}']
    function AccessSelections(const topDoc: IDispatch; const component: IDispatch): WordBool; safecall;
    function IAccessSelections(const topDoc: IModelDoc; const component: IComponent): WordBool; safecall;
    procedure ReleaseSelectionAccess; safecall;
    function Get_D1Axis: IDispatch; safecall;
    procedure Set_D1Axis(const refAxis: IDispatch); safecall;
    function Get_D2Axis: IDispatch; safecall;
    procedure Set_D2Axis(const refAxis: IDispatch); safecall;
    function GetD1AxisType: Integer; safecall;
    function GetD2AxisType: Integer; safecall;
    function Get_D1ReverseDirection: WordBool; safecall;
    procedure Set_D1ReverseDirection(ReverseDirection: WordBool); safecall;
    function Get_D2ReverseDirection: WordBool; safecall;
    procedure Set_D2ReverseDirection(ReverseDirection: WordBool); safecall;
    function Get_D1Spacing: Double; safecall;
    procedure Set_D1Spacing(distance: Double); safecall;
    function Get_D2Spacing: Double; safecall;
    procedure Set_D2Spacing(distance: Double); safecall;
    function Get_D1TotalInstances: Integer; safecall;
    procedure Set_D1TotalInstances(count: Integer); safecall;
    function Get_D2TotalInstances: Integer; safecall;
    procedure Set_D2TotalInstances(count: Integer); safecall;
    function Get_SeedComponentArray: OleVariant; safecall;
    procedure Set_SeedComponentArray(ArrayOut: OleVariant); safecall;
    function GetSeedComponentCount: Integer; safecall;
    function IGetSeedComponentArray: IDispatch; safecall;
    procedure ISetSeedComponentArray(featCount: Integer; var ArrayDataIn: IDispatch); safecall;
    function Get_SkippedItemArray: OleVariant; safecall;
    procedure Set_SkippedItemArray(ArrayOut: OleVariant); safecall;
    function GetSkippedItemCount: Integer; safecall;
    function IGetSkippedItemArray: Integer; safecall;
    procedure ISetSkippedItemArray(featCount: Integer; var ArrayDataIn: Integer); safecall;
    function IAccessSelections2(const topDoc: IModelDoc2; const component: IComponent2): WordBool; safecall;
    property D1Axis: IDispatch read Get_D1Axis write Set_D1Axis;
    property D2Axis: IDispatch read Get_D2Axis write Set_D2Axis;
    property D1ReverseDirection: WordBool read Get_D1ReverseDirection write Set_D1ReverseDirection;
    property D2ReverseDirection: WordBool read Get_D2ReverseDirection write Set_D2ReverseDirection;
    property D1Spacing: Double read Get_D1Spacing write Set_D1Spacing;
    property D2Spacing: Double read Get_D2Spacing write Set_D2Spacing;
    property D1TotalInstances: Integer read Get_D1TotalInstances write Set_D1TotalInstances;
    property D2TotalInstances: Integer read Get_D2TotalInstances write Set_D2TotalInstances;
    property SeedComponentArray: OleVariant read Get_SeedComponentArray write Set_SeedComponentArray;
    property SkippedItemArray: OleVariant read Get_SkippedItemArray write Set_SkippedItemArray;
  end;

// *********************************************************************//
// DispIntf:  ILocalLinearPatternFeatureDataDisp
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {9890C04C-1196-11D5-AEDE-00C04FA0AC51}
// *********************************************************************//
  ILocalLinearPatternFeatureDataDisp = dispinterface
    ['{9890C04C-1196-11D5-AEDE-00C04FA0AC51}']
    function AccessSelections(const topDoc: IDispatch; const component: IDispatch): WordBool; dispid 1;
    function IAccessSelections(const topDoc: IModelDoc; const component: IComponent): WordBool; dispid 2;
    procedure ReleaseSelectionAccess; dispid 3;
    property D1Axis: IDispatch dispid 4;
    property D2Axis: IDispatch dispid 5;
    function GetD1AxisType: Integer; dispid 6;
    function GetD2AxisType: Integer; dispid 7;
    property D1ReverseDirection: WordBool dispid 8;
    property D2ReverseDirection: WordBool dispid 9;
    property D1Spacing: Double dispid 10;
    property D2Spacing: Double dispid 11;
    property D1TotalInstances: Integer dispid 12;
    property D2TotalInstances: Integer dispid 13;
    property SeedComponentArray: OleVariant dispid 14;
    function GetSeedComponentCount: Integer; dispid 15;
    function IGetSeedComponentArray: IDispatch; dispid 16;
    procedure ISetSeedComponentArray(featCount: Integer; var ArrayDataIn: IDispatch); dispid 17;
    property SkippedItemArray: OleVariant dispid 18;
    function GetSkippedItemCount: Integer; dispid 19;
    function IGetSkippedItemArray: Integer; dispid 20;
    procedure ISetSkippedItemArray(featCount: Integer; var ArrayDataIn: Integer); dispid 21;
    function IAccessSelections2(const topDoc: IModelDoc2; const component: IComponent2): WordBool; dispid 22;
  end;

// *********************************************************************//
// Interface: ILocalCircularPatternFeatureData
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {F2E81434-13FB-11D5-AEDE-00C04FA0AC51}
// *********************************************************************//
  ILocalCircularPatternFeatureData = interface(IDispatch)
    ['{F2E81434-13FB-11D5-AEDE-00C04FA0AC51}']
    function AccessSelections(const topDoc: IDispatch; const component: IDispatch): WordBool; safecall;
    function IAccessSelections(const topDoc: IModelDoc; const component: IComponent): WordBool; safecall;
    procedure ReleaseSelectionAccess; safecall;
    function Get_axis: IDispatch; safecall;
    procedure Set_axis(const refAxis: IDispatch); safecall;
    function GetAxisType: Integer; safecall;
    function Get_ReverseDirection: WordBool; safecall;
    procedure Set_ReverseDirection(ReverseDirection: WordBool); safecall;
    function Get_spacing: Double; safecall;
    procedure Set_spacing(distance: Double); safecall;
    function Get_TotalInstances: Integer; safecall;
    procedure Set_TotalInstances(count: Integer); safecall;
    function Get_SeedComponentArray: OleVariant; safecall;
    procedure Set_SeedComponentArray(ArrayOut: OleVariant); safecall;
    function GetSeedComponentCount: Integer; safecall;
    function IGetSeedComponentArray: IDispatch; safecall;
    procedure ISetSeedComponentArray(featCount: Integer; var ArrayDataIn: IDispatch); safecall;
    function Get_SkippedItemArray: OleVariant; safecall;
    procedure Set_SkippedItemArray(ArrayOut: OleVariant); safecall;
    function GetSkippedItemCount: Integer; safecall;
    function IGetSkippedItemArray: Integer; safecall;
    procedure ISetSkippedItemArray(featCount: Integer; var ArrayDataIn: Integer); safecall;
    function IAccessSelections2(const topDoc: IModelDoc2; const component: IComponent2): WordBool; safecall;
    property axis: IDispatch read Get_axis write Set_axis;
    property ReverseDirection: WordBool read Get_ReverseDirection write Set_ReverseDirection;
    property spacing: Double read Get_spacing write Set_spacing;
    property TotalInstances: Integer read Get_TotalInstances write Set_TotalInstances;
    property SeedComponentArray: OleVariant read Get_SeedComponentArray write Set_SeedComponentArray;
    property SkippedItemArray: OleVariant read Get_SkippedItemArray write Set_SkippedItemArray;
  end;

// *********************************************************************//
// DispIntf:  ILocalCircularPatternFeatureDataDisp
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {F2E81434-13FB-11D5-AEDE-00C04FA0AC51}
// *********************************************************************//
  ILocalCircularPatternFeatureDataDisp = dispinterface
    ['{F2E81434-13FB-11D5-AEDE-00C04FA0AC51}']
    function AccessSelections(const topDoc: IDispatch; const component: IDispatch): WordBool; dispid 1;
    function IAccessSelections(const topDoc: IModelDoc; const component: IComponent): WordBool; dispid 2;
    procedure ReleaseSelectionAccess; dispid 3;
    property axis: IDispatch dispid 4;
    function GetAxisType: Integer; dispid 5;
    property ReverseDirection: WordBool dispid 6;
    property spacing: Double dispid 7;
    property TotalInstances: Integer dispid 8;
    property SeedComponentArray: OleVariant dispid 9;
    function GetSeedComponentCount: Integer; dispid 10;
    function IGetSeedComponentArray: IDispatch; dispid 11;
    procedure ISetSeedComponentArray(featCount: Integer; var ArrayDataIn: IDispatch); dispid 12;
    property SkippedItemArray: OleVariant dispid 13;
    function GetSkippedItemCount: Integer; dispid 14;
    function IGetSkippedItemArray: Integer; dispid 15;
    procedure ISetSkippedItemArray(featCount: Integer; var ArrayDataIn: Integer); dispid 16;
    function IAccessSelections2(const topDoc: IModelDoc2; const component: IComponent2): WordBool; dispid 17;
  end;

// *********************************************************************//
// Interface: IDerivedPatternFeatureData
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {98EADB32-141A-11D5-AEDE-00C04FA0AC51}
// *********************************************************************//
  IDerivedPatternFeatureData = interface(IDispatch)
    ['{98EADB32-141A-11D5-AEDE-00C04FA0AC51}']
    function AccessSelections(const topDoc: IDispatch; const component: IDispatch): WordBool; safecall;
    function IAccessSelections(const topDoc: IModelDoc; const component: IComponent): WordBool; safecall;
    procedure ReleaseSelectionAccess; safecall;
    function Get_PatternFeature: IDispatch; safecall;
    procedure Set_PatternFeature(const feature: IDispatch); safecall;
    function Get_SeedComponentArray: OleVariant; safecall;
    procedure Set_SeedComponentArray(ArrayOut: OleVariant); safecall;
    function GetSeedComponentCount: Integer; safecall;
    function IGetSeedComponentArray: IDispatch; safecall;
    procedure ISetSeedComponentArray(featCount: Integer; var ArrayDataIn: IDispatch); safecall;
    function Get_SkippedItemArray: OleVariant; safecall;
    procedure Set_SkippedItemArray(ArrayOut: OleVariant); safecall;
    function GetSkippedItemCount: Integer; safecall;
    function IGetSkippedItemArray: Integer; safecall;
    procedure ISetSkippedItemArray(featCount: Integer; var ArrayDataIn: Integer); safecall;
    function IAccessSelections2(const topDoc: IModelDoc2; const component: IComponent2): WordBool; safecall;
    property PatternFeature: IDispatch read Get_PatternFeature write Set_PatternFeature;
    property SeedComponentArray: OleVariant read Get_SeedComponentArray write Set_SeedComponentArray;
    property SkippedItemArray: OleVariant read Get_SkippedItemArray write Set_SkippedItemArray;
  end;

// *********************************************************************//
// DispIntf:  IDerivedPatternFeatureDataDisp
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {98EADB32-141A-11D5-AEDE-00C04FA0AC51}
// *********************************************************************//
  IDerivedPatternFeatureDataDisp = dispinterface
    ['{98EADB32-141A-11D5-AEDE-00C04FA0AC51}']
    function AccessSelections(const topDoc: IDispatch; const component: IDispatch): WordBool; dispid 1;
    function IAccessSelections(const topDoc: IModelDoc; const component: IComponent): WordBool; dispid 2;
    procedure ReleaseSelectionAccess; dispid 3;
    property PatternFeature: IDispatch dispid 4;
    property SeedComponentArray: OleVariant dispid 5;
    function GetSeedComponentCount: Integer; dispid 6;
    function IGetSeedComponentArray: IDispatch; dispid 7;
    procedure ISetSeedComponentArray(featCount: Integer; var ArrayDataIn: IDispatch); dispid 8;
    property SkippedItemArray: OleVariant dispid 9;
    function GetSkippedItemCount: Integer; dispid 10;
    function IGetSkippedItemArray: Integer; dispid 11;
    procedure ISetSkippedItemArray(featCount: Integer; var ArrayDataIn: Integer); dispid 12;
    function IAccessSelections2(const topDoc: IModelDoc2; const component: IComponent2): WordBool; dispid 13;
  end;

// *********************************************************************//
// Interface: IPropertyManagerPageLabel
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {EBBD7B58-170D-11D5-AF24-00C04F603FAF}
// *********************************************************************//
  IPropertyManagerPageLabel = interface(IDispatch)
    ['{EBBD7B58-170D-11D5-AF24-00C04F603FAF}']
    function Get_Caption: WideString; safecall;
    procedure Set_Caption(const text: WideString); safecall;
    function Get_Style: Integer; safecall;
    procedure Set_Style(Style: Integer); safecall;
    property Caption: WideString read Get_Caption write Set_Caption;
    property Style: Integer read Get_Style write Set_Style;
  end;

// *********************************************************************//
// DispIntf:  IPropertyManagerPageLabelDisp
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {EBBD7B58-170D-11D5-AF24-00C04F603FAF}
// *********************************************************************//
  IPropertyManagerPageLabelDisp = dispinterface
    ['{EBBD7B58-170D-11D5-AF24-00C04F603FAF}']
    property Caption: WideString dispid 196609;
    property Style: Integer dispid 196610;
  end;

// *********************************************************************//
// Interface: IPropertyManagerPageCheckbox
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {EBBD7B5A-170D-11D5-AF24-00C04F603FAF}
// *********************************************************************//
  IPropertyManagerPageCheckbox = interface(IDispatch)
    ['{EBBD7B5A-170D-11D5-AF24-00C04F603FAF}']
    function Get_Checked: WordBool; safecall;
    procedure Set_Checked(Checked: WordBool); safecall;
    function Get_Caption: WideString; safecall;
    procedure Set_Caption(const text: WideString); safecall;
    property Checked: WordBool read Get_Checked write Set_Checked;
    property Caption: WideString read Get_Caption write Set_Caption;
  end;

// *********************************************************************//
// DispIntf:  IPropertyManagerPageCheckboxDisp
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {EBBD7B5A-170D-11D5-AF24-00C04F603FAF}
// *********************************************************************//
  IPropertyManagerPageCheckboxDisp = dispinterface
    ['{EBBD7B5A-170D-11D5-AF24-00C04F603FAF}']
    property Checked: WordBool dispid 196609;
    property Caption: WideString dispid 196610;
  end;

// *********************************************************************//
// Interface: IPropertyManagerPageButton
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {3A66C294-17CE-11D5-AF24-00C04F603FAF}
// *********************************************************************//
  IPropertyManagerPageButton = interface(IDispatch)
    ['{3A66C294-17CE-11D5-AF24-00C04F603FAF}']
    function Get_Caption: WideString; safecall;
    procedure Set_Caption(const text: WideString); safecall;
    property Caption: WideString read Get_Caption write Set_Caption;
  end;

// *********************************************************************//
// DispIntf:  IPropertyManagerPageButtonDisp
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {3A66C294-17CE-11D5-AF24-00C04F603FAF}
// *********************************************************************//
  IPropertyManagerPageButtonDisp = dispinterface
    ['{3A66C294-17CE-11D5-AF24-00C04F603FAF}']
    property Caption: WideString dispid 196609;
  end;

// *********************************************************************//
// Interface: IPropertyManagerPageOption
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {3A66C296-17CE-11D5-AF24-00C04F603FAF}
// *********************************************************************//
  IPropertyManagerPageOption = interface(IDispatch)
    ['{3A66C296-17CE-11D5-AF24-00C04F603FAF}']
    function Get_Checked: WordBool; safecall;
    procedure Set_Checked(Checked: WordBool); safecall;
    function Get_Caption: WideString; safecall;
    procedure Set_Caption(const text: WideString); safecall;
    function Get_Style: Integer; safecall;
    procedure Set_Style(Style: Integer); safecall;
    property Checked: WordBool read Get_Checked write Set_Checked;
    property Caption: WideString read Get_Caption write Set_Caption;
    property Style: Integer read Get_Style write Set_Style;
  end;

// *********************************************************************//
// DispIntf:  IPropertyManagerPageOptionDisp
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {3A66C296-17CE-11D5-AF24-00C04F603FAF}
// *********************************************************************//
  IPropertyManagerPageOptionDisp = dispinterface
    ['{3A66C296-17CE-11D5-AF24-00C04F603FAF}']
    property Checked: WordBool dispid 196609;
    property Caption: WideString dispid 196610;
    property Style: Integer dispid 196611;
  end;

// *********************************************************************//
// Interface: IPropertyManagerPageTextbox
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {EB18A468-1800-11D5-AF24-00C04F603FAF}
// *********************************************************************//
  IPropertyManagerPageTextbox = interface(IDispatch)
    ['{EB18A468-1800-11D5-AF24-00C04F603FAF}']
    function Get_text: WideString; safecall;
    procedure Set_text(const text: WideString); safecall;
    property text: WideString read Get_text write Set_text;
  end;

// *********************************************************************//
// DispIntf:  IPropertyManagerPageTextboxDisp
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {EB18A468-1800-11D5-AF24-00C04F603FAF}
// *********************************************************************//
  IPropertyManagerPageTextboxDisp = dispinterface
    ['{EB18A468-1800-11D5-AF24-00C04F603FAF}']
    property text: WideString dispid 196609;
  end;

// *********************************************************************//
// Interface: IPropertyManagerPageCombobox
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {0BD2BA62-18C5-11D5-AF24-00C04F603FAF}
// *********************************************************************//
  IPropertyManagerPageCombobox = interface(IDispatch)
    ['{0BD2BA62-18C5-11D5-AF24-00C04F603FAF}']
    procedure AddItems(Texts: OleVariant); safecall;
    procedure IAddItems(TextCount: Smallint; var Texts: WideString); safecall;
    procedure Clear; safecall;
    function Get_CurrentSelection: Smallint; safecall;
    procedure Set_CurrentSelection(Item: Smallint); safecall;
    function Get_height: Smallint; safecall;
    procedure Set_height(height: Smallint); safecall;
    function Get_ItemText(Item: Smallint): WideString; safecall;
    function Get_Style: Integer; safecall;
    procedure Set_Style(Style: Integer); safecall;
    property CurrentSelection: Smallint read Get_CurrentSelection write Set_CurrentSelection;
    property height: Smallint read Get_height write Set_height;
    property ItemText[Item: Smallint]: WideString read Get_ItemText;
    property Style: Integer read Get_Style write Set_Style;
  end;

// *********************************************************************//
// DispIntf:  IPropertyManagerPageComboboxDisp
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {0BD2BA62-18C5-11D5-AF24-00C04F603FAF}
// *********************************************************************//
  IPropertyManagerPageComboboxDisp = dispinterface
    ['{0BD2BA62-18C5-11D5-AF24-00C04F603FAF}']
    procedure AddItems(Texts: OleVariant); dispid 196609;
    procedure IAddItems(TextCount: Smallint; var Texts: WideString); dispid 196610;
    procedure Clear; dispid 196611;
    property CurrentSelection: Smallint dispid 196612;
    property height: Smallint dispid 196613;
    property ItemText[Item: Smallint]: WideString readonly dispid 196614;
    property Style: Integer dispid 196615;
  end;

// *********************************************************************//
// Interface: IPropertyManagerPageActiveX
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {FF956369-AE71-4643-AFA8-83D7548F758A}
// *********************************************************************//
  IPropertyManagerPageActiveX = interface(IDispatch)
    ['{FF956369-AE71-4643-AFA8-83D7548F758A}']
    function Get_height: Smallint; safecall;
    procedure Set_height(height: Smallint); safecall;
    function SetClass(const ClassId: WideString; const LicenseKey: WideString): WordBool; safecall;
    function GetControl: IDispatch; safecall;
    function IGetControl: IUnknown; safecall;
    property height: Smallint read Get_height write Set_height;
  end;

// *********************************************************************//
// DispIntf:  IPropertyManagerPageActiveXDisp
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {FF956369-AE71-4643-AFA8-83D7548F758A}
// *********************************************************************//
  IPropertyManagerPageActiveXDisp = dispinterface
    ['{FF956369-AE71-4643-AFA8-83D7548F758A}']
    property height: Smallint dispid 196609;
    function SetClass(const ClassId: WideString; const LicenseKey: WideString): WordBool; dispid 196610;
    function GetControl: IDispatch; dispid 196611;
    function IGetControl: IUnknown; dispid 196612;
  end;

// *********************************************************************//
// Interface: IProjectionCurveFeatureData
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {459F4B5C-7F8C-4A7E-8AA0-FCFB6ED2D286}
// *********************************************************************//
  IProjectionCurveFeatureData = interface(IDispatch)
    ['{459F4B5C-7F8C-4A7E-8AA0-FCFB6ED2D286}']
    function AccessSelections(const topDoc: IDispatch; const component: IDispatch): WordBool; safecall;
    function IAccessSelections(const topDoc: IModelDoc; const component: IComponent): WordBool; safecall;
    procedure ReleaseSelectionAccess; safecall;
    function Get_reverse: WordBool; safecall;
    procedure Set_reverse(revDir: WordBool); safecall;
    function Get_faceArray: OleVariant; safecall;
    procedure Set_faceArray(ArrayData: OleVariant); safecall;
    function GetFaceArrayCount: Integer; safecall;
    function IGetFaceArray(faceCount: Integer): IDispatch; safecall;
    procedure ISetFaceArray(faceCount: Integer; var ArrayDataIn: IDispatch); safecall;
    function Get_sketch: IDispatch; safecall;
    procedure Set_sketch(const sketch: IDispatch); safecall;
    function IAccessSelections2(const topDoc: IModelDoc2; const component: IComponent2): WordBool; safecall;
    property reverse: WordBool read Get_reverse write Set_reverse;
    property faceArray: OleVariant read Get_faceArray write Set_faceArray;
    property sketch: IDispatch read Get_sketch write Set_sketch;
  end;

// *********************************************************************//
// DispIntf:  IProjectionCurveFeatureDataDisp
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {459F4B5C-7F8C-4A7E-8AA0-FCFB6ED2D286}
// *********************************************************************//
  IProjectionCurveFeatureDataDisp = dispinterface
    ['{459F4B5C-7F8C-4A7E-8AA0-FCFB6ED2D286}']
    function AccessSelections(const topDoc: IDispatch; const component: IDispatch): WordBool; dispid 1;
    function IAccessSelections(const topDoc: IModelDoc; const component: IComponent): WordBool; dispid 2;
    procedure ReleaseSelectionAccess; dispid 3;
    property reverse: WordBool dispid 4;
    property faceArray: OleVariant dispid 5;
    function GetFaceArrayCount: Integer; dispid 6;
    function IGetFaceArray(faceCount: Integer): IDispatch; dispid 7;
    procedure ISetFaceArray(faceCount: Integer; var ArrayDataIn: IDispatch); dispid 8;
    property sketch: IDispatch dispid 9;
    function IAccessSelections2(const topDoc: IModelDoc2; const component: IComponent2): WordBool; dispid 10;
  end;

// *********************************************************************//
// Interface: IScaleFeatureData
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {E7631115-F299-4852-9D37-FC9508A00BC1}
// *********************************************************************//
  IScaleFeatureData = interface(IDispatch)
    ['{E7631115-F299-4852-9D37-FC9508A00BC1}']
    procedure GetScale(out x: Double; out y: Double; out z: Double; out uniform: WordBool); safecall;
    procedure SetScale(x: Double; y: Double; z: Double; uniform: WordBool); safecall;
    function Get_ScaleX: Double; safecall;
    procedure Set_ScaleX(ScaleX: Double); safecall;
    function Get_ScaleY: Double; safecall;
    procedure Set_ScaleY(ScaleY: Double); safecall;
    function Get_ScaleZ: Double; safecall;
    procedure Set_ScaleZ(ScaleZ: Double); safecall;
    function Get_type_: Integer; safecall;
    procedure Set_type_(type_: Integer); safecall;
    function Get_isUniform: WordBool; safecall;
    procedure Set_isUniform(isUnif: WordBool); safecall;
    function Get_CoordinateSystem: IDispatch; safecall;
    procedure Set_CoordinateSystem(const refCoord: IDispatch); safecall;
    function IAccessSelections(const topDoc: IModelDoc2; const component: IComponent2): WordBool; safecall;
    function AccessSelections(const topDoc: IDispatch; const component: IDispatch): WordBool; safecall;
    procedure ReleaseSelectionAccess; safecall;
    function GetBodiesCount: Integer; safecall;
    function Get_Bodies: OleVariant; safecall;
    procedure Set_Bodies(bodyVar: OleVariant); safecall;
    function IGetBodies(count: Integer): IBody2; safecall;
    procedure ISetBodies(count: Integer; var bodyArr: IBody2); safecall;
    property ScaleX: Double read Get_ScaleX write Set_ScaleX;
    property ScaleY: Double read Get_ScaleY write Set_ScaleY;
    property ScaleZ: Double read Get_ScaleZ write Set_ScaleZ;
    property type_: Integer read Get_type_ write Set_type_;
    property isUniform: WordBool read Get_isUniform write Set_isUniform;
    property CoordinateSystem: IDispatch read Get_CoordinateSystem write Set_CoordinateSystem;
    property Bodies: OleVariant read Get_Bodies write Set_Bodies;
  end;

// *********************************************************************//
// DispIntf:  IScaleFeatureDataDisp
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {E7631115-F299-4852-9D37-FC9508A00BC1}
// *********************************************************************//
  IScaleFeatureDataDisp = dispinterface
    ['{E7631115-F299-4852-9D37-FC9508A00BC1}']
    procedure GetScale(out x: Double; out y: Double; out z: Double; out uniform: WordBool); dispid 1;
    procedure SetScale(x: Double; y: Double; z: Double; uniform: WordBool); dispid 2;
    property ScaleX: Double dispid 3;
    property ScaleY: Double dispid 4;
    property ScaleZ: Double dispid 5;
    property type_: Integer dispid 6;
    property isUniform: WordBool dispid 7;
    property CoordinateSystem: IDispatch dispid 8;
    function IAccessSelections(const topDoc: IModelDoc2; const component: IComponent2): WordBool; dispid 9;
    function AccessSelections(const topDoc: IDispatch; const component: IDispatch): WordBool; dispid 10;
    procedure ReleaseSelectionAccess; dispid 11;
    function GetBodiesCount: Integer; dispid 12;
    property Bodies: OleVariant dispid 13;
    function IGetBodies(count: Integer): IBody2; dispid 14;
    procedure ISetBodies(count: Integer; var bodyArr: IBody2); dispid 15;
  end;

// *********************************************************************//
// Interface: IShellFeatureData
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {58252A5A-82AF-49EF-A2FE-E8C995132F84}
// *********************************************************************//
  IShellFeatureData = interface(IDispatch)
    ['{58252A5A-82AF-49EF-A2FE-E8C995132F84}']
    function IAccessSelections(const topDoc: IModelDoc2; const component: IComponent2): WordBool; safecall;
    function AccessSelections(const topDoc: IDispatch; const component: IDispatch): WordBool; safecall;
    procedure ReleaseSelectionAccess; safecall;
    function Get_thickness: Double; safecall;
    procedure Set_thickness(thickness: Double); safecall;
    function Get_direction: Integer; safecall;
    procedure Set_direction(direction: Integer); safecall;
    function Get_FacesRemovedCount: Integer; safecall;
    function IGetFacesRemoved(count: SYSINT): IDispatch; safecall;
    procedure ISetFacesRemoved(count: Integer; var faceArray: IDispatch); safecall;
    function Get_FacesRemoved: OleVariant; safecall;
    procedure Set_FacesRemoved(faceArray: OleVariant); safecall;
    function GetMultipleThicknessFacesCount: Integer; safecall;
    function IGetMultipleThicknessFaces(count: SYSINT): IDispatch; safecall;
    procedure ISetMultipleThicknessFaces(count: Integer; var faceArray: IDispatch); safecall;
    function Get_MultipleThicknessFaces: OleVariant; safecall;
    procedure Set_MultipleThicknessFaces(faceArray: OleVariant); safecall;
    function GetMultipleThicknessAtIndex(index: SYSINT): Double; safecall;
    procedure SetMultipleThicknessAtIndex(index: SYSINT; thickness: Double); safecall;
    property thickness: Double read Get_thickness write Set_thickness;
    property direction: Integer read Get_direction write Set_direction;
    property FacesRemovedCount: Integer read Get_FacesRemovedCount;
    property FacesRemoved: OleVariant read Get_FacesRemoved write Set_FacesRemoved;
    property MultipleThicknessFaces: OleVariant read Get_MultipleThicknessFaces write Set_MultipleThicknessFaces;
  end;

// *********************************************************************//
// DispIntf:  IShellFeatureDataDisp
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {58252A5A-82AF-49EF-A2FE-E8C995132F84}
// *********************************************************************//
  IShellFeatureDataDisp = dispinterface
    ['{58252A5A-82AF-49EF-A2FE-E8C995132F84}']
    function IAccessSelections(const topDoc: IModelDoc2; const component: IComponent2): WordBool; dispid 1;
    function AccessSelections(const topDoc: IDispatch; const component: IDispatch): WordBool; dispid 2;
    procedure ReleaseSelectionAccess; dispid 3;
    property thickness: Double dispid 4;
    property direction: Integer dispid 5;
    property FacesRemovedCount: Integer readonly dispid 6;
    function IGetFacesRemoved(count: SYSINT): IDispatch; dispid 7;
    procedure ISetFacesRemoved(count: Integer; var faceArray: IDispatch); dispid 8;
    property FacesRemoved: OleVariant dispid 9;
    function GetMultipleThicknessFacesCount: Integer; dispid 10;
    function IGetMultipleThicknessFaces(count: SYSINT): IDispatch; dispid 11;
    procedure ISetMultipleThicknessFaces(count: Integer; var faceArray: IDispatch); dispid 12;
    property MultipleThicknessFaces: OleVariant dispid 13;
    function GetMultipleThicknessAtIndex(index: SYSINT): Double; dispid 14;
    procedure SetMultipleThicknessAtIndex(index: SYSINT; thickness: Double); dispid 15;
  end;

// *********************************************************************//
// Interface: ISweepFeatureData
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {07799F9D-7E4F-40DE-87AE-AEBAABA6A3BC}
// *********************************************************************//
  ISweepFeatureData = interface(IDispatch)
    ['{07799F9D-7E4F-40DE-87AE-AEBAABA6A3BC}']
    function IAccessSelections(const topDoc: IModelDoc2; const component: IComponent2): WordBool; safecall;
    function AccessSelections(const topDoc: IDispatch; const component: IDispatch): WordBool; safecall;
    procedure ReleaseSelectionAccess; safecall;
    function Get_Profile: IDispatch; safecall;
    procedure Set_Profile(const pDisp: IDispatch); safecall;
    function Get_Path: IDispatch; safecall;
    procedure Set_Path(const pDisp: IDispatch); safecall;
    function Get_TwistControlType: Smallint; safecall;
    procedure Set_TwistControlType(twistType: Smallint); safecall;
    function Get_MaintainTangency: WordBool; safecall;
    procedure Set_MaintainTangency(tangency: WordBool); safecall;
    function Get_AdvancedSmoothing: WordBool; safecall;
    procedure Set_AdvancedSmoothing(smoothing: WordBool); safecall;
    function Get_AlignWithEndFaces: WordBool; safecall;
    procedure Set_AlignWithEndFaces(alignEndFaces: WordBool); safecall;
    function IGetGuideCurves(count: Smallint): IDispatch; safecall;
    procedure ISetGuideCurves(count: Smallint; var pDisp: IDispatch); safecall;
    function Get_GuideCurves: OleVariant; safecall;
    procedure Set_GuideCurves(ArrayIn: OleVariant); safecall;
    function Get_StartTangencyType: Smallint; safecall;
    procedure Set_StartTangencyType(tangencyType: Smallint); safecall;
    function Get_EndTangencyType: Smallint; safecall;
    procedure Set_EndTangencyType(tangencyType: Smallint); safecall;
    function IsThinFeature: WordBool; safecall;
    function Get_ThinWallType: Smallint; safecall;
    procedure Set_ThinWallType(thinType: Smallint); safecall;
    function GetWallThickness(forward: WordBool): Double; safecall;
    procedure SetWallThickness(forward: WordBool; wallThickness: Double); safecall;
    function GetGuideCurvesCount: Smallint; safecall;
    function IsBossFeature: WordBool; safecall;
    function Get_StartDirectionVector: IDispatch; safecall;
    procedure Set_StartDirectionVector(const pDisp: IDispatch); safecall;
    function Get_EndDirectionVector: IDispatch; safecall;
    procedure Set_EndDirectionVector(const pDisp: IDispatch); safecall;
    function Get_TangentPropagation: WordBool; safecall;
    procedure Set_TangentPropagation(TangentPropagation: WordBool); safecall;
    function GetPathType: Integer; safecall;
    function GetGuideCurvesType: OleVariant; safecall;
    function IGetGuideCurvesType(count: Integer): Integer; safecall;
    function Get_merge: WordBool; safecall;
    procedure Set_merge(merge: WordBool); safecall;
    function Get_FeatureScope: WordBool; safecall;
    procedure Set_FeatureScope(featScope: WordBool); safecall;
    function Get_AutoSelect: WordBool; safecall;
    procedure Set_AutoSelect(autoSel: WordBool); safecall;
    function Get_FeatureScopeBodies: OleVariant; safecall;
    procedure Set_FeatureScopeBodies(bodyVar: OleVariant); safecall;
    function GetFeatureScopeBodiesCount: Integer; safecall;
    function IGetFeatureScopeBodies(count: Integer): IBody2; safecall;
    procedure ISetFeatureScopeBodies(count: Integer; var bodyArr: IBody2); safecall;
    function Get_MergeSmoothFaces: WordBool; safecall;
    procedure Set_MergeSmoothFaces(bMerge: WordBool); safecall;
    property Profile: IDispatch read Get_Profile write Set_Profile;
    property Path: IDispatch read Get_Path write Set_Path;
    property TwistControlType: Smallint read Get_TwistControlType write Set_TwistControlType;
    property MaintainTangency: WordBool read Get_MaintainTangency write Set_MaintainTangency;
    property AdvancedSmoothing: WordBool read Get_AdvancedSmoothing write Set_AdvancedSmoothing;
    property AlignWithEndFaces: WordBool read Get_AlignWithEndFaces write Set_AlignWithEndFaces;
    property GuideCurves: OleVariant read Get_GuideCurves write Set_GuideCurves;
    property StartTangencyType: Smallint read Get_StartTangencyType write Set_StartTangencyType;
    property EndTangencyType: Smallint read Get_EndTangencyType write Set_EndTangencyType;
    property ThinWallType: Smallint read Get_ThinWallType write Set_ThinWallType;
    property StartDirectionVector: IDispatch read Get_StartDirectionVector write Set_StartDirectionVector;
    property EndDirectionVector: IDispatch read Get_EndDirectionVector write Set_EndDirectionVector;
    property TangentPropagation: WordBool read Get_TangentPropagation write Set_TangentPropagation;
    property merge: WordBool read Get_merge write Set_merge;
    property FeatureScope: WordBool read Get_FeatureScope write Set_FeatureScope;
    property AutoSelect: WordBool read Get_AutoSelect write Set_AutoSelect;
    property FeatureScopeBodies: OleVariant read Get_FeatureScopeBodies write Set_FeatureScopeBodies;
    property MergeSmoothFaces: WordBool read Get_MergeSmoothFaces write Set_MergeSmoothFaces;
  end;

// *********************************************************************//
// DispIntf:  ISweepFeatureDataDisp
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {07799F9D-7E4F-40DE-87AE-AEBAABA6A3BC}
// *********************************************************************//
  ISweepFeatureDataDisp = dispinterface
    ['{07799F9D-7E4F-40DE-87AE-AEBAABA6A3BC}']
    function IAccessSelections(const topDoc: IModelDoc2; const component: IComponent2): WordBool; dispid 1;
    function AccessSelections(const topDoc: IDispatch; const component: IDispatch): WordBool; dispid 2;
    procedure ReleaseSelectionAccess; dispid 3;
    property Profile: IDispatch dispid 4;
    property Path: IDispatch dispid 5;
    property TwistControlType: Smallint dispid 6;
    property MaintainTangency: WordBool dispid 7;
    property AdvancedSmoothing: WordBool dispid 8;
    property AlignWithEndFaces: WordBool dispid 9;
    function IGetGuideCurves(count: Smallint): IDispatch; dispid 10;
    procedure ISetGuideCurves(count: Smallint; var pDisp: IDispatch); dispid 11;
    property GuideCurves: OleVariant dispid 12;
    property StartTangencyType: Smallint dispid 13;
    property EndTangencyType: Smallint dispid 14;
    function IsThinFeature: WordBool; dispid 15;
    property ThinWallType: Smallint dispid 16;
    function GetWallThickness(forward: WordBool): Double; dispid 17;
    procedure SetWallThickness(forward: WordBool; wallThickness: Double); dispid 18;
    function GetGuideCurvesCount: Smallint; dispid 19;
    function IsBossFeature: WordBool; dispid 20;
    property StartDirectionVector: IDispatch dispid 21;
    property EndDirectionVector: IDispatch dispid 22;
    property TangentPropagation: WordBool dispid 23;
    function GetPathType: Integer; dispid 24;
    function GetGuideCurvesType: OleVariant; dispid 25;
    function IGetGuideCurvesType(count: Integer): Integer; dispid 26;
    property merge: WordBool dispid 27;
    property FeatureScope: WordBool dispid 28;
    property AutoSelect: WordBool dispid 29;
    property FeatureScopeBodies: OleVariant dispid 30;
    function GetFeatureScopeBodiesCount: Integer; dispid 31;
    function IGetFeatureScopeBodies(count: Integer): IBody2; dispid 32;
    procedure ISetFeatureScopeBodies(count: Integer; var bodyArr: IBody2); dispid 33;
    property MergeSmoothFaces: WordBool dispid 34;
  end;

// *********************************************************************//
// Interface: ILoftFeatureData
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {EE8D87FE-5202-45E9-8E5C-91084C134168}
// *********************************************************************//
  ILoftFeatureData = interface(IDispatch)
    ['{EE8D87FE-5202-45E9-8E5C-91084C134168}']
    function IAccessSelections(const topDoc: IModelDoc2; const component: IComponent2): WordBool; safecall;
    function AccessSelections(const topDoc: IDispatch; const component: IDispatch): WordBool; safecall;
    procedure ReleaseSelectionAccess; safecall;
    function GetProfileCount: Smallint; safecall;
    function IGetProfiles(count: Smallint): IDispatch; safecall;
    procedure ISetProfiles(count: Smallint; var pDisp: IDispatch); safecall;
    function Get_Profiles: OleVariant; safecall;
    procedure Set_Profiles(pDisp: OleVariant); safecall;
    function GetGuideTangencyType(guideIndex: Smallint): Smallint; safecall;
    procedure SetGuideTangencyType(guideIndex: Smallint; tangType: Smallint); safecall;
    function Get_MaintainTangency: WordBool; safecall;
    procedure Set_MaintainTangency(tangency: WordBool); safecall;
    function Get_AdvancedSmoothing: WordBool; safecall;
    procedure Set_AdvancedSmoothing(smoothing: WordBool); safecall;
    function Get_Close: WordBool; safecall;
    procedure Set_Close(isClosed: WordBool); safecall;
    function GetGuideCurvesCount: Smallint; safecall;
    function IGetGuideCurves(count: Smallint): IDispatch; safecall;
    procedure ISetGuideCurves(count: Smallint; var pDisp: IDispatch); safecall;
    function Get_GuideCurves: OleVariant; safecall;
    procedure Set_GuideCurves(ArrayIn: OleVariant); safecall;
    function Get_StartTangencyType: Smallint; safecall;
    procedure Set_StartTangencyType(tangencyType: Smallint); safecall;
    function Get_EndTangencyType: Smallint; safecall;
    procedure Set_EndTangencyType(tangencyType: Smallint); safecall;
    function IsThinFeature: WordBool; safecall;
    function Get_ThinWallType: Smallint; safecall;
    procedure Set_ThinWallType(thinType: Smallint); safecall;
    function GetWallThickness(forward: WordBool): Double; safecall;
    procedure SetWallThickness(forward: WordBool; wallThickness: Double); safecall;
    function IsBossFeature: WordBool; safecall;
    function Get_StartDirectionVector: IDispatch; safecall;
    procedure Set_StartDirectionVector(const pDisp: IDispatch); safecall;
    function Get_startTangentLength: Double; safecall;
    procedure Set_startTangentLength(length: Double); safecall;
    function Get_ReverseStartTangentDirection: WordBool; safecall;
    procedure Set_ReverseStartTangentDirection(direction: WordBool); safecall;
    function Get_EndDirectionVector: IDispatch; safecall;
    procedure Set_EndDirectionVector(const pDisp: IDispatch); safecall;
    function Get_endTangentLength: Double; safecall;
    procedure Set_endTangentLength(length: Double); safecall;
    function Get_ReverseEndTangentDirection: WordBool; safecall;
    procedure Set_ReverseEndTangentDirection(direction: WordBool); safecall;
    function Get_CenterLine: IDispatch; safecall;
    procedure Set_CenterLine(const pDisp: IDispatch); safecall;
    function GetGuideCurvesType: OleVariant; safecall;
    function IGetGuideCurvesType(count: Integer): Integer; safecall;
    function Get_merge: WordBool; safecall;
    procedure Set_merge(isMerge: WordBool); safecall;
    function Get_FeatureScope: WordBool; safecall;
    procedure Set_FeatureScope(featScope: WordBool); safecall;
    function Get_AutoSelect: WordBool; safecall;
    procedure Set_AutoSelect(autoSel: WordBool); safecall;
    function Get_FeatureScopeBodies: OleVariant; safecall;
    procedure Set_FeatureScopeBodies(bodyVar: OleVariant); safecall;
    function GetFeatureScopeBodiesCount: Integer; safecall;
    function IGetFeatureScopeBodies(count: Integer): IBody2; safecall;
    procedure ISetFeatureScopeBodies(count: Integer; var bodyArr: IBody2); safecall;
    function Get_NumberOfSections: Double; safecall;
    procedure Set_NumberOfSections(num: Double); safecall;
    property Profiles: OleVariant read Get_Profiles write Set_Profiles;
    property MaintainTangency: WordBool read Get_MaintainTangency write Set_MaintainTangency;
    property AdvancedSmoothing: WordBool read Get_AdvancedSmoothing write Set_AdvancedSmoothing;
    property Close: WordBool read Get_Close write Set_Close;
    property GuideCurves: OleVariant read Get_GuideCurves write Set_GuideCurves;
    property StartTangencyType: Smallint read Get_StartTangencyType write Set_StartTangencyType;
    property EndTangencyType: Smallint read Get_EndTangencyType write Set_EndTangencyType;
    property ThinWallType: Smallint read Get_ThinWallType write Set_ThinWallType;
    property StartDirectionVector: IDispatch read Get_StartDirectionVector write Set_StartDirectionVector;
    property startTangentLength: Double read Get_startTangentLength write Set_startTangentLength;
    property ReverseStartTangentDirection: WordBool read Get_ReverseStartTangentDirection write Set_ReverseStartTangentDirection;
    property EndDirectionVector: IDispatch read Get_EndDirectionVector write Set_EndDirectionVector;
    property endTangentLength: Double read Get_endTangentLength write Set_endTangentLength;
    property ReverseEndTangentDirection: WordBool read Get_ReverseEndTangentDirection write Set_ReverseEndTangentDirection;
    property CenterLine: IDispatch read Get_CenterLine write Set_CenterLine;
    property merge: WordBool read Get_merge write Set_merge;
    property FeatureScope: WordBool read Get_FeatureScope write Set_FeatureScope;
    property AutoSelect: WordBool read Get_AutoSelect write Set_AutoSelect;
    property FeatureScopeBodies: OleVariant read Get_FeatureScopeBodies write Set_FeatureScopeBodies;
    property NumberOfSections: Double read Get_NumberOfSections write Set_NumberOfSections;
  end;

// *********************************************************************//
// DispIntf:  ILoftFeatureDataDisp
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {EE8D87FE-5202-45E9-8E5C-91084C134168}
// *********************************************************************//
  ILoftFeatureDataDisp = dispinterface
    ['{EE8D87FE-5202-45E9-8E5C-91084C134168}']
    function IAccessSelections(const topDoc: IModelDoc2; const component: IComponent2): WordBool; dispid 1;
    function AccessSelections(const topDoc: IDispatch; const component: IDispatch): WordBool; dispid 2;
    procedure ReleaseSelectionAccess; dispid 3;
    function GetProfileCount: Smallint; dispid 4;
    function IGetProfiles(count: Smallint): IDispatch; dispid 5;
    procedure ISetProfiles(count: Smallint; var pDisp: IDispatch); dispid 6;
    property Profiles: OleVariant dispid 7;
    function GetGuideTangencyType(guideIndex: Smallint): Smallint; dispid 8;
    procedure SetGuideTangencyType(guideIndex: Smallint; tangType: Smallint); dispid 9;
    property MaintainTangency: WordBool dispid 10;
    property AdvancedSmoothing: WordBool dispid 11;
    property Close: WordBool dispid 12;
    function GetGuideCurvesCount: Smallint; dispid 13;
    function IGetGuideCurves(count: Smallint): IDispatch; dispid 14;
    procedure ISetGuideCurves(count: Smallint; var pDisp: IDispatch); dispid 15;
    property GuideCurves: OleVariant dispid 16;
    property StartTangencyType: Smallint dispid 17;
    property EndTangencyType: Smallint dispid 18;
    function IsThinFeature: WordBool; dispid 19;
    property ThinWallType: Smallint dispid 20;
    function GetWallThickness(forward: WordBool): Double; dispid 21;
    procedure SetWallThickness(forward: WordBool; wallThickness: Double); dispid 22;
    function IsBossFeature: WordBool; dispid 23;
    property StartDirectionVector: IDispatch dispid 24;
    property startTangentLength: Double dispid 25;
    property ReverseStartTangentDirection: WordBool dispid 26;
    property EndDirectionVector: IDispatch dispid 27;
    property endTangentLength: Double dispid 28;
    property ReverseEndTangentDirection: WordBool dispid 29;
    property CenterLine: IDispatch dispid 30;
    function GetGuideCurvesType: OleVariant; dispid 31;
    function IGetGuideCurvesType(count: Integer): Integer; dispid 32;
    property merge: WordBool dispid 33;
    property FeatureScope: WordBool dispid 34;
    property AutoSelect: WordBool dispid 35;
    property FeatureScopeBodies: OleVariant dispid 36;
    function GetFeatureScopeBodiesCount: Integer; dispid 37;
    function IGetFeatureScopeBodies(count: Integer): IBody2; dispid 38;
    procedure ISetFeatureScopeBodies(count: Integer; var bodyArr: IBody2); dispid 39;
    property NumberOfSections: Double dispid 40;
  end;

// *********************************************************************//
// Interface: IThickenFeatureData
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {85F4DD78-9430-4937-8504-55D24F2CEE41}
// *********************************************************************//
  IThickenFeatureData = interface(IDispatch)
    ['{85F4DD78-9430-4937-8504-55D24F2CEE41}']
    function IAccessSelections(const topDoc: IModelDoc2; const component: IComponent2): WordBool; safecall;
    function AccessSelections(const topDoc: IDispatch; const component: IDispatch): WordBool; safecall;
    procedure ReleaseSelectionAccess; safecall;
    function Get_surface: IDispatch; safecall;
    procedure Set_surface(const pDispSurf: IDispatch); safecall;
    function Get_thickness: Double; safecall;
    procedure Set_thickness(thickness: Double); safecall;
    function Get_ThicknessSide: Smallint; safecall;
    procedure Set_ThicknessSide(side: Smallint); safecall;
    function Get_fillVolume: WordBool; safecall;
    procedure Set_fillVolume(isFill: WordBool); safecall;
    function Get_merge: WordBool; safecall;
    procedure Set_merge(isMerge: WordBool); safecall;
    function Get_FeatureScope: WordBool; safecall;
    procedure Set_FeatureScope(featScope: WordBool); safecall;
    function Get_AutoSelect: WordBool; safecall;
    procedure Set_AutoSelect(autoSel: WordBool); safecall;
    function Get_FeatureScopeBodies: OleVariant; safecall;
    procedure Set_FeatureScopeBodies(bodyVar: OleVariant); safecall;
    function GetFeatureScopeBodiesCount: Integer; safecall;
    function IGetFeatureScopeBodies(count: Integer): IBody2; safecall;
    procedure ISetFeatureScopeBodies(count: Integer; var bodyArr: IBody2); safecall;
    property surface: IDispatch read Get_surface write Set_surface;
    property thickness: Double read Get_thickness write Set_thickness;
    property ThicknessSide: Smallint read Get_ThicknessSide write Set_ThicknessSide;
    property fillVolume: WordBool read Get_fillVolume write Set_fillVolume;
    property merge: WordBool read Get_merge write Set_merge;
    property FeatureScope: WordBool read Get_FeatureScope write Set_FeatureScope;
    property AutoSelect: WordBool read Get_AutoSelect write Set_AutoSelect;
    property FeatureScopeBodies: OleVariant read Get_FeatureScopeBodies write Set_FeatureScopeBodies;
  end;

// *********************************************************************//
// DispIntf:  IThickenFeatureDataDisp
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {85F4DD78-9430-4937-8504-55D24F2CEE41}
// *********************************************************************//
  IThickenFeatureDataDisp = dispinterface
    ['{85F4DD78-9430-4937-8504-55D24F2CEE41}']
    function IAccessSelections(const topDoc: IModelDoc2; const component: IComponent2): WordBool; dispid 1;
    function AccessSelections(const topDoc: IDispatch; const component: IDispatch): WordBool; dispid 2;
    procedure ReleaseSelectionAccess; dispid 3;
    property surface: IDispatch dispid 4;
    property thickness: Double dispid 5;
    property ThicknessSide: Smallint dispid 6;
    property fillVolume: WordBool dispid 7;
    property merge: WordBool dispid 8;
    property FeatureScope: WordBool dispid 9;
    property AutoSelect: WordBool dispid 10;
    property FeatureScopeBodies: OleVariant dispid 11;
    function GetFeatureScopeBodiesCount: Integer; dispid 12;
    function IGetFeatureScopeBodies(count: Integer): IBody2; dispid 13;
    procedure ISetFeatureScopeBodies(count: Integer; var bodyArr: IBody2); dispid 14;
  end;

// *********************************************************************//
// Interface: ISurfaceCutFeatureData
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {DFB6C63B-287C-4141-A610-08D94CECE976}
// *********************************************************************//
  ISurfaceCutFeatureData = interface(IDispatch)
    ['{DFB6C63B-287C-4141-A610-08D94CECE976}']
    function IAccessSelections(const topDoc: IModelDoc2; const component: IComponent2): WordBool; safecall;
    function AccessSelections(const topDoc: IDispatch; const component: IDispatch): WordBool; safecall;
    procedure ReleaseSelectionAccess; safecall;
    function Get_SurfaceForCut: IDispatch; safecall;
    procedure Set_SurfaceForCut(const surfDisp: IDispatch); safecall;
    function Get_flip: WordBool; safecall;
    procedure Set_flip(flip: WordBool); safecall;
    function GetBodyIndexKept: Smallint; safecall;
    property SurfaceForCut: IDispatch read Get_SurfaceForCut write Set_SurfaceForCut;
    property flip: WordBool read Get_flip write Set_flip;
  end;

// *********************************************************************//
// DispIntf:  ISurfaceCutFeatureDataDisp
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {DFB6C63B-287C-4141-A610-08D94CECE976}
// *********************************************************************//
  ISurfaceCutFeatureDataDisp = dispinterface
    ['{DFB6C63B-287C-4141-A610-08D94CECE976}']
    function IAccessSelections(const topDoc: IModelDoc2; const component: IComponent2): WordBool; dispid 1;
    function AccessSelections(const topDoc: IDispatch; const component: IDispatch): WordBool; dispid 2;
    procedure ReleaseSelectionAccess; dispid 3;
    property SurfaceForCut: IDispatch dispid 4;
    property flip: WordBool dispid 5;
    function GetBodyIndexKept: Smallint; dispid 6;
  end;

// *********************************************************************//
// Interface: IReplaceFaceFeatureData
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {D7792E79-5983-45C7-AE7D-966FCB6604D8}
// *********************************************************************//
  IReplaceFaceFeatureData = interface(IDispatch)
    ['{D7792E79-5983-45C7-AE7D-966FCB6604D8}']
    function IAccessSelections(const topDoc: IModelDoc2; const component: IComponent2): WordBool; safecall;
    function AccessSelections(const topDoc: IDispatch; const component: IDispatch): WordBool; safecall;
    procedure ReleaseSelectionAccess; safecall;
    function GetReplacementSurfacesCount: Integer; safecall;
    function IGetReplacementSurfaces(count: Integer): IFeature; safecall;
    procedure ISetReplacementSurfaces(count: Integer; var surfDisp: IFeature); safecall;
    function Get_ReplacementSurfaces: OleVariant; safecall;
    procedure Set_ReplacementSurfaces(surfDisp: OleVariant); safecall;
    function GetFacesForReplacementCount: Integer; safecall;
    function IGetFacesForReplacement(count: Integer): IFace2; safecall;
    procedure ISetFacesForReplacement(count: Integer; var surfDisp: IFace2); safecall;
    function Get_FacesForReplacement: OleVariant; safecall;
    procedure Set_FacesForReplacement(surfDisp: OleVariant); safecall;
    property ReplacementSurfaces: OleVariant read Get_ReplacementSurfaces write Set_ReplacementSurfaces;
    property FacesForReplacement: OleVariant read Get_FacesForReplacement write Set_FacesForReplacement;
  end;

// *********************************************************************//
// DispIntf:  IReplaceFaceFeatureDataDisp
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {D7792E79-5983-45C7-AE7D-966FCB6604D8}
// *********************************************************************//
  IReplaceFaceFeatureDataDisp = dispinterface
    ['{D7792E79-5983-45C7-AE7D-966FCB6604D8}']
    function IAccessSelections(const topDoc: IModelDoc2; const component: IComponent2): WordBool; dispid 1;
    function AccessSelections(const topDoc: IDispatch; const component: IDispatch): WordBool; dispid 2;
    procedure ReleaseSelectionAccess; dispid 3;
    function GetReplacementSurfacesCount: Integer; dispid 4;
    function IGetReplacementSurfaces(count: Integer): IFeature; dispid 5;
    procedure ISetReplacementSurfaces(count: Integer; var surfDisp: IFeature); dispid 6;
    property ReplacementSurfaces: OleVariant dispid 7;
    function GetFacesForReplacementCount: Integer; dispid 8;
    function IGetFacesForReplacement(count: Integer): IFace2; dispid 9;
    procedure ISetFacesForReplacement(count: Integer; var surfDisp: IFace2); dispid 10;
    property FacesForReplacement: OleVariant dispid 11;
  end;

// *********************************************************************//
// Interface: IMacroFeatureData
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {739AC7CE-9017-11D5-AF07-0002B34143E5}
// *********************************************************************//
  IMacroFeatureData = interface(IDispatch)
    ['{739AC7CE-9017-11D5-AF07-0002B34143E5}']
    function AccessSelections(const topDoc: IDispatch; const component: IDispatch): WordBool; safecall;
    function IAccessSelections(const topDoc: IModelDoc2; const component: IComponent2): WordBool; safecall;
    procedure ReleaseSelectionAccess; safecall;
    function Get_MacroFileName: WideString; safecall;
    procedure Set_MacroFileName(const fileName: WideString); safecall;
    function Get_moduleName: WideString; safecall;
    procedure Set_moduleName(const moduleName: WideString); safecall;
    function Get_procedureName: WideString; safecall;
    procedure Set_procedureName(const procedureName: WideString); safecall;
    function GetModuleNames: OleVariant; safecall;
    function GetModuleCount: Integer; safecall;
    procedure IGetModuleNames(moduleCount: Integer; out moduleNames: WideString); safecall;
    function GetProcedureNames(const moduleName: WideString): OleVariant; safecall;
    function GetProcedureCount(const moduleName: WideString): Integer; safecall;
    procedure IGetProcedureNames(const moduleName: WideString; procedureCount: Integer; 
                                 out procedureNames: WideString); safecall;
    function Get_PropertyManagerHandleMacroFileName: WideString; safecall;
    procedure Set_PropertyManagerHandleMacroFileName(const fileName: WideString); safecall;
    function Get_PropertyManagerHandleModuleName: WideString; safecall;
    procedure Set_PropertyManagerHandleModuleName(const moduleName: WideString); safecall;
    function Get_PropertyManagerHandleProcedureName: WideString; safecall;
    procedure Set_PropertyManagerHandleProcedureName(const procedureName: WideString); safecall;
    function GetPropertyManagerHandleModuleNames: OleVariant; safecall;
    function GetPropertyManagerHandleModuleCount: Integer; safecall;
    procedure IGetPropertyManagerHandleModuleNames(moduleCount: Integer; out moduleNames: WideString); safecall;
    function GetPropertyManagerHandleProcedureNames(const moduleName: WideString): OleVariant; safecall;
    function GetPropertyManagerHandleProcedureCount(const moduleName: WideString): Integer; safecall;
    procedure IGetPropertyManagerHandleProcedureNames(const moduleName: WideString; 
                                                      procedureCount: Integer; 
                                                      out procedureNames: WideString); safecall;
    procedure GetSelections(out objects: OleVariant; out objectTypes: OleVariant; 
                            out selMarks: OleVariant); safecall;
    procedure SetSelections(objects: OleVariant; selMarks: OleVariant); safecall;
    function GetSelectionCount: Integer; safecall;
    procedure IGetSelections(selCount: Integer; out objects: IDispatch; out objectTypes: Integer; 
                             out selMarks: Integer); safecall;
    procedure ISetSelections(selCount: Integer; var objects: IDispatch; var selMarks: Integer); safecall;
    procedure GetParameters(out paramNames: OleVariant; out paramTypes: OleVariant; 
                            out paramValues: OleVariant); safecall;
    procedure SetParameters(paramNames: OleVariant; paramTypes: OleVariant; paramValues: OleVariant); safecall;
    function GetParameterCount: Integer; safecall;
    procedure IGetParameters(paramCount: Integer; out paramNames: WideString; 
                             out paramTypes: Integer; out paramValues: WideString); safecall;
    procedure ISetParameters(paramCount: Integer; var paramNames: WideString; 
                             var paramTypes: Integer; var paramValues: WideString); safecall;
    procedure GetIntegerByName(const paramName: WideString; out paramValue: Integer); safecall;
    procedure SetIntegerByName(const paramName: WideString; paramValue: Integer); safecall;
    procedure GetDoubleByName(const paramName: WideString; out paramValue: Double); safecall;
    procedure SetDoubleByName(const paramName: WideString; paramValue: Double); safecall;
    procedure GetStringByName(const paramName: WideString; out paramValue: WideString); safecall;
    procedure SetStringByName(const paramName: WideString; const paramValue: WideString); safecall;
    function Get_editBody: IBody2; safecall;
    procedure Set_editBody(const editBody: IBody2); safecall;
    function GetFaceUserId(const face: IFace2; out id1: Integer; out id2: Integer): WordBool; safecall;
    function SetFaceUserId(const face: IFace2; id1: Integer; id2: Integer): WordBool; safecall;
    function GetEdgeUserId(const Edge: IEdge; out id1: Integer; out id2: Integer): WordBool; safecall;
    function SetEdgeUserId(const Edge: IEdge; id1: Integer; id2: Integer): WordBool; safecall;
    procedure GetSelections2(out objects: OleVariant; out objectTypes: OleVariant; 
                             out selMarks: OleVariant; out drViews: OleVariant); safecall;
    procedure SetSelections2(objects: OleVariant; selMarks: OleVariant; drViews: OleVariant); safecall;
    procedure IGetSelections2(selCount: Integer; out objects: IDispatch; out objectTypes: Integer; 
                              out selMarks: Integer; out drViews: IView); safecall;
    procedure ISetSelections2(selCount: Integer; var objects: IDispatch; var selMarks: Integer; 
                              var drViews: IView); safecall;
    function GetFaceIdType(const face: IFace2): Integer; safecall;
    function GetEdgeIdType(const Edge: IEdge): Integer; safecall;
    procedure GetEntitiesNeedUserId(const Body: IDispatch; out faces: OleVariant; 
                                    out edges: OleVariant); safecall;
    procedure GetEntitiesNeedUserIdCount(const Body: IBody2; out faceCount: Integer; 
                                         out edgeCount: Integer); safecall;
    procedure IGetEntitiesNeedUserId(const Body: IBody2; faceCount: Integer; out faces: IFace2; 
                                     edgeCount: Integer; out edges: IEdge); safecall;
    function IsCOMFeature: WordBool; safecall;
    function GetProgId: WideString; safecall;
    function Get_SecurityHandleMacroFileName: WideString; safecall;
    procedure Set_SecurityHandleMacroFileName(const fileName: WideString); safecall;
    function Get_SecurityHandleModuleName: WideString; safecall;
    procedure Set_SecurityHandleModuleName(const moduleName: WideString); safecall;
    function Get_SecurityHandleProcedureName: WideString; safecall;
    procedure Set_SecurityHandleProcedureName(const procedureName: WideString); safecall;
    function GetBaseName: WideString; safecall;
    property MacroFileName: WideString read Get_MacroFileName write Set_MacroFileName;
    property moduleName: WideString read Get_moduleName write Set_moduleName;
    property procedureName: WideString read Get_procedureName write Set_procedureName;
    property PropertyManagerHandleMacroFileName: WideString read Get_PropertyManagerHandleMacroFileName write Set_PropertyManagerHandleMacroFileName;
    property PropertyManagerHandleModuleName: WideString read Get_PropertyManagerHandleModuleName write Set_PropertyManagerHandleModuleName;
    property PropertyManagerHandleProcedureName: WideString read Get_PropertyManagerHandleProcedureName write Set_PropertyManagerHandleProcedureName;
    property editBody: IBody2 read Get_editBody write Set_editBody;
    property SecurityHandleMacroFileName: WideString read Get_SecurityHandleMacroFileName write Set_SecurityHandleMacroFileName;
    property SecurityHandleModuleName: WideString read Get_SecurityHandleModuleName write Set_SecurityHandleModuleName;
    property SecurityHandleProcedureName: WideString read Get_SecurityHandleProcedureName write Set_SecurityHandleProcedureName;
  end;

// *********************************************************************//
// DispIntf:  IMacroFeatureDataDisp
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {739AC7CE-9017-11D5-AF07-0002B34143E5}
// *********************************************************************//
  IMacroFeatureDataDisp = dispinterface
    ['{739AC7CE-9017-11D5-AF07-0002B34143E5}']
    function AccessSelections(const topDoc: IDispatch; const component: IDispatch): WordBool; dispid 1;
    function IAccessSelections(const topDoc: IModelDoc2; const component: IComponent2): WordBool; dispid 2;
    procedure ReleaseSelectionAccess; dispid 3;
    property MacroFileName: WideString dispid 4;
    property moduleName: WideString dispid 5;
    property procedureName: WideString dispid 6;
    function GetModuleNames: OleVariant; dispid 7;
    function GetModuleCount: Integer; dispid 8;
    procedure IGetModuleNames(moduleCount: Integer; out moduleNames: WideString); dispid 9;
    function GetProcedureNames(const moduleName: WideString): OleVariant; dispid 10;
    function GetProcedureCount(const moduleName: WideString): Integer; dispid 11;
    procedure IGetProcedureNames(const moduleName: WideString; procedureCount: Integer; 
                                 out procedureNames: WideString); dispid 12;
    property PropertyManagerHandleMacroFileName: WideString dispid 13;
    property PropertyManagerHandleModuleName: WideString dispid 14;
    property PropertyManagerHandleProcedureName: WideString dispid 15;
    function GetPropertyManagerHandleModuleNames: OleVariant; dispid 16;
    function GetPropertyManagerHandleModuleCount: Integer; dispid 17;
    procedure IGetPropertyManagerHandleModuleNames(moduleCount: Integer; out moduleNames: WideString); dispid 18;
    function GetPropertyManagerHandleProcedureNames(const moduleName: WideString): OleVariant; dispid 19;
    function GetPropertyManagerHandleProcedureCount(const moduleName: WideString): Integer; dispid 20;
    procedure IGetPropertyManagerHandleProcedureNames(const moduleName: WideString; 
                                                      procedureCount: Integer; 
                                                      out procedureNames: WideString); dispid 21;
    procedure GetSelections(out objects: OleVariant; out objectTypes: OleVariant; 
                            out selMarks: OleVariant); dispid 22;
    procedure SetSelections(objects: OleVariant; selMarks: OleVariant); dispid 23;
    function GetSelectionCount: Integer; dispid 24;
    procedure IGetSelections(selCount: Integer; out objects: IDispatch; out objectTypes: Integer; 
                             out selMarks: Integer); dispid 25;
    procedure ISetSelections(selCount: Integer; var objects: IDispatch; var selMarks: Integer); dispid 26;
    procedure GetParameters(out paramNames: OleVariant; out paramTypes: OleVariant; 
                            out paramValues: OleVariant); dispid 27;
    procedure SetParameters(paramNames: OleVariant; paramTypes: OleVariant; paramValues: OleVariant); dispid 28;
    function GetParameterCount: Integer; dispid 29;
    procedure IGetParameters(paramCount: Integer; out paramNames: WideString; 
                             out paramTypes: Integer; out paramValues: WideString); dispid 30;
    procedure ISetParameters(paramCount: Integer; var paramNames: WideString; 
                             var paramTypes: Integer; var paramValues: WideString); dispid 31;
    procedure GetIntegerByName(const paramName: WideString; out paramValue: Integer); dispid 32;
    procedure SetIntegerByName(const paramName: WideString; paramValue: Integer); dispid 33;
    procedure GetDoubleByName(const paramName: WideString; out paramValue: Double); dispid 34;
    procedure SetDoubleByName(const paramName: WideString; paramValue: Double); dispid 35;
    procedure GetStringByName(const paramName: WideString; out paramValue: WideString); dispid 36;
    procedure SetStringByName(const paramName: WideString; const paramValue: WideString); dispid 37;
    property editBody: IBody2 dispid 38;
    function GetFaceUserId(const face: IFace2; out id1: Integer; out id2: Integer): WordBool; dispid 39;
    function SetFaceUserId(const face: IFace2; id1: Integer; id2: Integer): WordBool; dispid 40;
    function GetEdgeUserId(const Edge: IEdge; out id1: Integer; out id2: Integer): WordBool; dispid 41;
    function SetEdgeUserId(const Edge: IEdge; id1: Integer; id2: Integer): WordBool; dispid 42;
    procedure GetSelections2(out objects: OleVariant; out objectTypes: OleVariant; 
                             out selMarks: OleVariant; out drViews: OleVariant); dispid 43;
    procedure SetSelections2(objects: OleVariant; selMarks: OleVariant; drViews: OleVariant); dispid 44;
    procedure IGetSelections2(selCount: Integer; out objects: IDispatch; out objectTypes: Integer; 
                              out selMarks: Integer; out drViews: IView); dispid 45;
    procedure ISetSelections2(selCount: Integer; var objects: IDispatch; var selMarks: Integer; 
                              var drViews: IView); dispid 46;
    function GetFaceIdType(const face: IFace2): Integer; dispid 47;
    function GetEdgeIdType(const Edge: IEdge): Integer; dispid 48;
    procedure GetEntitiesNeedUserId(const Body: IDispatch; out faces: OleVariant; 
                                    out edges: OleVariant); dispid 49;
    procedure GetEntitiesNeedUserIdCount(const Body: IBody2; out faceCount: Integer; 
                                         out edgeCount: Integer); dispid 50;
    procedure IGetEntitiesNeedUserId(const Body: IBody2; faceCount: Integer; out faces: IFace2; 
                                     edgeCount: Integer; out edges: IEdge); dispid 51;
    function IsCOMFeature: WordBool; dispid 52;
    function GetProgId: WideString; dispid 53;
    property SecurityHandleMacroFileName: WideString dispid 54;
    property SecurityHandleModuleName: WideString dispid 55;
    property SecurityHandleProcedureName: WideString dispid 56;
    function GetBaseName: WideString; dispid 57;
  end;

// *********************************************************************//
// Interface: ICurveDrivenPatternFeatureData
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {496A6D86-2180-46D8-A973-7885554EFAF3}
// *********************************************************************//
  ICurveDrivenPatternFeatureData = interface(IDispatch)
    ['{496A6D86-2180-46D8-A973-7885554EFAF3}']
    function AccessSelections(const topDoc: IDispatch; const component: IDispatch): WordBool; safecall;
    function IAccessSelections(const topDoc: IModelDoc2; const component: IComponent2): WordBool; safecall;
    procedure ReleaseSelectionAccess; safecall;
    function Get_D1Direction: IDispatch; safecall;
    procedure Set_D1Direction(const dir: IDispatch); safecall;
    function Get_D2Direction: IDispatch; safecall;
    procedure Set_D2Direction(const dir: IDispatch); safecall;
    function Get_D1ReverseDirection: WordBool; safecall;
    procedure Set_D1ReverseDirection(isRev: WordBool); safecall;
    function Get_D2ReverseDirection: WordBool; safecall;
    procedure Set_D2ReverseDirection(isRev: WordBool); safecall;
    function Get_D1InstanceCount: Integer; safecall;
    procedure Set_D1InstanceCount(instCount: Integer); safecall;
    function Get_D2InstanceCount: Integer; safecall;
    procedure Set_D2InstanceCount(instCount: Integer); safecall;
    function Get_D1IsEqualSpaced: WordBool; safecall;
    procedure Set_D1IsEqualSpaced(isEq: WordBool); safecall;
    function Get_D2IsEqualSpaced: WordBool; safecall;
    procedure Set_D2IsEqualSpaced(isEq: WordBool); safecall;
    function Get_D1Spacing: Double; safecall;
    procedure Set_D1Spacing(spacing: Double); safecall;
    function Get_D2Spacing: Double; safecall;
    procedure Set_D2Spacing(spacing: Double); safecall;
    function Get_Dir2Specified: WordBool; safecall;
    procedure Set_Dir2Specified(is2Dir: WordBool); safecall;
    function Get_D2PatternSeedOnly: WordBool; safecall;
    procedure Set_D2PatternSeedOnly(seedOnly: WordBool); safecall;
    function Get_D1CurveMethod: Integer; safecall;
    procedure Set_D1CurveMethod(curveMethod: Integer); safecall;
    function Get_D1AlignmentMethod: Integer; safecall;
    procedure Set_D1AlignmentMethod(alignMethod: Integer); safecall;
    function Get_SkippedItemArray: OleVariant; safecall;
    procedure Set_SkippedItemArray(ArrayOut: OleVariant); safecall;
    function GetSkippedItemCount: Integer; safecall;
    function IGetSkippedItemArray: Integer; safecall;
    procedure ISetSkippedItemArray(featCount: Integer; var ArrayDataIn: Integer); safecall;
    function Get_PatternFeatureArray: OleVariant; safecall;
    procedure Set_PatternFeatureArray(ArrayOut: OleVariant); safecall;
    function GetPatternFeatureCount: Integer; safecall;
    function IGetPatternFeatureArray: IDispatch; safecall;
    procedure ISetPatternFeatureArray(featCount: Integer; var ArrayDataIn: IDispatch); safecall;
    function Get_GeometryPattern: WordBool; safecall;
    procedure Set_GeometryPattern(geometry: WordBool); safecall;
    function Get_VarySketch: WordBool; safecall;
    procedure Set_VarySketch(VarySketch: WordBool); safecall;
    function Get_PatternFaceArray: OleVariant; safecall;
    procedure Set_PatternFaceArray(ArrayOut: OleVariant); safecall;
    function GetPatternFaceCount: Integer; safecall;
    function IGetPatternFaceArray: IDispatch; safecall;
    procedure ISetPatternFaceArray(faceCount: Integer; var ArrayDataIn: IDispatch); safecall;
    function Get_PatternBodyArray: OleVariant; safecall;
    procedure Set_PatternBodyArray(ArrayOut: OleVariant); safecall;
    function GetPatternBodyCount: Integer; safecall;
    function IGetPatternBodyArray: IBody2; safecall;
    procedure ISetPatternBodyArray(bodyCount: Integer; var ArrayDataIn: IBody2); safecall;
    property D1Direction: IDispatch read Get_D1Direction write Set_D1Direction;
    property D2Direction: IDispatch read Get_D2Direction write Set_D2Direction;
    property D1ReverseDirection: WordBool read Get_D1ReverseDirection write Set_D1ReverseDirection;
    property D2ReverseDirection: WordBool read Get_D2ReverseDirection write Set_D2ReverseDirection;
    property D1InstanceCount: Integer read Get_D1InstanceCount write Set_D1InstanceCount;
    property D2InstanceCount: Integer read Get_D2InstanceCount write Set_D2InstanceCount;
    property D1IsEqualSpaced: WordBool read Get_D1IsEqualSpaced write Set_D1IsEqualSpaced;
    property D2IsEqualSpaced: WordBool read Get_D2IsEqualSpaced write Set_D2IsEqualSpaced;
    property D1Spacing: Double read Get_D1Spacing write Set_D1Spacing;
    property D2Spacing: Double read Get_D2Spacing write Set_D2Spacing;
    property Dir2Specified: WordBool read Get_Dir2Specified write Set_Dir2Specified;
    property D2PatternSeedOnly: WordBool read Get_D2PatternSeedOnly write Set_D2PatternSeedOnly;
    property D1CurveMethod: Integer read Get_D1CurveMethod write Set_D1CurveMethod;
    property D1AlignmentMethod: Integer read Get_D1AlignmentMethod write Set_D1AlignmentMethod;
    property SkippedItemArray: OleVariant read Get_SkippedItemArray write Set_SkippedItemArray;
    property PatternFeatureArray: OleVariant read Get_PatternFeatureArray write Set_PatternFeatureArray;
    property GeometryPattern: WordBool read Get_GeometryPattern write Set_GeometryPattern;
    property VarySketch: WordBool read Get_VarySketch write Set_VarySketch;
    property PatternFaceArray: OleVariant read Get_PatternFaceArray write Set_PatternFaceArray;
    property PatternBodyArray: OleVariant read Get_PatternBodyArray write Set_PatternBodyArray;
  end;

// *********************************************************************//
// DispIntf:  ICurveDrivenPatternFeatureDataDisp
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {496A6D86-2180-46D8-A973-7885554EFAF3}
// *********************************************************************//
  ICurveDrivenPatternFeatureDataDisp = dispinterface
    ['{496A6D86-2180-46D8-A973-7885554EFAF3}']
    function AccessSelections(const topDoc: IDispatch; const component: IDispatch): WordBool; dispid 1;
    function IAccessSelections(const topDoc: IModelDoc2; const component: IComponent2): WordBool; dispid 2;
    procedure ReleaseSelectionAccess; dispid 3;
    property D1Direction: IDispatch dispid 4;
    property D2Direction: IDispatch dispid 5;
    property D1ReverseDirection: WordBool dispid 6;
    property D2ReverseDirection: WordBool dispid 7;
    property D1InstanceCount: Integer dispid 8;
    property D2InstanceCount: Integer dispid 9;
    property D1IsEqualSpaced: WordBool dispid 10;
    property D2IsEqualSpaced: WordBool dispid 11;
    property D1Spacing: Double dispid 12;
    property D2Spacing: Double dispid 13;
    property Dir2Specified: WordBool dispid 14;
    property D2PatternSeedOnly: WordBool dispid 15;
    property D1CurveMethod: Integer dispid 16;
    property D1AlignmentMethod: Integer dispid 17;
    property SkippedItemArray: OleVariant dispid 18;
    function GetSkippedItemCount: Integer; dispid 19;
    function IGetSkippedItemArray: Integer; dispid 20;
    procedure ISetSkippedItemArray(featCount: Integer; var ArrayDataIn: Integer); dispid 21;
    property PatternFeatureArray: OleVariant dispid 22;
    function GetPatternFeatureCount: Integer; dispid 23;
    function IGetPatternFeatureArray: IDispatch; dispid 24;
    procedure ISetPatternFeatureArray(featCount: Integer; var ArrayDataIn: IDispatch); dispid 25;
    property GeometryPattern: WordBool dispid 26;
    property VarySketch: WordBool dispid 27;
    property PatternFaceArray: OleVariant dispid 28;
    function GetPatternFaceCount: Integer; dispid 29;
    function IGetPatternFaceArray: IDispatch; dispid 30;
    procedure ISetPatternFaceArray(faceCount: Integer; var ArrayDataIn: IDispatch); dispid 31;
    property PatternBodyArray: OleVariant dispid 32;
    function GetPatternBodyCount: Integer; dispid 33;
    function IGetPatternBodyArray: IBody2; dispid 34;
    procedure ISetPatternBodyArray(bodyCount: Integer; var ArrayDataIn: IBody2); dispid 35;
  end;

// *********************************************************************//
// Interface: IRipFeatureData
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {D3352F26-3333-455E-910B-E0F3A44E76FD}
// *********************************************************************//
  IRipFeatureData = interface(IDispatch)
    ['{D3352F26-3333-455E-910B-E0F3A44E76FD}']
    function AccessSelections(const topDoc: IDispatch; const component: IDispatch): WordBool; safecall;
    function IAccessSelections(const topDoc: IModelDoc2; const component: IComponent2): WordBool; safecall;
    procedure ReleaseSelectionAccess; safecall;
    function GetEdgesCount: Integer; safecall;
    function Get_edges: OleVariant; safecall;
    procedure Set_edges(edgeArr: OleVariant); safecall;
    function IGetEdges(edgeCount: Integer): IDispatch; safecall;
    procedure ISetEdges(edgeCount: Integer; var edgeArr: IDispatch); safecall;
    function Get_gap: Double; safecall;
    procedure Set_gap(gap: Double); safecall;
    function GetDirection(const Edge: IDispatch): Integer; safecall;
    procedure SetDirection(const Edge: IDispatch; dir: Integer); safecall;
    property edges: OleVariant read Get_edges write Set_edges;
    property gap: Double read Get_gap write Set_gap;
  end;

// *********************************************************************//
// DispIntf:  IRipFeatureDataDisp
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {D3352F26-3333-455E-910B-E0F3A44E76FD}
// *********************************************************************//
  IRipFeatureDataDisp = dispinterface
    ['{D3352F26-3333-455E-910B-E0F3A44E76FD}']
    function AccessSelections(const topDoc: IDispatch; const component: IDispatch): WordBool; dispid 1;
    function IAccessSelections(const topDoc: IModelDoc2; const component: IComponent2): WordBool; dispid 2;
    procedure ReleaseSelectionAccess; dispid 3;
    function GetEdgesCount: Integer; dispid 4;
    property edges: OleVariant dispid 5;
    function IGetEdges(edgeCount: Integer): IDispatch; dispid 6;
    procedure ISetEdges(edgeCount: Integer; var edgeArr: IDispatch); dispid 7;
    property gap: Double dispid 8;
    function GetDirection(const Edge: IDispatch): Integer; dispid 9;
    procedure SetDirection(const Edge: IDispatch; dir: Integer); dispid 10;
  end;

// *********************************************************************//
// Interface: IHemFeatureData
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {D1E54427-2421-413F-9EB3-F568A6BF826D}
// *********************************************************************//
  IHemFeatureData = interface(IDispatch)
    ['{D1E54427-2421-413F-9EB3-F568A6BF826D}']
    function AccessSelections(const topDoc: IDispatch; const component: IDispatch): WordBool; safecall;
    function IAccessSelections(const topDoc: IModelDoc2; const component: IComponent2): WordBool; safecall;
    procedure ReleaseSelectionAccess; safecall;
    function GetEdgesCount: Integer; safecall;
    function Get_edges: OleVariant; safecall;
    procedure Set_edges(edgeArr: OleVariant); safecall;
    function IGetEdges(edgeCount: Integer): IDispatch; safecall;
    procedure ISetEdges(edgeCount: Integer; var edgeArr: IDispatch); safecall;
    function Get_MiterGap: Double; safecall;
    procedure Set_MiterGap(gap: Double); safecall;
    function Get_ReverseDirection: WordBool; safecall;
    procedure Set_ReverseDirection(rev: WordBool); safecall;
    function Get_bendPosition: Integer; safecall;
    procedure Set_bendPosition(pos: Integer); safecall;
    function Get_type_: Integer; safecall;
    procedure Set_type_(type_: Integer); safecall;
    function Get_length: Double; safecall;
    procedure Set_length(len: Double); safecall;
    function Get_GapDistance: Double; safecall;
    procedure Set_GapDistance(dist: Double); safecall;
    function Get_angle: Double; safecall;
    procedure Set_angle(ang: Double); safecall;
    function Get_radius: Double; safecall;
    procedure Set_radius(rad: Double); safecall;
    function GetCustomBendAllowance: ICustomBendAllowance; safecall;
    procedure SetCustomBendAllowance(const pBendData: ICustomBendAllowance); safecall;
    function Get_UseDefaultBendAllowance: WordBool; safecall;
    procedure Set_UseDefaultBendAllowance(UseDefaultBendAllowance: WordBool); safecall;
    property edges: OleVariant read Get_edges write Set_edges;
    property MiterGap: Double read Get_MiterGap write Set_MiterGap;
    property ReverseDirection: WordBool read Get_ReverseDirection write Set_ReverseDirection;
    property bendPosition: Integer read Get_bendPosition write Set_bendPosition;
    property type_: Integer read Get_type_ write Set_type_;
    property length: Double read Get_length write Set_length;
    property GapDistance: Double read Get_GapDistance write Set_GapDistance;
    property angle: Double read Get_angle write Set_angle;
    property radius: Double read Get_radius write Set_radius;
    property UseDefaultBendAllowance: WordBool read Get_UseDefaultBendAllowance write Set_UseDefaultBendAllowance;
  end;

// *********************************************************************//
// DispIntf:  IHemFeatureDataDisp
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {D1E54427-2421-413F-9EB3-F568A6BF826D}
// *********************************************************************//
  IHemFeatureDataDisp = dispinterface
    ['{D1E54427-2421-413F-9EB3-F568A6BF826D}']
    function AccessSelections(const topDoc: IDispatch; const component: IDispatch): WordBool; dispid 1;
    function IAccessSelections(const topDoc: IModelDoc2; const component: IComponent2): WordBool; dispid 2;
    procedure ReleaseSelectionAccess; dispid 3;
    function GetEdgesCount: Integer; dispid 4;
    property edges: OleVariant dispid 5;
    function IGetEdges(edgeCount: Integer): IDispatch; dispid 6;
    procedure ISetEdges(edgeCount: Integer; var edgeArr: IDispatch); dispid 7;
    property MiterGap: Double dispid 8;
    property ReverseDirection: WordBool dispid 9;
    property bendPosition: Integer dispid 10;
    property type_: Integer dispid 11;
    property length: Double dispid 12;
    property GapDistance: Double dispid 13;
    property angle: Double dispid 14;
    property radius: Double dispid 15;
    function GetCustomBendAllowance: ICustomBendAllowance; dispid 16;
    procedure SetCustomBendAllowance(const pBendData: ICustomBendAllowance); dispid 17;
    property UseDefaultBendAllowance: WordBool dispid 18;
  end;

// *********************************************************************//
// Interface: IBreakCornerFeatureData
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {DF91CD7F-F4D5-471A-831B-E201B2C02090}
// *********************************************************************//
  IBreakCornerFeatureData = interface(IDispatch)
    ['{DF91CD7F-F4D5-471A-831B-E201B2C02090}']
    function AccessSelections(const topDoc: IDispatch; const component: IDispatch): WordBool; safecall;
    function IAccessSelections(const topDoc: IModelDoc2; const component: IComponent2): WordBool; safecall;
    procedure ReleaseSelectionAccess; safecall;
    function Get_Entities: OleVariant; safecall;
    procedure Set_Entities(entArray: OleVariant); safecall;
    function GetEntitiesCount: Integer; safecall;
    function IGetEntities(count: Integer): IDispatch; safecall;
    procedure ISetEntities(entCount: Integer; var entArray: IDispatch); safecall;
    function Get_breakType: Integer; safecall;
    procedure Set_breakType(type_: Integer); safecall;
    function Get_distance: Double; safecall;
    procedure Set_distance(dist: Double); safecall;
    property Entities: OleVariant read Get_Entities write Set_Entities;
    property breakType: Integer read Get_breakType write Set_breakType;
    property distance: Double read Get_distance write Set_distance;
  end;

// *********************************************************************//
// DispIntf:  IBreakCornerFeatureDataDisp
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {DF91CD7F-F4D5-471A-831B-E201B2C02090}
// *********************************************************************//
  IBreakCornerFeatureDataDisp = dispinterface
    ['{DF91CD7F-F4D5-471A-831B-E201B2C02090}']
    function AccessSelections(const topDoc: IDispatch; const component: IDispatch): WordBool; dispid 1;
    function IAccessSelections(const topDoc: IModelDoc2; const component: IComponent2): WordBool; dispid 2;
    procedure ReleaseSelectionAccess; dispid 3;
    property Entities: OleVariant dispid 4;
    function GetEntitiesCount: Integer; dispid 5;
    function IGetEntities(count: Integer): IDispatch; dispid 6;
    procedure ISetEntities(entCount: Integer; var entArray: IDispatch); dispid 7;
    property breakType: Integer dispid 8;
    property distance: Double dispid 9;
  end;

// *********************************************************************//
// Interface: IJogFeatureData
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {C75CA537-4ABA-44F3-AC3B-73D5DCD0C834}
// *********************************************************************//
  IJogFeatureData = interface(IDispatch)
    ['{C75CA537-4ABA-44F3-AC3B-73D5DCD0C834}']
    function AccessSelections(const topDoc: IDispatch; const component: IDispatch): WordBool; safecall;
    function IAccessSelections(const topDoc: IModelDoc2; const component: IComponent2): WordBool; safecall;
    procedure ReleaseSelectionAccess; safecall;
    function Get_FixedFace: IDispatch; safecall;
    procedure Set_FixedFace(const face: IDispatch); safecall;
    function Get_UseDefaultBendRadius: WordBool; safecall;
    procedure Set_UseDefaultBendRadius(UseDefaultBendRadius: WordBool); safecall;
    function Get_BendRadius: Double; safecall;
    procedure Set_BendRadius(radius: Double); safecall;
    function Get_JogAngle: Double; safecall;
    procedure Set_JogAngle(angle: Double); safecall;
    function Get_offsetType: Integer; safecall;
    procedure Set_offsetType(offsetType: Integer); safecall;
    function Get_offsetReference: IDispatch; safecall;
    procedure Set_offsetReference(const offsetReference: IDispatch); safecall;
    function Get_ReverseOffset: WordBool; safecall;
    procedure Set_ReverseOffset(reverse: WordBool); safecall;
    function Get_ReverseDirection: WordBool; safecall;
    procedure Set_ReverseDirection(reverse: WordBool); safecall;
    function Get_offsetDistance: Double; safecall;
    procedure Set_offsetDistance(offsetDistance: Double); safecall;
    function Get_DimensionPositionType: Integer; safecall;
    procedure Set_DimensionPositionType(PositionType: Integer); safecall;
    function Get_FixProjectedLength: WordBool; safecall;
    procedure Set_FixProjectedLength(fix: WordBool); safecall;
    function Get_JogPositionType: Integer; safecall;
    procedure Set_JogPositionType(type_: Integer); safecall;
    function Get_FixedPoint: OleVariant; safecall;
    procedure Set_FixedPoint(point: OleVariant); safecall;
    function IGetFixedPoint: Double; safecall;
    procedure ISetFixedPoint(var point: Double); safecall;
    function GetOffsetReferenceType: Integer; safecall;
    function GetCustomBendAllowance: ICustomBendAllowance; safecall;
    procedure SetCustomBendAllowance(const pBendData: ICustomBendAllowance); safecall;
    function Get_UseDefaultBendAllowance: WordBool; safecall;
    procedure Set_UseDefaultBendAllowance(UseDefaultBendAllowance: WordBool); safecall;
    property FixedFace: IDispatch read Get_FixedFace write Set_FixedFace;
    property UseDefaultBendRadius: WordBool read Get_UseDefaultBendRadius write Set_UseDefaultBendRadius;
    property BendRadius: Double read Get_BendRadius write Set_BendRadius;
    property JogAngle: Double read Get_JogAngle write Set_JogAngle;
    property offsetType: Integer read Get_offsetType write Set_offsetType;
    property offsetReference: IDispatch read Get_offsetReference write Set_offsetReference;
    property ReverseOffset: WordBool read Get_ReverseOffset write Set_ReverseOffset;
    property ReverseDirection: WordBool read Get_ReverseDirection write Set_ReverseDirection;
    property offsetDistance: Double read Get_offsetDistance write Set_offsetDistance;
    property DimensionPositionType: Integer read Get_DimensionPositionType write Set_DimensionPositionType;
    property FixProjectedLength: WordBool read Get_FixProjectedLength write Set_FixProjectedLength;
    property JogPositionType: Integer read Get_JogPositionType write Set_JogPositionType;
    property FixedPoint: OleVariant read Get_FixedPoint write Set_FixedPoint;
    property UseDefaultBendAllowance: WordBool read Get_UseDefaultBendAllowance write Set_UseDefaultBendAllowance;
  end;

// *********************************************************************//
// DispIntf:  IJogFeatureDataDisp
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {C75CA537-4ABA-44F3-AC3B-73D5DCD0C834}
// *********************************************************************//
  IJogFeatureDataDisp = dispinterface
    ['{C75CA537-4ABA-44F3-AC3B-73D5DCD0C834}']
    function AccessSelections(const topDoc: IDispatch; const component: IDispatch): WordBool; dispid 1;
    function IAccessSelections(const topDoc: IModelDoc2; const component: IComponent2): WordBool; dispid 2;
    procedure ReleaseSelectionAccess; dispid 3;
    property FixedFace: IDispatch dispid 4;
    property UseDefaultBendRadius: WordBool dispid 5;
    property BendRadius: Double dispid 6;
    property JogAngle: Double dispid 7;
    property offsetType: Integer dispid 8;
    property offsetReference: IDispatch dispid 9;
    property ReverseOffset: WordBool dispid 10;
    property ReverseDirection: WordBool dispid 11;
    property offsetDistance: Double dispid 12;
    property DimensionPositionType: Integer dispid 13;
    property FixProjectedLength: WordBool dispid 14;
    property JogPositionType: Integer dispid 15;
    property FixedPoint: OleVariant dispid 16;
    function IGetFixedPoint: Double; dispid 17;
    procedure ISetFixedPoint(var point: Double); dispid 18;
    function GetOffsetReferenceType: Integer; dispid 19;
    function GetCustomBendAllowance: ICustomBendAllowance; dispid 20;
    procedure SetCustomBendAllowance(const pBendData: ICustomBendAllowance); dispid 21;
    property UseDefaultBendAllowance: WordBool dispid 22;
  end;

// *********************************************************************//
// Interface: ISurfExtrudeFeatureData
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {157CE6B0-16BC-49A3-B207-95159B02306C}
// *********************************************************************//
  ISurfExtrudeFeatureData = interface(IDispatch)
    ['{157CE6B0-16BC-49A3-B207-95159B02306C}']
    function AccessSelections(const topDoc: IDispatch; const component: IDispatch): WordBool; safecall;
    function IAccessSelections(const topDoc: IModelDoc2; const component: IComponent2): WordBool; safecall;
    procedure ReleaseSelectionAccess; safecall;
    function GetEndCondition(forward: WordBool): SYSINT; safecall;
    procedure SetEndCondition(forward: WordBool; endCondition: SYSINT); safecall;
    function GetDepth(forward: WordBool): Double; safecall;
    procedure SetDepth(forward: WordBool; depth: Double); safecall;
    function GetFace(forward: WordBool): IDispatch; safecall;
    procedure SetFace(forward: WordBool; const face: IDispatch); safecall;
    function IGetFace(forward: WordBool): IFace2; safecall;
    procedure ISetFace(forward: WordBool; const face: IFace2); safecall;
    function GetVertex(forward: WordBool): IDispatch; safecall;
    procedure SetVertex(forward: WordBool; const vtx: IDispatch); safecall;
    function IGetVertex(forward: WordBool): IVertex; safecall;
    procedure ISetVertex(forward: WordBool; const vtx: IVertex); safecall;
    function Get_ReverseDirection: WordBool; safecall;
    procedure Set_ReverseDirection(ReverseDirection: WordBool); safecall;
    function Get_bothDirections: WordBool; safecall;
    procedure Set_bothDirections(bothDirections: WordBool); safecall;
    function GetReverseOffset(fwd: WordBool): WordBool; safecall;
    procedure SetReverseOffset(fwd: WordBool; revOffset: WordBool); safecall;
    function GetTranslateSurface(fwd: WordBool): WordBool; safecall;
    procedure SetTranslateSurface(fwd: WordBool; trans: WordBool); safecall;
    property ReverseDirection: WordBool read Get_ReverseDirection write Set_ReverseDirection;
    property bothDirections: WordBool read Get_bothDirections write Set_bothDirections;
  end;

// *********************************************************************//
// DispIntf:  ISurfExtrudeFeatureDataDisp
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {157CE6B0-16BC-49A3-B207-95159B02306C}
// *********************************************************************//
  ISurfExtrudeFeatureDataDisp = dispinterface
    ['{157CE6B0-16BC-49A3-B207-95159B02306C}']
    function AccessSelections(const topDoc: IDispatch; const component: IDispatch): WordBool; dispid 1;
    function IAccessSelections(const topDoc: IModelDoc2; const component: IComponent2): WordBool; dispid 2;
    procedure ReleaseSelectionAccess; dispid 3;
    function GetEndCondition(forward: WordBool): SYSINT; dispid 4;
    procedure SetEndCondition(forward: WordBool; endCondition: SYSINT); dispid 5;
    function GetDepth(forward: WordBool): Double; dispid 6;
    procedure SetDepth(forward: WordBool; depth: Double); dispid 7;
    function GetFace(forward: WordBool): IDispatch; dispid 8;
    procedure SetFace(forward: WordBool; const face: IDispatch); dispid 9;
    function IGetFace(forward: WordBool): IFace2; dispid 10;
    procedure ISetFace(forward: WordBool; const face: IFace2); dispid 11;
    function GetVertex(forward: WordBool): IDispatch; dispid 12;
    procedure SetVertex(forward: WordBool; const vtx: IDispatch); dispid 13;
    function IGetVertex(forward: WordBool): IVertex; dispid 14;
    procedure ISetVertex(forward: WordBool; const vtx: IVertex); dispid 15;
    property ReverseDirection: WordBool dispid 16;
    property bothDirections: WordBool dispid 17;
    function GetReverseOffset(fwd: WordBool): WordBool; dispid 18;
    procedure SetReverseOffset(fwd: WordBool; revOffset: WordBool); dispid 19;
    function GetTranslateSurface(fwd: WordBool): WordBool; dispid 20;
    procedure SetTranslateSurface(fwd: WordBool; trans: WordBool); dispid 21;
  end;

// *********************************************************************//
// Interface: ISurfRevolveFeatureData
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {38D7F138-4403-4EB0-8E9E-7DAF6BA385CF}
// *********************************************************************//
  ISurfRevolveFeatureData = interface(IDispatch)
    ['{38D7F138-4403-4EB0-8E9E-7DAF6BA385CF}']
    function GetRevolutionAngle(forward: WordBool): Double; safecall;
    procedure SetRevolutionAngle(forward: WordBool; angle: Double); safecall;
    function Get_type_: SYSINT; safecall;
    procedure Set_type_(type_: SYSINT); safecall;
    function Get_ReverseDirection: WordBool; safecall;
    procedure Set_ReverseDirection(ReverseDirection: WordBool); safecall;
    function AccessSelections(const topDoc: IDispatch; const component: IDispatch): WordBool; safecall;
    function IAccessSelections(const topDoc: IModelDoc2; const component: IComponent2): WordBool; safecall;
    procedure ReleaseSelectionAccess; safecall;
    property type_: SYSINT read Get_type_ write Set_type_;
    property ReverseDirection: WordBool read Get_ReverseDirection write Set_ReverseDirection;
  end;

// *********************************************************************//
// DispIntf:  ISurfRevolveFeatureDataDisp
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {38D7F138-4403-4EB0-8E9E-7DAF6BA385CF}
// *********************************************************************//
  ISurfRevolveFeatureDataDisp = dispinterface
    ['{38D7F138-4403-4EB0-8E9E-7DAF6BA385CF}']
    function GetRevolutionAngle(forward: WordBool): Double; dispid 1;
    procedure SetRevolutionAngle(forward: WordBool; angle: Double); dispid 2;
    property type_: SYSINT dispid 3;
    property ReverseDirection: WordBool dispid 4;
    function AccessSelections(const topDoc: IDispatch; const component: IDispatch): WordBool; dispid 5;
    function IAccessSelections(const topDoc: IModelDoc2; const component: IComponent2): WordBool; dispid 6;
    procedure ReleaseSelectionAccess; dispid 7;
  end;

// *********************************************************************//
// Interface: ISurfaceOffsetFeatureData
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {214152E2-2F73-42E3-AB88-690C2ED9910D}
// *********************************************************************//
  ISurfaceOffsetFeatureData = interface(IDispatch)
    ['{214152E2-2F73-42E3-AB88-690C2ED9910D}']
    function Get_faces: OleVariant; safecall;
    procedure Set_faces(faceArray: OleVariant); safecall;
    function GetFacesCount: Integer; safecall;
    function IGetFaces(count: Integer): IFace2; safecall;
    procedure ISetFaces(count: Integer; var faceArr: IFace2); safecall;
    function Get_distance: Double; safecall;
    procedure Set_distance(dist: Double); safecall;
    function Get_flip: WordBool; safecall;
    procedure Set_flip(flip: WordBool); safecall;
    function AccessSelections(const topDoc: IDispatch; const component: IDispatch): WordBool; safecall;
    function IAccessSelections(const topDoc: IModelDoc2; const component: IComponent2): WordBool; safecall;
    procedure ReleaseSelectionAccess; safecall;
    property faces: OleVariant read Get_faces write Set_faces;
    property distance: Double read Get_distance write Set_distance;
    property flip: WordBool read Get_flip write Set_flip;
  end;

// *********************************************************************//
// DispIntf:  ISurfaceOffsetFeatureDataDisp
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {214152E2-2F73-42E3-AB88-690C2ED9910D}
// *********************************************************************//
  ISurfaceOffsetFeatureDataDisp = dispinterface
    ['{214152E2-2F73-42E3-AB88-690C2ED9910D}']
    property faces: OleVariant dispid 1;
    function GetFacesCount: Integer; dispid 2;
    function IGetFaces(count: Integer): IFace2; dispid 3;
    procedure ISetFaces(count: Integer; var faceArr: IFace2); dispid 4;
    property distance: Double dispid 5;
    property flip: WordBool dispid 6;
    function AccessSelections(const topDoc: IDispatch; const component: IDispatch): WordBool; dispid 7;
    function IAccessSelections(const topDoc: IModelDoc2; const component: IComponent2): WordBool; dispid 8;
    procedure ReleaseSelectionAccess; dispid 9;
  end;

// *********************************************************************//
// Interface: ISurfaceKnitFeatureData
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {6CE5BD99-0769-4DAF-8206-07513B6C0005}
// *********************************************************************//
  ISurfaceKnitFeatureData = interface(IDispatch)
    ['{6CE5BD99-0769-4DAF-8206-07513B6C0005}']
    function AccessSelections(const topDoc: IDispatch; const component: IDispatch): WordBool; safecall;
    function IAccessSelections(const topDoc: IModelDoc2; const component: IComponent2): WordBool; safecall;
    procedure ReleaseSelectionAccess; safecall;
    function GetEntitiesCount: Integer; safecall;
    function Get_Entities: OleVariant; safecall;
    procedure Set_Entities(outArr: OleVariant); safecall;
    function IGetEntities(count: Integer): IDispatch; safecall;
    procedure ISetEntities(count: Integer; var faceArr: IDispatch); safecall;
    function Get_SeedFace: IDispatch; safecall;
    procedure Set_SeedFace(const SeedFace: IDispatch); safecall;
    property Entities: OleVariant read Get_Entities write Set_Entities;
    property SeedFace: IDispatch read Get_SeedFace write Set_SeedFace;
  end;

// *********************************************************************//
// DispIntf:  ISurfaceKnitFeatureDataDisp
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {6CE5BD99-0769-4DAF-8206-07513B6C0005}
// *********************************************************************//
  ISurfaceKnitFeatureDataDisp = dispinterface
    ['{6CE5BD99-0769-4DAF-8206-07513B6C0005}']
    function AccessSelections(const topDoc: IDispatch; const component: IDispatch): WordBool; dispid 1;
    function IAccessSelections(const topDoc: IModelDoc2; const component: IComponent2): WordBool; dispid 2;
    procedure ReleaseSelectionAccess; dispid 3;
    function GetEntitiesCount: Integer; dispid 4;
    property Entities: OleVariant dispid 5;
    function IGetEntities(count: Integer): IDispatch; dispid 6;
    procedure ISetEntities(count: Integer; var faceArr: IDispatch); dispid 7;
    property SeedFace: IDispatch dispid 8;
  end;

// *********************************************************************//
// Interface: ISurfaceExtendFeatureData
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {72249E3D-B571-416D-9034-DE3BE1D9937C}
// *********************************************************************//
  ISurfaceExtendFeatureData = interface(IDispatch)
    ['{72249E3D-B571-416D-9034-DE3BE1D9937C}']
    function GetItemsCount: Integer; safecall;
    function Get_Items: OleVariant; safecall;
    procedure Set_Items(outArr: OleVariant); safecall;
    function IGetItems(count: Integer): IDispatch; safecall;
    procedure ISetItems(count: Integer; var itemArr: IDispatch); safecall;
    function Get_endCondition: Integer; safecall;
    procedure Set_endCondition(endCond: Integer); safecall;
    function Get_face: IDispatch; safecall;
    procedure Set_face(const face: IDispatch); safecall;
    function Get_IFace: IFace2; safecall;
    procedure Set_IFace(const face: IFace2); safecall;
    function Get_Vertex: IDispatch; safecall;
    procedure Set_Vertex(const vtx: IDispatch); safecall;
    function Get_IVertex: IVertex; safecall;
    procedure Set_IVertex(const vtx: IVertex); safecall;
    function Get_distance: Double; safecall;
    procedure Set_distance(dist: Double); safecall;
    function Get_type_: Integer; safecall;
    procedure Set_type_(type_: Integer); safecall;
    function AccessSelections(const topDoc: IDispatch; const component: IDispatch): WordBool; safecall;
    function IAccessSelections(const topDoc: IModelDoc2; const component: IComponent2): WordBool; safecall;
    procedure ReleaseSelectionAccess; safecall;
    function GetPropagatingEdgesCount: Integer; safecall;
    function Get_PropagatingEdges: OleVariant; safecall;
    procedure Set_PropagatingEdges(outArr: OleVariant); safecall;
    function IGetPropagatingEdges(count: Integer): IEdge; safecall;
    procedure ISetPropagatingEdges(count: Integer; var edgeArr: IEdge); safecall;
    property Items: OleVariant read Get_Items write Set_Items;
    property endCondition: Integer read Get_endCondition write Set_endCondition;
    property face: IDispatch read Get_face write Set_face;
    property IFace: IFace2 read Get_IFace write Set_IFace;
    property Vertex: IDispatch read Get_Vertex write Set_Vertex;
    property IVertex: IVertex read Get_IVertex write Set_IVertex;
    property distance: Double read Get_distance write Set_distance;
    property type_: Integer read Get_type_ write Set_type_;
    property PropagatingEdges: OleVariant read Get_PropagatingEdges write Set_PropagatingEdges;
  end;

// *********************************************************************//
// DispIntf:  ISurfaceExtendFeatureDataDisp
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {72249E3D-B571-416D-9034-DE3BE1D9937C}
// *********************************************************************//
  ISurfaceExtendFeatureDataDisp = dispinterface
    ['{72249E3D-B571-416D-9034-DE3BE1D9937C}']
    function GetItemsCount: Integer; dispid 1;
    property Items: OleVariant dispid 2;
    function IGetItems(count: Integer): IDispatch; dispid 3;
    procedure ISetItems(count: Integer; var itemArr: IDispatch); dispid 4;
    property endCondition: Integer dispid 5;
    property face: IDispatch dispid 6;
    property IFace: IFace2 dispid 7;
    property Vertex: IDispatch dispid 8;
    property IVertex: IVertex dispid 9;
    property distance: Double dispid 10;
    property type_: Integer dispid 11;
    function AccessSelections(const topDoc: IDispatch; const component: IDispatch): WordBool; dispid 12;
    function IAccessSelections(const topDoc: IModelDoc2; const component: IComponent2): WordBool; dispid 13;
    procedure ReleaseSelectionAccess; dispid 14;
    function GetPropagatingEdgesCount: Integer; dispid 15;
    property PropagatingEdges: OleVariant dispid 16;
    function IGetPropagatingEdges(count: Integer): IEdge; dispid 17;
    procedure ISetPropagatingEdges(count: Integer; var edgeArr: IEdge); dispid 18;
  end;

// *********************************************************************//
// Interface: ISurfacePlanarFeatureData
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {6A0860DC-BC79-4DFD-8A06-252EFCCFCD37}
// *********************************************************************//
  ISurfacePlanarFeatureData = interface(IDispatch)
    ['{6A0860DC-BC79-4DFD-8A06-252EFCCFCD37}']
    function AccessSelections(const topDoc: IDispatch; const component: IDispatch): WordBool; safecall;
    function IAccessSelections(const topDoc: IModelDoc2; const component: IComponent2): WordBool; safecall;
    procedure ReleaseSelectionAccess; safecall;
    function GetBoundingEntitiesCount: Integer; safecall;
    function IGetBoundingEntities(count: Integer): IDispatch; safecall;
    function ISetBoundingEntities(count: Integer): IDispatch; safecall;
    function Get_BoundingEntities: OleVariant; safecall;
    procedure Set_BoundingEntities(entVar: OleVariant); safecall;
    property BoundingEntities: OleVariant read Get_BoundingEntities write Set_BoundingEntities;
  end;

// *********************************************************************//
// DispIntf:  ISurfacePlanarFeatureDataDisp
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {6A0860DC-BC79-4DFD-8A06-252EFCCFCD37}
// *********************************************************************//
  ISurfacePlanarFeatureDataDisp = dispinterface
    ['{6A0860DC-BC79-4DFD-8A06-252EFCCFCD37}']
    function AccessSelections(const topDoc: IDispatch; const component: IDispatch): WordBool; dispid 1;
    function IAccessSelections(const topDoc: IModelDoc2; const component: IComponent2): WordBool; dispid 2;
    procedure ReleaseSelectionAccess; dispid 3;
    function GetBoundingEntitiesCount: Integer; dispid 4;
    function IGetBoundingEntities(count: Integer): IDispatch; dispid 5;
    function ISetBoundingEntities(count: Integer): IDispatch; dispid 6;
    property BoundingEntities: OleVariant dispid 7;
  end;

// *********************************************************************//
// Interface: ISurfaceTrimFeatureData
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {C9943DEE-40DE-4EB9-A3C5-7D5CABEE3E85}
// *********************************************************************//
  ISurfaceTrimFeatureData = interface(IDispatch)
    ['{C9943DEE-40DE-4EB9-A3C5-7D5CABEE3E85}']
    function AccessSelections(const topDoc: IDispatch; const component: IDispatch): WordBool; safecall;
    function IAccessSelections(const topDoc: IModelDoc2; const component: IComponent2): WordBool; safecall;
    procedure ReleaseSelectionAccess; safecall;
    function GetType: Integer; safecall;
    function GetTrimToolsCount: Integer; safecall;
    function IGetTrimTools(count: Integer): IDispatch; safecall;
    procedure ISetTrimTools(count: Integer; var dispArr: IDispatch); safecall;
    function Get_TrimTools: OleVariant; safecall;
    procedure Set_TrimTools(toolVar: OleVariant); safecall;
    function GetPiecesToKeepCount: Integer; safecall;
    function IGetPiecesToKeep(count: Integer): IBody2; safecall;
    procedure ISetPiecesToKeep(count: Integer; var bodyArr: IBody2); safecall;
    function Get_PiecesToKeep: OleVariant; safecall;
    procedure Set_PiecesToKeep(toolVar: OleVariant); safecall;
    property TrimTools: OleVariant read Get_TrimTools write Set_TrimTools;
    property PiecesToKeep: OleVariant read Get_PiecesToKeep write Set_PiecesToKeep;
  end;

// *********************************************************************//
// DispIntf:  ISurfaceTrimFeatureDataDisp
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {C9943DEE-40DE-4EB9-A3C5-7D5CABEE3E85}
// *********************************************************************//
  ISurfaceTrimFeatureDataDisp = dispinterface
    ['{C9943DEE-40DE-4EB9-A3C5-7D5CABEE3E85}']
    function AccessSelections(const topDoc: IDispatch; const component: IDispatch): WordBool; dispid 1;
    function IAccessSelections(const topDoc: IModelDoc2; const component: IComponent2): WordBool; dispid 2;
    procedure ReleaseSelectionAccess; dispid 3;
    function GetType: Integer; dispid 4;
    function GetTrimToolsCount: Integer; dispid 5;
    function IGetTrimTools(count: Integer): IDispatch; dispid 6;
    procedure ISetTrimTools(count: Integer; var dispArr: IDispatch); dispid 7;
    property TrimTools: OleVariant dispid 8;
    function GetPiecesToKeepCount: Integer; dispid 9;
    function IGetPiecesToKeep(count: Integer): IBody2; dispid 10;
    procedure ISetPiecesToKeep(count: Integer; var bodyArr: IBody2); dispid 11;
    property PiecesToKeep: OleVariant dispid 12;
  end;

// *********************************************************************//
// Interface: ISurfaceRadiateFeatureData
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {82F0509D-402B-4D79-AB6B-AA2888FC1E81}
// *********************************************************************//
  ISurfaceRadiateFeatureData = interface(IDispatch)
    ['{82F0509D-402B-4D79-AB6B-AA2888FC1E81}']
    function AccessSelections(const topDoc: IDispatch; const component: IDispatch): WordBool; safecall;
    function IAccessSelections(const topDoc: IModelDoc2; const component: IComponent2): WordBool; safecall;
    procedure ReleaseSelectionAccess; safecall;
    function Get_DirectionReference: IDispatch; safecall;
    procedure Set_DirectionReference(const disp: IDispatch); safecall;
    function Get_flip: WordBool; safecall;
    procedure Set_flip(flip: WordBool); safecall;
    function Get_PropagateToTangentFaces: WordBool; safecall;
    procedure Set_PropagateToTangentFaces(prop: WordBool); safecall;
    function Get_distance: Double; safecall;
    procedure Set_distance(dist: Double); safecall;
    function GetRadiatedEntitiesCount: Integer; safecall;
    function IGetRadiatedEntities(count: Integer): IDispatch; safecall;
    procedure ISetRadiatedEntities(count: Integer; var dispArr: IDispatch); safecall;
    function Get_RadiatedEntities: OleVariant; safecall;
    procedure Set_RadiatedEntities(entVar: OleVariant); safecall;
    property DirectionReference: IDispatch read Get_DirectionReference write Set_DirectionReference;
    property flip: WordBool read Get_flip write Set_flip;
    property PropagateToTangentFaces: WordBool read Get_PropagateToTangentFaces write Set_PropagateToTangentFaces;
    property distance: Double read Get_distance write Set_distance;
    property RadiatedEntities: OleVariant read Get_RadiatedEntities write Set_RadiatedEntities;
  end;

// *********************************************************************//
// DispIntf:  ISurfaceRadiateFeatureDataDisp
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {82F0509D-402B-4D79-AB6B-AA2888FC1E81}
// *********************************************************************//
  ISurfaceRadiateFeatureDataDisp = dispinterface
    ['{82F0509D-402B-4D79-AB6B-AA2888FC1E81}']
    function AccessSelections(const topDoc: IDispatch; const component: IDispatch): WordBool; dispid 1;
    function IAccessSelections(const topDoc: IModelDoc2; const component: IComponent2): WordBool; dispid 2;
    procedure ReleaseSelectionAccess; dispid 3;
    property DirectionReference: IDispatch dispid 4;
    property flip: WordBool dispid 5;
    property PropagateToTangentFaces: WordBool dispid 6;
    property distance: Double dispid 7;
    function GetRadiatedEntitiesCount: Integer; dispid 8;
    function IGetRadiatedEntities(count: Integer): IDispatch; dispid 9;
    procedure ISetRadiatedEntities(count: Integer; var dispArr: IDispatch); dispid 10;
    property RadiatedEntities: OleVariant dispid 11;
  end;

// *********************************************************************//
// Interface: IRefPlaneFeatureData
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {02B5CBF8-5104-41F7-901D-A4DCBA547029}
// *********************************************************************//
  IRefPlaneFeatureData = interface(IDispatch)
    ['{02B5CBF8-5104-41F7-901D-A4DCBA547029}']
    function AccessSelections(const topDoc: IDispatch; const component: IDispatch): WordBool; safecall;
    function IAccessSelections(const topDoc: IModelDoc2; const component: IComponent2): WordBool; safecall;
    procedure ReleaseSelectionAccess; safecall;
    function Get_type_: Integer; safecall;
    procedure Set_type_(type_: Integer); safecall;
    function Get_autoSize: WordBool; safecall;
    procedure Set_autoSize(autoSize: WordBool); safecall;
    function Get_angle: Double; safecall;
    procedure Set_angle(angle: Double); safecall;
    function Get_distance: Double; safecall;
    procedure Set_distance(dist: Double); safecall;
    function Get_ReverseDirection: WordBool; safecall;
    procedure Set_ReverseDirection(flip: WordBool); safecall;
    function Get_OriginOnCurve: WordBool; safecall;
    procedure Set_OriginOnCurve(dist: WordBool); safecall;
    function Get_Selections: OleVariant; safecall;
    procedure Set_Selections(Entities: OleVariant); safecall;
    function GetSelectionsCount: Integer; safecall;
    function IGetSelections(count: Integer): IDispatch; safecall;
    procedure ISetSelections(count: Integer; var Entities: IDispatch); safecall;
    function Get_ProjectionType: Integer; safecall;
    procedure Set_ProjectionType(type_: Integer); safecall;
    function Get_UseNormalPlane: WordBool; safecall;
    procedure Set_UseNormalPlane(normalPlane: WordBool); safecall;
    function Get_SolutionIndex: Integer; safecall;
    procedure Set_SolutionIndex(index: Integer); safecall;
    property type_: Integer read Get_type_ write Set_type_;
    property autoSize: WordBool read Get_autoSize write Set_autoSize;
    property angle: Double read Get_angle write Set_angle;
    property distance: Double read Get_distance write Set_distance;
    property ReverseDirection: WordBool read Get_ReverseDirection write Set_ReverseDirection;
    property OriginOnCurve: WordBool read Get_OriginOnCurve write Set_OriginOnCurve;
    property Selections: OleVariant read Get_Selections write Set_Selections;
    property ProjectionType: Integer read Get_ProjectionType write Set_ProjectionType;
    property UseNormalPlane: WordBool read Get_UseNormalPlane write Set_UseNormalPlane;
    property SolutionIndex: Integer read Get_SolutionIndex write Set_SolutionIndex;
  end;

// *********************************************************************//
// DispIntf:  IRefPlaneFeatureDataDisp
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {02B5CBF8-5104-41F7-901D-A4DCBA547029}
// *********************************************************************//
  IRefPlaneFeatureDataDisp = dispinterface
    ['{02B5CBF8-5104-41F7-901D-A4DCBA547029}']
    function AccessSelections(const topDoc: IDispatch; const component: IDispatch): WordBool; dispid 1;
    function IAccessSelections(const topDoc: IModelDoc2; const component: IComponent2): WordBool; dispid 2;
    procedure ReleaseSelectionAccess; dispid 3;
    property type_: Integer dispid 4;
    property autoSize: WordBool dispid 5;
    property angle: Double dispid 6;
    property distance: Double dispid 7;
    property ReverseDirection: WordBool dispid 8;
    property OriginOnCurve: WordBool dispid 9;
    property Selections: OleVariant dispid 10;
    function GetSelectionsCount: Integer; dispid 11;
    function IGetSelections(count: Integer): IDispatch; dispid 12;
    procedure ISetSelections(count: Integer; var Entities: IDispatch); dispid 13;
    property ProjectionType: Integer dispid 14;
    property UseNormalPlane: WordBool dispid 15;
    property SolutionIndex: Integer dispid 16;
  end;

// *********************************************************************//
// Interface: ILoftedBendsFeatureData
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {619DEE3D-3398-48FE-8818-EDD4169FDDB8}
// *********************************************************************//
  ILoftedBendsFeatureData = interface(IDispatch)
    ['{619DEE3D-3398-48FE-8818-EDD4169FDDB8}']
    function IAccessSelections(const topDoc: IModelDoc2; const component: IComponent2): WordBool; safecall;
    function AccessSelections(const topDoc: IDispatch; const component: IDispatch): WordBool; safecall;
    procedure ReleaseSelectionAccess; safecall;
    function GetProfileCount: Integer; safecall;
    function IGetProfiles(count: Integer): IDispatch; safecall;
    procedure ISetProfiles(count: Integer; var pDisp: IDispatch); safecall;
    function Get_Profiles: OleVariant; safecall;
    procedure Set_Profiles(pDisp: OleVariant); safecall;
    function Get_thickness: Double; safecall;
    procedure Set_thickness(thickness: Double); safecall;
    function Get_direction: WordBool; safecall;
    procedure Set_direction(direction: WordBool); safecall;
    property Profiles: OleVariant read Get_Profiles write Set_Profiles;
    property thickness: Double read Get_thickness write Set_thickness;
    property direction: WordBool read Get_direction write Set_direction;
  end;

// *********************************************************************//
// DispIntf:  ILoftedBendsFeatureDataDisp
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {619DEE3D-3398-48FE-8818-EDD4169FDDB8}
// *********************************************************************//
  ILoftedBendsFeatureDataDisp = dispinterface
    ['{619DEE3D-3398-48FE-8818-EDD4169FDDB8}']
    function IAccessSelections(const topDoc: IModelDoc2; const component: IComponent2): WordBool; dispid 1;
    function AccessSelections(const topDoc: IDispatch; const component: IDispatch): WordBool; dispid 2;
    procedure ReleaseSelectionAccess; dispid 3;
    function GetProfileCount: Integer; dispid 4;
    function IGetProfiles(count: Integer): IDispatch; dispid 5;
    procedure ISetProfiles(count: Integer; var pDisp: IDispatch); dispid 6;
    property Profiles: OleVariant dispid 7;
    property thickness: Double dispid 8;
    property direction: WordBool dispid 9;
  end;

// *********************************************************************//
// Interface: IReferencePointCurveFeatureData
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {8066432C-1376-4D6B-AA64-46B2D3CC5D60}
// *********************************************************************//
  IReferencePointCurveFeatureData = interface(IDispatch)
    ['{8066432C-1376-4D6B-AA64-46B2D3CC5D60}']
    function AccessSelections(const topDoc: IModelDoc2; const component: IComponent2): WordBool; safecall;
    procedure ReleaseSelectionAccess; safecall;
    function Get_ClosedCurve: WordBool; safecall;
    procedure Set_ClosedCurve(ret: WordBool); safecall;
    function GetThroughPointCount: Integer; safecall;
    function GetThroughPoints(out type_: OleVariant): OleVariant; safecall;
    procedure SetThroughPoints(pts: OleVariant); safecall;
    function IGetThroughPoints(count: Integer; out type_: Integer): IDispatch; safecall;
    procedure ISetThroughPoints(count: Integer; var pts: IDispatch); safecall;
    property ClosedCurve: WordBool read Get_ClosedCurve write Set_ClosedCurve;
  end;

// *********************************************************************//
// DispIntf:  IReferencePointCurveFeatureDataDisp
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {8066432C-1376-4D6B-AA64-46B2D3CC5D60}
// *********************************************************************//
  IReferencePointCurveFeatureDataDisp = dispinterface
    ['{8066432C-1376-4D6B-AA64-46B2D3CC5D60}']
    function AccessSelections(const topDoc: IModelDoc2; const component: IComponent2): WordBool; dispid 1;
    procedure ReleaseSelectionAccess; dispid 2;
    property ClosedCurve: WordBool dispid 3;
    function GetThroughPointCount: Integer; dispid 4;
    function GetThroughPoints(out type_: OleVariant): OleVariant; dispid 5;
    procedure SetThroughPoints(pts: OleVariant); dispid 6;
    function IGetThroughPoints(count: Integer; out type_: Integer): IDispatch; dispid 7;
    procedure ISetThroughPoints(count: Integer; var pts: IDispatch); dispid 8;
  end;

// *********************************************************************//
// Interface: IFreePointCurveFeatureData
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {C11527FA-E833-4453-80DD-229F6BACC5D9}
// *********************************************************************//
  IFreePointCurveFeatureData = interface(IDispatch)
    ['{C11527FA-E833-4453-80DD-229F6BACC5D9}']
    function Get_pointArray: OleVariant; safecall;
    procedure Set_pointArray(ArrayOut: OleVariant); safecall;
    function GetPointCount: Integer; safecall;
    function IGetPointArray: Double; safecall;
    procedure ISetPointArray(featCount: Integer; var ArrayDataIn: Double); safecall;
    function SavePointsToFile(const fileName: WideString): WordBool; safecall;
    function LoadPointsFromFile(const fileName: WideString): WordBool; safecall;
    property pointArray: OleVariant read Get_pointArray write Set_pointArray;
  end;

// *********************************************************************//
// DispIntf:  IFreePointCurveFeatureDataDisp
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {C11527FA-E833-4453-80DD-229F6BACC5D9}
// *********************************************************************//
  IFreePointCurveFeatureDataDisp = dispinterface
    ['{C11527FA-E833-4453-80DD-229F6BACC5D9}']
    property pointArray: OleVariant dispid 1;
    function GetPointCount: Integer; dispid 2;
    function IGetPointArray: Double; dispid 3;
    procedure ISetPointArray(featCount: Integer; var ArrayDataIn: Double); dispid 4;
    function SavePointsToFile(const fileName: WideString): WordBool; dispid 5;
    function LoadPointsFromFile(const fileName: WideString): WordBool; dispid 6;
  end;

// *********************************************************************//
// Interface: ICompositeCurveFeatureData
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {8D5CFAB8-A9F9-4B7F-9275-27E2062C324E}
// *********************************************************************//
  ICompositeCurveFeatureData = interface(IDispatch)
    ['{8D5CFAB8-A9F9-4B7F-9275-27E2062C324E}']
    function AccessSelections(const topDoc: IModelDoc2; const component: IComponent2): WordBool; safecall;
    procedure ReleaseSelectionAccess; safecall;
    function GetEntitiesToJoinCount: Integer; safecall;
    function GetEntitiesToJoin(out type_: OleVariant): OleVariant; safecall;
    procedure SetEntitiesToJoin(entVar: OleVariant); safecall;
    function IGetEntitiesToJoin(count: Integer; out type_: Integer): IDispatch; safecall;
    procedure ISetEntitiesToJoin(count: Integer; var ents: IDispatch); safecall;
  end;

// *********************************************************************//
// DispIntf:  ICompositeCurveFeatureDataDisp
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {8D5CFAB8-A9F9-4B7F-9275-27E2062C324E}
// *********************************************************************//
  ICompositeCurveFeatureDataDisp = dispinterface
    ['{8D5CFAB8-A9F9-4B7F-9275-27E2062C324E}']
    function AccessSelections(const topDoc: IModelDoc2; const component: IComponent2): WordBool; dispid 1;
    procedure ReleaseSelectionAccess; dispid 2;
    function GetEntitiesToJoinCount: Integer; dispid 3;
    function GetEntitiesToJoin(out type_: OleVariant): OleVariant; dispid 4;
    procedure SetEntitiesToJoin(entVar: OleVariant); dispid 5;
    function IGetEntitiesToJoin(count: Integer; out type_: Integer): IDispatch; dispid 6;
    procedure ISetEntitiesToJoin(count: Integer; var ents: IDispatch); dispid 7;
  end;

// *********************************************************************//
// Interface: IHelixFeatureData
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {70E634EE-890A-421F-ABCE-5208A563423C}
// *********************************************************************//
  IHelixFeatureData = interface(IDispatch)
    ['{70E634EE-890A-421F-ABCE-5208A563423C}']
    function Get_DefinedBy: Integer; safecall;
    procedure Set_DefinedBy(type_: Integer); safecall;
    function Get_height: Double; safecall;
    procedure Set_height(ht: Double); safecall;
    function Get_pitch: Double; safecall;
    procedure Set_pitch(pitch: Double); safecall;
    function Get_revolution: Double; safecall;
    procedure Set_revolution(rev: Double); safecall;
    function Get_StartingAngle: Double; safecall;
    procedure Set_StartingAngle(ang: Double); safecall;
    function Get_ReverseDirection: WordBool; safecall;
    procedure Set_ReverseDirection(dir: WordBool); safecall;
    function Get_Clockwise: WordBool; safecall;
    procedure Set_Clockwise(dir: WordBool); safecall;
    function Get_Taper: WordBool; safecall;
    procedure Set_Taper(Taper: WordBool); safecall;
    function Get_taperangle: Double; safecall;
    procedure Set_taperangle(ang: Double); safecall;
    function Get_TaperOutward: WordBool; safecall;
    procedure Set_TaperOutward(outward: WordBool); safecall;
    property DefinedBy: Integer read Get_DefinedBy write Set_DefinedBy;
    property height: Double read Get_height write Set_height;
    property pitch: Double read Get_pitch write Set_pitch;
    property revolution: Double read Get_revolution write Set_revolution;
    property StartingAngle: Double read Get_StartingAngle write Set_StartingAngle;
    property ReverseDirection: WordBool read Get_ReverseDirection write Set_ReverseDirection;
    property Clockwise: WordBool read Get_Clockwise write Set_Clockwise;
    property Taper: WordBool read Get_Taper write Set_Taper;
    property taperangle: Double read Get_taperangle write Set_taperangle;
    property TaperOutward: WordBool read Get_TaperOutward write Set_TaperOutward;
  end;

// *********************************************************************//
// DispIntf:  IHelixFeatureDataDisp
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {70E634EE-890A-421F-ABCE-5208A563423C}
// *********************************************************************//
  IHelixFeatureDataDisp = dispinterface
    ['{70E634EE-890A-421F-ABCE-5208A563423C}']
    property DefinedBy: Integer dispid 1;
    property height: Double dispid 2;
    property pitch: Double dispid 3;
    property revolution: Double dispid 4;
    property StartingAngle: Double dispid 5;
    property ReverseDirection: WordBool dispid 6;
    property Clockwise: WordBool dispid 7;
    property Taper: WordBool dispid 8;
    property taperangle: Double dispid 9;
    property TaperOutward: WordBool dispid 10;
  end;

// *********************************************************************//
// Interface: IImportedCurveFeatureData
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {6DC71EC8-09F6-4D6F-AC3F-19D8EA258E0B}
// *********************************************************************//
  IImportedCurveFeatureData = interface(IDispatch)
    ['{6DC71EC8-09F6-4D6F-AC3F-19D8EA258E0B}']
    function Get_curves: OleVariant; safecall;
    procedure Set_curves(curveVar: OleVariant); safecall;
    function GetCurveCount: Integer; safecall;
    function IGetCurves(count: Integer): IDispatch; safecall;
    procedure ISetCurves(count: Integer; var dispArr: IDispatch); safecall;
    procedure SetBody(const dispBody: IBody2); safecall;
    property curves: OleVariant read Get_curves write Set_curves;
  end;

// *********************************************************************//
// DispIntf:  IImportedCurveFeatureDataDisp
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {6DC71EC8-09F6-4D6F-AC3F-19D8EA258E0B}
// *********************************************************************//
  IImportedCurveFeatureDataDisp = dispinterface
    ['{6DC71EC8-09F6-4D6F-AC3F-19D8EA258E0B}']
    property curves: OleVariant dispid 1;
    function GetCurveCount: Integer; dispid 2;
    function IGetCurves(count: Integer): IDispatch; dispid 3;
    procedure ISetCurves(count: Integer; var dispArr: IDispatch); dispid 4;
    procedure SetBody(const dispBody: IBody2); dispid 5;
  end;

// *********************************************************************//
// Interface: ISketchRegion
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {EB53B511-E23D-4B6A-B48D-21828AF5F151}
// *********************************************************************//
  ISketchRegion = interface(IDispatch)
    ['{EB53B511-E23D-4B6A-B48D-21828AF5F151}']
    function Get_sketch: ISketch; safecall;
    function GetEdgesCount: Integer; safecall;
    function GetEdges: OleVariant; safecall;
    function IGetEdges(count: Integer): IEdge; safecall;
    function Select(Append: WordBool; mark: Integer): WordBool; safecall;
    function DeSelect: WordBool; safecall;
    property sketch: ISketch read Get_sketch;
  end;

// *********************************************************************//
// DispIntf:  ISketchRegionDisp
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {EB53B511-E23D-4B6A-B48D-21828AF5F151}
// *********************************************************************//
  ISketchRegionDisp = dispinterface
    ['{EB53B511-E23D-4B6A-B48D-21828AF5F151}']
    property sketch: ISketch readonly dispid 1;
    function GetEdgesCount: Integer; dispid 2;
    function GetEdges: OleVariant; dispid 3;
    function IGetEdges(count: Integer): IEdge; dispid 4;
    function Select(Append: WordBool; mark: Integer): WordBool; dispid 5;
    function DeSelect: WordBool; dispid 6;
  end;

// *********************************************************************//
// Interface: ISketchContour
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {EB53B513-E23D-4B6A-B48D-21828AF5F151}
// *********************************************************************//
  ISketchContour = interface(IDispatch)
    ['{EB53B513-E23D-4B6A-B48D-21828AF5F151}']
    function Get_sketch: ISketch; safecall;
    function GetEdgesCount: Integer; safecall;
    function GetEdges: OleVariant; safecall;
    function IGetEdges(count: Integer): IEdge; safecall;
    function GetSketchSegmentsCount: Integer; safecall;
    function GetSketchSegments: OleVariant; safecall;
    function IGetSketchSegments(count: Integer): ISketchSegment; safecall;
    function Select(Append: WordBool; mark: Integer): WordBool; safecall;
    function DeSelect: WordBool; safecall;
    property sketch: ISketch read Get_sketch;
  end;

// *********************************************************************//
// DispIntf:  ISketchContourDisp
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {EB53B513-E23D-4B6A-B48D-21828AF5F151}
// *********************************************************************//
  ISketchContourDisp = dispinterface
    ['{EB53B513-E23D-4B6A-B48D-21828AF5F151}']
    property sketch: ISketch readonly dispid 1;
    function GetEdgesCount: Integer; dispid 2;
    function GetEdges: OleVariant; dispid 3;
    function IGetEdges(count: Integer): IEdge; dispid 4;
    function GetSketchSegmentsCount: Integer; dispid 5;
    function GetSketchSegments: OleVariant; dispid 6;
    function IGetSketchSegments(count: Integer): ISketchSegment; dispid 7;
    function Select(Append: WordBool; mark: Integer): WordBool; dispid 8;
    function DeSelect: WordBool; dispid 9;
  end;

// *********************************************************************//
// DispIntf:  DSldWorksEvents
// Flags:     (4112) Hidden Dispatchable
// GUID:      {83A33D22-37C5-11CE-BFD4-00400513BB57}
// *********************************************************************//
  DSldWorksEvents = dispinterface
    ['{83A33D22-37C5-11CE-BFD4-00400513BB57}']
    function FileOpenNotify(const fileName: WideString): Integer; dispid 1;
    function FileNewNotify(const newDoc: IDispatch; DocType: Integer): Integer; dispid 2;
    function DestroyNotify: Integer; dispid 3;
    function ActiveDocChangeNotify: Integer; dispid 4;
    function ActiveModelDocChangeNotify: Integer; dispid 5;
    function PropertySheetCreateNotify(const Sheet: IDispatch; sheetType: Integer): Integer; dispid 6;
    function NonNativeFileOpenNotify(const fileName: WideString): Integer; dispid 7;
    function LightSheetCreateNotify(const NewSheet: IDispatch; sheetType: Integer; lightId: Integer): Integer; dispid 8;
    function DocumentConversionNotify(const fileName: WideString): Integer; dispid 9;
    function DocumentLoadNotify(const docTitle: WideString; const docPath: WideString): Integer; dispid 11;
    function FileNewNotify2(const newDoc: IDispatch; DocType: Integer; 
                            const templateName: WideString): Integer; dispid 12;
    function FileOpenNotify2(const fileName: WideString): Integer; dispid 13;
    function ReferenceNotFoundNotify(const fileName: WideString): Integer; dispid 14;
    function PromptForFilenameNotify(openOrSave: Integer; const suggestedFileName: WideString; 
                                     DocType: Integer; cause: Integer): Integer; dispid 15;
    function BeginTranslationNotify(const fileName: WideString; options: Integer): Integer; dispid 16;
    function EndTranslationNotify(const fileName: WideString; options: Integer): Integer; dispid 17;
  end;

// *********************************************************************//
// DispIntf:  DPartDocEvents
// Flags:     (4112) Hidden Dispatchable
// GUID:      {83A33D32-37C5-11CE-BFD4-00400513BB57}
// *********************************************************************//
  DPartDocEvents = dispinterface
    ['{83A33D32-37C5-11CE-BFD4-00400513BB57}']
    function RegenNotify: Integer; dispid 1;
    function DestroyNotify: Integer; dispid 2;
    function RegenPostNotify: Integer; dispid 3;
    function ViewNewNotify: Integer; dispid 4;
    function NewSelectionNotify: Integer; dispid 5;
    function FileSaveNotify(const fileName: WideString): Integer; dispid 6;
    function FileSaveAsNotify(const fileName: WideString): Integer; dispid 7;
    function LoadFromStorageNotify: Integer; dispid 8;
    function SaveToStorageNotify: Integer; dispid 9;
    function ActiveConfigChangeNotify: Integer; dispid 10;
    function ActiveConfigChangePostNotify: Integer; dispid 11;
    function ViewNewNotify2(const viewBeingAdded: IDispatch): Integer; dispid 14;
    function LightingDialogCreateNotify(const dialog: IDispatch): Integer; dispid 15;
    function AddItemNotify(entityType: Integer; const itemName: WideString): Integer; dispid 16;
    function RenameItemNotify(entityType: Integer; const oldName: WideString; 
                              const newName: WideString): Integer; dispid 17;
    function DeleteItemNotify(entityType: Integer; const itemName: WideString): Integer; dispid 18;
    function ModifyNotify: Integer; dispid 19;
    function FileReloadNotify: Integer; dispid 20;
    function AddCustomPropertyNotify(const propName: WideString; const configuration: WideString; 
                                     const Value: WideString; valueType: Integer): Integer; dispid 21;
    function ChangeCustomPropertyNotify(const propName: WideString; 
                                        const configuration: WideString; 
                                        const oldValue: WideString; const newValue: WideString; 
                                        valueType: Integer): Integer; dispid 22;
    function DeleteCustomPropertyNotify(const propName: WideString; 
                                        const configuration: WideString; const Value: WideString; 
                                        valueType: Integer): Integer; dispid 23;
    function FeatureEditPreNotify(const editFeature: IDispatch): Integer; dispid 24;
    function FeatureSketchEditPreNotify(const editFeature: IDispatch; const featureSketch: IDispatch): Integer; dispid 25;
    function FileSaveAsNotify2(const fileName: WideString): Integer; dispid 26;
    function DeleteSelectionPreNotify: Integer; dispid 27;
    function FileReloadPreNotify: Integer; dispid 28;
    function BodyVisibleChangeNotify: Integer; dispid 29;
    function RegenPostNotify2(const stopFeature: IDispatch): Integer; dispid 30;
    function FileSavePostNotify(saveType: Integer; const fileName: WideString): Integer; dispid 31;
    function LoadFromStorageStoreNotify: Integer; dispid 32;
    function SaveToStorageStoreNotify: Integer; dispid 33;
  end;

// *********************************************************************//
// DispIntf:  DDrawingDocEvents
// Flags:     (4112) Hidden Dispatchable
// GUID:      {83A33D34-37C5-11CE-BFD4-00400513BB57}
// *********************************************************************//
  DDrawingDocEvents = dispinterface
    ['{83A33D34-37C5-11CE-BFD4-00400513BB57}']
    function RegenNotify: Integer; dispid 1;
    function DestroyNotify: Integer; dispid 2;
    function RegenPostNotify: Integer; dispid 3;
    function ViewNewNotify: Integer; dispid 4;
    function NewSelectionNotify: Integer; dispid 5;
    function FileSaveNotify(const fileName: WideString): Integer; dispid 6;
    function FileSaveAsNotify(const fileName: WideString): Integer; dispid 7;
    function LoadFromStorageNotify: Integer; dispid 8;
    function SaveToStorageNotify: Integer; dispid 9;
    function ActiveConfigChangeNotify: Integer; dispid 12;
    function ActiveConfigChangePostNotify: Integer; dispid 13;
    function ViewNewNotify2(const viewBeingAdded: IDispatch): Integer; dispid 14;
    function AddItemNotify(entityType: Integer; const itemName: WideString): Integer; dispid 15;
    function RenameItemNotify(entityType: Integer; const oldName: WideString; 
                              const newName: WideString): Integer; dispid 16;
    function DeleteItemNotify(entityType: Integer; const itemName: WideString): Integer; dispid 17;
    function ModifyNotify: Integer; dispid 18;
    function FileReloadNotify: Integer; dispid 19;
    function AddCustomPropertyNotify(const propName: WideString; const configuration: WideString; 
                                     const Value: WideString; valueType: Integer): Integer; dispid 20;
    function ChangeCustomPropertyNotify(const propName: WideString; 
                                        const configuration: WideString; 
                                        const oldValue: WideString; const newValue: WideString; 
                                        valueType: Integer): Integer; dispid 21;
    function DeleteCustomPropertyNotify(const propName: WideString; 
                                        const configuration: WideString; const Value: WideString; 
                                        valueType: Integer): Integer; dispid 22;
    function FileSaveAsNotify2(const fileName: WideString): Integer; dispid 23;
    function DeleteSelectionPreNotify: Integer; dispid 24;
    function FileReloadPreNotify: Integer; dispid 25;
    function FileSavePostNotify(saveType: Integer; const fileName: WideString): Integer; dispid 26;
    function LoadFromStorageStoreNotify: Integer; dispid 27;
    function SaveToStorageStoreNotify: Integer; dispid 28;
  end;

// *********************************************************************//
// DispIntf:  DAssemblyDocEvents
// Flags:     (4112) Hidden Dispatchable
// GUID:      {83A33D35-37C5-11CE-BFD4-00400513BB57}
// *********************************************************************//
  DAssemblyDocEvents = dispinterface
    ['{83A33D35-37C5-11CE-BFD4-00400513BB57}']
    function RegenNotify: Integer; dispid 1;
    function DestroyNotify: Integer; dispid 2;
    function RegenPostNotify: Integer; dispid 3;
    function ViewNewNotify: Integer; dispid 4;
    function NewSelectionNotify: Integer; dispid 5;
    function FileSaveNotify(const fileName: WideString): Integer; dispid 6;
    function FileSaveAsNotify(const fileName: WideString): Integer; dispid 7;
    function LoadFromStorageNotify: Integer; dispid 8;
    function SaveToStorageNotify: Integer; dispid 9;
    function ActiveConfigChangeNotify: Integer; dispid 10;
    function ActiveConfigChangePostNotify: Integer; dispid 11;
    function BeginInContextEditNotify(const docBeingEdited: IDispatch; DocType: Integer): Integer; dispid 14;
    function EndInContextEditNotify(const docBeingEdited: IDispatch; DocType: Integer): Integer; dispid 15;
    function ViewNewNotify2(const viewBeingAdded: IDispatch): Integer; dispid 16;
    function LightingDialogCreateNotify(const dialog: IDispatch): Integer; dispid 17;
    function AddItemNotify(entityType: Integer; const itemName: WideString): Integer; dispid 18;
    function RenameItemNotify(entityType: Integer; const oldName: WideString; 
                              const newName: WideString): Integer; dispid 19;
    function DeleteItemNotify(entityType: Integer; const itemName: WideString): Integer; dispid 20;
    function ModifyNotify: Integer; dispid 21;
    function ComponentStateChangeNotify(const componentModel: IDispatch; oldCompState: Smallint; 
                                        newCompState: Smallint): Integer; dispid 22;
    function FileDropNotify(const fileName: WideString): Integer; dispid 23;
    function FileReloadNotify: Integer; dispid 24;
    function ComponentStateChangeNotify2(const componentModel: IDispatch; 
                                         const compName: WideString; oldCompState: Smallint; 
                                         newCompState: Smallint): Integer; dispid 25;
    function AddCustomPropertyNotify(const propName: WideString; const configuration: WideString; 
                                     const Value: WideString; valueType: Integer): Integer; dispid 26;
    function ChangeCustomPropertyNotify(const propName: WideString; 
                                        const configuration: WideString; 
                                        const oldValue: WideString; const newValue: WideString; 
                                        valueType: Integer): Integer; dispid 27;
    function DeleteCustomPropertyNotify(const propName: WideString; 
                                        const configuration: WideString; const Value: WideString; 
                                        valueType: Integer): Integer; dispid 28;
    function FeatureEditPreNotify(const editFeature: IDispatch): Integer; dispid 29;
    function FeatureSketchEditPreNotify(const editFeature: IDispatch; const featureSketch: IDispatch): Integer; dispid 30;
    function FileSaveAsNotify2(const fileName: WideString): Integer; dispid 31;
    function InterferenceNotify(var pComp: OleVariant; var pFace: OleVariant): Integer; dispid 32;
    function DeleteSelectionPreNotify: Integer; dispid 33;
    function FileReloadPreNotify: Integer; dispid 34;
    function ComponentMoveNotify: Integer; dispid 35;
    function ComponentVisibleChangeNotify: Integer; dispid 36;
    function BodyVisibleChangeNotify: Integer; dispid 37;
    function FileDropPreNotify(const fileName: WideString): Integer; dispid 38;
    function FileSavePostNotify(saveType: Integer; const fileName: WideString): Integer; dispid 39;
    function LoadFromStorageStoreNotify: Integer; dispid 40;
    function SaveToStorageStoreNotify: Integer; dispid 41;
  end;

// *********************************************************************//
// DispIntf:  DModelViewEvents
// Flags:     (4112) Hidden Dispatchable
// GUID:      {83A33D4C-37C5-11CE-BFD4-00400513BB57}
// *********************************************************************//
  DModelViewEvents = dispinterface
    ['{83A33D4C-37C5-11CE-BFD4-00400513BB57}']
    function RepaintNotify(paintType: Integer): Integer; dispid 1;
    function ViewChangeNotify(view: OleVariant): Integer; dispid 2;
    function DestroyNotify: Integer; dispid 3;
    function RepaintPostNotify: Integer; dispid 4;
    function BufferSwapNotify: Integer; dispid 5;
    function DestroyNotify2(destroyType: Integer): Integer; dispid 6;
  end;

// *********************************************************************//
// DispIntf:  DFeatMgrViewEvents
// Flags:     (4112) Hidden Dispatchable
// GUID:      {83A33D76-27C5-11CE-BFD4-00400513BB57}
// *********************************************************************//
  DFeatMgrViewEvents = dispinterface
    ['{83A33D76-27C5-11CE-BFD4-00400513BB57}']
    function ActivateNotify(var view: OleVariant): Integer; dispid 1;
    function DeactivateNotify(var view: OleVariant): Integer; dispid 2;
    function DestroyNotify(var view: OleVariant): Integer; dispid 3;
  end;

// *********************************************************************//
// DispIntf:  DSWPropertySheetEvents
// Flags:     (4112) Hidden Dispatchable
// GUID:      {E05FF9E0-FC82-11D2-9395-00C04F79BFFE}
// *********************************************************************//
  DSWPropertySheetEvents = dispinterface
    ['{E05FF9E0-FC82-11D2-9395-00C04F79BFFE}']
    function DestroyNotify: Integer; dispid 1;
    function HelpNotify(page: Integer): Integer; dispid 2;
  end;

// *********************************************************************//
// DispIntf:  ISdmDoc
// Flags:     (4096) Dispatchable
// GUID:      {AC048CEA-AE93-11D3-AEA7-00C04F60F02A}
// *********************************************************************//
  ISdmDoc = dispinterface
    ['{AC048CEA-AE93-11D3-AEA7-00C04F60F02A}']
  end;

// *********************************************************************//
// Interface: IPropertyManagerPageListbox
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {CDB49982-1A18-11D5-AF24-00C04F603FAF}
// *********************************************************************//
  IPropertyManagerPageListbox = interface(IDispatch)
    ['{CDB49982-1A18-11D5-AF24-00C04F603FAF}']
    procedure AddItems(Texts: OleVariant); safecall;
    procedure IAddItems(TextCount: Smallint; var Texts: WideString); safecall;
    procedure Clear; safecall;
    function Get_CurrentSelection: Smallint; safecall;
    procedure Set_CurrentSelection(Item: Smallint); safecall;
    function Get_height: Smallint; safecall;
    procedure Set_height(height: Smallint); safecall;
    function Get_ItemText(Item: Smallint): WideString; safecall;
    function Get_Style: Integer; safecall;
    procedure Set_Style(Style: Integer); safecall;
    property CurrentSelection: Smallint read Get_CurrentSelection write Set_CurrentSelection;
    property height: Smallint read Get_height write Set_height;
    property ItemText[Item: Smallint]: WideString read Get_ItemText;
    property Style: Integer read Get_Style write Set_Style;
  end;

// *********************************************************************//
// DispIntf:  IPropertyManagerPageListboxDisp
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {CDB49982-1A18-11D5-AF24-00C04F603FAF}
// *********************************************************************//
  IPropertyManagerPageListboxDisp = dispinterface
    ['{CDB49982-1A18-11D5-AF24-00C04F603FAF}']
    procedure AddItems(Texts: OleVariant); dispid 196609;
    procedure IAddItems(TextCount: Smallint; var Texts: WideString); dispid 196610;
    procedure Clear; dispid 196611;
    property CurrentSelection: Smallint dispid 196612;
    property height: Smallint dispid 196613;
    property ItemText[Item: Smallint]: WideString readonly dispid 196614;
    property Style: Integer dispid 196615;
  end;

// *********************************************************************//
// Interface: IPropertyManagerPageNumberbox
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {96567554-1EDA-11D5-AF25-00C04F603FAF}
// *********************************************************************//
  IPropertyManagerPageNumberbox = interface(IDispatch)
    ['{96567554-1EDA-11D5-AF25-00C04F603FAF}']
    function Get_Value: Double; safecall;
    procedure Set_Value(Value: Double); safecall;
    procedure SetRange(units: Integer; Minimum: Double; Maximum: Double; Increment: Double; 
                       Inclusive: WordBool); safecall;
    property Value: Double read Get_Value write Set_Value;
  end;

// *********************************************************************//
// DispIntf:  IPropertyManagerPageNumberboxDisp
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {96567554-1EDA-11D5-AF25-00C04F603FAF}
// *********************************************************************//
  IPropertyManagerPageNumberboxDisp = dispinterface
    ['{96567554-1EDA-11D5-AF25-00C04F603FAF}']
    property Value: Double dispid 196609;
    procedure SetRange(units: Integer; Minimum: Double; Maximum: Double; Increment: Double; 
                       Inclusive: WordBool); dispid 196610;
  end;

// *********************************************************************//
// Interface: IPropertyManagerPageSelectionbox
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {96567556-1EDA-11D5-AF25-00C04F603FAF}
// *********************************************************************//
  IPropertyManagerPageSelectionbox = interface(IDispatch)
    ['{96567556-1EDA-11D5-AF25-00C04F603FAF}']
    function Get_height: Smallint; safecall;
    procedure Set_height(height: Smallint); safecall;
    function Get_mark: Integer; safecall;
    procedure Set_mark(mark: Integer); safecall;
    function Get_SingleEntityOnly: WordBool; safecall;
    procedure Set_SingleEntityOnly(Single: WordBool); safecall;
    procedure SetSelectionFilters(Filters: OleVariant); safecall;
    procedure ISetSelectionFilters(FilterCount: Smallint; var Filters: Integer); safecall;
    function GetSelectionFocus: WordBool; safecall;
    procedure SetSelectionFocus; safecall;
    function SetSelectionColor(Special: WordBool; Color: Integer): WordBool; safecall;
    function SetCalloutLabel(const Label_: WideString): WordBool; safecall;
    function Get_Callout: ICallout; safecall;
    function Get_Style: Integer; safecall;
    procedure Set_Style(Style: Integer); safecall;
    property height: Smallint read Get_height write Set_height;
    property mark: Integer read Get_mark write Set_mark;
    property SingleEntityOnly: WordBool read Get_SingleEntityOnly write Set_SingleEntityOnly;
    property Callout: ICallout read Get_Callout;
    property Style: Integer read Get_Style write Set_Style;
  end;

// *********************************************************************//
// DispIntf:  IPropertyManagerPageSelectionboxDisp
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {96567556-1EDA-11D5-AF25-00C04F603FAF}
// *********************************************************************//
  IPropertyManagerPageSelectionboxDisp = dispinterface
    ['{96567556-1EDA-11D5-AF25-00C04F603FAF}']
    property height: Smallint dispid 196609;
    property mark: Integer dispid 196610;
    property SingleEntityOnly: WordBool dispid 196611;
    procedure SetSelectionFilters(Filters: OleVariant); dispid 196612;
    procedure ISetSelectionFilters(FilterCount: Smallint; var Filters: Integer); dispid 196613;
    function GetSelectionFocus: WordBool; dispid 196614;
    procedure SetSelectionFocus; dispid 196615;
    function SetSelectionColor(Special: WordBool; Color: Integer): WordBool; dispid 196616;
    function SetCalloutLabel(const Label_: WideString): WordBool; dispid 196617;
    property Callout: ICallout readonly dispid 196618;
    property Style: Integer dispid 196619;
  end;

// *********************************************************************//
// Interface: IRibFeatureData2
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {EFE4958E-B373-4849-A93C-01BFDEBC830D}
// *********************************************************************//
  IRibFeatureData2 = interface(IDispatch)
    ['{EFE4958E-B373-4849-A93C-01BFDEBC830D}']
    function Get_IsTwoSided: WordBool; safecall;
    procedure Set_IsTwoSided(twoSided: WordBool); safecall;
    function Get_reverseThicknessDir: WordBool; safecall;
    procedure Set_reverseThicknessDir(reverse: WordBool); safecall;
    function Get_thickness: Double; safecall;
    procedure Set_thickness(thickness: Double); safecall;
    function Get_RefSketchIndex: SYSINT; safecall;
    procedure Set_RefSketchIndex(index: SYSINT); safecall;
    function NextReference: SYSINT; safecall;
    function Get_FlipSide: WordBool; safecall;
    procedure Set_FlipSide(FlipSide: WordBool); safecall;
    function Get_EnableDraft: WordBool; safecall;
    procedure Set_EnableDraft(EnableDraft: WordBool); safecall;
    function Get_draftOutward: WordBool; safecall;
    procedure Set_draftOutward(draftOutward: WordBool); safecall;
    function Get_draftAngle: Double; safecall;
    procedure Set_draftAngle(angle: Double); safecall;
    function Get_ExtrusionDirection: Integer; safecall;
    procedure Set_ExtrusionDirection(dir: Integer); safecall;
    function Get_type_: Integer; safecall;
    procedure Set_type_(typ: Integer); safecall;
    property IsTwoSided: WordBool read Get_IsTwoSided write Set_IsTwoSided;
    property reverseThicknessDir: WordBool read Get_reverseThicknessDir write Set_reverseThicknessDir;
    property thickness: Double read Get_thickness write Set_thickness;
    property RefSketchIndex: SYSINT read Get_RefSketchIndex write Set_RefSketchIndex;
    property FlipSide: WordBool read Get_FlipSide write Set_FlipSide;
    property EnableDraft: WordBool read Get_EnableDraft write Set_EnableDraft;
    property draftOutward: WordBool read Get_draftOutward write Set_draftOutward;
    property draftAngle: Double read Get_draftAngle write Set_draftAngle;
    property ExtrusionDirection: Integer read Get_ExtrusionDirection write Set_ExtrusionDirection;
    property type_: Integer read Get_type_ write Set_type_;
  end;

// *********************************************************************//
// DispIntf:  IRibFeatureData2Disp
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {EFE4958E-B373-4849-A93C-01BFDEBC830D}
// *********************************************************************//
  IRibFeatureData2Disp = dispinterface
    ['{EFE4958E-B373-4849-A93C-01BFDEBC830D}']
    property IsTwoSided: WordBool dispid 1;
    property reverseThicknessDir: WordBool dispid 2;
    property thickness: Double dispid 3;
    property RefSketchIndex: SYSINT dispid 4;
    function NextReference: SYSINT; dispid 5;
    property FlipSide: WordBool dispid 6;
    property EnableDraft: WordBool dispid 7;
    property draftOutward: WordBool dispid 8;
    property draftAngle: Double dispid 9;
    property ExtrusionDirection: Integer dispid 10;
    property type_: Integer dispid 11;
  end;

// *********************************************************************//
// Interface: IDomeFeatureData2
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {6E8FAB36-9E1C-4A84-A160-1E68B703431C}
// *********************************************************************//
  IDomeFeatureData2 = interface(IDispatch)
    ['{6E8FAB36-9E1C-4A84-A160-1E68B703431C}']
    function Get_height: Double; safecall;
    procedure Set_height(height: Double); safecall;
    function Get_reverseDir: WordBool; safecall;
    procedure Set_reverseDir(reverse: WordBool); safecall;
    function Get_Elliptical: WordBool; safecall;
    procedure Set_Elliptical(Elliptical: WordBool); safecall;
    function AccessSelections(const topDoc: IDispatch; const component: IDispatch): WordBool; safecall;
    function IAccessSelections(const topDoc: IModelDoc2; const component: IComponent2): WordBool; safecall;
    procedure ReleaseSelectionAccess; safecall;
    function Get_face: IDispatch; safecall;
    procedure Set_face(const face: IDispatch); safecall;
    function Get_IFace: IFace2; safecall;
    procedure Set_IFace(const face: IFace2); safecall;
    property height: Double read Get_height write Set_height;
    property reverseDir: WordBool read Get_reverseDir write Set_reverseDir;
    property Elliptical: WordBool read Get_Elliptical write Set_Elliptical;
    property face: IDispatch read Get_face write Set_face;
    property IFace: IFace2 read Get_IFace write Set_IFace;
  end;

// *********************************************************************//
// DispIntf:  IDomeFeatureData2Disp
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {6E8FAB36-9E1C-4A84-A160-1E68B703431C}
// *********************************************************************//
  IDomeFeatureData2Disp = dispinterface
    ['{6E8FAB36-9E1C-4A84-A160-1E68B703431C}']
    property height: Double dispid 1;
    property reverseDir: WordBool dispid 2;
    property Elliptical: WordBool dispid 3;
    function AccessSelections(const topDoc: IDispatch; const component: IDispatch): WordBool; dispid 4;
    function IAccessSelections(const topDoc: IModelDoc2; const component: IComponent2): WordBool; dispid 5;
    procedure ReleaseSelectionAccess; dispid 6;
    property face: IDispatch dispid 7;
    property IFace: IFace2 dispid 8;
  end;

// *********************************************************************//
// Interface: ISimpleHoleFeatureData2
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {D98E9F26-73DB-4BD2-A967-31BF7EF35B5B}
// *********************************************************************//
  ISimpleHoleFeatureData2 = interface(IDispatch)
    ['{D98E9F26-73DB-4BD2-A967-31BF7EF35B5B}']
    function AccessSelections(const topDoc: IDispatch; const component: IDispatch): WordBool; safecall;
    function IAccessSelections(const topDoc: IModelDoc2; const component: IComponent2): WordBool; safecall;
    procedure ReleaseSelectionAccess; safecall;
    function Get_ReverseDirection: WordBool; safecall;
    procedure Set_ReverseDirection(ReverseDirection: WordBool); safecall;
    function Get_DraftWhileExtruding: WordBool; safecall;
    procedure Set_DraftWhileExtruding(draftWhileExtrude: WordBool); safecall;
    function Get_draftOutward: WordBool; safecall;
    procedure Set_draftOutward(draftOutward: WordBool); safecall;
    function Get_ReverseOffset: WordBool; safecall;
    procedure Set_ReverseOffset(draftOutward: WordBool); safecall;
    function Get_type_: SYSINT; safecall;
    procedure Set_type_(type_: SYSINT); safecall;
    function Get_diameter: Double; safecall;
    procedure Set_diameter(diameter: Double); safecall;
    function Get_depth: Double; safecall;
    procedure Set_depth(depth: Double); safecall;
    function Get_draftAngle: Double; safecall;
    procedure Set_draftAngle(draftAngle: Double); safecall;
    function Get_SurfaceOffset: Double; safecall;
    procedure Set_SurfaceOffset(SurfaceOffset: Double); safecall;
    function Get_face: IDispatch; safecall;
    procedure Set_face(const face: IDispatch); safecall;
    function Get_IFace: IFace2; safecall;
    procedure Set_IFace(const face: IFace2); safecall;
    function Get_Vertex: IDispatch; safecall;
    procedure Set_Vertex(const Vertex: IDispatch); safecall;
    function Get_IVertex: IVertex; safecall;
    procedure Set_IVertex(const Vertex: IVertex); safecall;
    property ReverseDirection: WordBool read Get_ReverseDirection write Set_ReverseDirection;
    property DraftWhileExtruding: WordBool read Get_DraftWhileExtruding write Set_DraftWhileExtruding;
    property draftOutward: WordBool read Get_draftOutward write Set_draftOutward;
    property ReverseOffset: WordBool read Get_ReverseOffset write Set_ReverseOffset;
    property type_: SYSINT read Get_type_ write Set_type_;
    property diameter: Double read Get_diameter write Set_diameter;
    property depth: Double read Get_depth write Set_depth;
    property draftAngle: Double read Get_draftAngle write Set_draftAngle;
    property SurfaceOffset: Double read Get_SurfaceOffset write Set_SurfaceOffset;
    property face: IDispatch read Get_face write Set_face;
    property IFace: IFace2 read Get_IFace write Set_IFace;
    property Vertex: IDispatch read Get_Vertex write Set_Vertex;
    property IVertex: IVertex read Get_IVertex write Set_IVertex;
  end;

// *********************************************************************//
// DispIntf:  ISimpleHoleFeatureData2Disp
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {D98E9F26-73DB-4BD2-A967-31BF7EF35B5B}
// *********************************************************************//
  ISimpleHoleFeatureData2Disp = dispinterface
    ['{D98E9F26-73DB-4BD2-A967-31BF7EF35B5B}']
    function AccessSelections(const topDoc: IDispatch; const component: IDispatch): WordBool; dispid 1;
    function IAccessSelections(const topDoc: IModelDoc2; const component: IComponent2): WordBool; dispid 2;
    procedure ReleaseSelectionAccess; dispid 3;
    property ReverseDirection: WordBool dispid 4;
    property DraftWhileExtruding: WordBool dispid 5;
    property draftOutward: WordBool dispid 6;
    property ReverseOffset: WordBool dispid 7;
    property type_: SYSINT dispid 8;
    property diameter: Double dispid 9;
    property depth: Double dispid 10;
    property draftAngle: Double dispid 11;
    property SurfaceOffset: Double dispid 12;
    property face: IDispatch dispid 13;
    property IFace: IFace2 dispid 14;
    property Vertex: IDispatch dispid 15;
    property IVertex: IVertex dispid 16;
  end;

// *********************************************************************//
// Interface: IWizardHoleFeatureData2
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {7A472C09-437C-4C4B-B34C-A144D0E2546C}
// *********************************************************************//
  IWizardHoleFeatureData2 = interface(IDispatch)
    ['{7A472C09-437C-4C4B-B34C-A144D0E2546C}']
    function AccessSelections(const topDoc: IDispatch; const component: IDispatch): WordBool; safecall;
    function IAccessSelections(const topDoc: IModelDoc2; const component: IComponent2): WordBool; safecall;
    procedure ReleaseSelectionAccess; safecall;
    function Get_type_: SYSINT; safecall;
    procedure Set_type_(hole_type: SYSINT); safecall;
    function Get_diameter: Double; safecall;
    procedure Set_diameter(diameter: Double); safecall;
    function Get_CounterBoreDiameter: Double; safecall;
    procedure Set_CounterBoreDiameter(cbore_dia: Double); safecall;
    function Get_CounterDrillDiameter: Double; safecall;
    procedure Set_CounterDrillDiameter(cdrill_dia: Double); safecall;
    function Get_CounterSinkDiameter: Double; safecall;
    procedure Set_CounterSinkDiameter(csunk_dia: Double); safecall;
    function Get_MinorDiameter: Double; safecall;
    procedure Set_MinorDiameter(minor_dia: Double); safecall;
    function Get_MajorDiameter: Double; safecall;
    procedure Set_MajorDiameter(major_dia: Double); safecall;
    function Get_HoleDiameter: Double; safecall;
    procedure Set_HoleDiameter(diameter: Double); safecall;
    function Get_ThruHoleDiameter: Double; safecall;
    procedure Set_ThruHoleDiameter(diameter: Double); safecall;
    function Get_TapDrillDiameter: Double; safecall;
    procedure Set_TapDrillDiameter(diameter: Double); safecall;
    function Get_ThruTapDrillDiameter: Double; safecall;
    procedure Set_ThruTapDrillDiameter(diameter: Double); safecall;
    function Get_NearCounterSinkDiameter: Double; safecall;
    procedure Set_NearCounterSinkDiameter(diameter: Double); safecall;
    function Get_MidCounterSinkDiameter: Double; safecall;
    procedure Set_MidCounterSinkDiameter(diameter: Double); safecall;
    function Get_FarCounterSinkDiameter: Double; safecall;
    procedure Set_FarCounterSinkDiameter(diameter: Double); safecall;
    function Get_ThreadDiameter: Double; safecall;
    procedure Set_ThreadDiameter(diameter: Double); safecall;
    function Get_depth: Double; safecall;
    procedure Set_depth(depth: Double); safecall;
    function Get_CounterBoreDepth: Double; safecall;
    procedure Set_CounterBoreDepth(cbore_depth: Double); safecall;
    function Get_CounterDrillDepth: Double; safecall;
    procedure Set_CounterDrillDepth(cdrill_depth: Double); safecall;
    function Get_HoleDepth: Double; safecall;
    procedure Set_HoleDepth(depth: Double); safecall;
    function Get_ThruHoleDepth: Double; safecall;
    procedure Set_ThruHoleDepth(depth: Double); safecall;
    function Get_TapDrillDepth: Double; safecall;
    procedure Set_TapDrillDepth(depth: Double); safecall;
    function Get_ThruTapDrillDepth: Double; safecall;
    procedure Set_ThruTapDrillDepth(depth: Double); safecall;
    function Get_ThreadDepth: Double; safecall;
    procedure Set_ThreadDepth(depth: Double); safecall;
    function Get_CounterDrillAngle: Double; safecall;
    procedure Set_CounterDrillAngle(cdrill_angle: Double); safecall;
    function Get_CounterSinkAngle: Double; safecall;
    procedure Set_CounterSinkAngle(csunk_angle: Double); safecall;
    function Get_DrillAngle: Double; safecall;
    procedure Set_DrillAngle(drill_angle: Double); safecall;
    function Get_NearCounterSinkAngle: Double; safecall;
    procedure Set_NearCounterSinkAngle(angle: Double); safecall;
    function Get_MidCounterSinkAngle: Double; safecall;
    procedure Set_MidCounterSinkAngle(angle: Double); safecall;
    function Get_FarCounterSinkAngle: Double; safecall;
    procedure Set_FarCounterSinkAngle(angle: Double); safecall;
    function Get_ThreadAngle: Double; safecall;
    procedure Set_ThreadAngle(angle: Double); safecall;
    function Get_HeadClearance: Double; safecall;
    procedure Set_HeadClearance(HeadClearance: Double); safecall;
    function Get_face: IDispatch; safecall;
    procedure Set_face(const face: IDispatch); safecall;
    function Get_IFace: IFace2; safecall;
    procedure Set_IFace(const face: IFace2); safecall;
    function Get_Vertex: IDispatch; safecall;
    procedure Set_Vertex(const Vertex: IDispatch); safecall;
    function Get_IVertex: IVertex; safecall;
    procedure Set_IVertex(const Vertex: IVertex); safecall;
    function Get_endCondition: SYSINT; safecall;
    procedure Set_endCondition(endCondition: SYSINT); safecall;
    function Get_Standard: WideString; safecall;
    procedure Set_Standard(const Standard: WideString); safecall;
    function Get_FastenerType: WideString; safecall;
    procedure Set_FastenerType(const FastenerType: WideString); safecall;
    function Get_FastenerSize: WideString; safecall;
    procedure Set_FastenerSize(const FastenerSize: WideString); safecall;
    function Get_HeadClearanceType: Integer; safecall;
    procedure Set_HeadClearanceType(hcType: Integer); safecall;
    function Get_CosmeticThreadType: Integer; safecall;
    procedure Set_CosmeticThreadType(ctType: Integer); safecall;
    property type_: SYSINT read Get_type_ write Set_type_;
    property diameter: Double read Get_diameter write Set_diameter;
    property CounterBoreDiameter: Double read Get_CounterBoreDiameter write Set_CounterBoreDiameter;
    property CounterDrillDiameter: Double read Get_CounterDrillDiameter write Set_CounterDrillDiameter;
    property CounterSinkDiameter: Double read Get_CounterSinkDiameter write Set_CounterSinkDiameter;
    property MinorDiameter: Double read Get_MinorDiameter write Set_MinorDiameter;
    property MajorDiameter: Double read Get_MajorDiameter write Set_MajorDiameter;
    property HoleDiameter: Double read Get_HoleDiameter write Set_HoleDiameter;
    property ThruHoleDiameter: Double read Get_ThruHoleDiameter write Set_ThruHoleDiameter;
    property TapDrillDiameter: Double read Get_TapDrillDiameter write Set_TapDrillDiameter;
    property ThruTapDrillDiameter: Double read Get_ThruTapDrillDiameter write Set_ThruTapDrillDiameter;
    property NearCounterSinkDiameter: Double read Get_NearCounterSinkDiameter write Set_NearCounterSinkDiameter;
    property MidCounterSinkDiameter: Double read Get_MidCounterSinkDiameter write Set_MidCounterSinkDiameter;
    property FarCounterSinkDiameter: Double read Get_FarCounterSinkDiameter write Set_FarCounterSinkDiameter;
    property ThreadDiameter: Double read Get_ThreadDiameter write Set_ThreadDiameter;
    property depth: Double read Get_depth write Set_depth;
    property CounterBoreDepth: Double read Get_CounterBoreDepth write Set_CounterBoreDepth;
    property CounterDrillDepth: Double read Get_CounterDrillDepth write Set_CounterDrillDepth;
    property HoleDepth: Double read Get_HoleDepth write Set_HoleDepth;
    property ThruHoleDepth: Double read Get_ThruHoleDepth write Set_ThruHoleDepth;
    property TapDrillDepth: Double read Get_TapDrillDepth write Set_TapDrillDepth;
    property ThruTapDrillDepth: Double read Get_ThruTapDrillDepth write Set_ThruTapDrillDepth;
    property ThreadDepth: Double read Get_ThreadDepth write Set_ThreadDepth;
    property CounterDrillAngle: Double read Get_CounterDrillAngle write Set_CounterDrillAngle;
    property CounterSinkAngle: Double read Get_CounterSinkAngle write Set_CounterSinkAngle;
    property DrillAngle: Double read Get_DrillAngle write Set_DrillAngle;
    property NearCounterSinkAngle: Double read Get_NearCounterSinkAngle write Set_NearCounterSinkAngle;
    property MidCounterSinkAngle: Double read Get_MidCounterSinkAngle write Set_MidCounterSinkAngle;
    property FarCounterSinkAngle: Double read Get_FarCounterSinkAngle write Set_FarCounterSinkAngle;
    property ThreadAngle: Double read Get_ThreadAngle write Set_ThreadAngle;
    property HeadClearance: Double read Get_HeadClearance write Set_HeadClearance;
    property face: IDispatch read Get_face write Set_face;
    property IFace: IFace2 read Get_IFace write Set_IFace;
    property Vertex: IDispatch read Get_Vertex write Set_Vertex;
    property IVertex: IVertex read Get_IVertex write Set_IVertex;
    property endCondition: SYSINT read Get_endCondition write Set_endCondition;
    property Standard: WideString read Get_Standard write Set_Standard;
    property FastenerType: WideString read Get_FastenerType write Set_FastenerType;
    property FastenerSize: WideString read Get_FastenerSize write Set_FastenerSize;
    property HeadClearanceType: Integer read Get_HeadClearanceType write Set_HeadClearanceType;
    property CosmeticThreadType: Integer read Get_CosmeticThreadType write Set_CosmeticThreadType;
  end;

// *********************************************************************//
// DispIntf:  IWizardHoleFeatureData2Disp
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {7A472C09-437C-4C4B-B34C-A144D0E2546C}
// *********************************************************************//
  IWizardHoleFeatureData2Disp = dispinterface
    ['{7A472C09-437C-4C4B-B34C-A144D0E2546C}']
    function AccessSelections(const topDoc: IDispatch; const component: IDispatch): WordBool; dispid 1;
    function IAccessSelections(const topDoc: IModelDoc2; const component: IComponent2): WordBool; dispid 2;
    procedure ReleaseSelectionAccess; dispid 3;
    property type_: SYSINT dispid 4;
    property diameter: Double dispid 5;
    property CounterBoreDiameter: Double dispid 6;
    property CounterDrillDiameter: Double dispid 7;
    property CounterSinkDiameter: Double dispid 8;
    property MinorDiameter: Double dispid 9;
    property MajorDiameter: Double dispid 10;
    property HoleDiameter: Double dispid 11;
    property ThruHoleDiameter: Double dispid 12;
    property TapDrillDiameter: Double dispid 13;
    property ThruTapDrillDiameter: Double dispid 14;
    property NearCounterSinkDiameter: Double dispid 15;
    property MidCounterSinkDiameter: Double dispid 16;
    property FarCounterSinkDiameter: Double dispid 17;
    property ThreadDiameter: Double dispid 18;
    property depth: Double dispid 19;
    property CounterBoreDepth: Double dispid 20;
    property CounterDrillDepth: Double dispid 21;
    property HoleDepth: Double dispid 22;
    property ThruHoleDepth: Double dispid 23;
    property TapDrillDepth: Double dispid 24;
    property ThruTapDrillDepth: Double dispid 25;
    property ThreadDepth: Double dispid 26;
    property CounterDrillAngle: Double dispid 27;
    property CounterSinkAngle: Double dispid 28;
    property DrillAngle: Double dispid 29;
    property NearCounterSinkAngle: Double dispid 30;
    property MidCounterSinkAngle: Double dispid 31;
    property FarCounterSinkAngle: Double dispid 32;
    property ThreadAngle: Double dispid 33;
    property HeadClearance: Double dispid 34;
    property face: IDispatch dispid 35;
    property IFace: IFace2 dispid 36;
    property Vertex: IDispatch dispid 37;
    property IVertex: IVertex dispid 38;
    property endCondition: SYSINT dispid 39;
    property Standard: WideString dispid 40;
    property FastenerType: WideString dispid 41;
    property FastenerSize: WideString dispid 42;
    property HeadClearanceType: Integer dispid 43;
    property CosmeticThreadType: Integer dispid 44;
  end;

// *********************************************************************//
// Interface: IChamferFeatureData2
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {8427D092-A1FC-49C9-B1ED-EC52D2389E9A}
// *********************************************************************//
  IChamferFeatureData2 = interface(IDispatch)
    ['{8427D092-A1FC-49C9-B1ED-EC52D2389E9A}']
    function GetEdgeChamferDistance(side: SYSINT): Double; safecall;
    procedure SetEdgeChamferDistance(side: SYSINT; distance: Double); safecall;
    function GetVertexChamferDistance(side: SYSINT): Double; safecall;
    procedure SetVertexChamferDistance(side: SYSINT; distance: Double); safecall;
    function Get_type_: SYSINT; safecall;
    procedure Set_type_(chamfer_type: SYSINT); safecall;
    function Get_EdgeChamferAngle: Double; safecall;
    procedure Set_EdgeChamferAngle(angle: Double); safecall;
    function AccessSelections(const topDoc: IDispatch; const component: IDispatch): WordBool; safecall;
    function IAccessSelections(const topDoc: IModelDoc2; const component: IComponent2): WordBool; safecall;
    procedure ReleaseSelectionAccess; safecall;
    function GetFaceCount: Integer; safecall;
    function IGetFaces(faceCount: Integer): IFace2; safecall;
    procedure ISetFaces(count: Integer; var FaceList: IFace2); safecall;
    function Get_faces: OleVariant; safecall;
    procedure Set_faces(FaceList: OleVariant); safecall;
    function GetEdgeCount: Integer; safecall;
    function IGetEdges(count: Integer): IEdge; safecall;
    procedure ISetEdges(count: Integer; var EdgeList: IEdge); safecall;
    function Get_edges: OleVariant; safecall;
    procedure Set_edges(EdgeList: OleVariant); safecall;
    function Get_Vertex: IDispatch; safecall;
    procedure Set_Vertex(const Vertex: IDispatch); safecall;
    function Get_LoopCount: Integer; safecall;
    function IGetLoops(count: Integer): ILoop; safecall;
    procedure ISetLoops(count: Integer; var loopList: ILoop); safecall;
    function Get_Loops: OleVariant; safecall;
    procedure Set_Loops(loopList: OleVariant); safecall;
    function Get_EqualDistance: WordBool; safecall;
    procedure Set_EqualDistance(ReverseDirection: WordBool); safecall;
    function Get_IVertex: IVertex; safecall;
    procedure Set_IVertex(const Vertex: IVertex); safecall;
    function Get_KeepFeatures: WordBool; safecall;
    procedure Set_KeepFeatures(keep: WordBool); safecall;
    function GetIsFlipped(const entity: IDispatch): WordBool; safecall;
    procedure SetIsFlipped(const entity: IDispatch; flip: WordBool); safecall;
    property type_: SYSINT read Get_type_ write Set_type_;
    property EdgeChamferAngle: Double read Get_EdgeChamferAngle write Set_EdgeChamferAngle;
    property faces: OleVariant read Get_faces write Set_faces;
    property edges: OleVariant read Get_edges write Set_edges;
    property Vertex: IDispatch read Get_Vertex write Set_Vertex;
    property LoopCount: Integer read Get_LoopCount;
    property Loops: OleVariant read Get_Loops write Set_Loops;
    property EqualDistance: WordBool read Get_EqualDistance write Set_EqualDistance;
    property IVertex: IVertex read Get_IVertex write Set_IVertex;
    property KeepFeatures: WordBool read Get_KeepFeatures write Set_KeepFeatures;
  end;

// *********************************************************************//
// DispIntf:  IChamferFeatureData2Disp
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {8427D092-A1FC-49C9-B1ED-EC52D2389E9A}
// *********************************************************************//
  IChamferFeatureData2Disp = dispinterface
    ['{8427D092-A1FC-49C9-B1ED-EC52D2389E9A}']
    function GetEdgeChamferDistance(side: SYSINT): Double; dispid 1;
    procedure SetEdgeChamferDistance(side: SYSINT; distance: Double); dispid 2;
    function GetVertexChamferDistance(side: SYSINT): Double; dispid 3;
    procedure SetVertexChamferDistance(side: SYSINT; distance: Double); dispid 4;
    property type_: SYSINT dispid 5;
    property EdgeChamferAngle: Double dispid 6;
    function AccessSelections(const topDoc: IDispatch; const component: IDispatch): WordBool; dispid 7;
    function IAccessSelections(const topDoc: IModelDoc2; const component: IComponent2): WordBool; dispid 8;
    procedure ReleaseSelectionAccess; dispid 9;
    function GetFaceCount: Integer; dispid 10;
    function IGetFaces(faceCount: Integer): IFace2; dispid 11;
    procedure ISetFaces(count: Integer; var FaceList: IFace2); dispid 12;
    property faces: OleVariant dispid 13;
    function GetEdgeCount: Integer; dispid 14;
    function IGetEdges(count: Integer): IEdge; dispid 15;
    procedure ISetEdges(count: Integer; var EdgeList: IEdge); dispid 16;
    property edges: OleVariant dispid 17;
    property Vertex: IDispatch dispid 18;
    property LoopCount: Integer readonly dispid 19;
    function IGetLoops(count: Integer): ILoop; dispid 20;
    procedure ISetLoops(count: Integer; var loopList: ILoop); dispid 21;
    property Loops: OleVariant dispid 22;
    property EqualDistance: WordBool dispid 23;
    property IVertex: IVertex dispid 24;
    property KeepFeatures: WordBool dispid 25;
    function GetIsFlipped(const entity: IDispatch): WordBool; dispid 26;
    procedure SetIsFlipped(const entity: IDispatch; flip: WordBool); dispid 27;
  end;

// *********************************************************************//
// Interface: IDraftFeatureData2
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {FD9B0999-D519-41AB-ACAA-4F2ADEDD7015}
// *********************************************************************//
  IDraftFeatureData2 = interface(IDispatch)
    ['{FD9B0999-D519-41AB-ACAA-4F2ADEDD7015}']
    function Get_type_: SYSINT; safecall;
    procedure Set_type_(type_: SYSINT); safecall;
    function Get_angle: Double; safecall;
    procedure Set_angle(angle: Double); safecall;
    function Get_ReverseDirection: WordBool; safecall;
    procedure Set_ReverseDirection(ReverseDirection: WordBool); safecall;
    function IAccessSelections(const topDoc: IModelDoc2; const component: IComponent2): WordBool; safecall;
    function AccessSelections(const topDoc: IDispatch; const component: IDispatch): WordBool; safecall;
    procedure ReleaseSelectionAccess; safecall;
    function GetFacesToDraftCount: Smallint; safecall;
    function IGetFacesToDraft(count: Smallint): IFace2; safecall;
    procedure ISetFacesToDraft(count: Smallint; var faceArray: IFace2); safecall;
    function Get_FacesToDraft: OleVariant; safecall;
    procedure Set_FacesToDraft(faceArray: OleVariant); safecall;
    function GetPartingLinesCount: Smallint; safecall;
    function IGetPartingLines(count: Smallint): IEdge; safecall;
    procedure ISetPartingLines(count: Smallint; var lineArray: IEdge); safecall;
    function Get_PartingLines: OleVariant; safecall;
    procedure Set_PartingLines(faceArray: OleVariant); safecall;
    function Get_NeutralPlane: IDispatch; safecall;
    procedure Set_NeutralPlane(const face: IDispatch); safecall;
    function Get_DirectionPull: IDispatch; safecall;
    procedure Set_DirectionPull(const face: IDispatch); safecall;
    function Get_FacePropagation: Smallint; safecall;
    procedure Set_FacePropagation(faceProp: Smallint); safecall;
    function GetOtherFacesFlagAtIndex(index: Smallint): WordBool; safecall;
    procedure SetOtherFacesFlagAtIndex(index: Smallint; flag: WordBool); safecall;
    function GetDraftedEntityCount: Smallint; safecall;
    function IGetDraftedEntities(count: Smallint): IEntity; safecall;
    function GetDraftedEntities: OleVariant; safecall;
    function Get_StepType: Smallint; safecall;
    procedure Set_StepType(StepType: Smallint); safecall;
    property type_: SYSINT read Get_type_ write Set_type_;
    property angle: Double read Get_angle write Set_angle;
    property ReverseDirection: WordBool read Get_ReverseDirection write Set_ReverseDirection;
    property FacesToDraft: OleVariant read Get_FacesToDraft write Set_FacesToDraft;
    property PartingLines: OleVariant read Get_PartingLines write Set_PartingLines;
    property NeutralPlane: IDispatch read Get_NeutralPlane write Set_NeutralPlane;
    property DirectionPull: IDispatch read Get_DirectionPull write Set_DirectionPull;
    property FacePropagation: Smallint read Get_FacePropagation write Set_FacePropagation;
    property StepType: Smallint read Get_StepType write Set_StepType;
  end;

// *********************************************************************//
// DispIntf:  IDraftFeatureData2Disp
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {FD9B0999-D519-41AB-ACAA-4F2ADEDD7015}
// *********************************************************************//
  IDraftFeatureData2Disp = dispinterface
    ['{FD9B0999-D519-41AB-ACAA-4F2ADEDD7015}']
    property type_: SYSINT dispid 1;
    property angle: Double dispid 2;
    property ReverseDirection: WordBool dispid 3;
    function IAccessSelections(const topDoc: IModelDoc2; const component: IComponent2): WordBool; dispid 4;
    function AccessSelections(const topDoc: IDispatch; const component: IDispatch): WordBool; dispid 5;
    procedure ReleaseSelectionAccess; dispid 6;
    function GetFacesToDraftCount: Smallint; dispid 7;
    function IGetFacesToDraft(count: Smallint): IFace2; dispid 8;
    procedure ISetFacesToDraft(count: Smallint; var faceArray: IFace2); dispid 9;
    property FacesToDraft: OleVariant dispid 10;
    function GetPartingLinesCount: Smallint; dispid 11;
    function IGetPartingLines(count: Smallint): IEdge; dispid 12;
    procedure ISetPartingLines(count: Smallint; var lineArray: IEdge); dispid 13;
    property PartingLines: OleVariant dispid 14;
    property NeutralPlane: IDispatch dispid 15;
    property DirectionPull: IDispatch dispid 16;
    property FacePropagation: Smallint dispid 17;
    function GetOtherFacesFlagAtIndex(index: Smallint): WordBool; dispid 18;
    procedure SetOtherFacesFlagAtIndex(index: Smallint; flag: WordBool); dispid 19;
    function GetDraftedEntityCount: Smallint; dispid 20;
    function IGetDraftedEntities(count: Smallint): IEntity; dispid 21;
    function GetDraftedEntities: OleVariant; dispid 22;
    property StepType: Smallint dispid 23;
  end;

// *********************************************************************//
// Interface: ISimpleFilletFeatureData2
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {9FE7C8DB-8A4C-41BB-8E3B-7600692DBC92}
// *********************************************************************//
  ISimpleFilletFeatureData2 = interface(IDispatch)
    ['{9FE7C8DB-8A4C-41BB-8E3B-7600692DBC92}']
    function Get_type_: SYSINT; safecall;
    function Get_DefaultRadius: Double; safecall;
    procedure Set_DefaultRadius(radius: Double); safecall;
    function Get_overFlowType: SYSINT; safecall;
    procedure Set_overFlowType(overflow_type: SYSINT); safecall;
    function Get_IsMultipleRadius: WordBool; safecall;
    procedure Set_IsMultipleRadius(IsMultipleRadius: WordBool); safecall;
    function Get_RoundCorners: WordBool; safecall;
    procedure Set_RoundCorners(RoundCorners: WordBool); safecall;
    function Get_PropagateToTangentFaces: WordBool; safecall;
    procedure Set_PropagateToTangentFaces(propTgtFaces: WordBool); safecall;
    function Get_FilletItemsCount: SYSINT; safecall;
    function GetFilletItemAtIndex(index: SYSINT): IDispatch; safecall;
    function IGetFilletItemAtIndex(index: SYSINT): IUnknown; safecall;
    function GetRadius(const pFilletItem: IDispatch): Double; safecall;
    function IGetRadius(const pFilletItem: IUnknown): Double; safecall;
    procedure SetRadius(const pFilletItem: IDispatch; radius: Double); safecall;
    procedure ISetRadius(const pFilletItem: IUnknown; radius: Double); safecall;
    function AccessSelections(const topDoc: IDispatch; const component: IDispatch): WordBool; safecall;
    function IAccessSelections(const topDoc: IModelDoc2; const component: IComponent2): WordBool; safecall;
    procedure ReleaseSelectionAccess; safecall;
    function Get_KeepFeatures: WordBool; safecall;
    procedure Set_KeepFeatures(keep: WordBool); safecall;
    function GetEdgeCount: Integer; safecall;
    function IGetEdges(count: Integer): IEdge; safecall;
    procedure ISetEdges(count: Integer; var EdgeList: IEdge); safecall;
    function Get_edges: OleVariant; safecall;
    procedure Set_edges(EdgeList: OleVariant); safecall;
    function GetFaceCount(whichFaceList: Integer): Integer; safecall;
    function IGetFaces(whichFaceList: Integer; count: Integer): IFace2; safecall;
    procedure ISetFaces(whichFaceList: Integer; count: Integer; var FaceList: IFace2); safecall;
    function GetFaces(whichFaceList: Integer): OleVariant; safecall;
    procedure SetFaces(whichFaceList: Integer; FaceList: OleVariant); safecall;
    function GetLoopCount: Integer; safecall;
    function IGetLoops(count: Integer): ILoop2; safecall;
    procedure ISetLoops(count: Integer; var loopList: ILoop2); safecall;
    function Get_Loops: OleVariant; safecall;
    procedure Set_Loops(loopList: OleVariant); safecall;
    function GetFeatureCount: Integer; safecall;
    function IGetFeatures(count: Integer): IFeature; safecall;
    procedure ISetFeatures(count: Integer; var featList: IFeature); safecall;
    function Get_Features: OleVariant; safecall;
    procedure Set_Features(featList: OleVariant); safecall;
    function GetHoldLineCount: Integer; safecall;
    function IGetHoldLines(count: Integer): IDispatch; safecall;
    procedure ISetHoldLines(count: Integer; var pList: IDispatch); safecall;
    function Get_HoldLines: OleVariant; safecall;
    procedure Set_HoldLines(pVar: OleVariant); safecall;
    function Get_CurvatureContinuous: WordBool; safecall;
    procedure Set_CurvatureContinuous(curveCont: WordBool); safecall;
    function Get_HelpPoint: IDispatch; safecall;
    procedure Set_HelpPoint(const pDisp: IDispatch); safecall;
    property type_: SYSINT read Get_type_;
    property DefaultRadius: Double read Get_DefaultRadius write Set_DefaultRadius;
    property overFlowType: SYSINT read Get_overFlowType write Set_overFlowType;
    property IsMultipleRadius: WordBool read Get_IsMultipleRadius write Set_IsMultipleRadius;
    property RoundCorners: WordBool read Get_RoundCorners write Set_RoundCorners;
    property PropagateToTangentFaces: WordBool read Get_PropagateToTangentFaces write Set_PropagateToTangentFaces;
    property FilletItemsCount: SYSINT read Get_FilletItemsCount;
    property KeepFeatures: WordBool read Get_KeepFeatures write Set_KeepFeatures;
    property edges: OleVariant read Get_edges write Set_edges;
    property Loops: OleVariant read Get_Loops write Set_Loops;
    property Features: OleVariant read Get_Features write Set_Features;
    property HoldLines: OleVariant read Get_HoldLines write Set_HoldLines;
    property CurvatureContinuous: WordBool read Get_CurvatureContinuous write Set_CurvatureContinuous;
    property HelpPoint: IDispatch read Get_HelpPoint write Set_HelpPoint;
  end;

// *********************************************************************//
// DispIntf:  ISimpleFilletFeatureData2Disp
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {9FE7C8DB-8A4C-41BB-8E3B-7600692DBC92}
// *********************************************************************//
  ISimpleFilletFeatureData2Disp = dispinterface
    ['{9FE7C8DB-8A4C-41BB-8E3B-7600692DBC92}']
    property type_: SYSINT readonly dispid 1;
    property DefaultRadius: Double dispid 2;
    property overFlowType: SYSINT dispid 3;
    property IsMultipleRadius: WordBool dispid 4;
    property RoundCorners: WordBool dispid 5;
    property PropagateToTangentFaces: WordBool dispid 6;
    property FilletItemsCount: SYSINT readonly dispid 7;
    function GetFilletItemAtIndex(index: SYSINT): IDispatch; dispid 8;
    function IGetFilletItemAtIndex(index: SYSINT): IUnknown; dispid 9;
    function GetRadius(const pFilletItem: IDispatch): Double; dispid 10;
    function IGetRadius(const pFilletItem: IUnknown): Double; dispid 11;
    procedure SetRadius(const pFilletItem: IDispatch; radius: Double); dispid 12;
    procedure ISetRadius(const pFilletItem: IUnknown; radius: Double); dispid 13;
    function AccessSelections(const topDoc: IDispatch; const component: IDispatch): WordBool; dispid 14;
    function IAccessSelections(const topDoc: IModelDoc2; const component: IComponent2): WordBool; dispid 15;
    procedure ReleaseSelectionAccess; dispid 16;
    property KeepFeatures: WordBool dispid 17;
    function GetEdgeCount: Integer; dispid 18;
    function IGetEdges(count: Integer): IEdge; dispid 19;
    procedure ISetEdges(count: Integer; var EdgeList: IEdge); dispid 20;
    property edges: OleVariant dispid 21;
    function GetFaceCount(whichFaceList: Integer): Integer; dispid 22;
    function IGetFaces(whichFaceList: Integer; count: Integer): IFace2; dispid 23;
    procedure ISetFaces(whichFaceList: Integer; count: Integer; var FaceList: IFace2); dispid 24;
    function GetFaces(whichFaceList: Integer): OleVariant; dispid 25;
    procedure SetFaces(whichFaceList: Integer; FaceList: OleVariant); dispid 26;
    function GetLoopCount: Integer; dispid 27;
    function IGetLoops(count: Integer): ILoop2; dispid 28;
    procedure ISetLoops(count: Integer; var loopList: ILoop2); dispid 29;
    property Loops: OleVariant dispid 30;
    function GetFeatureCount: Integer; dispid 31;
    function IGetFeatures(count: Integer): IFeature; dispid 32;
    procedure ISetFeatures(count: Integer; var featList: IFeature); dispid 33;
    property Features: OleVariant dispid 34;
    function GetHoldLineCount: Integer; dispid 35;
    function IGetHoldLines(count: Integer): IDispatch; dispid 36;
    procedure ISetHoldLines(count: Integer; var pList: IDispatch); dispid 37;
    property HoldLines: OleVariant dispid 38;
    property CurvatureContinuous: WordBool dispid 39;
    property HelpPoint: IDispatch dispid 40;
  end;

// *********************************************************************//
// Interface: IVariableFilletFeatureData2
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {FFCDC95C-1BA9-423A-877E-CB7AA60DE9B4}
// *********************************************************************//
  IVariableFilletFeatureData2 = interface(IDispatch)
    ['{FFCDC95C-1BA9-423A-877E-CB7AA60DE9B4}']
    function Get_DefaultRadius: Double; safecall;
    procedure Set_DefaultRadius(radius: Double); safecall;
    function Get_overFlowType: SYSINT; safecall;
    procedure Set_overFlowType(overflow_type: SYSINT); safecall;
    function Get_TransitionType: SYSINT; safecall;
    procedure Set_TransitionType(transition_type: SYSINT); safecall;
    function Get_PropagateToTangentFaces: WordBool; safecall;
    procedure Set_PropagateToTangentFaces(propTgtFaces: WordBool); safecall;
    function Get_FilletEdgeCount: SYSINT; safecall;
    function GetFilletEdgeAtIndex(index: SYSINT): IDispatch; safecall;
    function IGetFilletEdgeAtIndex(index: SYSINT): IEdge; safecall;
    function GetRadius(const pFilletItem: IDispatch): Double; safecall;
    function IGetRadius(const pFilletItem: IVertex): Double; safecall;
    procedure SetRadius(const pFilletItem: IDispatch; radius: Double); safecall;
    procedure ISetRadius(const pFilletItem: IVertex; radius: Double); safecall;
    function AccessSelections(const topDoc: IDispatch; const component: IDispatch): WordBool; safecall;
    function IAccessSelections(const topDoc: IModelDoc2; const component: IComponent2): WordBool; safecall;
    procedure ReleaseSelectionAccess; safecall;
    function GetRadius2(const pFilletItem: IVertex; out isAssigned: WordBool): Double; safecall;
    function GetControlPointsCount: Integer; safecall;
    function GetControlPointRadiusAtIndex(index: Integer; out Location: Double; out pEdge: IEdge): Double; safecall;
    procedure SetControlPointRadiusAtIndex(index: Integer; Location: Double; radius: Double); safecall;
    property DefaultRadius: Double read Get_DefaultRadius write Set_DefaultRadius;
    property overFlowType: SYSINT read Get_overFlowType write Set_overFlowType;
    property TransitionType: SYSINT read Get_TransitionType write Set_TransitionType;
    property PropagateToTangentFaces: WordBool read Get_PropagateToTangentFaces write Set_PropagateToTangentFaces;
    property FilletEdgeCount: SYSINT read Get_FilletEdgeCount;
  end;

// *********************************************************************//
// DispIntf:  IVariableFilletFeatureData2Disp
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {FFCDC95C-1BA9-423A-877E-CB7AA60DE9B4}
// *********************************************************************//
  IVariableFilletFeatureData2Disp = dispinterface
    ['{FFCDC95C-1BA9-423A-877E-CB7AA60DE9B4}']
    property DefaultRadius: Double dispid 1;
    property overFlowType: SYSINT dispid 2;
    property TransitionType: SYSINT dispid 3;
    property PropagateToTangentFaces: WordBool dispid 4;
    property FilletEdgeCount: SYSINT readonly dispid 5;
    function GetFilletEdgeAtIndex(index: SYSINT): IDispatch; dispid 6;
    function IGetFilletEdgeAtIndex(index: SYSINT): IEdge; dispid 7;
    function GetRadius(const pFilletItem: IDispatch): Double; dispid 8;
    function IGetRadius(const pFilletItem: IVertex): Double; dispid 9;
    procedure SetRadius(const pFilletItem: IDispatch; radius: Double); dispid 10;
    procedure ISetRadius(const pFilletItem: IVertex; radius: Double); dispid 11;
    function AccessSelections(const topDoc: IDispatch; const component: IDispatch): WordBool; dispid 12;
    function IAccessSelections(const topDoc: IModelDoc2; const component: IComponent2): WordBool; dispid 13;
    procedure ReleaseSelectionAccess; dispid 14;
    function GetRadius2(const pFilletItem: IVertex; out isAssigned: WordBool): Double; dispid 15;
    function GetControlPointsCount: Integer; dispid 16;
    function GetControlPointRadiusAtIndex(index: Integer; out Location: Double; out pEdge: IEdge): Double; dispid 17;
    procedure SetControlPointRadiusAtIndex(index: Integer; Location: Double; radius: Double); dispid 18;
  end;

// *********************************************************************//
// Interface: IExtrudeFeatureData2
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {931E939E-2FDE-49A8-8472-ABCF79E9F5CC}
// *********************************************************************//
  IExtrudeFeatureData2 = interface(IDispatch)
    ['{931E939E-2FDE-49A8-8472-ABCF79E9F5CC}']
    function GetEndCondition(forward: WordBool): SYSINT; safecall;
    procedure SetEndCondition(forward: WordBool; endCondition: SYSINT); safecall;
    function GetDepth(forward: WordBool): Double; safecall;
    procedure SetDepth(forward: WordBool; depth: Double); safecall;
    function GetWallThickness(forward: WordBool): Double; safecall;
    procedure SetWallThickness(forward: WordBool; wallThickness: Double); safecall;
    function GetDraftWhileExtruding(forward: WordBool): WordBool; safecall;
    procedure SetDraftWhileExtruding(forward: WordBool; draftWhileExtrude: WordBool); safecall;
    function GetDraftOutward(forward: WordBool): WordBool; safecall;
    procedure SetDraftOutward(forward: WordBool; draftOutward: WordBool); safecall;
    function GetDraftAngle(forward: WordBool): Double; safecall;
    procedure SetDraftAngle(forward: WordBool; draftAngle: Double); safecall;
    function AccessSelections(const topDoc: IDispatch; const component: IDispatch): WordBool; safecall;
    function IAccessSelections(const topDoc: IModelDoc2; const component: IComponent2): WordBool; safecall;
    procedure ReleaseSelectionAccess; safecall;
    function GetFace(forward: WordBool): IDispatch; safecall;
    procedure SetFace(forward: WordBool; const face: IDispatch); safecall;
    function IGetFace(forward: WordBool): IFace2; safecall;
    procedure ISetFace(forward: WordBool; const face: IFace2); safecall;
    function GetVertex(forward: WordBool): IDispatch; safecall;
    procedure SetVertex(forward: WordBool; const face: IDispatch); safecall;
    function IGetVertex(forward: WordBool): IVertex; safecall;
    procedure ISetVertex(forward: WordBool; const face: IVertex); safecall;
    function Get_ReverseDirection: WordBool; safecall;
    procedure Set_ReverseDirection(ReverseDirection: WordBool); safecall;
    function Get_bothDirections: WordBool; safecall;
    procedure Set_bothDirections(bothDirections: WordBool); safecall;
    function Get_FlipSideToCut: WordBool; safecall;
    procedure Set_FlipSideToCut(flip: WordBool); safecall;
    function IsBossFeature: WordBool; safecall;
    function IsThinFeature: WordBool; safecall;
    function IsBaseExtrude: WordBool; safecall;
    function Get_ThinWallType: SYSINT; safecall;
    procedure Set_ThinWallType(ThinWallType: SYSINT); safecall;
    function Get_capEnds: WordBool; safecall;
    procedure Set_capEnds(capEnds: WordBool); safecall;
    function Get_CapThickness: Double; safecall;
    procedure Set_CapThickness(CapThickness: Double); safecall;
    function Get_merge: WordBool; safecall;
    procedure Set_merge(merge: WordBool); safecall;
    function Get_FeatureScope: WordBool; safecall;
    procedure Set_FeatureScope(featScope: WordBool); safecall;
    function Get_AutoSelect: WordBool; safecall;
    procedure Set_AutoSelect(autoSel: WordBool); safecall;
    function Get_FeatureScopeBodies: OleVariant; safecall;
    procedure Set_FeatureScopeBodies(bodyVar: OleVariant); safecall;
    function GetFeatureScopeBodiesCount: Integer; safecall;
    function IGetFeatureScopeBodies(count: Integer): IBody2; safecall;
    procedure ISetFeatureScopeBodies(count: Integer; var bodyArr: IBody2); safecall;
    function GetReverseOffset(fwd: WordBool): WordBool; safecall;
    procedure SetReverseOffset(fwd: WordBool; valIn: WordBool); safecall;
    function GetTranslateSurface(fwd: WordBool): WordBool; safecall;
    procedure SetTranslateSurface(fwd: WordBool; valIn: WordBool); safecall;
    function GetEndConditionReference(forward: WordBool; out referenceType: Integer): IDispatch; safecall;
    procedure SetEndConditionReference(forward: WordBool; const pDisp: IDispatch); safecall;
    function Get_Contours: OleVariant; safecall;
    procedure Set_Contours(Contours: OleVariant); safecall;
    function GetContoursCount: Integer; safecall;
    function IGetContours(count: Integer): IDispatch; safecall;
    procedure ISetContours(count: Integer; var Contours: IDispatch); safecall;
    property ReverseDirection: WordBool read Get_ReverseDirection write Set_ReverseDirection;
    property bothDirections: WordBool read Get_bothDirections write Set_bothDirections;
    property FlipSideToCut: WordBool read Get_FlipSideToCut write Set_FlipSideToCut;
    property ThinWallType: SYSINT read Get_ThinWallType write Set_ThinWallType;
    property capEnds: WordBool read Get_capEnds write Set_capEnds;
    property CapThickness: Double read Get_CapThickness write Set_CapThickness;
    property merge: WordBool read Get_merge write Set_merge;
    property FeatureScope: WordBool read Get_FeatureScope write Set_FeatureScope;
    property AutoSelect: WordBool read Get_AutoSelect write Set_AutoSelect;
    property FeatureScopeBodies: OleVariant read Get_FeatureScopeBodies write Set_FeatureScopeBodies;
    property Contours: OleVariant read Get_Contours write Set_Contours;
  end;

// *********************************************************************//
// DispIntf:  IExtrudeFeatureData2Disp
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {931E939E-2FDE-49A8-8472-ABCF79E9F5CC}
// *********************************************************************//
  IExtrudeFeatureData2Disp = dispinterface
    ['{931E939E-2FDE-49A8-8472-ABCF79E9F5CC}']
    function GetEndCondition(forward: WordBool): SYSINT; dispid 1;
    procedure SetEndCondition(forward: WordBool; endCondition: SYSINT); dispid 2;
    function GetDepth(forward: WordBool): Double; dispid 3;
    procedure SetDepth(forward: WordBool; depth: Double); dispid 4;
    function GetWallThickness(forward: WordBool): Double; dispid 5;
    procedure SetWallThickness(forward: WordBool; wallThickness: Double); dispid 6;
    function GetDraftWhileExtruding(forward: WordBool): WordBool; dispid 7;
    procedure SetDraftWhileExtruding(forward: WordBool; draftWhileExtrude: WordBool); dispid 8;
    function GetDraftOutward(forward: WordBool): WordBool; dispid 9;
    procedure SetDraftOutward(forward: WordBool; draftOutward: WordBool); dispid 10;
    function GetDraftAngle(forward: WordBool): Double; dispid 11;
    procedure SetDraftAngle(forward: WordBool; draftAngle: Double); dispid 12;
    function AccessSelections(const topDoc: IDispatch; const component: IDispatch): WordBool; dispid 13;
    function IAccessSelections(const topDoc: IModelDoc2; const component: IComponent2): WordBool; dispid 14;
    procedure ReleaseSelectionAccess; dispid 15;
    function GetFace(forward: WordBool): IDispatch; dispid 16;
    procedure SetFace(forward: WordBool; const face: IDispatch); dispid 17;
    function IGetFace(forward: WordBool): IFace2; dispid 18;
    procedure ISetFace(forward: WordBool; const face: IFace2); dispid 19;
    function GetVertex(forward: WordBool): IDispatch; dispid 20;
    procedure SetVertex(forward: WordBool; const face: IDispatch); dispid 21;
    function IGetVertex(forward: WordBool): IVertex; dispid 22;
    procedure ISetVertex(forward: WordBool; const face: IVertex); dispid 23;
    property ReverseDirection: WordBool dispid 24;
    property bothDirections: WordBool dispid 25;
    property FlipSideToCut: WordBool dispid 26;
    function IsBossFeature: WordBool; dispid 27;
    function IsThinFeature: WordBool; dispid 28;
    function IsBaseExtrude: WordBool; dispid 29;
    property ThinWallType: SYSINT dispid 30;
    property capEnds: WordBool dispid 31;
    property CapThickness: Double dispid 32;
    property merge: WordBool dispid 33;
    property FeatureScope: WordBool dispid 34;
    property AutoSelect: WordBool dispid 35;
    property FeatureScopeBodies: OleVariant dispid 36;
    function GetFeatureScopeBodiesCount: Integer; dispid 37;
    function IGetFeatureScopeBodies(count: Integer): IBody2; dispid 38;
    procedure ISetFeatureScopeBodies(count: Integer; var bodyArr: IBody2); dispid 39;
    function GetReverseOffset(fwd: WordBool): WordBool; dispid 40;
    procedure SetReverseOffset(fwd: WordBool; valIn: WordBool); dispid 41;
    function GetTranslateSurface(fwd: WordBool): WordBool; dispid 42;
    procedure SetTranslateSurface(fwd: WordBool; valIn: WordBool); dispid 43;
    function GetEndConditionReference(forward: WordBool; out referenceType: Integer): IDispatch; dispid 44;
    procedure SetEndConditionReference(forward: WordBool; const pDisp: IDispatch); dispid 45;
    property Contours: OleVariant dispid 46;
    function GetContoursCount: Integer; dispid 47;
    function IGetContours(count: Integer): IDispatch; dispid 48;
    procedure ISetContours(count: Integer; var Contours: IDispatch); dispid 49;
  end;

// *********************************************************************//
// Interface: IRevolveFeatureData2
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {E055F0ED-DB3E-4528-A982-D66D289190A0}
// *********************************************************************//
  IRevolveFeatureData2 = interface(IDispatch)
    ['{E055F0ED-DB3E-4528-A982-D66D289190A0}']
    function GetRevolutionAngle(forward: WordBool): Double; safecall;
    procedure SetRevolutionAngle(forward: WordBool; angle: Double); safecall;
    function GetWallThickness(forward: WordBool): Double; safecall;
    procedure SetWallThickness(forward: WordBool; wallThickness: Double); safecall;
    function Get_type_: SYSINT; safecall;
    procedure Set_type_(revolveCut_type: SYSINT); safecall;
    function Get_ReverseDirection: WordBool; safecall;
    procedure Set_ReverseDirection(ReverseDirection: WordBool); safecall;
    function IsBossFeature: WordBool; safecall;
    function IsThinFeature: WordBool; safecall;
    function Get_ThinWallType: Integer; safecall;
    procedure Set_ThinWallType(ThinWallType: Integer); safecall;
    function Get_merge: WordBool; safecall;
    procedure Set_merge(merge: WordBool); safecall;
    function Get_FeatureScope: WordBool; safecall;
    procedure Set_FeatureScope(featScope: WordBool); safecall;
    function Get_AutoSelect: WordBool; safecall;
    procedure Set_AutoSelect(autoSel: WordBool); safecall;
    function Get_FeatureScopeBodies: OleVariant; safecall;
    procedure Set_FeatureScopeBodies(bodyVar: OleVariant); safecall;
    function GetFeatureScopeBodiesCount: Integer; safecall;
    function IGetFeatureScopeBodies(count: Integer): IBody2; safecall;
    procedure ISetFeatureScopeBodies(count: Integer; var bodyArr: IBody2); safecall;
    function AccessSelections(const topDoc: IDispatch; const component: IDispatch): WordBool; safecall;
    function IAccessSelections(const topDoc: IModelDoc2; const component: IComponent2): WordBool; safecall;
    procedure ReleaseSelectionAccess; safecall;
    function Get_Contours: OleVariant; safecall;
    procedure Set_Contours(Contours: OleVariant); safecall;
    function GetContoursCount: Integer; safecall;
    function IGetContours(count: Integer): IDispatch; safecall;
    procedure ISetContours(count: Integer; var Contours: IDispatch); safecall;
    property type_: SYSINT read Get_type_ write Set_type_;
    property ReverseDirection: WordBool read Get_ReverseDirection write Set_ReverseDirection;
    property ThinWallType: Integer read Get_ThinWallType write Set_ThinWallType;
    property merge: WordBool read Get_merge write Set_merge;
    property FeatureScope: WordBool read Get_FeatureScope write Set_FeatureScope;
    property AutoSelect: WordBool read Get_AutoSelect write Set_AutoSelect;
    property FeatureScopeBodies: OleVariant read Get_FeatureScopeBodies write Set_FeatureScopeBodies;
    property Contours: OleVariant read Get_Contours write Set_Contours;
  end;

// *********************************************************************//
// DispIntf:  IRevolveFeatureData2Disp
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {E055F0ED-DB3E-4528-A982-D66D289190A0}
// *********************************************************************//
  IRevolveFeatureData2Disp = dispinterface
    ['{E055F0ED-DB3E-4528-A982-D66D289190A0}']
    function GetRevolutionAngle(forward: WordBool): Double; dispid 1;
    procedure SetRevolutionAngle(forward: WordBool; angle: Double); dispid 2;
    function GetWallThickness(forward: WordBool): Double; dispid 3;
    procedure SetWallThickness(forward: WordBool; wallThickness: Double); dispid 4;
    property type_: SYSINT dispid 5;
    property ReverseDirection: WordBool dispid 6;
    function IsBossFeature: WordBool; dispid 7;
    function IsThinFeature: WordBool; dispid 8;
    property ThinWallType: Integer dispid 9;
    property merge: WordBool dispid 10;
    property FeatureScope: WordBool dispid 11;
    property AutoSelect: WordBool dispid 12;
    property FeatureScopeBodies: OleVariant dispid 13;
    function GetFeatureScopeBodiesCount: Integer; dispid 14;
    function IGetFeatureScopeBodies(count: Integer): IBody2; dispid 15;
    procedure ISetFeatureScopeBodies(count: Integer; var bodyArr: IBody2); dispid 16;
    function AccessSelections(const topDoc: IDispatch; const component: IDispatch): WordBool; dispid 17;
    function IAccessSelections(const topDoc: IModelDoc2; const component: IComponent2): WordBool; dispid 18;
    procedure ReleaseSelectionAccess; dispid 19;
    property Contours: OleVariant dispid 20;
    function GetContoursCount: Integer; dispid 21;
    function IGetContours(count: Integer): IDispatch; dispid 22;
    procedure ISetContours(count: Integer; var Contours: IDispatch); dispid 23;
  end;

// *********************************************************************//
// The Class CoSldWorks_ provides a Create and CreateRemote method to          
// create instances of the default interface ISldWorks exposed by              
// the CoClass SldWorks_. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoSldWorks_ = class
    class function Create: ISldWorks;
    class function CreateRemote(const MachineName: string): ISldWorks;
  end;

// *********************************************************************//
// The Class CoPartDoc provides a Create and CreateRemote method to          
// create instances of the default interface IPartDoc exposed by              
// the CoClass PartDoc. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoPartDoc = class
    class function Create: IPartDoc;
    class function CreateRemote(const MachineName: string): IPartDoc;
  end;

// *********************************************************************//
// The Class CoDrawingDoc provides a Create and CreateRemote method to          
// create instances of the default interface IDrawingDoc exposed by              
// the CoClass DrawingDoc. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoDrawingDoc = class
    class function Create: IDrawingDoc;
    class function CreateRemote(const MachineName: string): IDrawingDoc;
  end;

// *********************************************************************//
// The Class CoAssemblyDoc provides a Create and CreateRemote method to          
// create instances of the default interface IAssemblyDoc exposed by              
// the CoClass AssemblyDoc. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoAssemblyDoc = class
    class function Create: IAssemblyDoc;
    class function CreateRemote(const MachineName: string): IAssemblyDoc;
  end;

// *********************************************************************//
// The Class Cofeature provides a Create and CreateRemote method to          
// create instances of the default interface IFeature exposed by              
// the CoClass feature. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  Cofeature = class
    class function Create: IFeature;
    class function CreateRemote(const MachineName: string): IFeature;
  end;

// *********************************************************************//
// The Class CoDimension provides a Create and CreateRemote method to          
// create instances of the default interface IDimension exposed by              
// the CoClass Dimension. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoDimension = class
    class function Create: IDimension;
    class function CreateRemote(const MachineName: string): IDimension;
  end;

// *********************************************************************//
// The Class CoBody provides a Create and CreateRemote method to          
// create instances of the default interface IBody exposed by              
// the CoClass Body. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoBody = class
    class function Create: IBody;
    class function CreateRemote(const MachineName: string): IBody;
  end;

// *********************************************************************//
// The Class Coface provides a Create and CreateRemote method to          
// create instances of the default interface IFace exposed by              
// the CoClass face. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  Coface = class
    class function Create: IFace;
    class function CreateRemote(const MachineName: string): IFace;
  end;

// *********************************************************************//
// The Class Cosurface provides a Create and CreateRemote method to          
// create instances of the default interface ISurface exposed by              
// the CoClass surface. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  Cosurface = class
    class function Create: ISurface;
    class function CreateRemote(const MachineName: string): ISurface;
  end;

// *********************************************************************//
// The Class CoEdge provides a Create and CreateRemote method to          
// create instances of the default interface IEdge exposed by              
// the CoClass Edge. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoEdge_ = class
    class function Create: IEdge;
    class function CreateRemote(const MachineName: string): IEdge;
  end;

// *********************************************************************//
// The Class CoCurve provides a Create and CreateRemote method to          
// create instances of the default interface ICurve exposed by              
// the CoClass Curve. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoCurve = class
    class function Create: ICurve;
    class function CreateRemote(const MachineName: string): ICurve;
  end;

// *********************************************************************//
// The Class ComodelDoc provides a Create and CreateRemote method to          
// create instances of the default interface IModelDoc exposed by              
// the CoClass modelDoc. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  ComodelDoc = class
    class function Create: IModelDoc;
    class function CreateRemote(const MachineName: string): IModelDoc;
  end;

// *********************************************************************//
// The Class CoFrame provides a Create and CreateRemote method to          
// create instances of the default interface IFrame exposed by              
// the CoClass Frame. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoFrame = class
    class function Create: IFrame;
    class function CreateRemote(const MachineName: string): IFrame;
  end;

// *********************************************************************//
// The Class CoGtol provides a Create and CreateRemote method to          
// create instances of the default interface IGtol exposed by              
// the CoClass Gtol. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoGtol = class
    class function Create: IGtol;
    class function CreateRemote(const MachineName: string): IGtol;
  end;

// *********************************************************************//
// The Class CoModelView provides a Create and CreateRemote method to          
// create instances of the default interface IModelView exposed by              
// the CoClass ModelView. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoModelView = class
    class function Create: IModelView;
    class function CreateRemote(const MachineName: string): IModelView;
  end;

// *********************************************************************//
// The Class CoMember provides a Create and CreateRemote method to          
// create instances of the default interface IMember exposed by              
// the CoClass Member. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoMember = class
    class function Create: IMember;
    class function CreateRemote(const MachineName: string): IMember;
  end;

// *********************************************************************//
// The Class Coview provides a Create and CreateRemote method to          
// create instances of the default interface IView exposed by              
// the CoClass view. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  Coview = class
    class function Create: IView;
    class function CreateRemote(const MachineName: string): IView;
  end;

// *********************************************************************//
// The Class Cosketch provides a Create and CreateRemote method to          
// create instances of the default interface ISketch exposed by              
// the CoClass sketch. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  Cosketch = class
    class function Create: ISketch;
    class function CreateRemote(const MachineName: string): ISketch;
  end;

// *********************************************************************//
// The Class Coloop provides a Create and CreateRemote method to          
// create instances of the default interface ILoop exposed by              
// the CoClass loop. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  Coloop = class
    class function Create: ILoop;
    class function CreateRemote(const MachineName: string): ILoop;
  end;

// *********************************************************************//
// The Class Conote provides a Create and CreateRemote method to          
// create instances of the default interface INote exposed by              
// the CoClass note. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  Conote = class
    class function Create: INote;
    class function CreateRemote(const MachineName: string): INote;
  end;

// *********************************************************************//
// The Class CoCoEdge provides a Create and CreateRemote method to          
// create instances of the default interface ICoEdge exposed by              
// the CoClass CoEdge. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoCoEdge = class
    class function Create: ICoEdge;
    class function CreateRemote(const MachineName: string): ICoEdge;
  end;

// *********************************************************************//
// The Class CoVertex provides a Create and CreateRemote method to          
// create instances of the default interface IVertex exposed by              
// the CoClass Vertex. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoVertex = class
    class function Create: IVertex;
    class function CreateRemote(const MachineName: string): IVertex;
  end;

// *********************************************************************//
// The Class CoSelectionMgr provides a Create and CreateRemote method to          
// create instances of the default interface ISelectionMgr exposed by              
// the CoClass SelectionMgr. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoSelectionMgr = class
    class function Create: ISelectionMgr;
    class function CreateRemote(const MachineName: string): ISelectionMgr;
  end;

// *********************************************************************//
// The Class CoEnumFaces provides a Create and CreateRemote method to          
// create instances of the default interface IEnumFaces exposed by              
// the CoClass EnumFaces. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoEnumFaces = class
    class function Create: IEnumFaces;
    class function CreateRemote(const MachineName: string): IEnumFaces;
  end;

// *********************************************************************//
// The Class CoEnumFaces2 provides a Create and CreateRemote method to          
// create instances of the default interface IEnumFaces2 exposed by              
// the CoClass EnumFaces2. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoEnumFaces2 = class
    class function Create: IEnumFaces2;
    class function CreateRemote(const MachineName: string): IEnumFaces2;
  end;

// *********************************************************************//
// The Class CoEnumLoops provides a Create and CreateRemote method to          
// create instances of the default interface IEnumLoops exposed by              
// the CoClass EnumLoops. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoEnumLoops = class
    class function Create: IEnumLoops;
    class function CreateRemote(const MachineName: string): IEnumLoops;
  end;

// *********************************************************************//
// The Class CoEnumLoops2 provides a Create and CreateRemote method to          
// create instances of the default interface IEnumLoops2 exposed by              
// the CoClass EnumLoops2. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoEnumLoops2 = class
    class function Create: IEnumLoops2;
    class function CreateRemote(const MachineName: string): IEnumLoops2;
  end;

// *********************************************************************//
// The Class CoEnumEdges provides a Create and CreateRemote method to          
// create instances of the default interface IEnumEdges exposed by              
// the CoClass EnumEdges. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoEnumEdges = class
    class function Create: IEnumEdges;
    class function CreateRemote(const MachineName: string): IEnumEdges;
  end;

// *********************************************************************//
// The Class CoEnumCoEdges provides a Create and CreateRemote method to          
// create instances of the default interface IEnumCoEdges exposed by              
// the CoClass EnumCoEdges. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoEnumCoEdges = class
    class function Create: IEnumCoEdges;
    class function CreateRemote(const MachineName: string): IEnumCoEdges;
  end;

// *********************************************************************//
// The Class CoEnumBodies provides a Create and CreateRemote method to          
// create instances of the default interface IEnumBodies exposed by              
// the CoClass EnumBodies. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoEnumBodies = class
    class function Create: IEnumBodies;
    class function CreateRemote(const MachineName: string): IEnumBodies;
  end;

// *********************************************************************//
// The Class CoEnumBodies2 provides a Create and CreateRemote method to          
// create instances of the default interface IEnumBodies2 exposed by              
// the CoClass EnumBodies2. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoEnumBodies2 = class
    class function Create: IEnumBodies2;
    class function CreateRemote(const MachineName: string): IEnumBodies2;
  end;

// *********************************************************************//
// The Class Coentity provides a Create and CreateRemote method to          
// create instances of the default interface IEntity exposed by              
// the CoClass entity. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  Coentity = class
    class function Create: IEntity;
    class function CreateRemote(const MachineName: string): IEntity;
  end;

// *********************************************************************//
// The Class CoattributeDef provides a Create and CreateRemote method to          
// create instances of the default interface IAttributeDef exposed by              
// the CoClass attributeDef. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoattributeDef = class
    class function Create: IAttributeDef;
    class function CreateRemote(const MachineName: string): IAttributeDef;
  end;

// *********************************************************************//
// The Class CoParameter provides a Create and CreateRemote method to          
// create instances of the default interface IParameter exposed by              
// the CoClass Parameter. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoParameter = class
    class function Create: IParameter;
    class function CreateRemote(const MachineName: string): IParameter;
  end;

// *********************************************************************//
// The Class CoAttribute provides a Create and CreateRemote method to          
// create instances of the default interface IAttribute exposed by              
// the CoClass Attribute. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoAttribute = class
    class function Create: IAttribute;
    class function CreateRemote(const MachineName: string): IAttribute;
  end;

// *********************************************************************//
// The Class CoModeler provides a Create and CreateRemote method to          
// create instances of the default interface IModeler exposed by              
// the CoClass Modeler. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoModeler = class
    class function Create: IModeler;
    class function CreateRemote(const MachineName: string): IModeler;
  end;

// *********************************************************************//
// The Class CoFeatMgrView provides a Create and CreateRemote method to          
// create instances of the default interface IFeatMgrView exposed by              
// the CoClass FeatMgrView. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoFeatMgrView = class
    class function Create: IFeatMgrView;
    class function CreateRemote(const MachineName: string): IFeatMgrView;
  end;

// *********************************************************************//
// The Class CoEnvironment provides a Create and CreateRemote method to          
// create instances of the default interface IEnvironment exposed by              
// the CoClass Environment. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoEnvironment = class
    class function Create: IEnvironment;
    class function CreateRemote(const MachineName: string): IEnvironment;
  end;

// *********************************************************************//
// The Class CoSheet provides a Create and CreateRemote method to          
// create instances of the default interface ISheet exposed by              
// the CoClass Sheet. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoSheet = class
    class function Create: ISheet;
    class function CreateRemote(const MachineName: string): ISheet;
  end;

// *********************************************************************//
// The Class CoBomTable provides a Create and CreateRemote method to          
// create instances of the default interface IBomTable exposed by              
// the CoClass BomTable. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoBomTable = class
    class function Create: IBomTable;
    class function CreateRemote(const MachineName: string): IBomTable;
  end;

// *********************************************************************//
// The Class CorefPlane provides a Create and CreateRemote method to          
// create instances of the default interface IRefPlane exposed by              
// the CoClass refPlane. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CorefPlane = class
    class function Create: IRefPlane;
    class function CreateRemote(const MachineName: string): IRefPlane;
  end;

// *********************************************************************//
// The Class CorefAxis provides a Create and CreateRemote method to          
// create instances of the default interface IRefAxis exposed by              
// the CoClass refAxis. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CorefAxis = class
    class function Create: IRefAxis;
    class function CreateRemote(const MachineName: string): IRefAxis;
  end;

// *********************************************************************//
// The Class CoMidSurface provides a Create and CreateRemote method to          
// create instances of the default interface IMidSurface exposed by              
// the CoClass MidSurface. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoMidSurface = class
    class function Create: IMidSurface;
    class function CreateRemote(const MachineName: string): IMidSurface;
  end;

// *********************************************************************//
// The Class CoMate provides a Create and CreateRemote method to          
// create instances of the default interface IMate exposed by              
// the CoClass Mate. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoMate = class
    class function Create: IMate;
    class function CreateRemote(const MachineName: string): IMate;
  end;

// *********************************************************************//
// The Class CoMateEntity provides a Create and CreateRemote method to          
// create instances of the default interface IMateEntity exposed by              
// the CoClass MateEntity. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoMateEntity = class
    class function Create: IMateEntity;
    class function CreateRemote(const MachineName: string): IMateEntity;
  end;

// *********************************************************************//
// The Class CoSFSymbol provides a Create and CreateRemote method to          
// create instances of the default interface ISFSymbol exposed by              
// the CoClass SFSymbol. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoSFSymbol = class
    class function Create: ISFSymbol;
    class function CreateRemote(const MachineName: string): ISFSymbol;
  end;

// *********************************************************************//
// The Class CoDatumTag provides a Create and CreateRemote method to          
// create instances of the default interface IDatumTag exposed by              
// the CoClass DatumTag. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoDatumTag = class
    class function Create: IDatumTag;
    class function CreateRemote(const MachineName: string): IDatumTag;
  end;

// *********************************************************************//
// The Class CoDatumTargetSym provides a Create and CreateRemote method to          
// create instances of the default interface IDatumTargetSym exposed by              
// the CoClass DatumTargetSym. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoDatumTargetSym = class
    class function Create: IDatumTargetSym;
    class function CreateRemote(const MachineName: string): IDatumTargetSym;
  end;

// *********************************************************************//
// The Class CoWeldSymbol provides a Create and CreateRemote method to          
// create instances of the default interface IWeldSymbol exposed by              
// the CoClass WeldSymbol. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoWeldSymbol = class
    class function Create: IWeldSymbol;
    class function CreateRemote(const MachineName: string): IWeldSymbol;
  end;

// *********************************************************************//
// The Class Coconfiguration provides a Create and CreateRemote method to          
// create instances of the default interface IConfiguration exposed by              
// the CoClass configuration. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  Coconfiguration = class
    class function Create: IConfiguration;
    class function CreateRemote(const MachineName: string): IConfiguration;
  end;

// *********************************************************************//
// The Class Cocomponent provides a Create and CreateRemote method to          
// create instances of the default interface IComponent exposed by              
// the CoClass component. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  Cocomponent = class
    class function Create: IComponent;
    class function CreateRemote(const MachineName: string): IComponent;
  end;

// *********************************************************************//
// The Class CoDisplayData provides a Create and CreateRemote method to          
// create instances of the default interface IDisplayData exposed by              
// the CoClass DisplayData. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoDisplayData = class
    class function Create: IDisplayData;
    class function CreateRemote(const MachineName: string): IDisplayData;
  end;

// *********************************************************************//
// The Class CoCThread provides a Create and CreateRemote method to          
// create instances of the default interface ICThread exposed by              
// the CoClass CThread. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoCThread = class
    class function Create: ICThread;
    class function CreateRemote(const MachineName: string): ICThread;
  end;

// *********************************************************************//
// The Class CoDisplayDimension provides a Create and CreateRemote method to          
// create instances of the default interface IDisplayDimension exposed by              
// the CoClass DisplayDimension. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoDisplayDimension = class
    class function Create: IDisplayDimension;
    class function CreateRemote(const MachineName: string): IDisplayDimension;
  end;

// *********************************************************************//
// The Class CoReferenceCurve provides a Create and CreateRemote method to          
// create instances of the default interface IReferenceCurve exposed by              
// the CoClass ReferenceCurve. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoReferenceCurve = class
    class function Create: IReferenceCurve;
    class function CreateRemote(const MachineName: string): IReferenceCurve;
  end;

// *********************************************************************//
// The Class CoColorTable provides a Create and CreateRemote method to          
// create instances of the default interface IColorTable exposed by              
// the CoClass ColorTable. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoColorTable = class
    class function Create: IColorTable;
    class function CreateRemote(const MachineName: string): IColorTable;
  end;

// *********************************************************************//
// The Class CoSWPropertySheet provides a Create and CreateRemote method to          
// create instances of the default interface ISWPropertySheet exposed by              
// the CoClass SWPropertySheet. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoSWPropertySheet = class
    class function Create: ISWPropertySheet;
    class function CreateRemote(const MachineName: string): ISWPropertySheet;
  end;

// *********************************************************************//
// The Class CoAnnotation provides a Create and CreateRemote method to          
// create instances of the default interface IAnnotation exposed by              
// the CoClass Annotation. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoAnnotation = class
    class function Create: IAnnotation;
    class function CreateRemote(const MachineName: string): IAnnotation;
  end;

// *********************************************************************//
// The Class CoEnumDisplayDimensions provides a Create and CreateRemote method to          
// create instances of the default interface IEnumDisplayDimensions exposed by              
// the CoClass EnumDisplayDimensions. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoEnumDisplayDimensions = class
    class function Create: IEnumDisplayDimensions;
    class function CreateRemote(const MachineName: string): IEnumDisplayDimensions;
  end;

// *********************************************************************//
// The Class CoRibFeatureData provides a Create and CreateRemote method to          
// create instances of the default interface IRibFeatureData exposed by              
// the CoClass RibFeatureData. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoRibFeatureData = class
    class function Create: IRibFeatureData;
    class function CreateRemote(const MachineName: string): IRibFeatureData;
  end;

// *********************************************************************//
// The Class CoDomeFeatureData provides a Create and CreateRemote method to          
// create instances of the default interface IDomeFeatureData exposed by              
// the CoClass DomeFeatureData. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoDomeFeatureData = class
    class function Create: IDomeFeatureData;
    class function CreateRemote(const MachineName: string): IDomeFeatureData;
  end;

// *********************************************************************//
// The Class CoEnumModelViews provides a Create and CreateRemote method to          
// create instances of the default interface IEnumModelViews exposed by              
// the CoClass EnumModelViews. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoEnumModelViews = class
    class function Create: IEnumModelViews;
    class function CreateRemote(const MachineName: string): IEnumModelViews;
  end;

// *********************************************************************//
// The Class CoEnumDocuments provides a Create and CreateRemote method to          
// create instances of the default interface IEnumDocuments exposed by              
// the CoClass EnumDocuments. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoEnumDocuments = class
    class function Create: IEnumDocuments;
    class function CreateRemote(const MachineName: string): IEnumDocuments;
  end;

// *********************************************************************//
// The Class CoEnumDocuments2 provides a Create and CreateRemote method to          
// create instances of the default interface IEnumDocuments2 exposed by              
// the CoClass EnumDocuments2. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoEnumDocuments2 = class
    class function Create: IEnumDocuments2;
    class function CreateRemote(const MachineName: string): IEnumDocuments2;
  end;

// *********************************************************************//
// The Class CoCustomSymbol provides a Create and CreateRemote method to          
// create instances of the default interface ICustomSymbol exposed by              
// the CoClass CustomSymbol. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoCustomSymbol = class
    class function Create: ICustomSymbol;
    class function CreateRemote(const MachineName: string): ICustomSymbol;
  end;

// *********************************************************************//
// The Class CoDetailingDefaults provides a Create and CreateRemote method to          
// create instances of the default interface IDetailingDefaults exposed by              
// the CoClass DetailingDefaults. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoDetailingDefaults = class
    class function Create: IDetailingDefaults;
    class function CreateRemote(const MachineName: string): IDetailingDefaults;
  end;

// *********************************************************************//
// The Class CotextFormat provides a Create and CreateRemote method to          
// create instances of the default interface ITextFormat exposed by              
// the CoClass textFormat. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CotextFormat = class
    class function Create: ITextFormat;
    class function CreateRemote(const MachineName: string): ITextFormat;
  end;

// *********************************************************************//
// The Class CoSketchPoint provides a Create and CreateRemote method to          
// create instances of the default interface ISketchPoint exposed by              
// the CoClass SketchPoint. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoSketchPoint = class
    class function Create: ISketchPoint;
    class function CreateRemote(const MachineName: string): ISketchPoint;
  end;

// *********************************************************************//
// The Class CoSketchSegment provides a Create and CreateRemote method to          
// create instances of the default interface ISketchSegment exposed by              
// the CoClass SketchSegment. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoSketchSegment = class
    class function Create: ISketchSegment;
    class function CreateRemote(const MachineName: string): ISketchSegment;
  end;

// *********************************************************************//
// The Class CoSketchLine provides a Create and CreateRemote method to          
// create instances of the default interface ISketchLine exposed by              
// the CoClass SketchLine. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoSketchLine = class
    class function Create: ISketchLine;
    class function CreateRemote(const MachineName: string): ISketchLine;
  end;

// *********************************************************************//
// The Class CoSketchArc provides a Create and CreateRemote method to          
// create instances of the default interface ISketchArc exposed by              
// the CoClass SketchArc. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoSketchArc = class
    class function Create: ISketchArc;
    class function CreateRemote(const MachineName: string): ISketchArc;
  end;

// *********************************************************************//
// The Class CoSketchText provides a Create and CreateRemote method to          
// create instances of the default interface ISketchText exposed by              
// the CoClass SketchText. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoSketchText = class
    class function Create: ISketchText;
    class function CreateRemote(const MachineName: string): ISketchText;
  end;

// *********************************************************************//
// The Class CoSketchEllipse provides a Create and CreateRemote method to          
// create instances of the default interface ISketchEllipse exposed by              
// the CoClass SketchEllipse. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoSketchEllipse = class
    class function Create: ISketchEllipse;
    class function CreateRemote(const MachineName: string): ISketchEllipse;
  end;

// *********************************************************************//
// The Class CoSketchParabola provides a Create and CreateRemote method to          
// create instances of the default interface ISketchParabola exposed by              
// the CoClass SketchParabola. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoSketchParabola = class
    class function Create: ISketchParabola;
    class function CreateRemote(const MachineName: string): ISketchParabola;
  end;

// *********************************************************************//
// The Class CoSketchSpline provides a Create and CreateRemote method to          
// create instances of the default interface ISketchSpline exposed by              
// the CoClass SketchSpline. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoSketchSpline = class
    class function Create: ISketchSpline;
    class function CreateRemote(const MachineName: string): ISketchSpline;
  end;

// *********************************************************************//
// The Class CoEnumSketchPoints provides a Create and CreateRemote method to          
// create instances of the default interface IEnumSketchPoints exposed by              
// the CoClass EnumSketchPoints. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoEnumSketchPoints = class
    class function Create: IEnumSketchPoints;
    class function CreateRemote(const MachineName: string): IEnumSketchPoints;
  end;

// *********************************************************************//
// The Class CoEnumSketchSegments provides a Create and CreateRemote method to          
// create instances of the default interface IEnumSketchSegments exposed by              
// the CoClass EnumSketchSegments. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoEnumSketchSegments = class
    class function Create: IEnumSketchSegments;
    class function CreateRemote(const MachineName: string): IEnumSketchSegments;
  end;

// *********************************************************************//
// The Class CoLightDialog provides a Create and CreateRemote method to          
// create instances of the default interface ILightDialog exposed by              
// the CoClass LightDialog. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoLightDialog = class
    class function Create: ILightDialog;
    class function CreateRemote(const MachineName: string): ILightDialog;
  end;

// *********************************************************************//
// The Class CoLayer provides a Create and CreateRemote method to          
// create instances of the default interface ILayer exposed by              
// the CoClass Layer. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoLayer = class
    class function Create: ILayer;
    class function CreateRemote(const MachineName: string): ILayer;
  end;

// *********************************************************************//
// The Class CoLayerMgr provides a Create and CreateRemote method to          
// create instances of the default interface ILayerMgr exposed by              
// the CoClass LayerMgr. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoLayerMgr = class
    class function Create: ILayerMgr;
    class function CreateRemote(const MachineName: string): ILayerMgr;
  end;

// *********************************************************************//
// The Class CoDesignTable provides a Create and CreateRemote method to          
// create instances of the default interface IDesignTable exposed by              
// the CoClass DesignTable. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoDesignTable = class
    class function Create: IDesignTable;
    class function CreateRemote(const MachineName: string): IDesignTable;
  end;

// *********************************************************************//
// The Class CoSketchHatch provides a Create and CreateRemote method to          
// create instances of the default interface ISketchHatch exposed by              
// the CoClass SketchHatch. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoSketchHatch = class
    class function Create: ISketchHatch;
    class function CreateRemote(const MachineName: string): ISketchHatch;
  end;

// *********************************************************************//
// The Class CoEnumSketchHatches provides a Create and CreateRemote method to          
// create instances of the default interface IEnumSketchHatches exposed by              
// the CoClass EnumSketchHatches. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoEnumSketchHatches = class
    class function Create: IEnumSketchHatches;
    class function CreateRemote(const MachineName: string): IEnumSketchHatches;
  end;

// *********************************************************************//
// The Class CoEnumCurves provides a Create and CreateRemote method to          
// create instances of the default interface IEnumCurves exposed by              
// the CoClass EnumCurves. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoEnumCurves = class
    class function Create: IEnumCurves;
    class function CreateRemote(const MachineName: string): IEnumCurves;
  end;

// *********************************************************************//
// The Class CoSimpleHoleFeatureData provides a Create and CreateRemote method to          
// create instances of the default interface ISimpleHoleFeatureData exposed by              
// the CoClass SimpleHoleFeatureData. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoSimpleHoleFeatureData = class
    class function Create: ISimpleHoleFeatureData;
    class function CreateRemote(const MachineName: string): ISimpleHoleFeatureData;
  end;

// *********************************************************************//
// The Class CoWizardHoleFeatureData provides a Create and CreateRemote method to          
// create instances of the default interface IWizardHoleFeatureData exposed by              
// the CoClass WizardHoleFeatureData. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoWizardHoleFeatureData = class
    class function Create: IWizardHoleFeatureData;
    class function CreateRemote(const MachineName: string): IWizardHoleFeatureData;
  end;

// *********************************************************************//
// The Class CoChamferFeatureData provides a Create and CreateRemote method to          
// create instances of the default interface IChamferFeatureData exposed by              
// the CoClass ChamferFeatureData. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoChamferFeatureData = class
    class function Create: IChamferFeatureData;
    class function CreateRemote(const MachineName: string): IChamferFeatureData;
  end;

// *********************************************************************//
// The Class CoDraftFeatureData provides a Create and CreateRemote method to          
// create instances of the default interface IDraftFeatureData exposed by              
// the CoClass DraftFeatureData. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoDraftFeatureData = class
    class function Create: IDraftFeatureData;
    class function CreateRemote(const MachineName: string): IDraftFeatureData;
  end;

// *********************************************************************//
// The Class CoSimpleFilletFeatureData provides a Create and CreateRemote method to          
// create instances of the default interface ISimpleFilletFeatureData exposed by              
// the CoClass SimpleFilletFeatureData. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoSimpleFilletFeatureData = class
    class function Create: ISimpleFilletFeatureData;
    class function CreateRemote(const MachineName: string): ISimpleFilletFeatureData;
  end;

// *********************************************************************//
// The Class CoVariableFilletFeatureData provides a Create and CreateRemote method to          
// create instances of the default interface IVariableFilletFeatureData exposed by              
// the CoClass VariableFilletFeatureData. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoVariableFilletFeatureData = class
    class function Create: IVariableFilletFeatureData;
    class function CreateRemote(const MachineName: string): IVariableFilletFeatureData;
  end;

// *********************************************************************//
// The Class CoExtrudeFeatureData provides a Create and CreateRemote method to          
// create instances of the default interface IExtrudeFeatureData exposed by              
// the CoClass ExtrudeFeatureData. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoExtrudeFeatureData = class
    class function Create: IExtrudeFeatureData;
    class function CreateRemote(const MachineName: string): IExtrudeFeatureData;
  end;

// *********************************************************************//
// The Class CoRevolveFeatureData provides a Create and CreateRemote method to          
// create instances of the default interface IRevolveFeatureData exposed by              
// the CoClass RevolveFeatureData. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoRevolveFeatureData = class
    class function Create: IRevolveFeatureData;
    class function CreateRemote(const MachineName: string): IRevolveFeatureData;
  end;

// *********************************************************************//
// The Class CoSdmDoc provides a Create and CreateRemote method to          
// create instances of the default interface ISdmDoc exposed by              
// the CoClass SdmDoc. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoSdmDoc = class
    class function Create: ISdmDoc;
    class function CreateRemote(const MachineName: string): ISdmDoc;
  end;

// *********************************************************************//
// The Class CoDrSection provides a Create and CreateRemote method to          
// create instances of the default interface IDrSection exposed by              
// the CoClass DrSection. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoDrSection = class
    class function Create: IDrSection;
    class function CreateRemote(const MachineName: string): IDrSection;
  end;

// *********************************************************************//
// The Class CoEnumComponents provides a Create and CreateRemote method to          
// create instances of the default interface IEnumComponents exposed by              
// the CoClass EnumComponents. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoEnumComponents = class
    class function Create: IEnumComponents;
    class function CreateRemote(const MachineName: string): IEnumComponents;
  end;

// *********************************************************************//
// The Class CoEnumComponents2 provides a Create and CreateRemote method to          
// create instances of the default interface IEnumComponents2 exposed by              
// the CoClass EnumComponents2. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoEnumComponents2 = class
    class function Create: IEnumComponents2;
    class function CreateRemote(const MachineName: string): IEnumComponents2;
  end;

// *********************************************************************//
// The Class CoEnumDrSections provides a Create and CreateRemote method to          
// create instances of the default interface IEnumDrSections exposed by              
// the CoClass EnumDrSections. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoEnumDrSections = class
    class function Create: IEnumDrSections;
    class function CreateRemote(const MachineName: string): IEnumDrSections;
  end;

// *********************************************************************//
// The Class CoExplodeStep provides a Create and CreateRemote method to          
// create instances of the default interface IExplodeStep exposed by              
// the CoClass ExplodeStep. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoExplodeStep = class
    class function Create: IExplodeStep;
    class function CreateRemote(const MachineName: string): IExplodeStep;
  end;

// *********************************************************************//
// The Class CoMathUtility provides a Create and CreateRemote method to          
// create instances of the default interface IMathUtility exposed by              
// the CoClass MathUtility. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoMathUtility = class
    class function Create: IMathUtility;
    class function CreateRemote(const MachineName: string): IMathUtility;
  end;

// *********************************************************************//
// The Class CoMathTransform provides a Create and CreateRemote method to          
// create instances of the default interface IMathTransform exposed by              
// the CoClass MathTransform. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoMathTransform = class
    class function Create: IMathTransform;
    class function CreateRemote(const MachineName: string): IMathTransform;
  end;

// *********************************************************************//
// The Class CoMathPoint provides a Create and CreateRemote method to          
// create instances of the default interface IMathPoint exposed by              
// the CoClass MathPoint. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoMathPoint = class
    class function Create: IMathPoint;
    class function CreateRemote(const MachineName: string): IMathPoint;
  end;

// *********************************************************************//
// The Class CoMathVector provides a Create and CreateRemote method to          
// create instances of the default interface IMathVector exposed by              
// the CoClass MathVector. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoMathVector = class
    class function Create: IMathVector;
    class function CreateRemote(const MachineName: string): IMathVector;
  end;

// *********************************************************************//
// The Class CoMirrorPatternFeatureData provides a Create and CreateRemote method to          
// create instances of the default interface IMirrorPatternFeatureData exposed by              
// the CoClass MirrorPatternFeatureData. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoMirrorPatternFeatureData = class
    class function Create: IMirrorPatternFeatureData;
    class function CreateRemote(const MachineName: string): IMirrorPatternFeatureData;
  end;

// *********************************************************************//
// The Class CoDetailCircle provides a Create and CreateRemote method to          
// create instances of the default interface IDetailCircle exposed by              
// the CoClass DetailCircle. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoDetailCircle = class
    class function Create: IDetailCircle;
    class function CreateRemote(const MachineName: string): IDetailCircle;
  end;

// *********************************************************************//
// The Class CoCircularPatternFeatureData provides a Create and CreateRemote method to          
// create instances of the default interface ICircularPatternFeatureData exposed by              
// the CoClass CircularPatternFeatureData. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoCircularPatternFeatureData = class
    class function Create: ICircularPatternFeatureData;
    class function CreateRemote(const MachineName: string): ICircularPatternFeatureData;
  end;

// *********************************************************************//
// The Class CoLinearPatternFeatureData provides a Create and CreateRemote method to          
// create instances of the default interface ILinearPatternFeatureData exposed by              
// the CoClass LinearPatternFeatureData. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoLinearPatternFeatureData = class
    class function Create: ILinearPatternFeatureData;
    class function CreateRemote(const MachineName: string): ILinearPatternFeatureData;
  end;

// *********************************************************************//
// The Class CoTablePatternFeatureData provides a Create and CreateRemote method to          
// create instances of the default interface ITablePatternFeatureData exposed by              
// the CoClass TablePatternFeatureData. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoTablePatternFeatureData = class
    class function Create: ITablePatternFeatureData;
    class function CreateRemote(const MachineName: string): ITablePatternFeatureData;
  end;

// *********************************************************************//
// The Class CoSketchPatternFeatureData provides a Create and CreateRemote method to          
// create instances of the default interface ISketchPatternFeatureData exposed by              
// the CoClass SketchPatternFeatureData. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoSketchPatternFeatureData = class
    class function Create: ISketchPatternFeatureData;
    class function CreateRemote(const MachineName: string): ISketchPatternFeatureData;
  end;

// *********************************************************************//
// The Class CoMirrorSolidFeatureData provides a Create and CreateRemote method to          
// create instances of the default interface IMirrorSolidFeatureData exposed by              
// the CoClass MirrorSolidFeatureData. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoMirrorSolidFeatureData = class
    class function Create: IMirrorSolidFeatureData;
    class function CreateRemote(const MachineName: string): IMirrorSolidFeatureData;
  end;

// *********************************************************************//
// The Class CoPropertyManagerPage provides a Create and CreateRemote method to          
// create instances of the default interface IPropertyManagerPage exposed by              
// the CoClass PropertyManagerPage. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoPropertyManagerPage = class
    class function Create: IPropertyManagerPage;
    class function CreateRemote(const MachineName: string): IPropertyManagerPage;
  end;

// *********************************************************************//
// The Class CoProjectionArrow provides a Create and CreateRemote method to          
// create instances of the default interface IProjectionArrow exposed by              
// the CoClass ProjectionArrow. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoProjectionArrow = class
    class function Create: IProjectionArrow;
    class function CreateRemote(const MachineName: string): IProjectionArrow;
  end;

// *********************************************************************//
// The Class CoTessellation provides a Create and CreateRemote method to          
// create instances of the default interface ITessellation exposed by              
// the CoClass Tessellation. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoTessellation = class
    class function Create: ITessellation;
    class function CreateRemote(const MachineName: string): ITessellation;
  end;

// *********************************************************************//
// The Class CoSheetMetalFeatureData provides a Create and CreateRemote method to          
// create instances of the default interface ISheetMetalFeatureData exposed by              
// the CoClass SheetMetalFeatureData. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoSheetMetalFeatureData = class
    class function Create: ISheetMetalFeatureData;
    class function CreateRemote(const MachineName: string): ISheetMetalFeatureData;
  end;

// *********************************************************************//
// The Class CoOneBendFeatureData provides a Create and CreateRemote method to          
// create instances of the default interface IOneBendFeatureData exposed by              
// the CoClass OneBendFeatureData. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoOneBendFeatureData = class
    class function Create: IOneBendFeatureData;
    class function CreateRemote(const MachineName: string): IOneBendFeatureData;
  end;

// *********************************************************************//
// The Class CoBendsFeatureData provides a Create and CreateRemote method to          
// create instances of the default interface IBendsFeatureData exposed by              
// the CoClass BendsFeatureData. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoBendsFeatureData = class
    class function Create: IBendsFeatureData;
    class function CreateRemote(const MachineName: string): IBendsFeatureData;
  end;

// *********************************************************************//
// The Class CoUserUnit provides a Create and CreateRemote method to          
// create instances of the default interface IUserUnit exposed by              
// the CoClass UserUnit. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoUserUnit = class
    class function Create: IUserUnit;
    class function CreateRemote(const MachineName: string): IUserUnit;
  end;

// *********************************************************************//
// The Class CoBaseFlangeFeatureData provides a Create and CreateRemote method to          
// create instances of the default interface IBaseFlangeFeatureData exposed by              
// the CoClass BaseFlangeFeatureData. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoBaseFlangeFeatureData = class
    class function Create: IBaseFlangeFeatureData;
    class function CreateRemote(const MachineName: string): IBaseFlangeFeatureData;
  end;

// *********************************************************************//
// The Class CoEdgeFlangeFeatureData provides a Create and CreateRemote method to          
// create instances of the default interface IEdgeFlangeFeatureData exposed by              
// the CoClass EdgeFlangeFeatureData. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoEdgeFlangeFeatureData = class
    class function Create: IEdgeFlangeFeatureData;
    class function CreateRemote(const MachineName: string): IEdgeFlangeFeatureData;
  end;

// *********************************************************************//
// The Class CoMiterFlangeFeatureData provides a Create and CreateRemote method to          
// create instances of the default interface IMiterFlangeFeatureData exposed by              
// the CoClass MiterFlangeFeatureData. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoMiterFlangeFeatureData = class
    class function Create: IMiterFlangeFeatureData;
    class function CreateRemote(const MachineName: string): IMiterFlangeFeatureData;
  end;

// *********************************************************************//
// The Class CoSketchedBendFeatureData provides a Create and CreateRemote method to          
// create instances of the default interface ISketchedBendFeatureData exposed by              
// the CoClass SketchedBendFeatureData. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoSketchedBendFeatureData = class
    class function Create: ISketchedBendFeatureData;
    class function CreateRemote(const MachineName: string): ISketchedBendFeatureData;
  end;

// *********************************************************************//
// The Class CoClosedCornerFeatureData provides a Create and CreateRemote method to          
// create instances of the default interface IClosedCornerFeatureData exposed by              
// the CoClass ClosedCornerFeatureData. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoClosedCornerFeatureData = class
    class function Create: IClosedCornerFeatureData;
    class function CreateRemote(const MachineName: string): IClosedCornerFeatureData;
  end;

// *********************************************************************//
// The Class CoFoldsFeatureData provides a Create and CreateRemote method to          
// create instances of the default interface IFoldsFeatureData exposed by              
// the CoClass FoldsFeatureData. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoFoldsFeatureData = class
    class function Create: IFoldsFeatureData;
    class function CreateRemote(const MachineName: string): IFoldsFeatureData;
  end;

// *********************************************************************//
// The Class CoFlatPatternFeatureData provides a Create and CreateRemote method to          
// create instances of the default interface IFlatPatternFeatureData exposed by              
// the CoClass FlatPatternFeatureData. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoFlatPatternFeatureData = class
    class function Create: IFlatPatternFeatureData;
    class function CreateRemote(const MachineName: string): IFlatPatternFeatureData;
  end;

// *********************************************************************//
// The Class CoLocalLinearPatternFeatureData provides a Create and CreateRemote method to          
// create instances of the default interface ILocalLinearPatternFeatureData exposed by              
// the CoClass LocalLinearPatternFeatureData. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoLocalLinearPatternFeatureData = class
    class function Create: ILocalLinearPatternFeatureData;
    class function CreateRemote(const MachineName: string): ILocalLinearPatternFeatureData;
  end;

// *********************************************************************//
// The Class CoLocalCircularPatternFeatureData provides a Create and CreateRemote method to          
// create instances of the default interface ILocalCircularPatternFeatureData exposed by              
// the CoClass LocalCircularPatternFeatureData. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoLocalCircularPatternFeatureData = class
    class function Create: ILocalCircularPatternFeatureData;
    class function CreateRemote(const MachineName: string): ILocalCircularPatternFeatureData;
  end;

// *********************************************************************//
// The Class CoDerivedPatternFeatureData provides a Create and CreateRemote method to          
// create instances of the default interface IDerivedPatternFeatureData exposed by              
// the CoClass DerivedPatternFeatureData. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoDerivedPatternFeatureData = class
    class function Create: IDerivedPatternFeatureData;
    class function CreateRemote(const MachineName: string): IDerivedPatternFeatureData;
  end;

// *********************************************************************//
// The Class Cobody2 provides a Create and CreateRemote method to          
// create instances of the default interface IBody2 exposed by              
// the CoClass body2. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  Cobody2 = class
    class function Create: IBody2;
    class function CreateRemote(const MachineName: string): IBody2;
  end;

// *********************************************************************//
// The Class Coface2 provides a Create and CreateRemote method to          
// create instances of the default interface IFace2 exposed by              
// the CoClass face2. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  Coface2 = class
    class function Create: IFace2;
    class function CreateRemote(const MachineName: string): IFace2;
  end;

// *********************************************************************//
// The Class CoModelDoc2 provides a Create and CreateRemote method to          
// create instances of the default interface IModelDoc2 exposed by              
// the CoClass ModelDoc2. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoModelDoc2 = class
    class function Create: IModelDoc2;
    class function CreateRemote(const MachineName: string): IModelDoc2;
  end;

// *********************************************************************//
// The Class CoLoop2 provides a Create and CreateRemote method to          
// create instances of the default interface ILoop2 exposed by              
// the CoClass Loop2. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoLoop2 = class
    class function Create: ILoop2;
    class function CreateRemote(const MachineName: string): ILoop2;
  end;

// *********************************************************************//
// The Class CoMidSurface2 provides a Create and CreateRemote method to          
// create instances of the default interface IMidSurface2 exposed by              
// the CoClass MidSurface2. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoMidSurface2 = class
    class function Create: IMidSurface2;
    class function CreateRemote(const MachineName: string): IMidSurface2;
  end;

// *********************************************************************//
// The Class CoComponent2 provides a Create and CreateRemote method to          
// create instances of the default interface IComponent2 exposed by              
// the CoClass Component2. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoComponent2 = class
    class function Create: IComponent2;
    class function CreateRemote(const MachineName: string): IComponent2;
  end;

// *********************************************************************//
// The Class CoPropertyManagerPage2 provides a Create and CreateRemote method to          
// create instances of the default interface IPropertyManagerPage2 exposed by              
// the CoClass PropertyManagerPage2. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoPropertyManagerPage2 = class
    class function Create: IPropertyManagerPage2;
    class function CreateRemote(const MachineName: string): IPropertyManagerPage2;
  end;

// *********************************************************************//
// The Class CoPropertyManagerPageGroup provides a Create and CreateRemote method to          
// create instances of the default interface IPropertyManagerPageGroup exposed by              
// the CoClass PropertyManagerPageGroup. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoPropertyManagerPageGroup = class
    class function Create: IPropertyManagerPageGroup;
    class function CreateRemote(const MachineName: string): IPropertyManagerPageGroup;
  end;

// *********************************************************************//
// The Class CoPropertyManagerPageControl provides a Create and CreateRemote method to          
// create instances of the default interface IPropertyManagerPageControl exposed by              
// the CoClass PropertyManagerPageControl. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoPropertyManagerPageControl = class
    class function Create: IPropertyManagerPageControl;
    class function CreateRemote(const MachineName: string): IPropertyManagerPageControl;
  end;

// *********************************************************************//
// The Class CoPropertyManagerPageLabel provides a Create and CreateRemote method to          
// create instances of the default interface IPropertyManagerPageLabel exposed by              
// the CoClass PropertyManagerPageLabel. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoPropertyManagerPageLabel = class
    class function Create: IPropertyManagerPageLabel;
    class function CreateRemote(const MachineName: string): IPropertyManagerPageLabel;
  end;

// *********************************************************************//
// The Class CoPropertyManagerPageCheckbox provides a Create and CreateRemote method to          
// create instances of the default interface IPropertyManagerPageCheckbox exposed by              
// the CoClass PropertyManagerPageCheckbox. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoPropertyManagerPageCheckbox = class
    class function Create: IPropertyManagerPageCheckbox;
    class function CreateRemote(const MachineName: string): IPropertyManagerPageCheckbox;
  end;

// *********************************************************************//
// The Class CoPropertyManagerPageButton provides a Create and CreateRemote method to          
// create instances of the default interface IPropertyManagerPageButton exposed by              
// the CoClass PropertyManagerPageButton. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoPropertyManagerPageButton = class
    class function Create: IPropertyManagerPageButton;
    class function CreateRemote(const MachineName: string): IPropertyManagerPageButton;
  end;

// *********************************************************************//
// The Class CoPropertyManagerPageOption provides a Create and CreateRemote method to          
// create instances of the default interface IPropertyManagerPageOption exposed by              
// the CoClass PropertyManagerPageOption. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoPropertyManagerPageOption = class
    class function Create: IPropertyManagerPageOption;
    class function CreateRemote(const MachineName: string): IPropertyManagerPageOption;
  end;

// *********************************************************************//
// The Class CoPropertyManagerPageTextbox provides a Create and CreateRemote method to          
// create instances of the default interface IPropertyManagerPageTextbox exposed by              
// the CoClass PropertyManagerPageTextbox. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoPropertyManagerPageTextbox = class
    class function Create: IPropertyManagerPageTextbox;
    class function CreateRemote(const MachineName: string): IPropertyManagerPageTextbox;
  end;

// *********************************************************************//
// The Class CoPropertyManagerPageListbox provides a Create and CreateRemote method to          
// create instances of the default interface IPropertyManagerPageListbox exposed by              
// the CoClass PropertyManagerPageListbox. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoPropertyManagerPageListbox = class
    class function Create: IPropertyManagerPageListbox;
    class function CreateRemote(const MachineName: string): IPropertyManagerPageListbox;
  end;

// *********************************************************************//
// The Class CoPropertyManagerPageCombobox provides a Create and CreateRemote method to          
// create instances of the default interface IPropertyManagerPageCombobox exposed by              
// the CoClass PropertyManagerPageCombobox. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoPropertyManagerPageCombobox = class
    class function Create: IPropertyManagerPageCombobox;
    class function CreateRemote(const MachineName: string): IPropertyManagerPageCombobox;
  end;

// *********************************************************************//
// The Class CoPropertyManagerPageNumberbox provides a Create and CreateRemote method to          
// create instances of the default interface IPropertyManagerPageNumberbox exposed by              
// the CoClass PropertyManagerPageNumberbox. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoPropertyManagerPageNumberbox = class
    class function Create: IPropertyManagerPageNumberbox;
    class function CreateRemote(const MachineName: string): IPropertyManagerPageNumberbox;
  end;

// *********************************************************************//
// The Class CoPropertyManagerPageSelectionbox provides a Create and CreateRemote method to          
// create instances of the default interface IPropertyManagerPageSelectionbox exposed by              
// the CoClass PropertyManagerPageSelectionbox. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoPropertyManagerPageSelectionbox = class
    class function Create: IPropertyManagerPageSelectionbox;
    class function CreateRemote(const MachineName: string): IPropertyManagerPageSelectionbox;
  end;

// *********************************************************************//
// The Class CoMultiJogLeader provides a Create and CreateRemote method to          
// create instances of the default interface IMultiJogLeader exposed by              
// the CoClass MultiJogLeader. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoMultiJogLeader = class
    class function Create: IMultiJogLeader;
    class function CreateRemote(const MachineName: string): IMultiJogLeader;
  end;

// *********************************************************************//
// The Class CoProjectionCurveFeatureData provides a Create and CreateRemote method to          
// create instances of the default interface IProjectionCurveFeatureData exposed by              
// the CoClass ProjectionCurveFeatureData. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoProjectionCurveFeatureData = class
    class function Create: IProjectionCurveFeatureData;
    class function CreateRemote(const MachineName: string): IProjectionCurveFeatureData;
  end;

// *********************************************************************//
// The Class CoScaleFeatureData provides a Create and CreateRemote method to          
// create instances of the default interface IScaleFeatureData exposed by              
// the CoClass ScaleFeatureData. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoScaleFeatureData = class
    class function Create: IScaleFeatureData;
    class function CreateRemote(const MachineName: string): IScaleFeatureData;
  end;

// *********************************************************************//
// The Class CoShellFeatureData provides a Create and CreateRemote method to          
// create instances of the default interface IShellFeatureData exposed by              
// the CoClass ShellFeatureData. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoShellFeatureData = class
    class function Create: IShellFeatureData;
    class function CreateRemote(const MachineName: string): IShellFeatureData;
  end;

// *********************************************************************//
// The Class CoSweepFeatureData provides a Create and CreateRemote method to          
// create instances of the default interface ISweepFeatureData exposed by              
// the CoClass SweepFeatureData. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoSweepFeatureData = class
    class function Create: ISweepFeatureData;
    class function CreateRemote(const MachineName: string): ISweepFeatureData;
  end;

// *********************************************************************//
// The Class CoLoftFeatureData provides a Create and CreateRemote method to          
// create instances of the default interface ILoftFeatureData exposed by              
// the CoClass LoftFeatureData. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoLoftFeatureData = class
    class function Create: ILoftFeatureData;
    class function CreateRemote(const MachineName: string): ILoftFeatureData;
  end;

// *********************************************************************//
// The Class CoThickenFeatureData provides a Create and CreateRemote method to          
// create instances of the default interface IThickenFeatureData exposed by              
// the CoClass ThickenFeatureData. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoThickenFeatureData = class
    class function Create: IThickenFeatureData;
    class function CreateRemote(const MachineName: string): IThickenFeatureData;
  end;

// *********************************************************************//
// The Class CoSurfCutFeatureData provides a Create and CreateRemote method to          
// create instances of the default interface ISurfaceCutFeatureData exposed by              
// the CoClass SurfCutFeatureData. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoSurfCutFeatureData = class
    class function Create: ISurfaceCutFeatureData;
    class function CreateRemote(const MachineName: string): ISurfaceCutFeatureData;
  end;

// *********************************************************************//
// The Class CoReplaceFaceFeatureData provides a Create and CreateRemote method to          
// create instances of the default interface IReplaceFaceFeatureData exposed by              
// the CoClass ReplaceFaceFeatureData. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoReplaceFaceFeatureData = class
    class function Create: IReplaceFaceFeatureData;
    class function CreateRemote(const MachineName: string): IReplaceFaceFeatureData;
  end;

// *********************************************************************//
// The Class CoRibFeatureData2 provides a Create and CreateRemote method to          
// create instances of the default interface IRibFeatureData2 exposed by              
// the CoClass RibFeatureData2. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoRibFeatureData2 = class
    class function Create: IRibFeatureData2;
    class function CreateRemote(const MachineName: string): IRibFeatureData2;
  end;

// *********************************************************************//
// The Class CoDomeFeatureData2 provides a Create and CreateRemote method to          
// create instances of the default interface IDomeFeatureData2 exposed by              
// the CoClass DomeFeatureData2. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoDomeFeatureData2 = class
    class function Create: IDomeFeatureData2;
    class function CreateRemote(const MachineName: string): IDomeFeatureData2;
  end;

// *********************************************************************//
// The Class CoSimpleHoleFeatureData2 provides a Create and CreateRemote method to          
// create instances of the default interface ISimpleHoleFeatureData2 exposed by              
// the CoClass SimpleHoleFeatureData2. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoSimpleHoleFeatureData2 = class
    class function Create: ISimpleHoleFeatureData2;
    class function CreateRemote(const MachineName: string): ISimpleHoleFeatureData2;
  end;

// *********************************************************************//
// The Class CoWizardHoleFeatureData2 provides a Create and CreateRemote method to          
// create instances of the default interface IWizardHoleFeatureData2 exposed by              
// the CoClass WizardHoleFeatureData2. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoWizardHoleFeatureData2 = class
    class function Create: IWizardHoleFeatureData2;
    class function CreateRemote(const MachineName: string): IWizardHoleFeatureData2;
  end;

// *********************************************************************//
// The Class CoChamferFeatureData2 provides a Create and CreateRemote method to          
// create instances of the default interface IChamferFeatureData2 exposed by              
// the CoClass ChamferFeatureData2. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoChamferFeatureData2 = class
    class function Create: IChamferFeatureData2;
    class function CreateRemote(const MachineName: string): IChamferFeatureData2;
  end;

// *********************************************************************//
// The Class CoDraftFeatureData2 provides a Create and CreateRemote method to          
// create instances of the default interface IDraftFeatureData2 exposed by              
// the CoClass DraftFeatureData2. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoDraftFeatureData2 = class
    class function Create: IDraftFeatureData2;
    class function CreateRemote(const MachineName: string): IDraftFeatureData2;
  end;

// *********************************************************************//
// The Class CoSimpleFilletFeatureData2 provides a Create and CreateRemote method to          
// create instances of the default interface ISimpleFilletFeatureData2 exposed by              
// the CoClass SimpleFilletFeatureData2. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoSimpleFilletFeatureData2 = class
    class function Create: ISimpleFilletFeatureData2;
    class function CreateRemote(const MachineName: string): ISimpleFilletFeatureData2;
  end;

// *********************************************************************//
// The Class CoVariableFilletFeatureData2 provides a Create and CreateRemote method to          
// create instances of the default interface IVariableFilletFeatureData2 exposed by              
// the CoClass VariableFilletFeatureData2. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoVariableFilletFeatureData2 = class
    class function Create: IVariableFilletFeatureData2;
    class function CreateRemote(const MachineName: string): IVariableFilletFeatureData2;
  end;

// *********************************************************************//
// The Class CoExtrudeFeatureData2 provides a Create and CreateRemote method to          
// create instances of the default interface IExtrudeFeatureData2 exposed by              
// the CoClass ExtrudeFeatureData2. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoExtrudeFeatureData2 = class
    class function Create: IExtrudeFeatureData2;
    class function CreateRemote(const MachineName: string): IExtrudeFeatureData2;
  end;

// *********************************************************************//
// The Class CoRevolveFeatureData2 provides a Create and CreateRemote method to          
// create instances of the default interface IRevolveFeatureData2 exposed by              
// the CoClass RevolveFeatureData2. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoRevolveFeatureData2 = class
    class function Create: IRevolveFeatureData2;
    class function CreateRemote(const MachineName: string): IRevolveFeatureData2;
  end;

// *********************************************************************//
// The Class CoMacroFeatureData provides a Create and CreateRemote method to          
// create instances of the default interface IMacroFeatureData exposed by              
// the CoClass MacroFeatureData. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoMacroFeatureData = class
    class function Create: IMacroFeatureData;
    class function CreateRemote(const MachineName: string): IMacroFeatureData;
  end;

// *********************************************************************//
// The Class CoDowelSymbol provides a Create and CreateRemote method to          
// create instances of the default interface IDowelSymbol exposed by              
// the CoClass DowelSymbol. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoDowelSymbol = class
    class function Create: IDowelSymbol;
    class function CreateRemote(const MachineName: string): IDowelSymbol;
  end;

// *********************************************************************//
// The Class CoDragOperator provides a Create and CreateRemote method to          
// create instances of the default interface IDragOperator exposed by              
// the CoClass DragOperator. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoDragOperator = class
    class function Create: IDragOperator;
    class function CreateRemote(const MachineName: string): IDragOperator;
  end;

// *********************************************************************//
// The Class CoCurveDrivenPatternFeatureData provides a Create and CreateRemote method to          
// create instances of the default interface ICurveDrivenPatternFeatureData exposed by              
// the CoClass CurveDrivenPatternFeatureData. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoCurveDrivenPatternFeatureData = class
    class function Create: ICurveDrivenPatternFeatureData;
    class function CreateRemote(const MachineName: string): ICurveDrivenPatternFeatureData;
  end;

// *********************************************************************//
// The Class CoBalloonStack provides a Create and CreateRemote method to          
// create instances of the default interface IBalloonStack exposed by              
// the CoClass BalloonStack. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoBalloonStack = class
    class function Create: IBalloonStack;
    class function CreateRemote(const MachineName: string): IBalloonStack;
  end;

// *********************************************************************//
// The Class CoStatusBarPane provides a Create and CreateRemote method to          
// create instances of the default interface IStatusBarPane exposed by              
// the CoClass StatusBarPane. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoStatusBarPane = class
    class function Create: IStatusBarPane;
    class function CreateRemote(const MachineName: string): IStatusBarPane;
  end;

// *********************************************************************//
// The Class CoEquationMgr provides a Create and CreateRemote method to          
// create instances of the default interface IEquationMgr exposed by              
// the CoClass EquationMgr. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoEquationMgr = class
    class function Create: IEquationMgr;
    class function CreateRemote(const MachineName: string): IEquationMgr;
  end;

// *********************************************************************//
// The Class CoPageSetup provides a Create and CreateRemote method to          
// create instances of the default interface IPageSetup exposed by              
// the CoClass PageSetup. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoPageSetup = class
    class function Create: IPageSetup;
    class function CreateRemote(const MachineName: string): IPageSetup;
  end;

// *********************************************************************//
// The Class CoRipFeatureData provides a Create and CreateRemote method to          
// create instances of the default interface IRipFeatureData exposed by              
// the CoClass RipFeatureData. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoRipFeatureData = class
    class function Create: IRipFeatureData;
    class function CreateRemote(const MachineName: string): IRipFeatureData;
  end;

// *********************************************************************//
// The Class CoHemFeatureData provides a Create and CreateRemote method to          
// create instances of the default interface IHemFeatureData exposed by              
// the CoClass HemFeatureData. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoHemFeatureData = class
    class function Create: IHemFeatureData;
    class function CreateRemote(const MachineName: string): IHemFeatureData;
  end;

// *********************************************************************//
// The Class CoBreakCornerFeatureData provides a Create and CreateRemote method to          
// create instances of the default interface IBreakCornerFeatureData exposed by              
// the CoClass BreakCornerFeatureData. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoBreakCornerFeatureData = class
    class function Create: IBreakCornerFeatureData;
    class function CreateRemote(const MachineName: string): IBreakCornerFeatureData;
  end;

// *********************************************************************//
// The Class CoJogFeatureData provides a Create and CreateRemote method to          
// create instances of the default interface IJogFeatureData exposed by              
// the CoClass JogFeatureData. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoJogFeatureData = class
    class function Create: IJogFeatureData;
    class function CreateRemote(const MachineName: string): IJogFeatureData;
  end;

// *********************************************************************//
// The Class CoSurfExtrudeFeatureData provides a Create and CreateRemote method to          
// create instances of the default interface ISurfExtrudeFeatureData exposed by              
// the CoClass SurfExtrudeFeatureData. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoSurfExtrudeFeatureData = class
    class function Create: ISurfExtrudeFeatureData;
    class function CreateRemote(const MachineName: string): ISurfExtrudeFeatureData;
  end;

// *********************************************************************//
// The Class CoSurfRevolveFeatureData provides a Create and CreateRemote method to          
// create instances of the default interface ISurfRevolveFeatureData exposed by              
// the CoClass SurfRevolveFeatureData. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoSurfRevolveFeatureData = class
    class function Create: ISurfRevolveFeatureData;
    class function CreateRemote(const MachineName: string): ISurfRevolveFeatureData;
  end;

// *********************************************************************//
// The Class CoSurfaceOffsetFeatureData provides a Create and CreateRemote method to          
// create instances of the default interface ISurfaceOffsetFeatureData exposed by              
// the CoClass SurfaceOffsetFeatureData. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoSurfaceOffsetFeatureData = class
    class function Create: ISurfaceOffsetFeatureData;
    class function CreateRemote(const MachineName: string): ISurfaceOffsetFeatureData;
  end;

// *********************************************************************//
// The Class CoSurfaceKnitFeatureData provides a Create and CreateRemote method to          
// create instances of the default interface ISurfaceKnitFeatureData exposed by              
// the CoClass SurfaceKnitFeatureData. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoSurfaceKnitFeatureData = class
    class function Create: ISurfaceKnitFeatureData;
    class function CreateRemote(const MachineName: string): ISurfaceKnitFeatureData;
  end;

// *********************************************************************//
// The Class CoSurfaceExtendFeatureData provides a Create and CreateRemote method to          
// create instances of the default interface ISurfaceExtendFeatureData exposed by              
// the CoClass SurfaceExtendFeatureData. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoSurfaceExtendFeatureData = class
    class function Create: ISurfaceExtendFeatureData;
    class function CreateRemote(const MachineName: string): ISurfaceExtendFeatureData;
  end;

// *********************************************************************//
// The Class CoSurfacePlanarFeatureData provides a Create and CreateRemote method to          
// create instances of the default interface ISurfacePlanarFeatureData exposed by              
// the CoClass SurfacePlanarFeatureData. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoSurfacePlanarFeatureData = class
    class function Create: ISurfacePlanarFeatureData;
    class function CreateRemote(const MachineName: string): ISurfacePlanarFeatureData;
  end;

// *********************************************************************//
// The Class CoCenterMark provides a Create and CreateRemote method to          
// create instances of the default interface ICenterMark exposed by              
// the CoClass CenterMark. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoCenterMark = class
    class function Create: ICenterMark;
    class function CreateRemote(const MachineName: string): ICenterMark;
  end;

// *********************************************************************//
// The Class CoSurfaceTrimFeatureData provides a Create and CreateRemote method to          
// create instances of the default interface ISurfaceTrimFeatureData exposed by              
// the CoClass SurfaceTrimFeatureData. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoSurfaceTrimFeatureData = class
    class function Create: ISurfaceTrimFeatureData;
    class function CreateRemote(const MachineName: string): ISurfaceTrimFeatureData;
  end;

// *********************************************************************//
// The Class CoSurfaceRadiateFeatureData provides a Create and CreateRemote method to          
// create instances of the default interface ISurfaceRadiateFeatureData exposed by              
// the CoClass SurfaceRadiateFeatureData. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoSurfaceRadiateFeatureData = class
    class function Create: ISurfaceRadiateFeatureData;
    class function CreateRemote(const MachineName: string): ISurfaceRadiateFeatureData;
  end;

// *********************************************************************//
// The Class CoRefPlaneFeatureData provides a Create and CreateRemote method to          
// create instances of the default interface IRefPlaneFeatureData exposed by              
// the CoClass RefPlaneFeatureData. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoRefPlaneFeatureData = class
    class function Create: IRefPlaneFeatureData;
    class function CreateRemote(const MachineName: string): IRefPlaneFeatureData;
  end;

// *********************************************************************//
// The Class CoCallout provides a Create and CreateRemote method to          
// create instances of the default interface ICallout exposed by              
// the CoClass Callout. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoCallout = class
    class function Create: ICallout;
    class function CreateRemote(const MachineName: string): ICallout;
  end;

// *********************************************************************//
// The Class CoCustomBendAllowance provides a Create and CreateRemote method to          
// create instances of the default interface ICustomBendAllowance exposed by              
// the CoClass CustomBendAllowance. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoCustomBendAllowance = class
    class function Create: ICustomBendAllowance;
    class function CreateRemote(const MachineName: string): ICustomBendAllowance;
  end;

// *********************************************************************//
// The Class CoBlockInstance provides a Create and CreateRemote method to          
// create instances of the default interface IBlockInstance exposed by              
// the CoClass BlockInstance. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoBlockInstance = class
    class function Create: IBlockInstance;
    class function CreateRemote(const MachineName: string): IBlockInstance;
  end;

// *********************************************************************//
// The Class CoBlockDefinition provides a Create and CreateRemote method to          
// create instances of the default interface IBlockDefinition exposed by              
// the CoClass BlockDefinition. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoBlockDefinition = class
    class function Create: IBlockDefinition;
    class function CreateRemote(const MachineName: string): IBlockDefinition;
  end;

// *********************************************************************//
// The Class CoBreakLine provides a Create and CreateRemote method to          
// create instances of the default interface IBreakLine exposed by              
// the CoClass BreakLine. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoBreakLine = class
    class function Create: IBreakLine;
    class function CreateRemote(const MachineName: string): IBreakLine;
  end;

// *********************************************************************//
// The Class CoFaceHatch provides a Create and CreateRemote method to          
// create instances of the default interface IFaceHatch exposed by              
// the CoClass FaceHatch. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoFaceHatch = class
    class function Create: IFaceHatch;
    class function CreateRemote(const MachineName: string): IFaceHatch;
  end;

// *********************************************************************//
// The Class CoPropertyManagerPageActiveX provides a Create and CreateRemote method to          
// create instances of the default interface IPropertyManagerPageActiveX exposed by              
// the CoClass PropertyManagerPageActiveX. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoPropertyManagerPageActiveX = class
    class function Create: IPropertyManagerPageActiveX;
    class function CreateRemote(const MachineName: string): IPropertyManagerPageActiveX;
  end;

// *********************************************************************//
// The Class CoLoftedBendsFeatureData provides a Create and CreateRemote method to          
// create instances of the default interface ILoftedBendsFeatureData exposed by              
// the CoClass LoftedBendsFeatureData. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoLoftedBendsFeatureData = class
    class function Create: ILoftedBendsFeatureData;
    class function CreateRemote(const MachineName: string): ILoftedBendsFeatureData;
  end;

// *********************************************************************//
// The Class CoFeatureManager provides a Create and CreateRemote method to          
// create instances of the default interface IFeatureManager exposed by              
// the CoClass FeatureManager. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoFeatureManager = class
    class function Create: IFeatureManager;
    class function CreateRemote(const MachineName: string): IFeatureManager;
  end;

// *********************************************************************//
// The Class CoModelViewManager provides a Create and CreateRemote method to          
// create instances of the default interface IModelViewManager exposed by              
// the CoClass ModelViewManager. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoModelViewManager = class
    class function Create: IModelViewManager;
    class function CreateRemote(const MachineName: string): IModelViewManager;
  end;

// *********************************************************************//
// The Class CoModelDocExtension provides a Create and CreateRemote method to          
// create instances of the default interface IModelDocExtension exposed by              
// the CoClass ModelDocExtension. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoModelDocExtension = class
    class function Create: IModelDocExtension;
    class function CreateRemote(const MachineName: string): IModelDocExtension;
  end;

// *********************************************************************//
// The Class CoConfigurationManager provides a Create and CreateRemote method to          
// create instances of the default interface IConfigurationManager exposed by              
// the CoClass ConfigurationManager. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoConfigurationManager = class
    class function Create: IConfigurationManager;
    class function CreateRemote(const MachineName: string): IConfigurationManager;
  end;

// *********************************************************************//
// The Class CoReferencePointCurveFeatureData provides a Create and CreateRemote method to          
// create instances of the default interface IReferencePointCurveFeatureData exposed by              
// the CoClass ReferencePointCurveFeatureData. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoReferencePointCurveFeatureData = class
    class function Create: IReferencePointCurveFeatureData;
    class function CreateRemote(const MachineName: string): IReferencePointCurveFeatureData;
  end;

// *********************************************************************//
// The Class CoFreePointCurveFeatureData provides a Create and CreateRemote method to          
// create instances of the default interface IFreePointCurveFeatureData exposed by              
// the CoClass FreePointCurveFeatureData. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoFreePointCurveFeatureData = class
    class function Create: IFreePointCurveFeatureData;
    class function CreateRemote(const MachineName: string): IFreePointCurveFeatureData;
  end;

// *********************************************************************//
// The Class CoCompositeCurveFeatureData provides a Create and CreateRemote method to          
// create instances of the default interface ICompositeCurveFeatureData exposed by              
// the CoClass CompositeCurveFeatureData. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoCompositeCurveFeatureData = class
    class function Create: ICompositeCurveFeatureData;
    class function CreateRemote(const MachineName: string): ICompositeCurveFeatureData;
  end;

// *********************************************************************//
// The Class CoHelixFeatureData provides a Create and CreateRemote method to          
// create instances of the default interface IHelixFeatureData exposed by              
// the CoClass HelixFeatureData. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoHelixFeatureData = class
    class function Create: IHelixFeatureData;
    class function CreateRemote(const MachineName: string): IHelixFeatureData;
  end;

// *********************************************************************//
// The Class CoImportedCurveFeatureData provides a Create and CreateRemote method to          
// create instances of the default interface IImportedCurveFeatureData exposed by              
// the CoClass ImportedCurveFeatureData. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoImportedCurveFeatureData = class
    class function Create: IImportedCurveFeatureData;
    class function CreateRemote(const MachineName: string): IImportedCurveFeatureData;
  end;

// *********************************************************************//
// The Class CoSketchRegion provides a Create and CreateRemote method to          
// create instances of the default interface ISketchRegion exposed by              
// the CoClass SketchRegion. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoSketchRegion = class
    class function Create: ISketchRegion;
    class function CreateRemote(const MachineName: string): ISketchRegion;
  end;

// *********************************************************************//
// The Class CoSketchContour provides a Create and CreateRemote method to          
// create instances of the default interface ISketchContour exposed by              
// the CoClass SketchContour. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoSketchContour = class
    class function Create: ISketchContour;
    class function CreateRemote(const MachineName: string): ISketchContour;
  end;

implementation

uses ComObj;

class function CoSldWorks_.Create: ISldWorks;
begin
  Result := CreateComObject(CLASS_SldWorks_) as ISldWorks;
end;

class function CoSldWorks_.CreateRemote(const MachineName: string): ISldWorks;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_SldWorks_) as ISldWorks;
end;

class function CoPartDoc.Create: IPartDoc;
begin
  Result := CreateComObject(CLASS_PartDoc) as IPartDoc;
end;

class function CoPartDoc.CreateRemote(const MachineName: string): IPartDoc;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_PartDoc) as IPartDoc;
end;

class function CoDrawingDoc.Create: IDrawingDoc;
begin
  Result := CreateComObject(CLASS_DrawingDoc) as IDrawingDoc;
end;

class function CoDrawingDoc.CreateRemote(const MachineName: string): IDrawingDoc;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_DrawingDoc) as IDrawingDoc;
end;

class function CoAssemblyDoc.Create: IAssemblyDoc;
begin
  Result := CreateComObject(CLASS_AssemblyDoc) as IAssemblyDoc;
end;

class function CoAssemblyDoc.CreateRemote(const MachineName: string): IAssemblyDoc;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_AssemblyDoc) as IAssemblyDoc;
end;

class function Cofeature.Create: IFeature;
begin
  Result := CreateComObject(CLASS_feature) as IFeature;
end;

class function Cofeature.CreateRemote(const MachineName: string): IFeature;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_feature) as IFeature;
end;

class function CoDimension.Create: IDimension;
begin
  Result := CreateComObject(CLASS_Dimension) as IDimension;
end;

class function CoDimension.CreateRemote(const MachineName: string): IDimension;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_Dimension) as IDimension;
end;

class function CoBody.Create: IBody;
begin
  Result := CreateComObject(CLASS_Body) as IBody;
end;

class function CoBody.CreateRemote(const MachineName: string): IBody;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_Body) as IBody;
end;

class function Coface.Create: IFace;
begin
  Result := CreateComObject(CLASS_face) as IFace;
end;

class function Coface.CreateRemote(const MachineName: string): IFace;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_face) as IFace;
end;

class function Cosurface.Create: ISurface;
begin
  Result := CreateComObject(CLASS_surface) as ISurface;
end;

class function Cosurface.CreateRemote(const MachineName: string): ISurface;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_surface) as ISurface;
end;

class function CoEdge_.Create: IEdge;
begin
  Result := CreateComObject(CLASS_Edge) as IEdge;
end;

class function CoEdge_.CreateRemote(const MachineName: string): IEdge;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_Edge) as IEdge;
end;

class function CoCurve.Create: ICurve;
begin
  Result := CreateComObject(CLASS_Curve) as ICurve;
end;

class function CoCurve.CreateRemote(const MachineName: string): ICurve;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_Curve) as ICurve;
end;

class function ComodelDoc.Create: IModelDoc;
begin
  Result := CreateComObject(CLASS_modelDoc) as IModelDoc;
end;

class function ComodelDoc.CreateRemote(const MachineName: string): IModelDoc;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_modelDoc) as IModelDoc;
end;

class function CoFrame.Create: IFrame;
begin
  Result := CreateComObject(CLASS_Frame) as IFrame;
end;

class function CoFrame.CreateRemote(const MachineName: string): IFrame;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_Frame) as IFrame;
end;

class function CoGtol.Create: IGtol;
begin
  Result := CreateComObject(CLASS_Gtol) as IGtol;
end;

class function CoGtol.CreateRemote(const MachineName: string): IGtol;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_Gtol) as IGtol;
end;

class function CoModelView.Create: IModelView;
begin
  Result := CreateComObject(CLASS_ModelView) as IModelView;
end;

class function CoModelView.CreateRemote(const MachineName: string): IModelView;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_ModelView) as IModelView;
end;

class function CoMember.Create: IMember;
begin
  Result := CreateComObject(CLASS_Member) as IMember;
end;

class function CoMember.CreateRemote(const MachineName: string): IMember;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_Member) as IMember;
end;

class function Coview.Create: IView;
begin
  Result := CreateComObject(CLASS_view) as IView;
end;

class function Coview.CreateRemote(const MachineName: string): IView;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_view) as IView;
end;

class function Cosketch.Create: ISketch;
begin
  Result := CreateComObject(CLASS_sketch) as ISketch;
end;

class function Cosketch.CreateRemote(const MachineName: string): ISketch;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_sketch) as ISketch;
end;

class function Coloop.Create: ILoop;
begin
  Result := CreateComObject(CLASS_loop) as ILoop;
end;

class function Coloop.CreateRemote(const MachineName: string): ILoop;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_loop) as ILoop;
end;

class function Conote.Create: INote;
begin
  Result := CreateComObject(CLASS_note) as INote;
end;

class function Conote.CreateRemote(const MachineName: string): INote;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_note) as INote;
end;

class function CoCoEdge.Create: ICoEdge;
begin
  Result := CreateComObject(CLASS_CoEdge) as ICoEdge;
end;

class function CoCoEdge.CreateRemote(const MachineName: string): ICoEdge;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_CoEdge) as ICoEdge;
end;

class function CoVertex.Create: IVertex;
begin
  Result := CreateComObject(CLASS_Vertex) as IVertex;
end;

class function CoVertex.CreateRemote(const MachineName: string): IVertex;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_Vertex) as IVertex;
end;

class function CoSelectionMgr.Create: ISelectionMgr;
begin
  Result := CreateComObject(CLASS_SelectionMgr) as ISelectionMgr;
end;

class function CoSelectionMgr.CreateRemote(const MachineName: string): ISelectionMgr;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_SelectionMgr) as ISelectionMgr;
end;

class function CoEnumFaces.Create: IEnumFaces;
begin
  Result := CreateComObject(CLASS_EnumFaces) as IEnumFaces;
end;

class function CoEnumFaces.CreateRemote(const MachineName: string): IEnumFaces;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_EnumFaces) as IEnumFaces;
end;

class function CoEnumFaces2.Create: IEnumFaces2;
begin
  Result := CreateComObject(CLASS_EnumFaces2) as IEnumFaces2;
end;

class function CoEnumFaces2.CreateRemote(const MachineName: string): IEnumFaces2;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_EnumFaces2) as IEnumFaces2;
end;

class function CoEnumLoops.Create: IEnumLoops;
begin
  Result := CreateComObject(CLASS_EnumLoops) as IEnumLoops;
end;

class function CoEnumLoops.CreateRemote(const MachineName: string): IEnumLoops;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_EnumLoops) as IEnumLoops;
end;

class function CoEnumLoops2.Create: IEnumLoops2;
begin
  Result := CreateComObject(CLASS_EnumLoops2) as IEnumLoops2;
end;

class function CoEnumLoops2.CreateRemote(const MachineName: string): IEnumLoops2;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_EnumLoops2) as IEnumLoops2;
end;

class function CoEnumEdges.Create: IEnumEdges;
begin
  Result := CreateComObject(CLASS_EnumEdges) as IEnumEdges;
end;

class function CoEnumEdges.CreateRemote(const MachineName: string): IEnumEdges;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_EnumEdges) as IEnumEdges;
end;

class function CoEnumCoEdges.Create: IEnumCoEdges;
begin
  Result := CreateComObject(CLASS_EnumCoEdges) as IEnumCoEdges;
end;

class function CoEnumCoEdges.CreateRemote(const MachineName: string): IEnumCoEdges;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_EnumCoEdges) as IEnumCoEdges;
end;

class function CoEnumBodies.Create: IEnumBodies;
begin
  Result := CreateComObject(CLASS_EnumBodies) as IEnumBodies;
end;

class function CoEnumBodies.CreateRemote(const MachineName: string): IEnumBodies;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_EnumBodies) as IEnumBodies;
end;

class function CoEnumBodies2.Create: IEnumBodies2;
begin
  Result := CreateComObject(CLASS_EnumBodies2) as IEnumBodies2;
end;

class function CoEnumBodies2.CreateRemote(const MachineName: string): IEnumBodies2;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_EnumBodies2) as IEnumBodies2;
end;

class function Coentity.Create: IEntity;
begin
  Result := CreateComObject(CLASS_entity) as IEntity;
end;

class function Coentity.CreateRemote(const MachineName: string): IEntity;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_entity) as IEntity;
end;

class function CoattributeDef.Create: IAttributeDef;
begin
  Result := CreateComObject(CLASS_attributeDef) as IAttributeDef;
end;

class function CoattributeDef.CreateRemote(const MachineName: string): IAttributeDef;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_attributeDef) as IAttributeDef;
end;

class function CoParameter.Create: IParameter;
begin
  Result := CreateComObject(CLASS_Parameter) as IParameter;
end;

class function CoParameter.CreateRemote(const MachineName: string): IParameter;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_Parameter) as IParameter;
end;

class function CoAttribute.Create: IAttribute;
begin
  Result := CreateComObject(CLASS_Attribute) as IAttribute;
end;

class function CoAttribute.CreateRemote(const MachineName: string): IAttribute;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_Attribute) as IAttribute;
end;

class function CoModeler.Create: IModeler;
begin
  Result := CreateComObject(CLASS_Modeler) as IModeler;
end;

class function CoModeler.CreateRemote(const MachineName: string): IModeler;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_Modeler) as IModeler;
end;

class function CoFeatMgrView.Create: IFeatMgrView;
begin
  Result := CreateComObject(CLASS_FeatMgrView) as IFeatMgrView;
end;

class function CoFeatMgrView.CreateRemote(const MachineName: string): IFeatMgrView;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_FeatMgrView) as IFeatMgrView;
end;

class function CoEnvironment.Create: IEnvironment;
begin
  Result := CreateComObject(CLASS_Environment) as IEnvironment;
end;

class function CoEnvironment.CreateRemote(const MachineName: string): IEnvironment;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_Environment) as IEnvironment;
end;

class function CoSheet.Create: ISheet;
begin
  Result := CreateComObject(CLASS_Sheet) as ISheet;
end;

class function CoSheet.CreateRemote(const MachineName: string): ISheet;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_Sheet) as ISheet;
end;

class function CoBomTable.Create: IBomTable;
begin
  Result := CreateComObject(CLASS_BomTable) as IBomTable;
end;

class function CoBomTable.CreateRemote(const MachineName: string): IBomTable;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_BomTable) as IBomTable;
end;

class function CorefPlane.Create: IRefPlane;
begin
  Result := CreateComObject(CLASS_refPlane) as IRefPlane;
end;

class function CorefPlane.CreateRemote(const MachineName: string): IRefPlane;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_refPlane) as IRefPlane;
end;

class function CorefAxis.Create: IRefAxis;
begin
  Result := CreateComObject(CLASS_refAxis) as IRefAxis;
end;

class function CorefAxis.CreateRemote(const MachineName: string): IRefAxis;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_refAxis) as IRefAxis;
end;

class function CoMidSurface.Create: IMidSurface;
begin
  Result := CreateComObject(CLASS_MidSurface) as IMidSurface;
end;

class function CoMidSurface.CreateRemote(const MachineName: string): IMidSurface;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_MidSurface) as IMidSurface;
end;

class function CoMate.Create: IMate;
begin
  Result := CreateComObject(CLASS_Mate) as IMate;
end;

class function CoMate.CreateRemote(const MachineName: string): IMate;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_Mate) as IMate;
end;

class function CoMateEntity.Create: IMateEntity;
begin
  Result := CreateComObject(CLASS_MateEntity) as IMateEntity;
end;

class function CoMateEntity.CreateRemote(const MachineName: string): IMateEntity;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_MateEntity) as IMateEntity;
end;

class function CoSFSymbol.Create: ISFSymbol;
begin
  Result := CreateComObject(CLASS_SFSymbol) as ISFSymbol;
end;

class function CoSFSymbol.CreateRemote(const MachineName: string): ISFSymbol;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_SFSymbol) as ISFSymbol;
end;

class function CoDatumTag.Create: IDatumTag;
begin
  Result := CreateComObject(CLASS_DatumTag) as IDatumTag;
end;

class function CoDatumTag.CreateRemote(const MachineName: string): IDatumTag;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_DatumTag) as IDatumTag;
end;

class function CoDatumTargetSym.Create: IDatumTargetSym;
begin
  Result := CreateComObject(CLASS_DatumTargetSym) as IDatumTargetSym;
end;

class function CoDatumTargetSym.CreateRemote(const MachineName: string): IDatumTargetSym;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_DatumTargetSym) as IDatumTargetSym;
end;

class function CoWeldSymbol.Create: IWeldSymbol;
begin
  Result := CreateComObject(CLASS_WeldSymbol) as IWeldSymbol;
end;

class function CoWeldSymbol.CreateRemote(const MachineName: string): IWeldSymbol;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_WeldSymbol) as IWeldSymbol;
end;

class function Coconfiguration.Create: IConfiguration;
begin
  Result := CreateComObject(CLASS_configuration) as IConfiguration;
end;

class function Coconfiguration.CreateRemote(const MachineName: string): IConfiguration;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_configuration) as IConfiguration;
end;

class function Cocomponent.Create: IComponent;
begin
  Result := CreateComObject(CLASS_component) as IComponent;
end;

class function Cocomponent.CreateRemote(const MachineName: string): IComponent;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_component) as IComponent;
end;

class function CoDisplayData.Create: IDisplayData;
begin
  Result := CreateComObject(CLASS_DisplayData) as IDisplayData;
end;

class function CoDisplayData.CreateRemote(const MachineName: string): IDisplayData;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_DisplayData) as IDisplayData;
end;

class function CoCThread.Create: ICThread;
begin
  Result := CreateComObject(CLASS_CThread) as ICThread;
end;

class function CoCThread.CreateRemote(const MachineName: string): ICThread;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_CThread) as ICThread;
end;

class function CoDisplayDimension.Create: IDisplayDimension;
begin
  Result := CreateComObject(CLASS_DisplayDimension) as IDisplayDimension;
end;

class function CoDisplayDimension.CreateRemote(const MachineName: string): IDisplayDimension;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_DisplayDimension) as IDisplayDimension;
end;

class function CoReferenceCurve.Create: IReferenceCurve;
begin
  Result := CreateComObject(CLASS_ReferenceCurve) as IReferenceCurve;
end;

class function CoReferenceCurve.CreateRemote(const MachineName: string): IReferenceCurve;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_ReferenceCurve) as IReferenceCurve;
end;

class function CoColorTable.Create: IColorTable;
begin
  Result := CreateComObject(CLASS_ColorTable) as IColorTable;
end;

class function CoColorTable.CreateRemote(const MachineName: string): IColorTable;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_ColorTable) as IColorTable;
end;

class function CoSWPropertySheet.Create: ISWPropertySheet;
begin
  Result := CreateComObject(CLASS_SWPropertySheet) as ISWPropertySheet;
end;

class function CoSWPropertySheet.CreateRemote(const MachineName: string): ISWPropertySheet;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_SWPropertySheet) as ISWPropertySheet;
end;

class function CoAnnotation.Create: IAnnotation;
begin
  Result := CreateComObject(CLASS_Annotation) as IAnnotation;
end;

class function CoAnnotation.CreateRemote(const MachineName: string): IAnnotation;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_Annotation) as IAnnotation;
end;

class function CoEnumDisplayDimensions.Create: IEnumDisplayDimensions;
begin
  Result := CreateComObject(CLASS_EnumDisplayDimensions) as IEnumDisplayDimensions;
end;

class function CoEnumDisplayDimensions.CreateRemote(const MachineName: string): IEnumDisplayDimensions;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_EnumDisplayDimensions) as IEnumDisplayDimensions;
end;

class function CoRibFeatureData.Create: IRibFeatureData;
begin
  Result := CreateComObject(CLASS_RibFeatureData) as IRibFeatureData;
end;

class function CoRibFeatureData.CreateRemote(const MachineName: string): IRibFeatureData;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_RibFeatureData) as IRibFeatureData;
end;

class function CoDomeFeatureData.Create: IDomeFeatureData;
begin
  Result := CreateComObject(CLASS_DomeFeatureData) as IDomeFeatureData;
end;

class function CoDomeFeatureData.CreateRemote(const MachineName: string): IDomeFeatureData;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_DomeFeatureData) as IDomeFeatureData;
end;

class function CoEnumModelViews.Create: IEnumModelViews;
begin
  Result := CreateComObject(CLASS_EnumModelViews) as IEnumModelViews;
end;

class function CoEnumModelViews.CreateRemote(const MachineName: string): IEnumModelViews;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_EnumModelViews) as IEnumModelViews;
end;

class function CoEnumDocuments.Create: IEnumDocuments;
begin
  Result := CreateComObject(CLASS_EnumDocuments) as IEnumDocuments;
end;

class function CoEnumDocuments.CreateRemote(const MachineName: string): IEnumDocuments;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_EnumDocuments) as IEnumDocuments;
end;

class function CoEnumDocuments2.Create: IEnumDocuments2;
begin
  Result := CreateComObject(CLASS_EnumDocuments2) as IEnumDocuments2;
end;

class function CoEnumDocuments2.CreateRemote(const MachineName: string): IEnumDocuments2;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_EnumDocuments2) as IEnumDocuments2;
end;

class function CoCustomSymbol.Create: ICustomSymbol;
begin
  Result := CreateComObject(CLASS_CustomSymbol) as ICustomSymbol;
end;

class function CoCustomSymbol.CreateRemote(const MachineName: string): ICustomSymbol;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_CustomSymbol) as ICustomSymbol;
end;

class function CoDetailingDefaults.Create: IDetailingDefaults;
begin
  Result := CreateComObject(CLASS_DetailingDefaults) as IDetailingDefaults;
end;

class function CoDetailingDefaults.CreateRemote(const MachineName: string): IDetailingDefaults;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_DetailingDefaults) as IDetailingDefaults;
end;

class function CotextFormat.Create: ITextFormat;
begin
  Result := CreateComObject(CLASS_textFormat) as ITextFormat;
end;

class function CotextFormat.CreateRemote(const MachineName: string): ITextFormat;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_textFormat) as ITextFormat;
end;

class function CoSketchPoint.Create: ISketchPoint;
begin
  Result := CreateComObject(CLASS_SketchPoint) as ISketchPoint;
end;

class function CoSketchPoint.CreateRemote(const MachineName: string): ISketchPoint;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_SketchPoint) as ISketchPoint;
end;

class function CoSketchSegment.Create: ISketchSegment;
begin
  Result := CreateComObject(CLASS_SketchSegment) as ISketchSegment;
end;

class function CoSketchSegment.CreateRemote(const MachineName: string): ISketchSegment;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_SketchSegment) as ISketchSegment;
end;

class function CoSketchLine.Create: ISketchLine;
begin
  Result := CreateComObject(CLASS_SketchLine) as ISketchLine;
end;

class function CoSketchLine.CreateRemote(const MachineName: string): ISketchLine;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_SketchLine) as ISketchLine;
end;

class function CoSketchArc.Create: ISketchArc;
begin
  Result := CreateComObject(CLASS_SketchArc) as ISketchArc;
end;

class function CoSketchArc.CreateRemote(const MachineName: string): ISketchArc;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_SketchArc) as ISketchArc;
end;

class function CoSketchText.Create: ISketchText;
begin
  Result := CreateComObject(CLASS_SketchText) as ISketchText;
end;

class function CoSketchText.CreateRemote(const MachineName: string): ISketchText;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_SketchText) as ISketchText;
end;

class function CoSketchEllipse.Create: ISketchEllipse;
begin
  Result := CreateComObject(CLASS_SketchEllipse) as ISketchEllipse;
end;

class function CoSketchEllipse.CreateRemote(const MachineName: string): ISketchEllipse;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_SketchEllipse) as ISketchEllipse;
end;

class function CoSketchParabola.Create: ISketchParabola;
begin
  Result := CreateComObject(CLASS_SketchParabola) as ISketchParabola;
end;

class function CoSketchParabola.CreateRemote(const MachineName: string): ISketchParabola;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_SketchParabola) as ISketchParabola;
end;

class function CoSketchSpline.Create: ISketchSpline;
begin
  Result := CreateComObject(CLASS_SketchSpline) as ISketchSpline;
end;

class function CoSketchSpline.CreateRemote(const MachineName: string): ISketchSpline;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_SketchSpline) as ISketchSpline;
end;

class function CoEnumSketchPoints.Create: IEnumSketchPoints;
begin
  Result := CreateComObject(CLASS_EnumSketchPoints) as IEnumSketchPoints;
end;

class function CoEnumSketchPoints.CreateRemote(const MachineName: string): IEnumSketchPoints;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_EnumSketchPoints) as IEnumSketchPoints;
end;

class function CoEnumSketchSegments.Create: IEnumSketchSegments;
begin
  Result := CreateComObject(CLASS_EnumSketchSegments) as IEnumSketchSegments;
end;

class function CoEnumSketchSegments.CreateRemote(const MachineName: string): IEnumSketchSegments;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_EnumSketchSegments) as IEnumSketchSegments;
end;

class function CoLightDialog.Create: ILightDialog;
begin
  Result := CreateComObject(CLASS_LightDialog) as ILightDialog;
end;

class function CoLightDialog.CreateRemote(const MachineName: string): ILightDialog;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_LightDialog) as ILightDialog;
end;

class function CoLayer.Create: ILayer;
begin
  Result := CreateComObject(CLASS_Layer) as ILayer;
end;

class function CoLayer.CreateRemote(const MachineName: string): ILayer;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_Layer) as ILayer;
end;

class function CoLayerMgr.Create: ILayerMgr;
begin
  Result := CreateComObject(CLASS_LayerMgr) as ILayerMgr;
end;

class function CoLayerMgr.CreateRemote(const MachineName: string): ILayerMgr;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_LayerMgr) as ILayerMgr;
end;

class function CoDesignTable.Create: IDesignTable;
begin
  Result := CreateComObject(CLASS_DesignTable) as IDesignTable;
end;

class function CoDesignTable.CreateRemote(const MachineName: string): IDesignTable;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_DesignTable) as IDesignTable;
end;

class function CoSketchHatch.Create: ISketchHatch;
begin
  Result := CreateComObject(CLASS_SketchHatch) as ISketchHatch;
end;

class function CoSketchHatch.CreateRemote(const MachineName: string): ISketchHatch;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_SketchHatch) as ISketchHatch;
end;

class function CoEnumSketchHatches.Create: IEnumSketchHatches;
begin
  Result := CreateComObject(CLASS_EnumSketchHatches) as IEnumSketchHatches;
end;

class function CoEnumSketchHatches.CreateRemote(const MachineName: string): IEnumSketchHatches;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_EnumSketchHatches) as IEnumSketchHatches;
end;

class function CoEnumCurves.Create: IEnumCurves;
begin
  Result := CreateComObject(CLASS_EnumCurves) as IEnumCurves;
end;

class function CoEnumCurves.CreateRemote(const MachineName: string): IEnumCurves;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_EnumCurves) as IEnumCurves;
end;

class function CoSimpleHoleFeatureData.Create: ISimpleHoleFeatureData;
begin
  Result := CreateComObject(CLASS_SimpleHoleFeatureData) as ISimpleHoleFeatureData;
end;

class function CoSimpleHoleFeatureData.CreateRemote(const MachineName: string): ISimpleHoleFeatureData;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_SimpleHoleFeatureData) as ISimpleHoleFeatureData;
end;

class function CoWizardHoleFeatureData.Create: IWizardHoleFeatureData;
begin
  Result := CreateComObject(CLASS_WizardHoleFeatureData) as IWizardHoleFeatureData;
end;

class function CoWizardHoleFeatureData.CreateRemote(const MachineName: string): IWizardHoleFeatureData;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_WizardHoleFeatureData) as IWizardHoleFeatureData;
end;

class function CoChamferFeatureData.Create: IChamferFeatureData;
begin
  Result := CreateComObject(CLASS_ChamferFeatureData) as IChamferFeatureData;
end;

class function CoChamferFeatureData.CreateRemote(const MachineName: string): IChamferFeatureData;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_ChamferFeatureData) as IChamferFeatureData;
end;

class function CoDraftFeatureData.Create: IDraftFeatureData;
begin
  Result := CreateComObject(CLASS_DraftFeatureData) as IDraftFeatureData;
end;

class function CoDraftFeatureData.CreateRemote(const MachineName: string): IDraftFeatureData;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_DraftFeatureData) as IDraftFeatureData;
end;

class function CoSimpleFilletFeatureData.Create: ISimpleFilletFeatureData;
begin
  Result := CreateComObject(CLASS_SimpleFilletFeatureData) as ISimpleFilletFeatureData;
end;

class function CoSimpleFilletFeatureData.CreateRemote(const MachineName: string): ISimpleFilletFeatureData;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_SimpleFilletFeatureData) as ISimpleFilletFeatureData;
end;

class function CoVariableFilletFeatureData.Create: IVariableFilletFeatureData;
begin
  Result := CreateComObject(CLASS_VariableFilletFeatureData) as IVariableFilletFeatureData;
end;

class function CoVariableFilletFeatureData.CreateRemote(const MachineName: string): IVariableFilletFeatureData;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_VariableFilletFeatureData) as IVariableFilletFeatureData;
end;

class function CoExtrudeFeatureData.Create: IExtrudeFeatureData;
begin
  Result := CreateComObject(CLASS_ExtrudeFeatureData) as IExtrudeFeatureData;
end;

class function CoExtrudeFeatureData.CreateRemote(const MachineName: string): IExtrudeFeatureData;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_ExtrudeFeatureData) as IExtrudeFeatureData;
end;

class function CoRevolveFeatureData.Create: IRevolveFeatureData;
begin
  Result := CreateComObject(CLASS_RevolveFeatureData) as IRevolveFeatureData;
end;

class function CoRevolveFeatureData.CreateRemote(const MachineName: string): IRevolveFeatureData;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_RevolveFeatureData) as IRevolveFeatureData;
end;

class function CoSdmDoc.Create: ISdmDoc;
begin
  Result := CreateComObject(CLASS_SdmDoc) as ISdmDoc;
end;

class function CoSdmDoc.CreateRemote(const MachineName: string): ISdmDoc;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_SdmDoc) as ISdmDoc;
end;

class function CoDrSection.Create: IDrSection;
begin
  Result := CreateComObject(CLASS_DrSection) as IDrSection;
end;

class function CoDrSection.CreateRemote(const MachineName: string): IDrSection;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_DrSection) as IDrSection;
end;

class function CoEnumComponents.Create: IEnumComponents;
begin
  Result := CreateComObject(CLASS_EnumComponents) as IEnumComponents;
end;

class function CoEnumComponents.CreateRemote(const MachineName: string): IEnumComponents;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_EnumComponents) as IEnumComponents;
end;

class function CoEnumComponents2.Create: IEnumComponents2;
begin
  Result := CreateComObject(CLASS_EnumComponents2) as IEnumComponents2;
end;

class function CoEnumComponents2.CreateRemote(const MachineName: string): IEnumComponents2;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_EnumComponents2) as IEnumComponents2;
end;

class function CoEnumDrSections.Create: IEnumDrSections;
begin
  Result := CreateComObject(CLASS_EnumDrSections) as IEnumDrSections;
end;

class function CoEnumDrSections.CreateRemote(const MachineName: string): IEnumDrSections;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_EnumDrSections) as IEnumDrSections;
end;

class function CoExplodeStep.Create: IExplodeStep;
begin
  Result := CreateComObject(CLASS_ExplodeStep) as IExplodeStep;
end;

class function CoExplodeStep.CreateRemote(const MachineName: string): IExplodeStep;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_ExplodeStep) as IExplodeStep;
end;

class function CoMathUtility.Create: IMathUtility;
begin
  Result := CreateComObject(CLASS_MathUtility) as IMathUtility;
end;

class function CoMathUtility.CreateRemote(const MachineName: string): IMathUtility;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_MathUtility) as IMathUtility;
end;

class function CoMathTransform.Create: IMathTransform;
begin
  Result := CreateComObject(CLASS_MathTransform) as IMathTransform;
end;

class function CoMathTransform.CreateRemote(const MachineName: string): IMathTransform;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_MathTransform) as IMathTransform;
end;

class function CoMathPoint.Create: IMathPoint;
begin
  Result := CreateComObject(CLASS_MathPoint) as IMathPoint;
end;

class function CoMathPoint.CreateRemote(const MachineName: string): IMathPoint;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_MathPoint) as IMathPoint;
end;

class function CoMathVector.Create: IMathVector;
begin
  Result := CreateComObject(CLASS_MathVector) as IMathVector;
end;

class function CoMathVector.CreateRemote(const MachineName: string): IMathVector;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_MathVector) as IMathVector;
end;

class function CoMirrorPatternFeatureData.Create: IMirrorPatternFeatureData;
begin
  Result := CreateComObject(CLASS_MirrorPatternFeatureData) as IMirrorPatternFeatureData;
end;

class function CoMirrorPatternFeatureData.CreateRemote(const MachineName: string): IMirrorPatternFeatureData;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_MirrorPatternFeatureData) as IMirrorPatternFeatureData;
end;

class function CoDetailCircle.Create: IDetailCircle;
begin
  Result := CreateComObject(CLASS_DetailCircle) as IDetailCircle;
end;

class function CoDetailCircle.CreateRemote(const MachineName: string): IDetailCircle;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_DetailCircle) as IDetailCircle;
end;

class function CoCircularPatternFeatureData.Create: ICircularPatternFeatureData;
begin
  Result := CreateComObject(CLASS_CircularPatternFeatureData) as ICircularPatternFeatureData;
end;

class function CoCircularPatternFeatureData.CreateRemote(const MachineName: string): ICircularPatternFeatureData;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_CircularPatternFeatureData) as ICircularPatternFeatureData;
end;

class function CoLinearPatternFeatureData.Create: ILinearPatternFeatureData;
begin
  Result := CreateComObject(CLASS_LinearPatternFeatureData) as ILinearPatternFeatureData;
end;

class function CoLinearPatternFeatureData.CreateRemote(const MachineName: string): ILinearPatternFeatureData;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_LinearPatternFeatureData) as ILinearPatternFeatureData;
end;

class function CoTablePatternFeatureData.Create: ITablePatternFeatureData;
begin
  Result := CreateComObject(CLASS_TablePatternFeatureData) as ITablePatternFeatureData;
end;

class function CoTablePatternFeatureData.CreateRemote(const MachineName: string): ITablePatternFeatureData;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_TablePatternFeatureData) as ITablePatternFeatureData;
end;

class function CoSketchPatternFeatureData.Create: ISketchPatternFeatureData;
begin
  Result := CreateComObject(CLASS_SketchPatternFeatureData) as ISketchPatternFeatureData;
end;

class function CoSketchPatternFeatureData.CreateRemote(const MachineName: string): ISketchPatternFeatureData;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_SketchPatternFeatureData) as ISketchPatternFeatureData;
end;

class function CoMirrorSolidFeatureData.Create: IMirrorSolidFeatureData;
begin
  Result := CreateComObject(CLASS_MirrorSolidFeatureData) as IMirrorSolidFeatureData;
end;

class function CoMirrorSolidFeatureData.CreateRemote(const MachineName: string): IMirrorSolidFeatureData;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_MirrorSolidFeatureData) as IMirrorSolidFeatureData;
end;

class function CoPropertyManagerPage.Create: IPropertyManagerPage;
begin
  Result := CreateComObject(CLASS_PropertyManagerPage) as IPropertyManagerPage;
end;

class function CoPropertyManagerPage.CreateRemote(const MachineName: string): IPropertyManagerPage;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_PropertyManagerPage) as IPropertyManagerPage;
end;

class function CoProjectionArrow.Create: IProjectionArrow;
begin
  Result := CreateComObject(CLASS_ProjectionArrow) as IProjectionArrow;
end;

class function CoProjectionArrow.CreateRemote(const MachineName: string): IProjectionArrow;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_ProjectionArrow) as IProjectionArrow;
end;

class function CoTessellation.Create: ITessellation;
begin
  Result := CreateComObject(CLASS_Tessellation) as ITessellation;
end;

class function CoTessellation.CreateRemote(const MachineName: string): ITessellation;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_Tessellation) as ITessellation;
end;

class function CoSheetMetalFeatureData.Create: ISheetMetalFeatureData;
begin
  Result := CreateComObject(CLASS_SheetMetalFeatureData) as ISheetMetalFeatureData;
end;

class function CoSheetMetalFeatureData.CreateRemote(const MachineName: string): ISheetMetalFeatureData;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_SheetMetalFeatureData) as ISheetMetalFeatureData;
end;

class function CoOneBendFeatureData.Create: IOneBendFeatureData;
begin
  Result := CreateComObject(CLASS_OneBendFeatureData) as IOneBendFeatureData;
end;

class function CoOneBendFeatureData.CreateRemote(const MachineName: string): IOneBendFeatureData;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_OneBendFeatureData) as IOneBendFeatureData;
end;

class function CoBendsFeatureData.Create: IBendsFeatureData;
begin
  Result := CreateComObject(CLASS_BendsFeatureData) as IBendsFeatureData;
end;

class function CoBendsFeatureData.CreateRemote(const MachineName: string): IBendsFeatureData;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_BendsFeatureData) as IBendsFeatureData;
end;

class function CoUserUnit.Create: IUserUnit;
begin
  Result := CreateComObject(CLASS_UserUnit) as IUserUnit;
end;

class function CoUserUnit.CreateRemote(const MachineName: string): IUserUnit;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_UserUnit) as IUserUnit;
end;

class function CoBaseFlangeFeatureData.Create: IBaseFlangeFeatureData;
begin
  Result := CreateComObject(CLASS_BaseFlangeFeatureData) as IBaseFlangeFeatureData;
end;

class function CoBaseFlangeFeatureData.CreateRemote(const MachineName: string): IBaseFlangeFeatureData;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_BaseFlangeFeatureData) as IBaseFlangeFeatureData;
end;

class function CoEdgeFlangeFeatureData.Create: IEdgeFlangeFeatureData;
begin
  Result := CreateComObject(CLASS_EdgeFlangeFeatureData) as IEdgeFlangeFeatureData;
end;

class function CoEdgeFlangeFeatureData.CreateRemote(const MachineName: string): IEdgeFlangeFeatureData;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_EdgeFlangeFeatureData) as IEdgeFlangeFeatureData;
end;

class function CoMiterFlangeFeatureData.Create: IMiterFlangeFeatureData;
begin
  Result := CreateComObject(CLASS_MiterFlangeFeatureData) as IMiterFlangeFeatureData;
end;

class function CoMiterFlangeFeatureData.CreateRemote(const MachineName: string): IMiterFlangeFeatureData;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_MiterFlangeFeatureData) as IMiterFlangeFeatureData;
end;

class function CoSketchedBendFeatureData.Create: ISketchedBendFeatureData;
begin
  Result := CreateComObject(CLASS_SketchedBendFeatureData) as ISketchedBendFeatureData;
end;

class function CoSketchedBendFeatureData.CreateRemote(const MachineName: string): ISketchedBendFeatureData;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_SketchedBendFeatureData) as ISketchedBendFeatureData;
end;

class function CoClosedCornerFeatureData.Create: IClosedCornerFeatureData;
begin
  Result := CreateComObject(CLASS_ClosedCornerFeatureData) as IClosedCornerFeatureData;
end;

class function CoClosedCornerFeatureData.CreateRemote(const MachineName: string): IClosedCornerFeatureData;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_ClosedCornerFeatureData) as IClosedCornerFeatureData;
end;

class function CoFoldsFeatureData.Create: IFoldsFeatureData;
begin
  Result := CreateComObject(CLASS_FoldsFeatureData) as IFoldsFeatureData;
end;

class function CoFoldsFeatureData.CreateRemote(const MachineName: string): IFoldsFeatureData;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_FoldsFeatureData) as IFoldsFeatureData;
end;

class function CoFlatPatternFeatureData.Create: IFlatPatternFeatureData;
begin
  Result := CreateComObject(CLASS_FlatPatternFeatureData) as IFlatPatternFeatureData;
end;

class function CoFlatPatternFeatureData.CreateRemote(const MachineName: string): IFlatPatternFeatureData;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_FlatPatternFeatureData) as IFlatPatternFeatureData;
end;

class function CoLocalLinearPatternFeatureData.Create: ILocalLinearPatternFeatureData;
begin
  Result := CreateComObject(CLASS_LocalLinearPatternFeatureData) as ILocalLinearPatternFeatureData;
end;

class function CoLocalLinearPatternFeatureData.CreateRemote(const MachineName: string): ILocalLinearPatternFeatureData;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_LocalLinearPatternFeatureData) as ILocalLinearPatternFeatureData;
end;

class function CoLocalCircularPatternFeatureData.Create: ILocalCircularPatternFeatureData;
begin
  Result := CreateComObject(CLASS_LocalCircularPatternFeatureData) as ILocalCircularPatternFeatureData;
end;

class function CoLocalCircularPatternFeatureData.CreateRemote(const MachineName: string): ILocalCircularPatternFeatureData;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_LocalCircularPatternFeatureData) as ILocalCircularPatternFeatureData;
end;

class function CoDerivedPatternFeatureData.Create: IDerivedPatternFeatureData;
begin
  Result := CreateComObject(CLASS_DerivedPatternFeatureData) as IDerivedPatternFeatureData;
end;

class function CoDerivedPatternFeatureData.CreateRemote(const MachineName: string): IDerivedPatternFeatureData;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_DerivedPatternFeatureData) as IDerivedPatternFeatureData;
end;

class function Cobody2.Create: IBody2;
begin
  Result := CreateComObject(CLASS_body2) as IBody2;
end;

class function Cobody2.CreateRemote(const MachineName: string): IBody2;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_body2) as IBody2;
end;

class function Coface2.Create: IFace2;
begin
  Result := CreateComObject(CLASS_face2) as IFace2;
end;

class function Coface2.CreateRemote(const MachineName: string): IFace2;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_face2) as IFace2;
end;

class function CoModelDoc2.Create: IModelDoc2;
begin
  Result := CreateComObject(CLASS_ModelDoc2) as IModelDoc2;
end;

class function CoModelDoc2.CreateRemote(const MachineName: string): IModelDoc2;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_ModelDoc2) as IModelDoc2;
end;

class function CoLoop2.Create: ILoop2;
begin
  Result := CreateComObject(CLASS_Loop2) as ILoop2;
end;

class function CoLoop2.CreateRemote(const MachineName: string): ILoop2;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_Loop2) as ILoop2;
end;

class function CoMidSurface2.Create: IMidSurface2;
begin
  Result := CreateComObject(CLASS_MidSurface2) as IMidSurface2;
end;

class function CoMidSurface2.CreateRemote(const MachineName: string): IMidSurface2;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_MidSurface2) as IMidSurface2;
end;

class function CoComponent2.Create: IComponent2;
begin
  Result := CreateComObject(CLASS_Component2) as IComponent2;
end;

class function CoComponent2.CreateRemote(const MachineName: string): IComponent2;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_Component2) as IComponent2;
end;

class function CoPropertyManagerPage2.Create: IPropertyManagerPage2;
begin
  Result := CreateComObject(CLASS_PropertyManagerPage2) as IPropertyManagerPage2;
end;

class function CoPropertyManagerPage2.CreateRemote(const MachineName: string): IPropertyManagerPage2;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_PropertyManagerPage2) as IPropertyManagerPage2;
end;

class function CoPropertyManagerPageGroup.Create: IPropertyManagerPageGroup;
begin
  Result := CreateComObject(CLASS_PropertyManagerPageGroup) as IPropertyManagerPageGroup;
end;

class function CoPropertyManagerPageGroup.CreateRemote(const MachineName: string): IPropertyManagerPageGroup;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_PropertyManagerPageGroup) as IPropertyManagerPageGroup;
end;

class function CoPropertyManagerPageControl.Create: IPropertyManagerPageControl;
begin
  Result := CreateComObject(CLASS_PropertyManagerPageControl) as IPropertyManagerPageControl;
end;

class function CoPropertyManagerPageControl.CreateRemote(const MachineName: string): IPropertyManagerPageControl;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_PropertyManagerPageControl) as IPropertyManagerPageControl;
end;

class function CoPropertyManagerPageLabel.Create: IPropertyManagerPageLabel;
begin
  Result := CreateComObject(CLASS_PropertyManagerPageLabel) as IPropertyManagerPageLabel;
end;

class function CoPropertyManagerPageLabel.CreateRemote(const MachineName: string): IPropertyManagerPageLabel;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_PropertyManagerPageLabel) as IPropertyManagerPageLabel;
end;

class function CoPropertyManagerPageCheckbox.Create: IPropertyManagerPageCheckbox;
begin
  Result := CreateComObject(CLASS_PropertyManagerPageCheckbox) as IPropertyManagerPageCheckbox;
end;

class function CoPropertyManagerPageCheckbox.CreateRemote(const MachineName: string): IPropertyManagerPageCheckbox;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_PropertyManagerPageCheckbox) as IPropertyManagerPageCheckbox;
end;

class function CoPropertyManagerPageButton.Create: IPropertyManagerPageButton;
begin
  Result := CreateComObject(CLASS_PropertyManagerPageButton) as IPropertyManagerPageButton;
end;

class function CoPropertyManagerPageButton.CreateRemote(const MachineName: string): IPropertyManagerPageButton;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_PropertyManagerPageButton) as IPropertyManagerPageButton;
end;

class function CoPropertyManagerPageOption.Create: IPropertyManagerPageOption;
begin
  Result := CreateComObject(CLASS_PropertyManagerPageOption) as IPropertyManagerPageOption;
end;

class function CoPropertyManagerPageOption.CreateRemote(const MachineName: string): IPropertyManagerPageOption;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_PropertyManagerPageOption) as IPropertyManagerPageOption;
end;

class function CoPropertyManagerPageTextbox.Create: IPropertyManagerPageTextbox;
begin
  Result := CreateComObject(CLASS_PropertyManagerPageTextbox) as IPropertyManagerPageTextbox;
end;

class function CoPropertyManagerPageTextbox.CreateRemote(const MachineName: string): IPropertyManagerPageTextbox;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_PropertyManagerPageTextbox) as IPropertyManagerPageTextbox;
end;

class function CoPropertyManagerPageListbox.Create: IPropertyManagerPageListbox;
begin
  Result := CreateComObject(CLASS_PropertyManagerPageListbox) as IPropertyManagerPageListbox;
end;

class function CoPropertyManagerPageListbox.CreateRemote(const MachineName: string): IPropertyManagerPageListbox;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_PropertyManagerPageListbox) as IPropertyManagerPageListbox;
end;

class function CoPropertyManagerPageCombobox.Create: IPropertyManagerPageCombobox;
begin
  Result := CreateComObject(CLASS_PropertyManagerPageCombobox) as IPropertyManagerPageCombobox;
end;

class function CoPropertyManagerPageCombobox.CreateRemote(const MachineName: string): IPropertyManagerPageCombobox;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_PropertyManagerPageCombobox) as IPropertyManagerPageCombobox;
end;

class function CoPropertyManagerPageNumberbox.Create: IPropertyManagerPageNumberbox;
begin
  Result := CreateComObject(CLASS_PropertyManagerPageNumberbox) as IPropertyManagerPageNumberbox;
end;

class function CoPropertyManagerPageNumberbox.CreateRemote(const MachineName: string): IPropertyManagerPageNumberbox;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_PropertyManagerPageNumberbox) as IPropertyManagerPageNumberbox;
end;

class function CoPropertyManagerPageSelectionbox.Create: IPropertyManagerPageSelectionbox;
begin
  Result := CreateComObject(CLASS_PropertyManagerPageSelectionbox) as IPropertyManagerPageSelectionbox;
end;

class function CoPropertyManagerPageSelectionbox.CreateRemote(const MachineName: string): IPropertyManagerPageSelectionbox;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_PropertyManagerPageSelectionbox) as IPropertyManagerPageSelectionbox;
end;

class function CoMultiJogLeader.Create: IMultiJogLeader;
begin
  Result := CreateComObject(CLASS_MultiJogLeader) as IMultiJogLeader;
end;

class function CoMultiJogLeader.CreateRemote(const MachineName: string): IMultiJogLeader;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_MultiJogLeader) as IMultiJogLeader;
end;

class function CoProjectionCurveFeatureData.Create: IProjectionCurveFeatureData;
begin
  Result := CreateComObject(CLASS_ProjectionCurveFeatureData) as IProjectionCurveFeatureData;
end;

class function CoProjectionCurveFeatureData.CreateRemote(const MachineName: string): IProjectionCurveFeatureData;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_ProjectionCurveFeatureData) as IProjectionCurveFeatureData;
end;

class function CoScaleFeatureData.Create: IScaleFeatureData;
begin
  Result := CreateComObject(CLASS_ScaleFeatureData) as IScaleFeatureData;
end;

class function CoScaleFeatureData.CreateRemote(const MachineName: string): IScaleFeatureData;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_ScaleFeatureData) as IScaleFeatureData;
end;

class function CoShellFeatureData.Create: IShellFeatureData;
begin
  Result := CreateComObject(CLASS_ShellFeatureData) as IShellFeatureData;
end;

class function CoShellFeatureData.CreateRemote(const MachineName: string): IShellFeatureData;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_ShellFeatureData) as IShellFeatureData;
end;

class function CoSweepFeatureData.Create: ISweepFeatureData;
begin
  Result := CreateComObject(CLASS_SweepFeatureData) as ISweepFeatureData;
end;

class function CoSweepFeatureData.CreateRemote(const MachineName: string): ISweepFeatureData;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_SweepFeatureData) as ISweepFeatureData;
end;

class function CoLoftFeatureData.Create: ILoftFeatureData;
begin
  Result := CreateComObject(CLASS_LoftFeatureData) as ILoftFeatureData;
end;

class function CoLoftFeatureData.CreateRemote(const MachineName: string): ILoftFeatureData;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_LoftFeatureData) as ILoftFeatureData;
end;

class function CoThickenFeatureData.Create: IThickenFeatureData;
begin
  Result := CreateComObject(CLASS_ThickenFeatureData) as IThickenFeatureData;
end;

class function CoThickenFeatureData.CreateRemote(const MachineName: string): IThickenFeatureData;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_ThickenFeatureData) as IThickenFeatureData;
end;

class function CoSurfCutFeatureData.Create: ISurfaceCutFeatureData;
begin
  Result := CreateComObject(CLASS_SurfCutFeatureData) as ISurfaceCutFeatureData;
end;

class function CoSurfCutFeatureData.CreateRemote(const MachineName: string): ISurfaceCutFeatureData;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_SurfCutFeatureData) as ISurfaceCutFeatureData;
end;

class function CoReplaceFaceFeatureData.Create: IReplaceFaceFeatureData;
begin
  Result := CreateComObject(CLASS_ReplaceFaceFeatureData) as IReplaceFaceFeatureData;
end;

class function CoReplaceFaceFeatureData.CreateRemote(const MachineName: string): IReplaceFaceFeatureData;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_ReplaceFaceFeatureData) as IReplaceFaceFeatureData;
end;

class function CoRibFeatureData2.Create: IRibFeatureData2;
begin
  Result := CreateComObject(CLASS_RibFeatureData2) as IRibFeatureData2;
end;

class function CoRibFeatureData2.CreateRemote(const MachineName: string): IRibFeatureData2;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_RibFeatureData2) as IRibFeatureData2;
end;

class function CoDomeFeatureData2.Create: IDomeFeatureData2;
begin
  Result := CreateComObject(CLASS_DomeFeatureData2) as IDomeFeatureData2;
end;

class function CoDomeFeatureData2.CreateRemote(const MachineName: string): IDomeFeatureData2;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_DomeFeatureData2) as IDomeFeatureData2;
end;

class function CoSimpleHoleFeatureData2.Create: ISimpleHoleFeatureData2;
begin
  Result := CreateComObject(CLASS_SimpleHoleFeatureData2) as ISimpleHoleFeatureData2;
end;

class function CoSimpleHoleFeatureData2.CreateRemote(const MachineName: string): ISimpleHoleFeatureData2;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_SimpleHoleFeatureData2) as ISimpleHoleFeatureData2;
end;

class function CoWizardHoleFeatureData2.Create: IWizardHoleFeatureData2;
begin
  Result := CreateComObject(CLASS_WizardHoleFeatureData2) as IWizardHoleFeatureData2;
end;

class function CoWizardHoleFeatureData2.CreateRemote(const MachineName: string): IWizardHoleFeatureData2;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_WizardHoleFeatureData2) as IWizardHoleFeatureData2;
end;

class function CoChamferFeatureData2.Create: IChamferFeatureData2;
begin
  Result := CreateComObject(CLASS_ChamferFeatureData2) as IChamferFeatureData2;
end;

class function CoChamferFeatureData2.CreateRemote(const MachineName: string): IChamferFeatureData2;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_ChamferFeatureData2) as IChamferFeatureData2;
end;

class function CoDraftFeatureData2.Create: IDraftFeatureData2;
begin
  Result := CreateComObject(CLASS_DraftFeatureData2) as IDraftFeatureData2;
end;

class function CoDraftFeatureData2.CreateRemote(const MachineName: string): IDraftFeatureData2;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_DraftFeatureData2) as IDraftFeatureData2;
end;

class function CoSimpleFilletFeatureData2.Create: ISimpleFilletFeatureData2;
begin
  Result := CreateComObject(CLASS_SimpleFilletFeatureData2) as ISimpleFilletFeatureData2;
end;

class function CoSimpleFilletFeatureData2.CreateRemote(const MachineName: string): ISimpleFilletFeatureData2;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_SimpleFilletFeatureData2) as ISimpleFilletFeatureData2;
end;

class function CoVariableFilletFeatureData2.Create: IVariableFilletFeatureData2;
begin
  Result := CreateComObject(CLASS_VariableFilletFeatureData2) as IVariableFilletFeatureData2;
end;

class function CoVariableFilletFeatureData2.CreateRemote(const MachineName: string): IVariableFilletFeatureData2;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_VariableFilletFeatureData2) as IVariableFilletFeatureData2;
end;

class function CoExtrudeFeatureData2.Create: IExtrudeFeatureData2;
begin
  Result := CreateComObject(CLASS_ExtrudeFeatureData2) as IExtrudeFeatureData2;
end;

class function CoExtrudeFeatureData2.CreateRemote(const MachineName: string): IExtrudeFeatureData2;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_ExtrudeFeatureData2) as IExtrudeFeatureData2;
end;

class function CoRevolveFeatureData2.Create: IRevolveFeatureData2;
begin
  Result := CreateComObject(CLASS_RevolveFeatureData2) as IRevolveFeatureData2;
end;

class function CoRevolveFeatureData2.CreateRemote(const MachineName: string): IRevolveFeatureData2;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_RevolveFeatureData2) as IRevolveFeatureData2;
end;

class function CoMacroFeatureData.Create: IMacroFeatureData;
begin
  Result := CreateComObject(CLASS_MacroFeatureData) as IMacroFeatureData;
end;

class function CoMacroFeatureData.CreateRemote(const MachineName: string): IMacroFeatureData;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_MacroFeatureData) as IMacroFeatureData;
end;

class function CoDowelSymbol.Create: IDowelSymbol;
begin
  Result := CreateComObject(CLASS_DowelSymbol) as IDowelSymbol;
end;

class function CoDowelSymbol.CreateRemote(const MachineName: string): IDowelSymbol;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_DowelSymbol) as IDowelSymbol;
end;

class function CoDragOperator.Create: IDragOperator;
begin
  Result := CreateComObject(CLASS_DragOperator) as IDragOperator;
end;

class function CoDragOperator.CreateRemote(const MachineName: string): IDragOperator;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_DragOperator) as IDragOperator;
end;

class function CoCurveDrivenPatternFeatureData.Create: ICurveDrivenPatternFeatureData;
begin
  Result := CreateComObject(CLASS_CurveDrivenPatternFeatureData) as ICurveDrivenPatternFeatureData;
end;

class function CoCurveDrivenPatternFeatureData.CreateRemote(const MachineName: string): ICurveDrivenPatternFeatureData;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_CurveDrivenPatternFeatureData) as ICurveDrivenPatternFeatureData;
end;

class function CoBalloonStack.Create: IBalloonStack;
begin
  Result := CreateComObject(CLASS_BalloonStack) as IBalloonStack;
end;

class function CoBalloonStack.CreateRemote(const MachineName: string): IBalloonStack;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_BalloonStack) as IBalloonStack;
end;

class function CoStatusBarPane.Create: IStatusBarPane;
begin
  Result := CreateComObject(CLASS_StatusBarPane) as IStatusBarPane;
end;

class function CoStatusBarPane.CreateRemote(const MachineName: string): IStatusBarPane;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_StatusBarPane) as IStatusBarPane;
end;

class function CoEquationMgr.Create: IEquationMgr;
begin
  Result := CreateComObject(CLASS_EquationMgr) as IEquationMgr;
end;

class function CoEquationMgr.CreateRemote(const MachineName: string): IEquationMgr;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_EquationMgr) as IEquationMgr;
end;

class function CoPageSetup.Create: IPageSetup;
begin
  Result := CreateComObject(CLASS_PageSetup) as IPageSetup;
end;

class function CoPageSetup.CreateRemote(const MachineName: string): IPageSetup;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_PageSetup) as IPageSetup;
end;

class function CoRipFeatureData.Create: IRipFeatureData;
begin
  Result := CreateComObject(CLASS_RipFeatureData) as IRipFeatureData;
end;

class function CoRipFeatureData.CreateRemote(const MachineName: string): IRipFeatureData;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_RipFeatureData) as IRipFeatureData;
end;

class function CoHemFeatureData.Create: IHemFeatureData;
begin
  Result := CreateComObject(CLASS_HemFeatureData) as IHemFeatureData;
end;

class function CoHemFeatureData.CreateRemote(const MachineName: string): IHemFeatureData;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_HemFeatureData) as IHemFeatureData;
end;

class function CoBreakCornerFeatureData.Create: IBreakCornerFeatureData;
begin
  Result := CreateComObject(CLASS_BreakCornerFeatureData) as IBreakCornerFeatureData;
end;

class function CoBreakCornerFeatureData.CreateRemote(const MachineName: string): IBreakCornerFeatureData;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_BreakCornerFeatureData) as IBreakCornerFeatureData;
end;

class function CoJogFeatureData.Create: IJogFeatureData;
begin
  Result := CreateComObject(CLASS_JogFeatureData) as IJogFeatureData;
end;

class function CoJogFeatureData.CreateRemote(const MachineName: string): IJogFeatureData;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_JogFeatureData) as IJogFeatureData;
end;

class function CoSurfExtrudeFeatureData.Create: ISurfExtrudeFeatureData;
begin
  Result := CreateComObject(CLASS_SurfExtrudeFeatureData) as ISurfExtrudeFeatureData;
end;

class function CoSurfExtrudeFeatureData.CreateRemote(const MachineName: string): ISurfExtrudeFeatureData;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_SurfExtrudeFeatureData) as ISurfExtrudeFeatureData;
end;

class function CoSurfRevolveFeatureData.Create: ISurfRevolveFeatureData;
begin
  Result := CreateComObject(CLASS_SurfRevolveFeatureData) as ISurfRevolveFeatureData;
end;

class function CoSurfRevolveFeatureData.CreateRemote(const MachineName: string): ISurfRevolveFeatureData;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_SurfRevolveFeatureData) as ISurfRevolveFeatureData;
end;

class function CoSurfaceOffsetFeatureData.Create: ISurfaceOffsetFeatureData;
begin
  Result := CreateComObject(CLASS_SurfaceOffsetFeatureData) as ISurfaceOffsetFeatureData;
end;

class function CoSurfaceOffsetFeatureData.CreateRemote(const MachineName: string): ISurfaceOffsetFeatureData;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_SurfaceOffsetFeatureData) as ISurfaceOffsetFeatureData;
end;

class function CoSurfaceKnitFeatureData.Create: ISurfaceKnitFeatureData;
begin
  Result := CreateComObject(CLASS_SurfaceKnitFeatureData) as ISurfaceKnitFeatureData;
end;

class function CoSurfaceKnitFeatureData.CreateRemote(const MachineName: string): ISurfaceKnitFeatureData;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_SurfaceKnitFeatureData) as ISurfaceKnitFeatureData;
end;

class function CoSurfaceExtendFeatureData.Create: ISurfaceExtendFeatureData;
begin
  Result := CreateComObject(CLASS_SurfaceExtendFeatureData) as ISurfaceExtendFeatureData;
end;

class function CoSurfaceExtendFeatureData.CreateRemote(const MachineName: string): ISurfaceExtendFeatureData;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_SurfaceExtendFeatureData) as ISurfaceExtendFeatureData;
end;

class function CoSurfacePlanarFeatureData.Create: ISurfacePlanarFeatureData;
begin
  Result := CreateComObject(CLASS_SurfacePlanarFeatureData) as ISurfacePlanarFeatureData;
end;

class function CoSurfacePlanarFeatureData.CreateRemote(const MachineName: string): ISurfacePlanarFeatureData;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_SurfacePlanarFeatureData) as ISurfacePlanarFeatureData;
end;

class function CoCenterMark.Create: ICenterMark;
begin
  Result := CreateComObject(CLASS_CenterMark) as ICenterMark;
end;

class function CoCenterMark.CreateRemote(const MachineName: string): ICenterMark;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_CenterMark) as ICenterMark;
end;

class function CoSurfaceTrimFeatureData.Create: ISurfaceTrimFeatureData;
begin
  Result := CreateComObject(CLASS_SurfaceTrimFeatureData) as ISurfaceTrimFeatureData;
end;

class function CoSurfaceTrimFeatureData.CreateRemote(const MachineName: string): ISurfaceTrimFeatureData;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_SurfaceTrimFeatureData) as ISurfaceTrimFeatureData;
end;

class function CoSurfaceRadiateFeatureData.Create: ISurfaceRadiateFeatureData;
begin
  Result := CreateComObject(CLASS_SurfaceRadiateFeatureData) as ISurfaceRadiateFeatureData;
end;

class function CoSurfaceRadiateFeatureData.CreateRemote(const MachineName: string): ISurfaceRadiateFeatureData;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_SurfaceRadiateFeatureData) as ISurfaceRadiateFeatureData;
end;

class function CoRefPlaneFeatureData.Create: IRefPlaneFeatureData;
begin
  Result := CreateComObject(CLASS_RefPlaneFeatureData) as IRefPlaneFeatureData;
end;

class function CoRefPlaneFeatureData.CreateRemote(const MachineName: string): IRefPlaneFeatureData;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_RefPlaneFeatureData) as IRefPlaneFeatureData;
end;

class function CoCallout.Create: ICallout;
begin
  Result := CreateComObject(CLASS_Callout) as ICallout;
end;

class function CoCallout.CreateRemote(const MachineName: string): ICallout;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_Callout) as ICallout;
end;

class function CoCustomBendAllowance.Create: ICustomBendAllowance;
begin
  Result := CreateComObject(CLASS_CustomBendAllowance) as ICustomBendAllowance;
end;

class function CoCustomBendAllowance.CreateRemote(const MachineName: string): ICustomBendAllowance;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_CustomBendAllowance) as ICustomBendAllowance;
end;

class function CoBlockInstance.Create: IBlockInstance;
begin
  Result := CreateComObject(CLASS_BlockInstance) as IBlockInstance;
end;

class function CoBlockInstance.CreateRemote(const MachineName: string): IBlockInstance;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_BlockInstance) as IBlockInstance;
end;

class function CoBlockDefinition.Create: IBlockDefinition;
begin
  Result := CreateComObject(CLASS_BlockDefinition) as IBlockDefinition;
end;

class function CoBlockDefinition.CreateRemote(const MachineName: string): IBlockDefinition;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_BlockDefinition) as IBlockDefinition;
end;

class function CoBreakLine.Create: IBreakLine;
begin
  Result := CreateComObject(CLASS_BreakLine) as IBreakLine;
end;

class function CoBreakLine.CreateRemote(const MachineName: string): IBreakLine;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_BreakLine) as IBreakLine;
end;

class function CoFaceHatch.Create: IFaceHatch;
begin
  Result := CreateComObject(CLASS_FaceHatch) as IFaceHatch;
end;

class function CoFaceHatch.CreateRemote(const MachineName: string): IFaceHatch;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_FaceHatch) as IFaceHatch;
end;

class function CoPropertyManagerPageActiveX.Create: IPropertyManagerPageActiveX;
begin
  Result := CreateComObject(CLASS_PropertyManagerPageActiveX) as IPropertyManagerPageActiveX;
end;

class function CoPropertyManagerPageActiveX.CreateRemote(const MachineName: string): IPropertyManagerPageActiveX;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_PropertyManagerPageActiveX) as IPropertyManagerPageActiveX;
end;

class function CoLoftedBendsFeatureData.Create: ILoftedBendsFeatureData;
begin
  Result := CreateComObject(CLASS_LoftedBendsFeatureData) as ILoftedBendsFeatureData;
end;

class function CoLoftedBendsFeatureData.CreateRemote(const MachineName: string): ILoftedBendsFeatureData;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_LoftedBendsFeatureData) as ILoftedBendsFeatureData;
end;

class function CoFeatureManager.Create: IFeatureManager;
begin
  Result := CreateComObject(CLASS_FeatureManager) as IFeatureManager;
end;

class function CoFeatureManager.CreateRemote(const MachineName: string): IFeatureManager;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_FeatureManager) as IFeatureManager;
end;

class function CoModelViewManager.Create: IModelViewManager;
begin
  Result := CreateComObject(CLASS_ModelViewManager) as IModelViewManager;
end;

class function CoModelViewManager.CreateRemote(const MachineName: string): IModelViewManager;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_ModelViewManager) as IModelViewManager;
end;

class function CoModelDocExtension.Create: IModelDocExtension;
begin
  Result := CreateComObject(CLASS_ModelDocExtension) as IModelDocExtension;
end;

class function CoModelDocExtension.CreateRemote(const MachineName: string): IModelDocExtension;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_ModelDocExtension) as IModelDocExtension;
end;

class function CoConfigurationManager.Create: IConfigurationManager;
begin
  Result := CreateComObject(CLASS_ConfigurationManager) as IConfigurationManager;
end;

class function CoConfigurationManager.CreateRemote(const MachineName: string): IConfigurationManager;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_ConfigurationManager) as IConfigurationManager;
end;

class function CoReferencePointCurveFeatureData.Create: IReferencePointCurveFeatureData;
begin
  Result := CreateComObject(CLASS_ReferencePointCurveFeatureData) as IReferencePointCurveFeatureData;
end;

class function CoReferencePointCurveFeatureData.CreateRemote(const MachineName: string): IReferencePointCurveFeatureData;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_ReferencePointCurveFeatureData) as IReferencePointCurveFeatureData;
end;

class function CoFreePointCurveFeatureData.Create: IFreePointCurveFeatureData;
begin
  Result := CreateComObject(CLASS_FreePointCurveFeatureData) as IFreePointCurveFeatureData;
end;

class function CoFreePointCurveFeatureData.CreateRemote(const MachineName: string): IFreePointCurveFeatureData;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_FreePointCurveFeatureData) as IFreePointCurveFeatureData;
end;

class function CoCompositeCurveFeatureData.Create: ICompositeCurveFeatureData;
begin
  Result := CreateComObject(CLASS_CompositeCurveFeatureData) as ICompositeCurveFeatureData;
end;

class function CoCompositeCurveFeatureData.CreateRemote(const MachineName: string): ICompositeCurveFeatureData;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_CompositeCurveFeatureData) as ICompositeCurveFeatureData;
end;

class function CoHelixFeatureData.Create: IHelixFeatureData;
begin
  Result := CreateComObject(CLASS_HelixFeatureData) as IHelixFeatureData;
end;

class function CoHelixFeatureData.CreateRemote(const MachineName: string): IHelixFeatureData;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_HelixFeatureData) as IHelixFeatureData;
end;

class function CoImportedCurveFeatureData.Create: IImportedCurveFeatureData;
begin
  Result := CreateComObject(CLASS_ImportedCurveFeatureData) as IImportedCurveFeatureData;
end;

class function CoImportedCurveFeatureData.CreateRemote(const MachineName: string): IImportedCurveFeatureData;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_ImportedCurveFeatureData) as IImportedCurveFeatureData;
end;

class function CoSketchRegion.Create: ISketchRegion;
begin
  Result := CreateComObject(CLASS_SketchRegion) as ISketchRegion;
end;

class function CoSketchRegion.CreateRemote(const MachineName: string): ISketchRegion;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_SketchRegion) as ISketchRegion;
end;

class function CoSketchContour.Create: ISketchContour;
begin
  Result := CreateComObject(CLASS_SketchContour) as ISketchContour;
end;

class function CoSketchContour.CreateRemote(const MachineName: string): ISketchContour;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_SketchContour) as ISketchContour;
end;

end.
